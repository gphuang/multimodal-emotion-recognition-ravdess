/scratch/work/huangg5/.conda_envs/merr/lib/python3.9/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 6, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
Namespace(annotation_path='./ravdess_preprocessing/annotations.txt', result_path='results', store_name='RAVDESS_multimodalcnn_15', dataset='RAVDESS', n_classes=8, model='multimodalcnn', num_heads=1, device='cuda', sample_size=224, sample_duration=15, learning_rate=0.04, momentum=0.9, lr_steps=[40, 55, 65, 70, 200, 250], dampening=0.9, weight_decay=0.001, lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, resume_path='', pretrain_path='EfficientFace_Trained_on_AffectNet7.pth.tar', no_train=True, no_val=True, test=True, test_subset='test', n_threads=16, video_norm_value=255, manual_seed=1, fusion='ia', mask='softhard', arch='multimodalcnn')
Initializing efficientnet
Total number of trainable parameters:  1854766
validation at epoch 10000
validation at epoch 10000
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [10000][1/60]	Time 23.14309 (23.14309)	Data 14.20721 (14.20721)	Loss 0.6032 (0.6032)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (75.00000)
Epoch: [10000][2/60]	Time 0.04414 (11.59362)	Data 0.00075 (7.10398)	Loss 0.1710 (0.3871)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (81.50000)
Epoch: [10000][3/60]	Time 0.03894 (7.74206)	Data 0.00044 (4.73613)	Loss 0.2322 (0.3355)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (83.66667)
Epoch: [10000][4/60]	Time 0.04653 (5.81818)	Data 0.00058 (3.55225)	Loss 0.6999 (0.4266)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (81.50000)
Epoch: [10000][5/60]	Time 0.05183 (4.66491)	Data 0.00051 (2.84190)	Loss 0.7326 (0.4878)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (80.20000)
Epoch: [10000][6/60]	Time 0.11299 (3.90625)	Data 0.00079 (2.36838)	Loss 1.2173 (0.6094)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)	Acc 62.00000 (77.16667)
Epoch: [10000][7/60]	Time 0.16783 (3.37219)	Data 0.00077 (2.03015)	Loss 1.9815 (0.8054)	Prec@1 50.00000 (73.21429)	Prec@5 100.00000 (100.00001)	Acc 50.00000 (73.28572)
Epoch: [10000][8/60]	Time 0.22136 (2.97834)	Data 0.00559 (1.77708)	Loss 1.5082 (0.8932)	Prec@1 37.50000 (68.75000)	Prec@5 100.00000 (100.00000)	Acc 38.00000 (68.87500)
Epoch: [10000][9/60]	Time 0.31084 (2.68195)	Data 0.01716 (1.58153)	Loss 1.1314 (0.9197)	Prec@1 62.50000 (68.05556)	Prec@5 100.00000 (100.00000)	Acc 62.00000 (68.11111)
Epoch: [10000][10/60]	Time 0.18937 (2.43269)	Data 0.00061 (1.42344)	Loss 1.7156 (0.9993)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (68.80000)
Epoch: [10000][11/60]	Time 0.09611 (2.22028)	Data 0.00066 (1.29410)	Loss 3.2765 (1.2063)	Prec@1 62.50000 (68.18182)	Prec@5 100.00000 (100.00000)	Acc 62.00000 (68.18182)
Epoch: [10000][12/60]	Time 0.09759 (2.04339)	Data 0.00384 (1.18657)	Loss 1.5907 (1.2383)	Prec@1 62.50000 (67.70834)	Prec@5 100.00000 (100.00000)	Acc 62.00000 (67.66667)
Epoch: [10000][13/60]	Time 0.24172 (1.90480)	Data 0.11183 (1.10390)	Loss 1.7635 (1.2787)	Prec@1 75.00000 (68.26923)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (68.23077)
Epoch: [10000][14/60]	Time 0.23388 (1.78545)	Data 0.00308 (1.02527)	Loss 0.3189 (1.2102)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (100.00001)	Acc 75.00000 (68.71429)
Epoch: [10000][15/60]	Time 0.13144 (1.67518)	Data 0.01165 (0.95770)	Loss 0.7723 (1.1810)	Prec@1 62.50000 (68.33334)	Prec@5 100.00000 (100.00001)	Acc 62.00000 (68.26667)
Epoch: [10000][16/60]	Time 0.13372 (1.57884)	Data 0.00277 (0.89801)	Loss 0.1080 (1.1139)	Prec@1 87.50000 (69.53125)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (69.50000)
Epoch: [10000][17/60]	Time 0.11630 (1.49281)	Data 0.00891 (0.84571)	Loss 0.1200 (1.0555)	Prec@1 100.00000 (71.32353)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (71.29412)
Epoch: [10000][18/60]	Time 0.14524 (1.41794)	Data 0.01017 (0.79929)	Loss 0.1647 (1.0060)	Prec@1 100.00000 (72.91666)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (72.88889)
Epoch: [10000][19/60]	Time 0.25041 (1.35649)	Data 0.00584 (0.75753)	Loss 0.0801 (0.9572)	Prec@1 100.00000 (74.34210)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (74.31579)
Epoch: [10000][20/60]	Time 0.17768 (1.29755)	Data 0.00249 (0.71978)	Loss 0.0344 (0.9111)	Prec@1 100.00000 (75.62500)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (75.60000)
Epoch: [10000][21/60]	Time 0.16216 (1.24349)	Data 0.00818 (0.68590)	Loss 0.0023 (0.8678)	Prec@1 100.00000 (76.78571)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (76.76191)
Epoch: [10000][22/60]	Time 0.15985 (1.19423)	Data 0.00915 (0.65513)	Loss 0.0375 (0.8301)	Prec@1 100.00000 (77.84091)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (77.81818)
Epoch: [10000][23/60]	Time 0.11823 (1.14745)	Data 0.01224 (0.62718)	Loss 0.0443 (0.7959)	Prec@1 100.00000 (78.80435)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (78.78261)
Epoch: [10000][24/60]	Time 0.15617 (1.10614)	Data 0.01244 (0.60157)	Loss 0.7601 (0.7944)	Prec@1 75.00000 (78.64584)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (78.62500)
Epoch: [10000][25/60]	Time 0.10088 (1.06593)	Data 0.01415 (0.57807)	Loss 0.0053 (0.7629)	Prec@1 100.00000 (79.50000)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (79.48000)
Epoch: [10000][26/60]	Time 0.25292 (1.03466)	Data 0.01275 (0.55633)	Loss 0.6439 (0.7583)	Prec@1 75.00000 (79.32693)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (79.30769)
Epoch: [10000][27/60]	Time 0.20658 (1.00399)	Data 0.01805 (0.53639)	Loss 0.1130 (0.7344)	Prec@1 100.00000 (80.09259)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (80.07407)
Epoch: [10000][28/60]	Time 0.15094 (0.97353)	Data 0.01117 (0.51763)	Loss 0.1113 (0.7121)	Prec@1 87.50000 (80.35715)	Prec@5 100.00000 (100.00001)	Acc 88.00000 (80.35715)
Epoch: [10000][29/60]	Time 0.07137 (0.94242)	Data 0.00040 (0.49980)	Loss 0.1033 (0.6911)	Prec@1 100.00000 (81.03448)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (81.03448)
Epoch: [10000][30/60]	Time 0.07982 (0.91366)	Data 0.00046 (0.48315)	Loss 0.0349 (0.6693)	Prec@1 100.00000 (81.66667)	Prec@5 100.00000 (100.00001)	Acc 100.00000 (81.66667)
Epoch: [10000][31/60]	Time 0.06708 (0.88636)	Data 0.01307 (0.46799)	Loss 0.6673 (0.6692)	Prec@1 75.00000 (81.45161)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (81.45161)
Epoch: [10000][32/60]	Time 0.06588 (0.86072)	Data 0.00047 (0.45338)	Loss 0.0089 (0.6486)	Prec@1 100.00000 (82.03125)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (82.03125)
Epoch: [10000][33/60]	Time 0.05966 (0.83644)	Data 0.00042 (0.43965)	Loss 0.1635 (0.6339)	Prec@1 87.50000 (82.19698)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (82.21212)
Epoch: [10000][34/60]	Time 0.03650 (0.81291)	Data 0.00045 (0.42674)	Loss 0.5444 (0.6312)	Prec@1 87.50000 (82.35294)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (82.38235)
Epoch: [10000][35/60]	Time 0.05485 (0.79125)	Data 0.00053 (0.41456)	Loss 0.5305 (0.6284)	Prec@1 75.00000 (82.14286)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (82.17143)
Epoch: [10000][36/60]	Time 0.05087 (0.77069)	Data 0.00052 (0.40306)	Loss 0.0157 (0.6113)	Prec@1 100.00000 (82.63889)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (82.66666)
Epoch: [10000][37/60]	Time 0.02433 (0.75052)	Data 0.00059 (0.39218)	Loss 0.2400 (0.6013)	Prec@1 87.50000 (82.77027)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (82.81081)
Epoch: [10000][38/60]	Time 0.02346 (0.73138)	Data 0.00070 (0.38188)	Loss 0.1858 (0.5904)	Prec@1 87.50000 (82.89474)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (82.94737)
Epoch: [10000][39/60]	Time 0.02338 (0.71323)	Data 0.00067 (0.37210)	Loss 0.0737 (0.5771)	Prec@1 100.00000 (83.33334)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (83.38461)
Epoch: [10000][40/60]	Time 0.02361 (0.69599)	Data 0.00080 (0.36282)	Loss 0.1528 (0.5665)	Prec@1 87.50000 (83.43750)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (83.50000)
Epoch: [10000][41/60]	Time 0.02510 (0.67963)	Data 0.00090 (0.35399)	Loss 0.7348 (0.5706)	Prec@1 75.00000 (83.23170)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (83.29268)
Epoch: [10000][42/60]	Time 0.02345 (0.66400)	Data 0.00065 (0.34558)	Loss 0.0118 (0.5573)	Prec@1 100.00000 (83.63095)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (83.69048)
Epoch: [10000][43/60]	Time 0.02386 (0.64912)	Data 0.00092 (0.33757)	Loss 0.2610 (0.5504)	Prec@1 87.50000 (83.72093)	Prec@5 100.00000 (100.00000)	Acc 88.00000 (83.79070)
Epoch: [10000][44/60]	Time 0.02404 (0.63491)	Data 0.00086 (0.32991)	Loss 0.0030 (0.5380)	Prec@1 100.00000 (84.09091)	Prec@5 100.00000 (100.00000)	Acc 100.00000 (84.15910)
Epoch: [10000][45/60]	Time 0.02442 (0.62134)	Data 0.00086 (0.32260)	Loss 0.9386 (0.5469)	Prec@1 75.00000 (83.88889)	Prec@5 100.00000 (100.00000)	Acc 75.00000 (83.95556)
Epoch: [10000][46/60]	Time 0.02424 (0.60836)	Data 0.00080 (0.31560)	Loss 1.8462 (0.5751)	Prec@1 50.00000 (83.15218)	Prec@5 100.00000 (100.00000)	Acc 50.00000 (83.21739)
Epoch: [10000][47/60]	Time 0.02369 (0.59592)	Data 0.00043 (0.30890)	Loss 1.9850 (0.6051)	Prec@1 62.50000 (82.71276)	Prec@5 87.50000 (99.73404)	Acc 62.00000 (82.76595)
Epoch: [10000][48/60]	Time 0.02375 (0.58400)	Data 0.00045 (0.30247)	Loss 0.9748 (0.6128)	Prec@1 62.50000 (82.29167)	Prec@5 100.00000 (99.73959)	Acc 62.00000 (82.33334)
Epoch: [10000][49/60]	Time 0.02510 (0.57260)	Data 0.00043 (0.29631)	Loss 0.3182 (0.6068)	Prec@1 87.50000 (82.39796)	Prec@5 100.00000 (99.74490)	Acc 88.00000 (82.44897)
Epoch: [10000][50/60]	Time 0.02487 (0.56164)	Data 0.00066 (0.29040)	Loss 0.8302 (0.6113)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (99.75000)	Acc 88.00000 (82.56000)
Epoch: [10000][51/60]	Time 0.02355 (0.55109)	Data 0.00041 (0.28471)	Loss 1.1535 (0.6219)	Prec@1 50.00000 (81.86275)	Prec@5 100.00000 (99.75491)	Acc 50.00000 (81.92157)
Epoch: [10000][52/60]	Time 0.02363 (0.54095)	Data 0.00045 (0.27924)	Loss 0.4762 (0.6191)	Prec@1 87.50000 (81.97115)	Prec@5 100.00000 (99.75962)	Acc 88.00000 (82.03847)
Epoch: [10000][53/60]	Time 0.02358 (0.53119)	Data 0.00041 (0.27398)	Loss 2.7371 (0.6591)	Prec@1 37.50000 (81.13208)	Prec@5 87.50000 (99.52831)	Acc 38.00000 (81.20755)
Epoch: [10000][54/60]	Time 0.02510 (0.52181)	Data 0.00042 (0.26892)	Loss 1.3965 (0.6727)	Prec@1 75.00000 (81.01852)	Prec@5 87.50000 (99.30556)	Acc 75.00000 (81.09259)
Epoch: [10000][55/60]	Time 0.02361 (0.51276)	Data 0.00044 (0.26403)	Loss 0.3248 (0.6664)	Prec@1 87.50000 (81.13636)	Prec@5 100.00000 (99.31818)	Acc 88.00000 (81.21818)
Epoch: [10000][56/60]	Time 0.02371 (0.50402)	Data 0.00042 (0.25933)	Loss 0.7304 (0.6675)	Prec@1 75.00000 (81.02679)	Prec@5 100.00000 (99.33036)	Acc 75.00000 (81.10715)
Epoch: [10000][57/60]	Time 0.02353 (0.49559)	Data 0.00044 (0.25479)	Loss 0.2048 (0.6594)	Prec@1 100.00000 (81.35965)	Prec@5 100.00000 (99.34211)	Acc 100.00000 (81.43860)
Epoch: [10000][58/60]	Time 0.02405 (0.48746)	Data 0.00041 (0.25040)	Loss 1.1582 (0.6680)	Prec@1 62.50000 (81.03448)	Prec@5 100.00000 (99.35345)	Acc 62.00000 (81.10345)
Epoch: [10000][59/60]	Time 0.02364 (0.47960)	Data 0.00043 (0.24616)	Loss 2.3229 (0.6961)	Prec@1 50.00000 (80.50848)	Prec@5 87.50000 (99.15254)	Acc 50.00000 (80.57627)
Epoch: [10000][60/60]	Time 0.02395 (0.47201)	Data 0.00048 (0.24207)	Loss 0.2577 (0.6888)	Prec@1 87.50000 (80.62501)	Prec@5 100.00000 (99.16667)	Acc 88.00000 (80.70000)
