/scratch/work/huangg5/.conda_envs/merr/lib/python3.9/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 6, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
/scratch/work/huangg5/.conda_envs/merr/lib/python3.9/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 6, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
Namespace(annotation_path='ravdess_preprocessing/annotations.txt', result_path='results', store_name='RAVDESS_multimodalcnn_15', dataset='RAVDESS', n_classes=8, model='multimodalcnn', num_heads=1, device='cuda', sample_size=224, sample_duration=15, learning_rate=0.04, momentum=0.9, lr_steps=[40, 55, 65, 70, 200, 250], dampening=0.9, weight_decay=0.001, lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, resume_path='', pretrain_path='EfficientFace_Trained_on_AffectNet7.pth.tar', no_train=False, no_val=False, test=True, test_subset='test', n_threads=16, video_norm_value=255, manual_seed=1, fusion='ia', mask='softhard', arch='multimodalcnn')
Initializing efficientnet
Total number of trainable parameters:  1854766
train at epoch 1
train at epoch 1
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [1][0/272]	 lr: 0.04000	Time 28.304 (28.304)	Data 14.614 (14.614)	Loss 2.0923 (2.0923)	Prec@1 9.37500 (9.37500)	Prec@5 75.00000 (75.00000)
Epoch: [1][10/272]	 lr: 0.04000	Time 0.464 (3.003)	Data 0.128 (1.423)	Loss 2.2057 (2.0281)	Prec@1 25.00000 (27.84091)	Prec@5 56.25000 (69.60227)
Epoch: [1][20/272]	 lr: 0.04000	Time 0.535 (1.814)	Data 0.129 (0.804)	Loss 2.5032 (1.9050)	Prec@1 0.00000 (33.77976)	Prec@5 68.75000 (73.36310)
Epoch: [1][30/272]	 lr: 0.04000	Time 0.576 (1.393)	Data 0.130 (0.582)	Loss 1.9354 (1.8325)	Prec@1 37.50000 (35.28226)	Prec@5 84.37500 (77.31854)
Epoch: [1][40/272]	 lr: 0.04000	Time 0.587 (1.173)	Data 0.127 (0.471)	Loss 1.4363 (1.7465)	Prec@1 37.50000 (36.43293)	Prec@5 93.75000 (81.17377)
Epoch: [1][50/272]	 lr: 0.04000	Time 0.497 (1.042)	Data 0.128 (0.404)	Loss 1.3746 (1.6641)	Prec@1 37.50000 (38.48039)	Prec@5 100.00000 (83.88480)
Epoch: [1][60/272]	 lr: 0.04000	Time 0.527 (0.951)	Data 0.127 (0.357)	Loss 1.2821 (1.6254)	Prec@1 50.00000 (39.90778)	Prec@5 93.75000 (85.29713)
Epoch: [1][70/272]	 lr: 0.04000	Time 0.560 (0.886)	Data 0.127 (0.324)	Loss 1.3760 (1.5889)	Prec@1 43.75000 (41.50528)	Prec@5 93.75000 (86.44366)
Epoch: [1][80/272]	 lr: 0.04000	Time 0.500 (0.839)	Data 0.121 (0.299)	Loss 1.2628 (1.5469)	Prec@1 46.87500 (42.82407)	Prec@5 100.00000 (87.46142)
Epoch: [1][90/272]	 lr: 0.04000	Time 0.571 (0.802)	Data 0.135 (0.280)	Loss 1.6622 (1.5267)	Prec@1 43.75000 (43.40659)	Prec@5 87.50000 (88.39286)
Epoch: [1][100/272]	 lr: 0.04000	Time 0.523 (0.775)	Data 0.120 (0.265)	Loss 1.2213 (1.5065)	Prec@1 53.12500 (43.65718)	Prec@5 96.87500 (89.29456)
Epoch: [1][110/272]	 lr: 0.04000	Time 0.448 (0.749)	Data 0.126 (0.252)	Loss 1.1785 (1.4820)	Prec@1 46.87500 (44.31306)	Prec@5 93.75000 (89.94933)
Epoch: [1][120/272]	 lr: 0.04000	Time 0.555 (0.728)	Data 0.128 (0.241)	Loss 1.3858 (1.4686)	Prec@1 37.50000 (44.80888)	Prec@5 84.37500 (90.31508)
Epoch: [1][130/272]	 lr: 0.04000	Time 0.496 (0.710)	Data 0.096 (0.232)	Loss 0.8235 (1.4489)	Prec@1 71.87500 (45.75382)	Prec@5 96.87500 (90.60114)
Epoch: [1][140/272]	 lr: 0.04000	Time 0.344 (0.694)	Data 0.129 (0.224)	Loss 0.6705 (1.4260)	Prec@1 84.37500 (46.69769)	Prec@5 100.00000 (91.06826)
Epoch: [1][150/272]	 lr: 0.04000	Time 0.502 (0.682)	Data 0.126 (0.218)	Loss 0.8677 (1.4110)	Prec@1 59.37500 (47.16473)	Prec@5 100.00000 (91.41142)
Epoch: [1][160/272]	 lr: 0.04000	Time 0.502 (0.671)	Data 0.140 (0.212)	Loss 1.0322 (1.3958)	Prec@1 59.37500 (47.78727)	Prec@5 96.87500 (91.75078)
Epoch: [1][170/272]	 lr: 0.04000	Time 0.467 (0.661)	Data 0.128 (0.207)	Loss 0.9884 (1.3858)	Prec@1 68.75000 (48.35526)	Prec@5 93.75000 (91.95907)
Epoch: [1][180/272]	 lr: 0.04000	Time 0.495 (0.652)	Data 0.127 (0.202)	Loss 1.0603 (1.3715)	Prec@1 65.62500 (48.92956)	Prec@5 93.75000 (92.14434)
Epoch: [1][190/272]	 lr: 0.04000	Time 0.551 (0.644)	Data 0.104 (0.198)	Loss 0.9448 (1.3490)	Prec@1 56.25000 (49.85275)	Prec@5 100.00000 (92.40838)
Epoch: [1][200/272]	 lr: 0.04000	Time 0.504 (0.637)	Data 0.128 (0.194)	Loss 1.3406 (1.3400)	Prec@1 53.12500 (50.27985)	Prec@5 100.00000 (92.64614)
Epoch: [1][210/272]	 lr: 0.04000	Time 0.479 (0.630)	Data 0.127 (0.191)	Loss 0.9215 (1.3282)	Prec@1 65.62500 (50.63685)	Prec@5 100.00000 (92.89100)
Epoch: [1][220/272]	 lr: 0.04000	Time 0.425 (0.623)	Data 0.124 (0.188)	Loss 1.2282 (1.3237)	Prec@1 59.37500 (50.89084)	Prec@5 100.00000 (93.00057)
Epoch: [1][230/272]	 lr: 0.04000	Time 0.490 (0.618)	Data 0.127 (0.185)	Loss 0.6034 (1.3118)	Prec@1 87.50000 (51.39340)	Prec@5 100.00000 (93.16829)
Epoch: [1][240/272]	 lr: 0.04000	Time 0.397 (0.612)	Data 0.129 (0.183)	Loss 1.1005 (1.2975)	Prec@1 43.75000 (51.81536)	Prec@5 100.00000 (93.33507)
Epoch: [1][250/272]	 lr: 0.04000	Time 0.241 (0.597)	Data 0.128 (0.181)	Loss 1.1399 (1.2858)	Prec@1 68.75000 (52.51494)	Prec@5 90.62500 (93.50100)
Epoch: [1][260/272]	 lr: 0.04000	Time 0.239 (0.583)	Data 0.127 (0.178)	Loss 0.7689 (1.2708)	Prec@1 78.12500 (53.01724)	Prec@5 100.00000 (93.69013)
Epoch: [1][270/272]	 lr: 0.04000	Time 0.239 (0.571)	Data 0.127 (0.177)	Loss 1.0534 (1.2643)	Prec@1 59.37500 (53.21725)	Prec@5 96.87500 (93.79613)
validation at epoch 1
validation at epoch 1
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [1][1/60]	Time 6.21693 (6.21693)	Data 5.70193 (5.70193)	Loss 0.8571 (0.8571)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [1][2/60]	Time 1.08429 (3.65061)	Data 0.98198 (3.34195)	Loss 0.6248 (0.7410)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [1][3/60]	Time 0.33139 (2.54420)	Data 0.23031 (2.30474)	Loss 1.1693 (0.8837)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [1][4/60]	Time 0.28769 (1.98007)	Data 0.01079 (1.73125)	Loss 0.8827 (0.8835)	Prec@1 75.00000 (78.12500)	Prec@5 87.50000 (93.75000)
Epoch: [1][5/60]	Time 0.08143 (1.60035)	Data 0.00534 (1.38607)	Loss 2.3012 (1.1670)	Prec@1 25.00000 (67.50000)	Prec@5 75.00000 (90.00000)
Epoch: [1][6/60]	Time 0.17267 (1.36240)	Data 0.00781 (1.15636)	Loss 0.5109 (1.0577)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (91.66667)
Epoch: [1][7/60]	Time 0.29501 (1.20991)	Data 0.01974 (0.99398)	Loss 1.0278 (1.0534)	Prec@1 75.00000 (69.64286)	Prec@5 87.50000 (91.07143)
Epoch: [1][8/60]	Time 0.22074 (1.08627)	Data 0.02158 (0.87243)	Loss 0.8456 (1.0274)	Prec@1 75.00000 (70.31250)	Prec@5 100.00000 (92.18750)
Epoch: [1][9/60]	Time 0.20583 (0.98844)	Data 0.03937 (0.77987)	Loss 1.9765 (1.1329)	Prec@1 37.50000 (66.66666)	Prec@5 100.00000 (93.05556)
Epoch: [1][10/60]	Time 0.05596 (0.89519)	Data 0.00072 (0.70196)	Loss 0.6775 (1.0873)	Prec@1 87.50000 (68.75000)	Prec@5 100.00000 (93.75000)
Epoch: [1][11/60]	Time 0.19196 (0.83126)	Data 0.00068 (0.63820)	Loss 0.4519 (1.0296)	Prec@1 87.50000 (70.45454)	Prec@5 100.00000 (94.31818)
Epoch: [1][12/60]	Time 0.21487 (0.77990)	Data 0.08485 (0.59209)	Loss 1.6447 (1.0808)	Prec@1 37.50000 (67.70834)	Prec@5 100.00000 (94.79167)
Epoch: [1][13/60]	Time 0.07230 (0.72547)	Data 0.00594 (0.54700)	Loss 1.1022 (1.0825)	Prec@1 62.50000 (67.30769)	Prec@5 100.00000 (95.19231)
Epoch: [1][14/60]	Time 0.14632 (0.68410)	Data 0.00058 (0.50797)	Loss 1.5748 (1.1176)	Prec@1 62.50000 (66.96429)	Prec@5 87.50000 (94.64286)
Epoch: [1][15/60]	Time 0.14985 (0.64848)	Data 0.00411 (0.47438)	Loss 0.5516 (1.0799)	Prec@1 87.50000 (68.33334)	Prec@5 100.00000 (95.00001)
Epoch: [1][16/60]	Time 0.21495 (0.62139)	Data 0.01306 (0.44555)	Loss 2.0964 (1.1434)	Prec@1 37.50000 (66.40625)	Prec@5 87.50000 (94.53125)
Epoch: [1][17/60]	Time 0.08824 (0.59003)	Data 0.00624 (0.41971)	Loss 1.2533 (1.1499)	Prec@1 50.00000 (65.44118)	Prec@5 100.00000 (94.85294)
Epoch: [1][18/60]	Time 0.13649 (0.56483)	Data 0.02236 (0.39763)	Loss 1.5431 (1.1717)	Prec@1 50.00000 (64.58334)	Prec@5 100.00000 (95.13889)
Epoch: [1][19/60]	Time 0.12908 (0.54189)	Data 0.01867 (0.37769)	Loss 2.2114 (1.2265)	Prec@1 25.00000 (62.50000)	Prec@5 100.00000 (95.39474)
Epoch: [1][20/60]	Time 0.12517 (0.52106)	Data 0.00871 (0.35924)	Loss 1.8903 (1.2597)	Prec@1 50.00000 (61.87500)	Prec@5 87.50000 (95.00000)
Epoch: [1][21/60]	Time 0.15894 (0.50382)	Data 0.01071 (0.34264)	Loss 0.6525 (1.2307)	Prec@1 62.50000 (61.90476)	Prec@5 100.00000 (95.23810)
Epoch: [1][22/60]	Time 0.15095 (0.48778)	Data 0.02624 (0.32826)	Loss 0.9086 (1.2161)	Prec@1 62.50000 (61.93182)	Prec@5 100.00000 (95.45455)
Epoch: [1][23/60]	Time 0.13994 (0.47265)	Data 0.01630 (0.31470)	Loss 2.4917 (1.2716)	Prec@1 12.50000 (59.78261)	Prec@5 100.00000 (95.65218)
Epoch: [1][24/60]	Time 0.18468 (0.46065)	Data 0.00267 (0.30170)	Loss 1.7064 (1.2897)	Prec@1 50.00000 (59.37500)	Prec@5 87.50000 (95.31250)
Epoch: [1][25/60]	Time 0.18588 (0.44966)	Data 0.08173 (0.29290)	Loss 1.7229 (1.3070)	Prec@1 25.00000 (58.00000)	Prec@5 100.00000 (95.50000)
Epoch: [1][26/60]	Time 0.18833 (0.43961)	Data 0.00525 (0.28183)	Loss 3.0387 (1.3736)	Prec@1 25.00000 (56.73077)	Prec@5 100.00000 (95.67308)
Epoch: [1][27/60]	Time 0.28305 (0.43381)	Data 0.01405 (0.27192)	Loss 1.8616 (1.3917)	Prec@1 37.50000 (56.01852)	Prec@5 87.50000 (95.37037)
Epoch: [1][28/60]	Time 0.23500 (0.42671)	Data 0.00208 (0.26228)	Loss 1.8532 (1.4082)	Prec@1 37.50000 (55.35715)	Prec@5 100.00000 (95.53572)
Epoch: [1][29/60]	Time 0.11339 (0.41591)	Data 0.00045 (0.25325)	Loss 2.3620 (1.4411)	Prec@1 25.00000 (54.31034)	Prec@5 100.00000 (95.68965)
Epoch: [1][30/60]	Time 0.08633 (0.40492)	Data 0.01337 (0.24525)	Loss 1.8040 (1.4532)	Prec@1 37.50000 (53.75000)	Prec@5 100.00000 (95.83334)
Epoch: [1][31/60]	Time 0.03767 (0.39308)	Data 0.00057 (0.23736)	Loss 1.9201 (1.4682)	Prec@1 37.50000 (53.22580)	Prec@5 100.00000 (95.96774)
Epoch: [1][32/60]	Time 0.05334 (0.38246)	Data 0.00100 (0.22997)	Loss 2.3331 (1.4952)	Prec@1 12.50000 (51.95312)	Prec@5 100.00000 (96.09375)
Epoch: [1][33/60]	Time 0.05353 (0.37249)	Data 0.00068 (0.22303)	Loss 0.7506 (1.4727)	Prec@1 75.00000 (52.65152)	Prec@5 100.00000 (96.21213)
Epoch: [1][34/60]	Time 0.04185 (0.36277)	Data 0.00433 (0.21659)	Loss 1.7665 (1.4813)	Prec@1 12.50000 (51.47059)	Prec@5 100.00000 (96.32353)
Epoch: [1][35/60]	Time 0.03284 (0.35334)	Data 0.00048 (0.21042)	Loss 1.0183 (1.4681)	Prec@1 62.50000 (51.78571)	Prec@5 100.00000 (96.42857)
Epoch: [1][36/60]	Time 0.04959 (0.34490)	Data 0.00068 (0.20459)	Loss 1.1820 (1.4601)	Prec@1 50.00000 (51.73611)	Prec@5 100.00000 (96.52778)
Epoch: [1][37/60]	Time 0.02785 (0.33633)	Data 0.00076 (0.19908)	Loss 0.8798 (1.4445)	Prec@1 75.00000 (52.36486)	Prec@5 100.00000 (96.62162)
Epoch: [1][38/60]	Time 0.02707 (0.32819)	Data 0.00093 (0.19387)	Loss 1.3638 (1.4423)	Prec@1 25.00000 (51.64474)	Prec@5 100.00000 (96.71053)
Epoch: [1][39/60]	Time 0.02702 (0.32047)	Data 0.00069 (0.18892)	Loss 0.7852 (1.4255)	Prec@1 62.50000 (51.92308)	Prec@5 100.00000 (96.79488)
Epoch: [1][40/60]	Time 0.02749 (0.31315)	Data 0.00083 (0.18421)	Loss 0.9723 (1.4142)	Prec@1 50.00000 (51.87500)	Prec@5 100.00000 (96.87500)
Epoch: [1][41/60]	Time 0.02679 (0.30616)	Data 0.00066 (0.17974)	Loss 1.2297 (1.4097)	Prec@1 37.50000 (51.52439)	Prec@5 100.00000 (96.95122)
Epoch: [1][42/60]	Time 0.02262 (0.29941)	Data 0.00089 (0.17548)	Loss 1.5006 (1.4118)	Prec@1 37.50000 (51.19048)	Prec@5 100.00000 (97.02381)
Epoch: [1][43/60]	Time 0.02219 (0.29297)	Data 0.00081 (0.17142)	Loss 1.2203 (1.4074)	Prec@1 62.50000 (51.45349)	Prec@5 100.00000 (97.09303)
Epoch: [1][44/60]	Time 0.02222 (0.28681)	Data 0.00094 (0.16754)	Loss 1.3854 (1.4069)	Prec@1 50.00000 (51.42046)	Prec@5 100.00000 (97.15910)
Epoch: [1][45/60]	Time 0.02304 (0.28095)	Data 0.00052 (0.16383)	Loss 0.6793 (1.3907)	Prec@1 75.00000 (51.94445)	Prec@5 100.00000 (97.22222)
Epoch: [1][46/60]	Time 0.02297 (0.27534)	Data 0.00066 (0.16028)	Loss 1.1526 (1.3855)	Prec@1 62.50000 (52.17392)	Prec@5 100.00000 (97.28261)
Epoch: [1][47/60]	Time 0.02261 (0.26996)	Data 0.00049 (0.15688)	Loss 1.6841 (1.3919)	Prec@1 50.00000 (52.12766)	Prec@5 87.50000 (97.07446)
Epoch: [1][48/60]	Time 0.02173 (0.26479)	Data 0.00042 (0.15362)	Loss 1.4382 (1.3928)	Prec@1 62.50000 (52.34375)	Prec@5 87.50000 (96.87500)
Epoch: [1][49/60]	Time 0.02190 (0.25984)	Data 0.00041 (0.15050)	Loss 0.9244 (1.3833)	Prec@1 75.00000 (52.80612)	Prec@5 100.00000 (96.93877)
Epoch: [1][50/60]	Time 0.02166 (0.25507)	Data 0.00040 (0.14749)	Loss 1.1271 (1.3782)	Prec@1 62.50000 (53.00000)	Prec@5 87.50000 (96.75000)
Epoch: [1][51/60]	Time 0.02208 (0.25050)	Data 0.00040 (0.14461)	Loss 1.2498 (1.3756)	Prec@1 62.50000 (53.18628)	Prec@5 100.00000 (96.81373)
Epoch: [1][52/60]	Time 0.02243 (0.24612)	Data 0.00041 (0.14184)	Loss 2.3045 (1.3935)	Prec@1 12.50000 (52.40385)	Prec@5 75.00000 (96.39423)
Epoch: [1][53/60]	Time 0.02177 (0.24189)	Data 0.00043 (0.13917)	Loss 1.5560 (1.3966)	Prec@1 25.00000 (51.88680)	Prec@5 87.50000 (96.22642)
Epoch: [1][54/60]	Time 0.02206 (0.23781)	Data 0.00048 (0.13660)	Loss 1.0437 (1.3900)	Prec@1 75.00000 (52.31482)	Prec@5 100.00000 (96.29630)
Epoch: [1][55/60]	Time 0.02164 (0.23388)	Data 0.00042 (0.13413)	Loss 2.2359 (1.4054)	Prec@1 62.50000 (52.50000)	Prec@5 87.50000 (96.13636)
Epoch: [1][56/60]	Time 0.02232 (0.23011)	Data 0.00047 (0.13174)	Loss 1.2931 (1.4034)	Prec@1 50.00000 (52.45536)	Prec@5 100.00000 (96.20536)
Epoch: [1][57/60]	Time 0.02239 (0.22646)	Data 0.00043 (0.12943)	Loss 1.6231 (1.4073)	Prec@1 50.00000 (52.41228)	Prec@5 87.50000 (96.05264)
Epoch: [1][58/60]	Time 0.02148 (0.22293)	Data 0.00037 (0.12721)	Loss 1.6341 (1.4112)	Prec@1 12.50000 (51.72414)	Prec@5 100.00000 (96.12069)
Epoch: [1][59/60]	Time 0.02207 (0.21952)	Data 0.00041 (0.12506)	Loss 0.8190 (1.4011)	Prec@1 75.00000 (52.11864)	Prec@5 100.00000 (96.18644)
Epoch: [1][60/60]	Time 0.02198 (0.21623)	Data 0.00062 (0.12299)	Loss 1.5783 (1.4041)	Prec@1 25.00000 (51.66667)	Prec@5 100.00000 (96.25001)
train at epoch 2
train at epoch 2
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [2][0/272]	 lr: 0.04000	Time 9.746 (9.746)	Data 8.798 (8.798)	Loss 1.3306 (1.3306)	Prec@1 53.12500 (53.12500)	Prec@5 93.75000 (93.75000)
Epoch: [2][10/272]	 lr: 0.04000	Time 0.410 (1.280)	Data 0.131 (0.911)	Loss 1.8021 (1.1847)	Prec@1 40.62500 (56.25000)	Prec@5 90.62500 (95.73864)
Epoch: [2][20/272]	 lr: 0.04000	Time 0.423 (0.871)	Data 0.111 (0.538)	Loss 0.7451 (1.0319)	Prec@1 78.12500 (62.20238)	Prec@5 100.00000 (97.47024)
Epoch: [2][30/272]	 lr: 0.04000	Time 0.392 (0.721)	Data 0.122 (0.405)	Loss 0.9060 (1.0403)	Prec@1 68.75000 (62.29839)	Prec@5 93.75000 (97.58064)
Epoch: [2][40/272]	 lr: 0.04000	Time 0.393 (0.653)	Data 0.127 (0.338)	Loss 1.3072 (1.0165)	Prec@1 46.87500 (63.18597)	Prec@5 87.50000 (97.48475)
Epoch: [2][50/272]	 lr: 0.04000	Time 0.555 (0.610)	Data 0.125 (0.297)	Loss 0.8925 (1.0061)	Prec@1 59.37500 (63.17402)	Prec@5 100.00000 (97.85539)
Epoch: [2][60/272]	 lr: 0.04000	Time 0.432 (0.585)	Data 0.126 (0.269)	Loss 0.8236 (0.9783)	Prec@1 68.75000 (64.49795)	Prec@5 96.87500 (97.95081)
Epoch: [2][70/272]	 lr: 0.04000	Time 0.486 (0.569)	Data 0.117 (0.249)	Loss 0.9288 (0.9676)	Prec@1 62.50000 (64.48063)	Prec@5 93.75000 (98.06338)
Epoch: [2][80/272]	 lr: 0.04000	Time 0.482 (0.555)	Data 0.125 (0.233)	Loss 0.9275 (0.9678)	Prec@1 65.62500 (64.62192)	Prec@5 96.87500 (97.91666)
Epoch: [2][90/272]	 lr: 0.04000	Time 0.468 (0.542)	Data 0.125 (0.221)	Loss 0.7618 (0.9723)	Prec@1 75.00000 (64.66346)	Prec@5 96.87500 (97.80220)
Epoch: [2][100/272]	 lr: 0.04000	Time 0.462 (0.534)	Data 0.121 (0.212)	Loss 0.7481 (0.9628)	Prec@1 71.87500 (65.12995)	Prec@5 100.00000 (97.80322)
Epoch: [2][110/272]	 lr: 0.04000	Time 0.392 (0.525)	Data 0.111 (0.203)	Loss 0.6768 (0.9549)	Prec@1 75.00000 (65.48424)	Prec@5 96.87500 (97.66329)
Epoch: [2][120/272]	 lr: 0.04000	Time 0.352 (0.517)	Data 0.118 (0.197)	Loss 0.4912 (0.9573)	Prec@1 84.37500 (65.39256)	Prec@5 100.00000 (97.64979)
Epoch: [2][130/272]	 lr: 0.04000	Time 0.472 (0.513)	Data 0.109 (0.192)	Loss 0.9270 (0.9500)	Prec@1 71.87500 (65.64886)	Prec@5 93.75000 (97.61450)
Epoch: [2][140/272]	 lr: 0.04000	Time 0.410 (0.508)	Data 0.127 (0.187)	Loss 1.3513 (0.9516)	Prec@1 46.87500 (65.78014)	Prec@5 100.00000 (97.62854)
Epoch: [2][150/272]	 lr: 0.04000	Time 0.421 (0.505)	Data 0.123 (0.183)	Loss 0.9465 (0.9532)	Prec@1 75.00000 (65.81126)	Prec@5 96.87500 (97.57864)
Epoch: [2][160/272]	 lr: 0.04000	Time 0.603 (0.501)	Data 0.143 (0.179)	Loss 0.8660 (0.9495)	Prec@1 59.37500 (65.89674)	Prec@5 96.87500 (97.65140)
Epoch: [2][170/272]	 lr: 0.04000	Time 0.461 (0.498)	Data 0.145 (0.177)	Loss 1.0808 (0.9595)	Prec@1 56.25000 (65.49708)	Prec@5 100.00000 (97.62427)
Epoch: [2][180/272]	 lr: 0.04000	Time 0.470 (0.495)	Data 0.118 (0.174)	Loss 0.8266 (0.9627)	Prec@1 71.87500 (65.26244)	Prec@5 100.00000 (97.56561)
Epoch: [2][190/272]	 lr: 0.04000	Time 0.480 (0.493)	Data 0.129 (0.171)	Loss 1.3014 (0.9682)	Prec@1 53.12500 (64.97055)	Prec@5 100.00000 (97.61126)
Epoch: [2][200/272]	 lr: 0.04000	Time 0.417 (0.491)	Data 0.119 (0.169)	Loss 1.0935 (0.9653)	Prec@1 56.25000 (65.14304)	Prec@5 100.00000 (97.55907)
Epoch: [2][210/272]	 lr: 0.04000	Time 0.505 (0.489)	Data 0.134 (0.167)	Loss 1.0039 (0.9584)	Prec@1 62.50000 (65.34361)	Prec@5 96.87500 (97.61552)
Epoch: [2][220/272]	 lr: 0.04000	Time 0.445 (0.487)	Data 0.127 (0.165)	Loss 0.6954 (0.9514)	Prec@1 75.00000 (65.61086)	Prec@5 100.00000 (97.62444)
Epoch: [2][230/272]	 lr: 0.04000	Time 0.431 (0.485)	Data 0.141 (0.164)	Loss 0.6137 (0.9469)	Prec@1 78.12500 (65.81439)	Prec@5 100.00000 (97.67316)
Epoch: [2][240/272]	 lr: 0.04000	Time 0.325 (0.482)	Data 0.119 (0.162)	Loss 0.5574 (0.9413)	Prec@1 87.50000 (66.01401)	Prec@5 96.87500 (97.74378)
Epoch: [2][250/272]	 lr: 0.04000	Time 0.240 (0.473)	Data 0.129 (0.161)	Loss 1.1985 (0.9418)	Prec@1 46.87500 (65.98606)	Prec@5 100.00000 (97.68427)
Epoch: [2][260/272]	 lr: 0.04000	Time 0.236 (0.464)	Data 0.129 (0.160)	Loss 0.4230 (0.9369)	Prec@1 81.25000 (66.23563)	Prec@5 100.00000 (97.66523)
Epoch: [2][270/272]	 lr: 0.04000	Time 0.238 (0.455)	Data 0.128 (0.159)	Loss 0.5850 (0.9335)	Prec@1 87.50000 (66.31688)	Prec@5 100.00000 (97.67066)
validation at epoch 2
validation at epoch 2
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [2][1/60]	Time 5.19621 (5.19621)	Data 5.02231 (5.02231)	Loss 0.4400 (0.4400)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [2][2/60]	Time 0.37945 (2.78783)	Data 0.06346 (2.54288)	Loss 0.9389 (0.6894)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [2][3/60]	Time 1.74840 (2.44136)	Data 1.55035 (2.21204)	Loss 1.4282 (0.9357)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [2][4/60]	Time 0.22303 (1.88677)	Data 0.10728 (1.68585)	Loss 0.9908 (0.9495)	Prec@1 75.00000 (78.12500)	Prec@5 87.50000 (96.87500)
Epoch: [2][5/60]	Time 0.20851 (1.55112)	Data 0.02776 (1.35423)	Loss 0.4170 (0.8430)	Prec@1 100.00000 (82.50000)	Prec@5 100.00000 (97.50000)
Epoch: [2][6/60]	Time 0.28615 (1.34029)	Data 0.23135 (1.16709)	Loss 0.9680 (0.8638)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (97.91667)
Epoch: [2][7/60]	Time 0.19464 (1.17663)	Data 0.04453 (1.00672)	Loss 1.4074 (0.9415)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [2][8/60]	Time 0.12881 (1.04565)	Data 0.00050 (0.88094)	Loss 1.2993 (0.9862)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.43750)
Epoch: [2][9/60]	Time 0.17440 (0.94885)	Data 0.03066 (0.78647)	Loss 1.0653 (0.9950)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [2][10/60]	Time 0.14523 (0.86848)	Data 0.00749 (0.70857)	Loss 1.4898 (1.0445)	Prec@1 62.50000 (73.75000)	Prec@5 100.00000 (98.75000)
Epoch: [2][11/60]	Time 0.20300 (0.80799)	Data 0.02584 (0.64650)	Loss 1.0439 (1.0444)	Prec@1 62.50000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [2][12/60]	Time 0.07519 (0.74692)	Data 0.00777 (0.59327)	Loss 1.8797 (1.1140)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.95834)
Epoch: [2][13/60]	Time 0.15068 (0.70105)	Data 0.00306 (0.54787)	Loss 3.0168 (1.2604)	Prec@1 37.50000 (69.23077)	Prec@5 87.50000 (98.07693)
Epoch: [2][14/60]	Time 0.13708 (0.66077)	Data 0.00521 (0.50911)	Loss 0.6245 (1.2150)	Prec@1 75.00000 (69.64286)	Prec@5 100.00000 (98.21429)
Epoch: [2][15/60]	Time 0.15835 (0.62728)	Data 0.01397 (0.47610)	Loss 1.8692 (1.2586)	Prec@1 50.00000 (68.33334)	Prec@5 100.00000 (98.33334)
Epoch: [2][16/60]	Time 0.16726 (0.59852)	Data 0.01464 (0.44726)	Loss 1.2661 (1.2591)	Prec@1 37.50000 (66.40625)	Prec@5 100.00000 (98.43750)
Epoch: [2][17/60]	Time 0.10401 (0.56944)	Data 0.00438 (0.42121)	Loss 0.5741 (1.2188)	Prec@1 62.50000 (66.17647)	Prec@5 100.00000 (98.52941)
Epoch: [2][18/60]	Time 0.10504 (0.54364)	Data 0.01778 (0.39880)	Loss 1.2756 (1.2219)	Prec@1 37.50000 (64.58334)	Prec@5 100.00000 (98.61111)
Epoch: [2][19/60]	Time 0.22972 (0.52711)	Data 0.13623 (0.38498)	Loss 1.0215 (1.2114)	Prec@1 62.50000 (64.47369)	Prec@5 100.00000 (98.68421)
Epoch: [2][20/60]	Time 0.04283 (0.50290)	Data 0.00448 (0.36595)	Loss 1.9263 (1.2471)	Prec@1 12.50000 (61.87500)	Prec@5 100.00000 (98.75000)
Epoch: [2][21/60]	Time 0.05813 (0.48172)	Data 0.00502 (0.34877)	Loss 0.5977 (1.2162)	Prec@1 75.00000 (62.50000)	Prec@5 100.00000 (98.80952)
Epoch: [2][22/60]	Time 0.09043 (0.46393)	Data 0.00909 (0.33333)	Loss 0.2847 (1.1738)	Prec@1 87.50000 (63.63636)	Prec@5 100.00000 (98.86364)
Epoch: [2][23/60]	Time 0.27665 (0.45579)	Data 0.08894 (0.32270)	Loss 0.9773 (1.1653)	Prec@1 50.00000 (63.04348)	Prec@5 100.00000 (98.91305)
Epoch: [2][24/60]	Time 0.18965 (0.44470)	Data 0.02286 (0.31021)	Loss 1.0965 (1.1624)	Prec@1 37.50000 (61.97917)	Prec@5 100.00000 (98.95834)
Epoch: [2][25/60]	Time 0.14154 (0.43258)	Data 0.00065 (0.29783)	Loss 0.4113 (1.1324)	Prec@1 100.00000 (63.50000)	Prec@5 100.00000 (99.00000)
Epoch: [2][26/60]	Time 0.14191 (0.42140)	Data 0.00060 (0.28639)	Loss 0.8249 (1.1206)	Prec@1 62.50000 (63.46154)	Prec@5 100.00000 (99.03847)
Epoch: [2][27/60]	Time 0.18183 (0.41252)	Data 0.10434 (0.27965)	Loss 1.0203 (1.1169)	Prec@1 62.50000 (63.42593)	Prec@5 100.00000 (99.07407)
Epoch: [2][28/60]	Time 0.08412 (0.40079)	Data 0.01597 (0.27023)	Loss 1.0779 (1.1155)	Prec@1 37.50000 (62.50000)	Prec@5 100.00000 (99.10715)
Epoch: [2][29/60]	Time 0.11977 (0.39110)	Data 0.02137 (0.26165)	Loss 1.0292 (1.1125)	Prec@1 37.50000 (61.63793)	Prec@5 100.00000 (99.13793)
Epoch: [2][30/60]	Time 0.10779 (0.38166)	Data 0.00039 (0.25294)	Loss 0.6021 (1.0955)	Prec@1 62.50000 (61.66667)	Prec@5 100.00000 (99.16667)
Epoch: [2][31/60]	Time 0.05188 (0.37102)	Data 0.00049 (0.24480)	Loss 3.1540 (1.1619)	Prec@1 12.50000 (60.08064)	Prec@5 62.50000 (97.98387)
Epoch: [2][32/60]	Time 0.03716 (0.36059)	Data 0.00045 (0.23716)	Loss 2.3690 (1.1996)	Prec@1 37.50000 (59.37500)	Prec@5 75.00000 (97.26562)
Epoch: [2][33/60]	Time 0.03533 (0.35073)	Data 0.00067 (0.23000)	Loss 0.3527 (1.1739)	Prec@1 87.50000 (60.22728)	Prec@5 100.00000 (97.34849)
Epoch: [2][34/60]	Time 0.03168 (0.34135)	Data 0.00067 (0.22325)	Loss 1.9259 (1.1961)	Prec@1 50.00000 (59.92647)	Prec@5 100.00000 (97.42647)
Epoch: [2][35/60]	Time 0.02441 (0.33229)	Data 0.00050 (0.21689)	Loss 2.0483 (1.2204)	Prec@1 37.50000 (59.28571)	Prec@5 87.50000 (97.14286)
Epoch: [2][36/60]	Time 0.02848 (0.32385)	Data 0.00524 (0.21101)	Loss 1.1443 (1.2183)	Prec@1 50.00000 (59.02778)	Prec@5 100.00000 (97.22222)
Epoch: [2][37/60]	Time 0.02295 (0.31572)	Data 0.00045 (0.20532)	Loss 1.7195 (1.2318)	Prec@1 62.50000 (59.12162)	Prec@5 100.00000 (97.29730)
Epoch: [2][38/60]	Time 0.02434 (0.30805)	Data 0.00140 (0.19995)	Loss 2.4487 (1.2639)	Prec@1 37.50000 (58.55263)	Prec@5 87.50000 (97.03947)
Epoch: [2][39/60]	Time 0.02413 (0.30077)	Data 0.00042 (0.19484)	Loss 0.3926 (1.2415)	Prec@1 87.50000 (59.29487)	Prec@5 100.00000 (97.11539)
Epoch: [2][40/60]	Time 0.02398 (0.29385)	Data 0.00098 (0.18999)	Loss 1.2523 (1.2418)	Prec@1 50.00000 (59.06250)	Prec@5 100.00000 (97.18750)
Epoch: [2][41/60]	Time 0.02770 (0.28736)	Data 0.00046 (0.18537)	Loss 1.7146 (1.2533)	Prec@1 50.00000 (58.84146)	Prec@5 87.50000 (96.95122)
Epoch: [2][42/60]	Time 0.02343 (0.28108)	Data 0.00058 (0.18097)	Loss 2.0841 (1.2731)	Prec@1 50.00000 (58.63095)	Prec@5 100.00000 (97.02381)
Epoch: [2][43/60]	Time 0.03426 (0.27534)	Data 0.00390 (0.17685)	Loss 1.0254 (1.2673)	Prec@1 62.50000 (58.72093)	Prec@5 100.00000 (97.09303)
Epoch: [2][44/60]	Time 0.03011 (0.26976)	Data 0.00259 (0.17289)	Loss 2.6818 (1.2995)	Prec@1 25.00000 (57.95455)	Prec@5 75.00000 (96.59091)
Epoch: [2][45/60]	Time 0.03269 (0.26450)	Data 0.00385 (0.16913)	Loss 1.6364 (1.3070)	Prec@1 50.00000 (57.77778)	Prec@5 100.00000 (96.66667)
Epoch: [2][46/60]	Time 0.03155 (0.25943)	Data 0.00401 (0.16554)	Loss 2.6494 (1.3362)	Prec@1 62.50000 (57.88044)	Prec@5 100.00000 (96.73914)
Epoch: [2][47/60]	Time 0.03788 (0.25472)	Data 0.00517 (0.16213)	Loss 0.9486 (1.3279)	Prec@1 75.00000 (58.24468)	Prec@5 87.50000 (96.54255)
Epoch: [2][48/60]	Time 0.03212 (0.25008)	Data 0.00057 (0.15876)	Loss 1.6684 (1.3350)	Prec@1 25.00000 (57.55209)	Prec@5 100.00000 (96.61459)
Epoch: [2][49/60]	Time 0.03374 (0.24567)	Data 0.00046 (0.15553)	Loss 2.1387 (1.3514)	Prec@1 62.50000 (57.65306)	Prec@5 100.00000 (96.68367)
Epoch: [2][50/60]	Time 0.03579 (0.24147)	Data 0.00043 (0.15243)	Loss 0.9096 (1.3426)	Prec@1 62.50000 (57.75000)	Prec@5 100.00000 (96.75000)
Epoch: [2][51/60]	Time 0.03461 (0.23741)	Data 0.00042 (0.14945)	Loss 0.5443 (1.3269)	Prec@1 87.50000 (58.33334)	Prec@5 100.00000 (96.81373)
Epoch: [2][52/60]	Time 0.02913 (0.23341)	Data 0.00040 (0.14658)	Loss 1.2007 (1.3245)	Prec@1 62.50000 (58.41346)	Prec@5 100.00000 (96.87500)
Epoch: [2][53/60]	Time 0.02394 (0.22945)	Data 0.00045 (0.14383)	Loss 1.5701 (1.3291)	Prec@1 50.00000 (58.25472)	Prec@5 100.00000 (96.93396)
Epoch: [2][54/60]	Time 0.02270 (0.22563)	Data 0.00042 (0.14117)	Loss 2.6143 (1.3529)	Prec@1 37.50000 (57.87037)	Prec@5 100.00000 (96.99074)
Epoch: [2][55/60]	Time 0.02285 (0.22194)	Data 0.00045 (0.13861)	Loss 0.9906 (1.3463)	Prec@1 75.00000 (58.18182)	Prec@5 87.50000 (96.81818)
Epoch: [2][56/60]	Time 0.02272 (0.21838)	Data 0.00046 (0.13615)	Loss 1.1778 (1.3433)	Prec@1 75.00000 (58.48215)	Prec@5 100.00000 (96.87501)
Epoch: [2][57/60]	Time 0.02311 (0.21496)	Data 0.00047 (0.13377)	Loss 2.0526 (1.3558)	Prec@1 37.50000 (58.11404)	Prec@5 100.00000 (96.92982)
Epoch: [2][58/60]	Time 0.02350 (0.21165)	Data 0.00049 (0.13147)	Loss 2.0565 (1.3679)	Prec@1 62.50000 (58.18966)	Prec@5 87.50000 (96.76724)
Epoch: [2][59/60]	Time 0.02286 (0.20845)	Data 0.00042 (0.12925)	Loss 2.4119 (1.3855)	Prec@1 25.00000 (57.62712)	Prec@5 100.00000 (96.82204)
Epoch: [2][60/60]	Time 0.02293 (0.20536)	Data 0.00054 (0.12710)	Loss 0.5741 (1.3720)	Prec@1 87.50000 (58.12500)	Prec@5 100.00000 (96.87501)
train at epoch 3
train at epoch 3
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [3][0/272]	 lr: 0.04000	Time 6.777 (6.777)	Data 5.138 (5.138)	Loss 1.2101 (1.2101)	Prec@1 46.87500 (46.87500)	Prec@5 100.00000 (100.00000)
Epoch: [3][10/272]	 lr: 0.04000	Time 0.395 (1.304)	Data 0.128 (0.789)	Loss 0.8032 (0.8372)	Prec@1 78.12500 (68.46591)	Prec@5 100.00000 (99.14773)
Epoch: [3][20/272]	 lr: 0.04000	Time 0.445 (0.884)	Data 0.129 (0.476)	Loss 0.4638 (0.8252)	Prec@1 90.62500 (70.53571)	Prec@5 100.00000 (98.36310)
Epoch: [3][30/272]	 lr: 0.04000	Time 0.483 (0.738)	Data 0.128 (0.364)	Loss 0.9649 (0.8204)	Prec@1 71.87500 (71.16935)	Prec@5 96.87500 (98.08467)
Epoch: [3][40/272]	 lr: 0.04000	Time 0.598 (0.671)	Data 0.128 (0.307)	Loss 0.4637 (0.8346)	Prec@1 93.75000 (71.34146)	Prec@5 100.00000 (97.94207)
Epoch: [3][50/272]	 lr: 0.04000	Time 0.470 (0.630)	Data 0.127 (0.273)	Loss 0.7701 (0.8570)	Prec@1 68.75000 (69.97549)	Prec@5 100.00000 (97.85539)
Epoch: [3][60/272]	 lr: 0.04000	Time 0.332 (0.598)	Data 0.127 (0.250)	Loss 0.8052 (0.8504)	Prec@1 71.87500 (69.82581)	Prec@5 96.87500 (98.00204)
Epoch: [3][70/272]	 lr: 0.04000	Time 0.541 (0.580)	Data 0.126 (0.231)	Loss 0.6176 (0.8419)	Prec@1 75.00000 (69.89436)	Prec@5 100.00000 (98.10739)
Epoch: [3][80/272]	 lr: 0.04000	Time 0.439 (0.561)	Data 0.126 (0.218)	Loss 0.6631 (0.8256)	Prec@1 68.75000 (70.48611)	Prec@5 100.00000 (98.22531)
Epoch: [3][90/272]	 lr: 0.04000	Time 0.419 (0.551)	Data 0.110 (0.208)	Loss 0.5207 (0.8162)	Prec@1 84.37500 (71.22253)	Prec@5 100.00000 (98.28297)
Epoch: [3][100/272]	 lr: 0.04000	Time 0.451 (0.540)	Data 0.136 (0.200)	Loss 1.1555 (0.8134)	Prec@1 56.25000 (71.34901)	Prec@5 100.00000 (98.42203)
Epoch: [3][110/272]	 lr: 0.04000	Time 0.412 (0.530)	Data 0.124 (0.193)	Loss 1.2247 (0.8295)	Prec@1 53.12500 (70.74888)	Prec@5 90.62500 (98.36712)
Epoch: [3][120/272]	 lr: 0.04000	Time 0.482 (0.524)	Data 0.113 (0.187)	Loss 0.6052 (0.8194)	Prec@1 75.00000 (71.20351)	Prec@5 100.00000 (98.37293)
Epoch: [3][130/272]	 lr: 0.04000	Time 0.440 (0.517)	Data 0.127 (0.183)	Loss 1.1268 (0.8204)	Prec@1 56.25000 (71.18320)	Prec@5 100.00000 (98.40172)
Epoch: [3][140/272]	 lr: 0.04000	Time 0.440 (0.510)	Data 0.143 (0.179)	Loss 1.0022 (0.8260)	Prec@1 65.62500 (70.89982)	Prec@5 96.87500 (98.40425)
Epoch: [3][150/272]	 lr: 0.04000	Time 0.453 (0.505)	Data 0.126 (0.175)	Loss 0.9702 (0.8260)	Prec@1 78.12500 (70.88162)	Prec@5 90.62500 (98.38577)
Epoch: [3][160/272]	 lr: 0.04000	Time 0.370 (0.501)	Data 0.129 (0.172)	Loss 0.6754 (0.8321)	Prec@1 81.25000 (70.69099)	Prec@5 96.87500 (98.35016)
Epoch: [3][170/272]	 lr: 0.04000	Time 0.425 (0.498)	Data 0.136 (0.169)	Loss 0.8142 (0.8378)	Prec@1 62.50000 (70.41301)	Prec@5 100.00000 (98.33699)
Epoch: [3][180/272]	 lr: 0.04000	Time 0.477 (0.495)	Data 0.135 (0.167)	Loss 1.0123 (0.8356)	Prec@1 50.00000 (70.45926)	Prec@5 100.00000 (98.39434)
Epoch: [3][190/272]	 lr: 0.04000	Time 0.473 (0.492)	Data 0.143 (0.165)	Loss 0.5885 (0.8294)	Prec@1 84.37500 (70.59882)	Prec@5 96.87500 (98.41296)
Epoch: [3][200/272]	 lr: 0.04000	Time 0.419 (0.490)	Data 0.130 (0.163)	Loss 0.7953 (0.8397)	Prec@1 71.87500 (70.33582)	Prec@5 100.00000 (98.36754)
Epoch: [3][210/272]	 lr: 0.04000	Time 0.447 (0.489)	Data 0.113 (0.162)	Loss 1.2988 (0.8396)	Prec@1 34.37500 (70.11256)	Prec@5 100.00000 (98.38567)
Epoch: [3][220/272]	 lr: 0.04000	Time 0.480 (0.486)	Data 0.133 (0.160)	Loss 0.8746 (0.8350)	Prec@1 62.50000 (70.33371)	Prec@5 93.75000 (98.35973)
Epoch: [3][230/272]	 lr: 0.04000	Time 0.384 (0.484)	Data 0.128 (0.159)	Loss 1.3497 (0.8330)	Prec@1 37.50000 (70.44102)	Prec@5 100.00000 (98.40368)
Epoch: [3][240/272]	 lr: 0.04000	Time 0.365 (0.482)	Data 0.129 (0.158)	Loss 0.7829 (0.8350)	Prec@1 75.00000 (70.46162)	Prec@5 100.00000 (98.40509)
Epoch: [3][250/272]	 lr: 0.04000	Time 0.237 (0.472)	Data 0.129 (0.157)	Loss 0.8063 (0.8440)	Prec@1 75.00000 (70.20667)	Prec@5 96.87500 (98.34412)
Epoch: [3][260/272]	 lr: 0.04000	Time 0.240 (0.463)	Data 0.129 (0.156)	Loss 0.6399 (0.8436)	Prec@1 84.37500 (70.25862)	Prec@5 100.00000 (98.32375)
Epoch: [3][270/272]	 lr: 0.04000	Time 0.242 (0.455)	Data 0.129 (0.155)	Loss 0.5424 (0.8366)	Prec@1 81.25000 (70.44511)	Prec@5 100.00000 (98.37408)
validation at epoch 3
validation at epoch 3
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [3][1/60]	Time 4.18308 (4.18308)	Data 4.05896 (4.05896)	Loss 0.7189 (0.7189)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [3][2/60]	Time 3.03941 (3.61125)	Data 2.99801 (3.52849)	Loss 0.5183 (0.6186)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [3][3/60]	Time 0.13736 (2.45328)	Data 0.00306 (2.35334)	Loss 1.9978 (1.0783)	Prec@1 25.00000 (58.33334)	Prec@5 87.50000 (95.83334)
Epoch: [3][4/60]	Time 0.45137 (1.95281)	Data 0.38629 (1.86158)	Loss 0.7394 (0.9936)	Prec@1 62.50000 (59.37500)	Prec@5 100.00000 (96.87500)
Epoch: [3][5/60]	Time 0.07266 (1.57678)	Data 0.00053 (1.48937)	Loss 1.3317 (1.0612)	Prec@1 62.50000 (60.00000)	Prec@5 100.00000 (97.50000)
Epoch: [3][6/60]	Time 0.06086 (1.32412)	Data 0.00074 (1.24127)	Loss 1.0971 (1.0672)	Prec@1 62.50000 (60.41667)	Prec@5 100.00000 (97.91667)
Epoch: [3][7/60]	Time 0.10908 (1.15054)	Data 0.00067 (1.06404)	Loss 1.3788 (1.1117)	Prec@1 50.00000 (58.92857)	Prec@5 100.00000 (98.21429)
Epoch: [3][8/60]	Time 0.24761 (1.03768)	Data 0.05786 (0.93827)	Loss 1.4941 (1.1595)	Prec@1 62.50000 (59.37500)	Prec@5 100.00000 (98.43750)
Epoch: [3][9/60]	Time 0.17297 (0.94160)	Data 0.00048 (0.83407)	Loss 0.9445 (1.1356)	Prec@1 75.00000 (61.11111)	Prec@5 100.00000 (98.61111)
Epoch: [3][10/60]	Time 0.16951 (0.86439)	Data 0.00058 (0.75072)	Loss 1.0794 (1.1300)	Prec@1 62.50000 (61.25000)	Prec@5 100.00000 (98.75000)
Epoch: [3][11/60]	Time 0.13813 (0.79837)	Data 0.02754 (0.68498)	Loss 1.1581 (1.1326)	Prec@1 62.50000 (61.36364)	Prec@5 100.00000 (98.86364)
Epoch: [3][12/60]	Time 0.11817 (0.74168)	Data 0.01106 (0.62882)	Loss 1.2705 (1.1440)	Prec@1 50.00000 (60.41667)	Prec@5 100.00000 (98.95834)
Epoch: [3][13/60]	Time 0.08399 (0.69109)	Data 0.00062 (0.58049)	Loss 1.9295 (1.2045)	Prec@1 37.50000 (58.65385)	Prec@5 87.50000 (98.07693)
Epoch: [3][14/60]	Time 0.11484 (0.64993)	Data 0.01964 (0.54043)	Loss 0.9618 (1.1871)	Prec@1 62.50000 (58.92857)	Prec@5 100.00000 (98.21429)
Epoch: [3][15/60]	Time 0.10441 (0.61356)	Data 0.01152 (0.50517)	Loss 1.3729 (1.1995)	Prec@1 50.00000 (58.33334)	Prec@5 100.00000 (98.33334)
Epoch: [3][16/60]	Time 0.24949 (0.59081)	Data 0.00568 (0.47395)	Loss 1.7643 (1.2348)	Prec@1 50.00000 (57.81250)	Prec@5 100.00000 (98.43750)
Epoch: [3][17/60]	Time 0.15542 (0.56520)	Data 0.00322 (0.44626)	Loss 0.3796 (1.1845)	Prec@1 87.50000 (59.55882)	Prec@5 100.00000 (98.52941)
Epoch: [3][18/60]	Time 0.16037 (0.54271)	Data 0.00965 (0.42201)	Loss 1.9100 (1.2248)	Prec@1 50.00000 (59.02778)	Prec@5 100.00000 (98.61111)
Epoch: [3][19/60]	Time 0.14717 (0.52189)	Data 0.05557 (0.40272)	Loss 0.8097 (1.2030)	Prec@1 75.00000 (59.86842)	Prec@5 100.00000 (98.68421)
Epoch: [3][20/60]	Time 0.13958 (0.50277)	Data 0.00985 (0.38308)	Loss 2.0452 (1.2451)	Prec@1 62.50000 (60.00000)	Prec@5 100.00000 (98.75000)
Epoch: [3][21/60]	Time 0.10574 (0.48387)	Data 0.01036 (0.36533)	Loss 0.4975 (1.2095)	Prec@1 87.50000 (61.30952)	Prec@5 100.00000 (98.80952)
Epoch: [3][22/60]	Time 0.07416 (0.46524)	Data 0.01304 (0.34932)	Loss 0.6346 (1.1833)	Prec@1 75.00000 (61.93182)	Prec@5 100.00000 (98.86364)
Epoch: [3][23/60]	Time 0.12602 (0.45050)	Data 0.02302 (0.33513)	Loss 1.1887 (1.1836)	Prec@1 50.00000 (61.41304)	Prec@5 100.00000 (98.91305)
Epoch: [3][24/60]	Time 0.22306 (0.44102)	Data 0.07145 (0.32414)	Loss 1.5276 (1.1979)	Prec@1 25.00000 (59.89584)	Prec@5 87.50000 (98.43750)
Epoch: [3][25/60]	Time 0.08834 (0.42691)	Data 0.01430 (0.31175)	Loss 0.5649 (1.1726)	Prec@1 87.50000 (61.00000)	Prec@5 100.00000 (98.50000)
Epoch: [3][26/60]	Time 0.08085 (0.41360)	Data 0.00207 (0.29984)	Loss 0.7937 (1.1580)	Prec@1 62.50000 (61.05769)	Prec@5 100.00000 (98.55769)
Epoch: [3][27/60]	Time 0.20771 (0.40598)	Data 0.05450 (0.29075)	Loss 1.2799 (1.1625)	Prec@1 62.50000 (61.11111)	Prec@5 87.50000 (98.14815)
Epoch: [3][28/60]	Time 0.12921 (0.39609)	Data 0.00656 (0.28060)	Loss 0.3728 (1.1343)	Prec@1 87.50000 (62.05357)	Prec@5 100.00000 (98.21429)
Epoch: [3][29/60]	Time 0.14125 (0.38730)	Data 0.00057 (0.27095)	Loss 0.5946 (1.1157)	Prec@1 75.00000 (62.50000)	Prec@5 100.00000 (98.27586)
Epoch: [3][30/60]	Time 0.12001 (0.37839)	Data 0.01583 (0.26244)	Loss 1.2902 (1.1215)	Prec@1 50.00000 (62.08334)	Prec@5 100.00000 (98.33334)
Epoch: [3][31/60]	Time 0.08976 (0.36908)	Data 0.00042 (0.25399)	Loss 3.5993 (1.2015)	Prec@1 12.50000 (60.48387)	Prec@5 100.00000 (98.38709)
Epoch: [3][32/60]	Time 0.05718 (0.35934)	Data 0.00753 (0.24629)	Loss 2.7259 (1.2491)	Prec@1 37.50000 (59.76562)	Prec@5 100.00000 (98.43750)
Epoch: [3][33/60]	Time 0.04430 (0.34979)	Data 0.00178 (0.23888)	Loss 0.4159 (1.2239)	Prec@1 87.50000 (60.60606)	Prec@5 100.00000 (98.48485)
Epoch: [3][34/60]	Time 0.04738 (0.34090)	Data 0.00050 (0.23187)	Loss 2.6551 (1.2660)	Prec@1 37.50000 (59.92647)	Prec@5 100.00000 (98.52941)
Epoch: [3][35/60]	Time 0.03138 (0.33205)	Data 0.00048 (0.22526)	Loss 2.1208 (1.2904)	Prec@1 50.00000 (59.64286)	Prec@5 100.00000 (98.57143)
Epoch: [3][36/60]	Time 0.02408 (0.32350)	Data 0.00071 (0.21902)	Loss 2.3326 (1.3193)	Prec@1 50.00000 (59.37500)	Prec@5 100.00000 (98.61111)
Epoch: [3][37/60]	Time 0.02317 (0.31538)	Data 0.00063 (0.21312)	Loss 2.0118 (1.3380)	Prec@1 62.50000 (59.45946)	Prec@5 100.00000 (98.64865)
Epoch: [3][38/60]	Time 0.02295 (0.30769)	Data 0.00081 (0.20753)	Loss 2.7273 (1.3746)	Prec@1 37.50000 (58.88158)	Prec@5 100.00000 (98.68421)
Epoch: [3][39/60]	Time 0.02286 (0.30038)	Data 0.00083 (0.20223)	Loss 0.3933 (1.3494)	Prec@1 87.50000 (59.61539)	Prec@5 100.00000 (98.71795)
Epoch: [3][40/60]	Time 0.02312 (0.29345)	Data 0.00082 (0.19719)	Loss 1.1067 (1.3434)	Prec@1 50.00000 (59.37500)	Prec@5 100.00000 (98.75000)
Epoch: [3][41/60]	Time 0.02386 (0.28688)	Data 0.00078 (0.19240)	Loss 2.3258 (1.3673)	Prec@1 50.00000 (59.14634)	Prec@5 100.00000 (98.78049)
Epoch: [3][42/60]	Time 0.02360 (0.28061)	Data 0.00046 (0.18783)	Loss 2.1963 (1.3871)	Prec@1 37.50000 (58.63095)	Prec@5 100.00000 (98.80952)
Epoch: [3][43/60]	Time 0.02260 (0.27461)	Data 0.00045 (0.18347)	Loss 1.9274 (1.3996)	Prec@1 62.50000 (58.72093)	Prec@5 100.00000 (98.83721)
Epoch: [3][44/60]	Time 0.02311 (0.26889)	Data 0.00043 (0.17931)	Loss 2.4678 (1.4239)	Prec@1 37.50000 (58.23864)	Prec@5 100.00000 (98.86364)
Epoch: [3][45/60]	Time 0.02351 (0.26344)	Data 0.00044 (0.17534)	Loss 1.3359 (1.4220)	Prec@1 75.00000 (58.61111)	Prec@5 100.00000 (98.88889)
Epoch: [3][46/60]	Time 0.02345 (0.25822)	Data 0.00040 (0.17154)	Loss 2.0851 (1.4364)	Prec@1 62.50000 (58.69565)	Prec@5 100.00000 (98.91305)
Epoch: [3][47/60]	Time 0.02299 (0.25322)	Data 0.00043 (0.16790)	Loss 0.9623 (1.4263)	Prec@1 87.50000 (59.30851)	Prec@5 87.50000 (98.67021)
Epoch: [3][48/60]	Time 0.02292 (0.24842)	Data 0.00044 (0.16441)	Loss 1.9796 (1.4378)	Prec@1 37.50000 (58.85417)	Prec@5 100.00000 (98.69792)
Epoch: [3][49/60]	Time 0.02260 (0.24381)	Data 0.00043 (0.16106)	Loss 1.2272 (1.4335)	Prec@1 50.00000 (58.67347)	Prec@5 100.00000 (98.72449)
Epoch: [3][50/60]	Time 0.02295 (0.23939)	Data 0.00043 (0.15785)	Loss 0.8945 (1.4227)	Prec@1 62.50000 (58.75000)	Prec@5 100.00000 (98.75000)
Epoch: [3][51/60]	Time 0.02329 (0.23516)	Data 0.00041 (0.15476)	Loss 0.6968 (1.4085)	Prec@1 87.50000 (59.31373)	Prec@5 100.00000 (98.77451)
Epoch: [3][52/60]	Time 0.02346 (0.23108)	Data 0.00050 (0.15179)	Loss 1.2421 (1.4053)	Prec@1 62.50000 (59.37500)	Prec@5 100.00000 (98.79808)
Epoch: [3][53/60]	Time 0.02251 (0.22715)	Data 0.00045 (0.14894)	Loss 0.8728 (1.3953)	Prec@1 62.50000 (59.43396)	Prec@5 100.00000 (98.82076)
Epoch: [3][54/60]	Time 0.02457 (0.22340)	Data 0.00041 (0.14619)	Loss 2.0813 (1.4080)	Prec@1 37.50000 (59.02778)	Prec@5 100.00000 (98.84259)
Epoch: [3][55/60]	Time 0.02280 (0.21975)	Data 0.00040 (0.14354)	Loss 1.5042 (1.4097)	Prec@1 75.00000 (59.31818)	Prec@5 87.50000 (98.63636)
Epoch: [3][56/60]	Time 0.02331 (0.21624)	Data 0.00042 (0.14098)	Loss 1.4426 (1.4103)	Prec@1 62.50000 (59.37500)	Prec@5 100.00000 (98.66072)
Epoch: [3][57/60]	Time 0.02280 (0.21285)	Data 0.00041 (0.13852)	Loss 1.6334 (1.4142)	Prec@1 50.00000 (59.21053)	Prec@5 100.00000 (98.68421)
Epoch: [3][58/60]	Time 0.02259 (0.20957)	Data 0.00040 (0.13613)	Loss 2.1759 (1.4273)	Prec@1 37.50000 (58.83621)	Prec@5 100.00000 (98.70689)
Epoch: [3][59/60]	Time 0.02271 (0.20640)	Data 0.00045 (0.13384)	Loss 2.0508 (1.4379)	Prec@1 50.00000 (58.68644)	Prec@5 100.00000 (98.72881)
Epoch: [3][60/60]	Time 0.02315 (0.20335)	Data 0.00058 (0.13161)	Loss 0.7634 (1.4267)	Prec@1 75.00000 (58.95834)	Prec@5 100.00000 (98.75001)
train at epoch 4
train at epoch 4
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [4][0/272]	 lr: 0.04000	Time 7.133 (7.133)	Data 6.070 (6.070)	Loss 0.5947 (0.5947)	Prec@1 81.25000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [4][10/272]	 lr: 0.04000	Time 0.414 (1.343)	Data 0.127 (0.883)	Loss 0.6343 (0.6817)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (98.57955)
Epoch: [4][20/272]	 lr: 0.04000	Time 0.454 (0.898)	Data 0.125 (0.524)	Loss 0.8283 (0.7293)	Prec@1 71.87500 (74.40476)	Prec@5 96.87500 (98.36310)
Epoch: [4][30/272]	 lr: 0.04000	Time 0.396 (0.747)	Data 0.129 (0.395)	Loss 1.1008 (0.7258)	Prec@1 50.00000 (73.89113)	Prec@5 100.00000 (98.38709)
Epoch: [4][40/272]	 lr: 0.04000	Time 0.390 (0.678)	Data 0.125 (0.330)	Loss 1.0703 (0.7227)	Prec@1 62.50000 (73.93292)	Prec@5 100.00000 (98.62804)
Epoch: [4][50/272]	 lr: 0.04000	Time 0.411 (0.635)	Data 0.137 (0.290)	Loss 0.6491 (0.7076)	Prec@1 75.00000 (74.14216)	Prec@5 100.00000 (98.71324)
Epoch: [4][60/272]	 lr: 0.04000	Time 0.382 (0.601)	Data 0.138 (0.264)	Loss 0.7791 (0.7166)	Prec@1 71.87500 (73.30943)	Prec@5 100.00000 (98.61680)
Epoch: [4][70/272]	 lr: 0.04000	Time 0.446 (0.579)	Data 0.126 (0.244)	Loss 1.1840 (0.7493)	Prec@1 71.87500 (72.31514)	Prec@5 96.87500 (98.41549)
Epoch: [4][80/272]	 lr: 0.04000	Time 0.588 (0.562)	Data 0.127 (0.230)	Loss 0.6256 (0.7435)	Prec@1 75.00000 (72.64661)	Prec@5 100.00000 (98.49537)
Epoch: [4][90/272]	 lr: 0.04000	Time 0.456 (0.546)	Data 0.109 (0.218)	Loss 0.4128 (0.7517)	Prec@1 87.50000 (72.28709)	Prec@5 100.00000 (98.52335)
Epoch: [4][100/272]	 lr: 0.04000	Time 0.475 (0.536)	Data 0.109 (0.209)	Loss 0.8528 (0.7516)	Prec@1 59.37500 (72.21535)	Prec@5 100.00000 (98.45297)
Epoch: [4][110/272]	 lr: 0.04000	Time 0.426 (0.528)	Data 0.127 (0.202)	Loss 0.4159 (0.7377)	Prec@1 87.50000 (72.80405)	Prec@5 100.00000 (98.45158)
Epoch: [4][120/272]	 lr: 0.04000	Time 0.481 (0.522)	Data 0.128 (0.195)	Loss 0.6633 (0.7257)	Prec@1 71.87500 (73.42458)	Prec@5 100.00000 (98.52789)
Epoch: [4][130/272]	 lr: 0.04000	Time 0.511 (0.517)	Data 0.120 (0.190)	Loss 0.9635 (0.7253)	Prec@1 71.87500 (73.28244)	Prec@5 100.00000 (98.47328)
Epoch: [4][140/272]	 lr: 0.04000	Time 0.402 (0.514)	Data 0.125 (0.186)	Loss 0.5521 (0.7249)	Prec@1 75.00000 (73.49290)	Prec@5 100.00000 (98.51507)
Epoch: [4][150/272]	 lr: 0.04000	Time 0.406 (0.510)	Data 0.125 (0.182)	Loss 0.8800 (0.7304)	Prec@1 65.62500 (73.30298)	Prec@5 93.75000 (98.40646)
Epoch: [4][160/272]	 lr: 0.04000	Time 0.431 (0.506)	Data 0.107 (0.179)	Loss 0.5061 (0.7263)	Prec@1 78.12500 (73.29192)	Prec@5 100.00000 (98.48602)
Epoch: [4][170/272]	 lr: 0.04000	Time 0.456 (0.503)	Data 0.128 (0.176)	Loss 0.4354 (0.7200)	Prec@1 87.50000 (73.68421)	Prec@5 100.00000 (98.51974)
Epoch: [4][180/272]	 lr: 0.04000	Time 0.432 (0.500)	Data 0.117 (0.173)	Loss 0.5489 (0.7235)	Prec@1 87.50000 (73.58426)	Prec@5 100.00000 (98.53246)
Epoch: [4][190/272]	 lr: 0.04000	Time 0.561 (0.498)	Data 0.127 (0.171)	Loss 0.5762 (0.7172)	Prec@1 84.37500 (73.82199)	Prec@5 100.00000 (98.52749)
Epoch: [4][200/272]	 lr: 0.04000	Time 0.362 (0.494)	Data 0.129 (0.169)	Loss 0.8128 (0.7143)	Prec@1 68.75000 (73.97388)	Prec@5 96.87500 (98.49191)
Epoch: [4][210/272]	 lr: 0.04000	Time 0.428 (0.491)	Data 0.133 (0.167)	Loss 0.5163 (0.7093)	Prec@1 84.37500 (74.17062)	Prec@5 100.00000 (98.51896)
Epoch: [4][220/272]	 lr: 0.04000	Time 0.400 (0.488)	Data 0.126 (0.165)	Loss 0.8893 (0.7050)	Prec@1 75.00000 (74.39197)	Prec@5 100.00000 (98.57184)
Epoch: [4][230/272]	 lr: 0.04000	Time 0.409 (0.486)	Data 0.123 (0.163)	Loss 0.6841 (0.6989)	Prec@1 75.00000 (74.75649)	Prec@5 96.87500 (98.59307)
Epoch: [4][240/272]	 lr: 0.04000	Time 0.252 (0.484)	Data 0.114 (0.162)	Loss 0.5062 (0.6976)	Prec@1 81.25000 (74.83144)	Prec@5 100.00000 (98.59959)
Epoch: [4][250/272]	 lr: 0.04000	Time 0.236 (0.474)	Data 0.127 (0.160)	Loss 0.5621 (0.6916)	Prec@1 84.37500 (75.09960)	Prec@5 96.87500 (98.61803)
Epoch: [4][260/272]	 lr: 0.04000	Time 0.240 (0.465)	Data 0.129 (0.159)	Loss 0.8932 (0.7001)	Prec@1 65.62500 (74.78448)	Prec@5 96.87500 (98.58717)
Epoch: [4][270/272]	 lr: 0.04000	Time 0.239 (0.457)	Data 0.128 (0.158)	Loss 0.9428 (0.6991)	Prec@1 59.37500 (74.74631)	Prec@5 93.75000 (98.57011)
validation at epoch 4
validation at epoch 4
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [4][1/60]	Time 7.16737 (7.16737)	Data 7.06401 (7.06401)	Loss 0.4157 (0.4157)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [4][2/60]	Time 0.12801 (3.64769)	Data 0.01195 (3.53798)	Loss 0.4072 (0.4114)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [4][3/60]	Time 0.39742 (2.56426)	Data 0.29695 (2.45764)	Loss 1.2835 (0.7021)	Prec@1 75.00000 (83.33334)	Prec@5 75.00000 (91.66667)
Epoch: [4][4/60]	Time 0.09311 (1.94648)	Data 0.01292 (1.84646)	Loss 0.4879 (0.6486)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (93.75000)
Epoch: [4][5/60]	Time 0.08722 (1.57463)	Data 0.01182 (1.47953)	Loss 1.0490 (0.7287)	Prec@1 75.00000 (82.50000)	Prec@5 87.50000 (92.50000)
Epoch: [4][6/60]	Time 0.23013 (1.35054)	Data 0.02003 (1.23628)	Loss 0.1057 (0.6248)	Prec@1 100.00000 (85.41667)	Prec@5 100.00000 (93.75000)
Epoch: [4][7/60]	Time 0.24946 (1.19325)	Data 0.06440 (1.06887)	Loss 0.4917 (0.6058)	Prec@1 87.50000 (85.71429)	Prec@5 100.00000 (94.64286)
Epoch: [4][8/60]	Time 0.22931 (1.07275)	Data 0.05000 (0.94151)	Loss 0.7241 (0.6206)	Prec@1 62.50000 (82.81250)	Prec@5 100.00000 (95.31250)
Epoch: [4][9/60]	Time 0.13526 (0.96859)	Data 0.00855 (0.83785)	Loss 0.9862 (0.6612)	Prec@1 62.50000 (80.55556)	Prec@5 100.00000 (95.83334)
Epoch: [4][10/60]	Time 0.07619 (0.87935)	Data 0.00056 (0.75412)	Loss 0.4643 (0.6415)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (96.25000)
Epoch: [4][11/60]	Time 0.12549 (0.81082)	Data 0.03159 (0.68844)	Loss 0.5419 (0.6325)	Prec@1 75.00000 (80.68182)	Prec@5 100.00000 (96.59091)
Epoch: [4][12/60]	Time 0.16574 (0.75706)	Data 0.00918 (0.63183)	Loss 0.2226 (0.5983)	Prec@1 100.00000 (82.29167)	Prec@5 100.00000 (96.87500)
Epoch: [4][13/60]	Time 0.12658 (0.70856)	Data 0.01225 (0.58417)	Loss 1.1312 (0.6393)	Prec@1 75.00000 (81.73077)	Prec@5 87.50000 (96.15385)
Epoch: [4][14/60]	Time 0.23711 (0.67489)	Data 0.05320 (0.54624)	Loss 0.8615 (0.6552)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (96.42857)
Epoch: [4][15/60]	Time 0.11701 (0.63769)	Data 0.04809 (0.51303)	Loss 0.5329 (0.6470)	Prec@1 87.50000 (81.66667)	Prec@5 100.00000 (96.66667)
Epoch: [4][16/60]	Time 0.08862 (0.60338)	Data 0.00045 (0.48100)	Loss 1.9883 (0.7309)	Prec@1 50.00000 (79.68750)	Prec@5 100.00000 (96.87500)
Epoch: [4][17/60]	Time 0.11787 (0.57482)	Data 0.00849 (0.45320)	Loss 0.7434 (0.7316)	Prec@1 87.50000 (80.14706)	Prec@5 100.00000 (97.05882)
Epoch: [4][18/60]	Time 0.10318 (0.54862)	Data 0.00467 (0.42828)	Loss 1.9893 (0.8015)	Prec@1 50.00000 (78.47222)	Prec@5 100.00000 (97.22222)
Epoch: [4][19/60]	Time 0.30574 (0.53583)	Data 0.08053 (0.40998)	Loss 0.4287 (0.7819)	Prec@1 87.50000 (78.94737)	Prec@5 100.00000 (97.36842)
Epoch: [4][20/60]	Time 0.08535 (0.51331)	Data 0.00077 (0.38952)	Loss 2.0807 (0.8468)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (97.50000)
Epoch: [4][21/60]	Time 0.20820 (0.49878)	Data 0.00147 (0.37104)	Loss 1.1064 (0.8592)	Prec@1 62.50000 (77.38095)	Prec@5 100.00000 (97.61905)
Epoch: [4][22/60]	Time 0.10538 (0.48090)	Data 0.04002 (0.35600)	Loss 0.7666 (0.8549)	Prec@1 62.50000 (76.70454)	Prec@5 100.00000 (97.72727)
Epoch: [4][23/60]	Time 0.11295 (0.46490)	Data 0.01620 (0.34122)	Loss 1.2863 (0.8737)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (97.82609)
Epoch: [4][24/60]	Time 0.09347 (0.44942)	Data 0.00224 (0.32710)	Loss 1.6568 (0.9063)	Prec@1 37.50000 (74.47917)	Prec@5 100.00000 (97.91667)
Epoch: [4][25/60]	Time 0.12687 (0.43652)	Data 0.01140 (0.31447)	Loss 1.1538 (0.9162)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (98.00000)
Epoch: [4][26/60]	Time 0.06769 (0.42234)	Data 0.00346 (0.30251)	Loss 0.5505 (0.9022)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.07693)
Epoch: [4][27/60]	Time 0.20399 (0.41425)	Data 0.06908 (0.29386)	Loss 1.0884 (0.9091)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.14815)
Epoch: [4][28/60]	Time 0.13943 (0.40443)	Data 0.00685 (0.28361)	Loss 0.5688 (0.8969)	Prec@1 87.50000 (75.44643)	Prec@5 100.00000 (98.21429)
Epoch: [4][29/60]	Time 0.14960 (0.39565)	Data 0.00054 (0.27385)	Loss 0.4622 (0.8819)	Prec@1 87.50000 (75.86207)	Prec@5 100.00000 (98.27586)
Epoch: [4][30/60]	Time 0.13042 (0.38681)	Data 0.01568 (0.26524)	Loss 1.2339 (0.8937)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (98.33334)
Epoch: [4][31/60]	Time 0.08723 (0.37714)	Data 0.00045 (0.25670)	Loss 3.6983 (0.9841)	Prec@1 25.00000 (73.79032)	Prec@5 87.50000 (97.98387)
Epoch: [4][32/60]	Time 0.04875 (0.36688)	Data 0.00056 (0.24870)	Loss 2.7013 (1.0378)	Prec@1 50.00000 (73.04688)	Prec@5 100.00000 (98.04688)
Epoch: [4][33/60]	Time 0.04009 (0.35698)	Data 0.00083 (0.24119)	Loss 0.0562 (1.0080)	Prec@1 100.00000 (73.86364)	Prec@5 100.00000 (98.10606)
Epoch: [4][34/60]	Time 0.04225 (0.34772)	Data 0.00341 (0.23419)	Loss 2.5682 (1.0539)	Prec@1 50.00000 (73.16177)	Prec@5 100.00000 (98.16177)
Epoch: [4][35/60]	Time 0.03055 (0.33866)	Data 0.00040 (0.22751)	Loss 1.7179 (1.0729)	Prec@1 62.50000 (72.85714)	Prec@5 87.50000 (97.85715)
Epoch: [4][36/60]	Time 0.02817 (0.33003)	Data 0.00039 (0.22121)	Loss 1.7221 (1.0909)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (97.91666)
Epoch: [4][37/60]	Time 0.03079 (0.32195)	Data 0.00236 (0.21529)	Loss 2.3772 (1.1257)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (97.97298)
Epoch: [4][38/60]	Time 0.02983 (0.31426)	Data 0.00202 (0.20968)	Loss 3.0765 (1.1770)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (98.02631)
Epoch: [4][39/60]	Time 0.02995 (0.30697)	Data 0.00152 (0.20434)	Loss 0.1054 (1.1496)	Prec@1 100.00000 (72.43590)	Prec@5 100.00000 (98.07693)
Epoch: [4][40/60]	Time 0.03197 (0.30009)	Data 0.00391 (0.19933)	Loss 0.3288 (1.1290)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.12500)
Epoch: [4][41/60]	Time 0.02821 (0.29346)	Data 0.00196 (0.19452)	Loss 2.0454 (1.1514)	Prec@1 50.00000 (71.95122)	Prec@5 100.00000 (98.17073)
Epoch: [4][42/60]	Time 0.02527 (0.28708)	Data 0.00044 (0.18990)	Loss 2.0007 (1.1716)	Prec@1 50.00000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [4][43/60]	Time 0.02382 (0.28095)	Data 0.00044 (0.18549)	Loss 1.9991 (1.1909)	Prec@1 62.50000 (71.22093)	Prec@5 100.00000 (98.25581)
Epoch: [4][44/60]	Time 0.02263 (0.27508)	Data 0.00047 (0.18128)	Loss 2.5940 (1.2227)	Prec@1 50.00000 (70.73864)	Prec@5 100.00000 (98.29546)
Epoch: [4][45/60]	Time 0.02271 (0.26947)	Data 0.00043 (0.17727)	Loss 1.2411 (1.2232)	Prec@1 75.00000 (70.83334)	Prec@5 100.00000 (98.33334)
Epoch: [4][46/60]	Time 0.02269 (0.26411)	Data 0.00042 (0.17342)	Loss 2.5564 (1.2521)	Prec@1 50.00000 (70.38044)	Prec@5 87.50000 (98.09783)
Epoch: [4][47/60]	Time 0.02303 (0.25898)	Data 0.00046 (0.16974)	Loss 0.9467 (1.2456)	Prec@1 75.00000 (70.47872)	Prec@5 87.50000 (97.87234)
Epoch: [4][48/60]	Time 0.02320 (0.25407)	Data 0.00049 (0.16621)	Loss 1.1947 (1.2446)	Prec@1 37.50000 (69.79167)	Prec@5 100.00000 (97.91667)
Epoch: [4][49/60]	Time 0.02210 (0.24933)	Data 0.00043 (0.16283)	Loss 1.8936 (1.2578)	Prec@1 37.50000 (69.13265)	Prec@5 100.00000 (97.95918)
Epoch: [4][50/60]	Time 0.02243 (0.24480)	Data 0.00040 (0.15958)	Loss 0.1525 (1.2357)	Prec@1 100.00000 (69.75000)	Prec@5 100.00000 (98.00000)
Epoch: [4][51/60]	Time 0.02250 (0.24044)	Data 0.00042 (0.15646)	Loss 0.9277 (1.2297)	Prec@1 62.50000 (69.60785)	Prec@5 100.00000 (98.03922)
Epoch: [4][52/60]	Time 0.02309 (0.23626)	Data 0.00042 (0.15346)	Loss 0.9194 (1.2237)	Prec@1 62.50000 (69.47115)	Prec@5 100.00000 (98.07693)
Epoch: [4][53/60]	Time 0.02327 (0.23224)	Data 0.00048 (0.15057)	Loss 1.2285 (1.2238)	Prec@1 75.00000 (69.57547)	Prec@5 100.00000 (98.11321)
Epoch: [4][54/60]	Time 0.02255 (0.22836)	Data 0.00042 (0.14779)	Loss 2.6705 (1.2506)	Prec@1 12.50000 (68.51852)	Prec@5 100.00000 (98.14815)
Epoch: [4][55/60]	Time 0.02242 (0.22461)	Data 0.00044 (0.14511)	Loss 1.2476 (1.2505)	Prec@1 50.00000 (68.18182)	Prec@5 87.50000 (97.95454)
Epoch: [4][56/60]	Time 0.02359 (0.22102)	Data 0.00055 (0.14253)	Loss 1.6042 (1.2569)	Prec@1 62.50000 (68.08036)	Prec@5 100.00000 (97.99107)
Epoch: [4][57/60]	Time 0.02274 (0.21754)	Data 0.00044 (0.14004)	Loss 1.6234 (1.2633)	Prec@1 50.00000 (67.76316)	Prec@5 100.00000 (98.02631)
Epoch: [4][58/60]	Time 0.02351 (0.21420)	Data 0.00055 (0.13764)	Loss 1.7823 (1.2722)	Prec@1 75.00000 (67.88793)	Prec@5 100.00000 (98.06034)
Epoch: [4][59/60]	Time 0.02201 (0.21094)	Data 0.00044 (0.13531)	Loss 2.6802 (1.2961)	Prec@1 37.50000 (67.37288)	Prec@5 100.00000 (98.09322)
Epoch: [4][60/60]	Time 0.02286 (0.20781)	Data 0.00049 (0.13306)	Loss 0.9986 (1.2911)	Prec@1 75.00000 (67.50000)	Prec@5 100.00000 (98.12501)
train at epoch 5
train at epoch 5
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [5][0/272]	 lr: 0.04000	Time 8.797 (8.797)	Data 7.692 (7.692)	Loss 0.9894 (0.9894)	Prec@1 59.37500 (59.37500)	Prec@5 100.00000 (100.00000)
Epoch: [5][10/272]	 lr: 0.04000	Time 0.410 (1.286)	Data 0.129 (0.811)	Loss 0.6586 (0.5784)	Prec@1 71.87500 (79.82954)	Prec@5 100.00000 (99.14773)
Epoch: [5][20/272]	 lr: 0.04000	Time 0.479 (0.868)	Data 0.150 (0.487)	Loss 0.5190 (0.5765)	Prec@1 84.37500 (78.86905)	Prec@5 100.00000 (99.40476)
Epoch: [5][30/272]	 lr: 0.04000	Time 0.414 (0.733)	Data 0.128 (0.372)	Loss 0.8155 (0.5765)	Prec@1 68.75000 (79.03226)	Prec@5 96.87500 (99.29435)
Epoch: [5][40/272]	 lr: 0.04000	Time 0.533 (0.665)	Data 0.127 (0.312)	Loss 0.6036 (0.5844)	Prec@1 84.37500 (78.88719)	Prec@5 96.87500 (99.16158)
Epoch: [5][50/272]	 lr: 0.04000	Time 0.264 (0.620)	Data 0.129 (0.277)	Loss 0.7217 (0.6286)	Prec@1 78.12500 (77.32844)	Prec@5 100.00000 (98.89706)
Epoch: [5][60/272]	 lr: 0.04000	Time 0.345 (0.588)	Data 0.129 (0.253)	Loss 0.5425 (0.6226)	Prec@1 84.37500 (77.35655)	Prec@5 100.00000 (98.92417)
Epoch: [5][70/272]	 lr: 0.04000	Time 0.476 (0.570)	Data 0.126 (0.236)	Loss 0.6037 (0.6554)	Prec@1 81.25000 (76.62852)	Prec@5 100.00000 (98.81161)
Epoch: [5][80/272]	 lr: 0.04000	Time 0.462 (0.555)	Data 0.126 (0.222)	Loss 1.2864 (0.6659)	Prec@1 46.87500 (76.58179)	Prec@5 100.00000 (98.84259)
Epoch: [5][90/272]	 lr: 0.04000	Time 0.455 (0.543)	Data 0.129 (0.212)	Loss 0.5345 (0.6565)	Prec@1 84.37500 (76.75137)	Prec@5 96.87500 (98.90110)
Epoch: [5][100/272]	 lr: 0.04000	Time 0.397 (0.533)	Data 0.129 (0.204)	Loss 0.5093 (0.6620)	Prec@1 84.37500 (76.45421)	Prec@5 100.00000 (98.85519)
Epoch: [5][110/272]	 lr: 0.04000	Time 0.462 (0.524)	Data 0.126 (0.197)	Loss 0.7355 (0.6754)	Prec@1 78.12500 (76.12613)	Prec@5 100.00000 (98.81757)
Epoch: [5][120/272]	 lr: 0.04000	Time 0.414 (0.517)	Data 0.129 (0.192)	Loss 0.4754 (0.6752)	Prec@1 81.25000 (76.16219)	Prec@5 96.87500 (98.83781)
Epoch: [5][130/272]	 lr: 0.04000	Time 0.369 (0.511)	Data 0.125 (0.187)	Loss 0.4265 (0.6703)	Prec@1 87.50000 (76.16889)	Prec@5 100.00000 (98.87881)
Epoch: [5][140/272]	 lr: 0.04000	Time 0.479 (0.507)	Data 0.126 (0.183)	Loss 0.6131 (0.6675)	Prec@1 78.12500 (76.37411)	Prec@5 96.87500 (98.86967)
Epoch: [5][150/272]	 lr: 0.04000	Time 0.502 (0.502)	Data 0.142 (0.180)	Loss 0.3756 (0.6674)	Prec@1 87.50000 (76.17963)	Prec@5 100.00000 (98.92384)
Epoch: [5][160/272]	 lr: 0.04000	Time 0.380 (0.499)	Data 0.129 (0.177)	Loss 0.8754 (0.6706)	Prec@1 68.75000 (76.12578)	Prec@5 100.00000 (98.95187)
Epoch: [5][170/272]	 lr: 0.04000	Time 0.375 (0.495)	Data 0.128 (0.174)	Loss 0.5075 (0.6668)	Prec@1 84.37500 (76.31579)	Prec@5 96.87500 (98.94006)
Epoch: [5][180/272]	 lr: 0.04000	Time 0.477 (0.494)	Data 0.140 (0.172)	Loss 0.4354 (0.6642)	Prec@1 90.62500 (76.46754)	Prec@5 100.00000 (98.96409)
Epoch: [5][190/272]	 lr: 0.04000	Time 0.483 (0.490)	Data 0.129 (0.170)	Loss 0.8072 (0.6632)	Prec@1 75.00000 (76.63612)	Prec@5 96.87500 (98.96924)
Epoch: [5][200/272]	 lr: 0.04000	Time 0.351 (0.489)	Data 0.125 (0.168)	Loss 0.6833 (0.6572)	Prec@1 68.75000 (76.83457)	Prec@5 100.00000 (98.94279)
Epoch: [5][210/272]	 lr: 0.04000	Time 0.430 (0.486)	Data 0.127 (0.166)	Loss 0.4283 (0.6557)	Prec@1 90.62500 (76.77725)	Prec@5 100.00000 (98.94846)
Epoch: [5][220/272]	 lr: 0.04000	Time 0.493 (0.485)	Data 0.128 (0.164)	Loss 0.6220 (0.6528)	Prec@1 71.87500 (76.86652)	Prec@5 100.00000 (98.93948)
Epoch: [5][230/272]	 lr: 0.04000	Time 0.519 (0.483)	Data 0.127 (0.163)	Loss 0.4408 (0.6496)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (98.94480)
Epoch: [5][240/272]	 lr: 0.04000	Time 0.362 (0.481)	Data 0.121 (0.161)	Loss 0.5152 (0.6468)	Prec@1 84.37500 (77.21733)	Prec@5 96.87500 (98.96266)
Epoch: [5][250/272]	 lr: 0.04000	Time 0.240 (0.471)	Data 0.128 (0.160)	Loss 0.4580 (0.6459)	Prec@1 87.50000 (77.21614)	Prec@5 100.00000 (98.99154)
Epoch: [5][260/272]	 lr: 0.04000	Time 0.236 (0.463)	Data 0.128 (0.159)	Loss 1.0685 (0.6470)	Prec@1 53.12500 (77.07136)	Prec@5 100.00000 (99.03017)
Epoch: [5][270/272]	 lr: 0.04000	Time 0.238 (0.454)	Data 0.128 (0.157)	Loss 0.7964 (0.6455)	Prec@1 59.37500 (77.13330)	Prec@5 96.87500 (99.00830)
validation at epoch 5
validation at epoch 5
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [5][1/60]	Time 6.56370 (6.56370)	Data 6.39281 (6.39281)	Loss 0.6767 (0.6767)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [5][2/60]	Time 0.20139 (3.38254)	Data 0.00062 (3.19672)	Loss 0.2854 (0.4811)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [5][3/60]	Time 0.10030 (2.28846)	Data 0.00053 (2.13132)	Loss 1.2360 (0.7327)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [5][4/60]	Time 0.33506 (1.80011)	Data 0.00834 (1.60058)	Loss 1.1887 (0.8467)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (96.87500)
Epoch: [5][5/60]	Time 0.33132 (1.50635)	Data 0.06186 (1.29283)	Loss 1.2171 (0.9208)	Prec@1 37.50000 (67.50000)	Prec@5 100.00000 (97.50000)
Epoch: [5][6/60]	Time 0.22769 (1.29324)	Data 0.00098 (1.07752)	Loss 0.3791 (0.8305)	Prec@1 87.50000 (70.83334)	Prec@5 100.00000 (97.91667)
Epoch: [5][7/60]	Time 0.24907 (1.14408)	Data 0.19035 (0.95079)	Loss 0.8935 (0.8395)	Prec@1 62.50000 (69.64286)	Prec@5 100.00000 (98.21429)
Epoch: [5][8/60]	Time 0.26834 (1.03461)	Data 0.19920 (0.85684)	Loss 0.5001 (0.7971)	Prec@1 75.00000 (70.31250)	Prec@5 100.00000 (98.43750)
Epoch: [5][9/60]	Time 0.09616 (0.93034)	Data 0.01184 (0.76295)	Loss 0.6479 (0.7805)	Prec@1 75.00000 (70.83334)	Prec@5 100.00000 (98.61111)
Epoch: [5][10/60]	Time 0.09895 (0.84720)	Data 0.01687 (0.68834)	Loss 0.3958 (0.7420)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [5][11/60]	Time 0.10732 (0.77994)	Data 0.01391 (0.62703)	Loss 0.6618 (0.7347)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [5][12/60]	Time 0.08353 (0.72190)	Data 0.00323 (0.57505)	Loss 0.9566 (0.7532)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.95834)
Epoch: [5][13/60]	Time 0.06562 (0.67142)	Data 0.00083 (0.53088)	Loss 1.7003 (0.8261)	Prec@1 37.50000 (69.23077)	Prec@5 87.50000 (98.07693)
Epoch: [5][14/60]	Time 0.04153 (0.62643)	Data 0.00057 (0.49300)	Loss 0.5927 (0.8094)	Prec@1 75.00000 (69.64286)	Prec@5 100.00000 (98.21429)
Epoch: [5][15/60]	Time 0.10451 (0.59163)	Data 0.00073 (0.46018)	Loss 0.4574 (0.7859)	Prec@1 75.00000 (70.00000)	Prec@5 100.00000 (98.33334)
Epoch: [5][16/60]	Time 0.25896 (0.57084)	Data 0.06733 (0.43563)	Loss 1.7850 (0.8484)	Prec@1 50.00000 (68.75000)	Prec@5 100.00000 (98.43750)
Epoch: [5][17/60]	Time 0.14658 (0.54588)	Data 0.00068 (0.41004)	Loss 2.0200 (0.9173)	Prec@1 37.50000 (66.91177)	Prec@5 100.00000 (98.52941)
Epoch: [5][18/60]	Time 0.09304 (0.52073)	Data 0.01404 (0.38804)	Loss 1.2159 (0.9339)	Prec@1 75.00000 (67.36111)	Prec@5 100.00000 (98.61111)
Epoch: [5][19/60]	Time 0.18867 (0.50325)	Data 0.00615 (0.36794)	Loss 2.1061 (0.9956)	Prec@1 62.50000 (67.10526)	Prec@5 87.50000 (98.02631)
Epoch: [5][20/60]	Time 0.15986 (0.48608)	Data 0.00075 (0.34958)	Loss 2.4385 (1.0677)	Prec@1 50.00000 (66.25000)	Prec@5 87.50000 (97.50000)
Epoch: [5][21/60]	Time 0.14554 (0.46986)	Data 0.02218 (0.33399)	Loss 0.4283 (1.0373)	Prec@1 87.50000 (67.26191)	Prec@5 100.00000 (97.61905)
Epoch: [5][22/60]	Time 0.16255 (0.45590)	Data 0.02551 (0.31997)	Loss 1.7621 (1.0702)	Prec@1 62.50000 (67.04546)	Prec@5 100.00000 (97.72727)
Epoch: [5][23/60]	Time 0.17061 (0.44349)	Data 0.01873 (0.30687)	Loss 2.8293 (1.1467)	Prec@1 37.50000 (65.76087)	Prec@5 87.50000 (97.28261)
Epoch: [5][24/60]	Time 0.14890 (0.43122)	Data 0.02492 (0.29512)	Loss 1.2741 (1.1520)	Prec@1 50.00000 (65.10417)	Prec@5 100.00000 (97.39584)
Epoch: [5][25/60]	Time 0.24134 (0.42362)	Data 0.02759 (0.28442)	Loss 2.2036 (1.1941)	Prec@1 50.00000 (64.50000)	Prec@5 87.50000 (97.00000)
Epoch: [5][26/60]	Time 0.09584 (0.41102)	Data 0.00733 (0.27376)	Loss 3.4291 (1.2801)	Prec@1 25.00000 (62.98077)	Prec@5 75.00000 (96.15385)
Epoch: [5][27/60]	Time 0.10158 (0.39955)	Data 0.01471 (0.26417)	Loss 2.0859 (1.3099)	Prec@1 50.00000 (62.50000)	Prec@5 87.50000 (95.83334)
Epoch: [5][28/60]	Time 0.09935 (0.38883)	Data 0.00075 (0.25476)	Loss 2.3269 (1.3462)	Prec@1 50.00000 (62.05357)	Prec@5 75.00000 (95.08929)
Epoch: [5][29/60]	Time 0.11258 (0.37931)	Data 0.01342 (0.24644)	Loss 2.1820 (1.3750)	Prec@1 50.00000 (61.63793)	Prec@5 100.00000 (95.25862)
Epoch: [5][30/60]	Time 0.11130 (0.37037)	Data 0.00256 (0.23831)	Loss 1.6986 (1.3858)	Prec@1 62.50000 (61.66667)	Prec@5 100.00000 (95.41667)
Epoch: [5][31/60]	Time 0.09108 (0.36136)	Data 0.00351 (0.23074)	Loss 2.3116 (1.4157)	Prec@1 37.50000 (60.88710)	Prec@5 100.00000 (95.56451)
Epoch: [5][32/60]	Time 0.07293 (0.35235)	Data 0.00054 (0.22354)	Loss 2.5497 (1.4511)	Prec@1 37.50000 (60.15625)	Prec@5 100.00000 (95.70312)
Epoch: [5][33/60]	Time 0.04062 (0.34290)	Data 0.00085 (0.21679)	Loss 0.3526 (1.4178)	Prec@1 87.50000 (60.98485)	Prec@5 100.00000 (95.83334)
Epoch: [5][34/60]	Time 0.05649 (0.33448)	Data 0.00061 (0.21044)	Loss 1.2470 (1.4128)	Prec@1 62.50000 (61.02941)	Prec@5 100.00000 (95.95588)
Epoch: [5][35/60]	Time 0.03663 (0.32597)	Data 0.00046 (0.20444)	Loss 0.8219 (1.3959)	Prec@1 62.50000 (61.07143)	Prec@5 100.00000 (96.07143)
Epoch: [5][36/60]	Time 0.03008 (0.31775)	Data 0.00059 (0.19877)	Loss 0.7499 (1.3780)	Prec@1 62.50000 (61.11111)	Prec@5 100.00000 (96.18056)
Epoch: [5][37/60]	Time 0.02964 (0.30996)	Data 0.00071 (0.19342)	Loss 0.9262 (1.3658)	Prec@1 75.00000 (61.48649)	Prec@5 100.00000 (96.28378)
Epoch: [5][38/60]	Time 0.02919 (0.30258)	Data 0.00055 (0.18835)	Loss 1.2347 (1.3623)	Prec@1 75.00000 (61.84211)	Prec@5 100.00000 (96.38158)
Epoch: [5][39/60]	Time 0.02769 (0.29553)	Data 0.00052 (0.18353)	Loss 0.4270 (1.3383)	Prec@1 75.00000 (62.17949)	Prec@5 100.00000 (96.47436)
Epoch: [5][40/60]	Time 0.02926 (0.28887)	Data 0.00050 (0.17895)	Loss 0.2385 (1.3108)	Prec@1 87.50000 (62.81250)	Prec@5 100.00000 (96.56250)
Epoch: [5][41/60]	Time 0.02795 (0.28251)	Data 0.00052 (0.17460)	Loss 1.5439 (1.3165)	Prec@1 62.50000 (62.80487)	Prec@5 100.00000 (96.64634)
Epoch: [5][42/60]	Time 0.02929 (0.27648)	Data 0.00043 (0.17045)	Loss 0.5941 (1.2993)	Prec@1 75.00000 (63.09524)	Prec@5 100.00000 (96.72619)
Epoch: [5][43/60]	Time 0.02837 (0.27071)	Data 0.00047 (0.16650)	Loss 1.0700 (1.2940)	Prec@1 75.00000 (63.37209)	Prec@5 100.00000 (96.80232)
Epoch: [5][44/60]	Time 0.02813 (0.26519)	Data 0.00053 (0.16273)	Loss 2.2744 (1.3163)	Prec@1 37.50000 (62.78409)	Prec@5 100.00000 (96.87500)
Epoch: [5][45/60]	Time 0.02799 (0.25992)	Data 0.00082 (0.15913)	Loss 1.1290 (1.3121)	Prec@1 37.50000 (62.22223)	Prec@5 100.00000 (96.94445)
Epoch: [5][46/60]	Time 0.03077 (0.25494)	Data 0.00223 (0.15572)	Loss 0.7198 (1.2992)	Prec@1 62.50000 (62.22826)	Prec@5 100.00000 (97.01087)
Epoch: [5][47/60]	Time 0.02845 (0.25012)	Data 0.00092 (0.15243)	Loss 1.1225 (1.2955)	Prec@1 50.00000 (61.96808)	Prec@5 87.50000 (96.80851)
Epoch: [5][48/60]	Time 0.03148 (0.24557)	Data 0.00269 (0.14931)	Loss 1.3039 (1.2956)	Prec@1 62.50000 (61.97917)	Prec@5 100.00000 (96.87500)
Epoch: [5][49/60]	Time 0.02645 (0.24110)	Data 0.00083 (0.14628)	Loss 0.7320 (1.2841)	Prec@1 62.50000 (61.98980)	Prec@5 100.00000 (96.93877)
Epoch: [5][50/60]	Time 0.02707 (0.23682)	Data 0.00037 (0.14336)	Loss 2.0867 (1.3002)	Prec@1 50.00000 (61.75000)	Prec@5 100.00000 (97.00000)
Epoch: [5][51/60]	Time 0.02572 (0.23268)	Data 0.00037 (0.14056)	Loss 0.5719 (1.2859)	Prec@1 62.50000 (61.76471)	Prec@5 100.00000 (97.05883)
Epoch: [5][52/60]	Time 0.02635 (0.22871)	Data 0.00044 (0.13786)	Loss 1.3560 (1.2873)	Prec@1 50.00000 (61.53846)	Prec@5 100.00000 (97.11539)
Epoch: [5][53/60]	Time 0.02615 (0.22489)	Data 0.00044 (0.13527)	Loss 1.6416 (1.2939)	Prec@1 50.00000 (61.32076)	Prec@5 100.00000 (97.16982)
Epoch: [5][54/60]	Time 0.02313 (0.22115)	Data 0.00042 (0.13277)	Loss 0.9243 (1.2871)	Prec@1 75.00000 (61.57407)	Prec@5 100.00000 (97.22222)
Epoch: [5][55/60]	Time 0.02285 (0.21754)	Data 0.00046 (0.13037)	Loss 1.1466 (1.2845)	Prec@1 75.00000 (61.81818)	Prec@5 87.50000 (97.04545)
Epoch: [5][56/60]	Time 0.02244 (0.21406)	Data 0.00043 (0.12804)	Loss 1.1364 (1.2819)	Prec@1 62.50000 (61.83036)	Prec@5 100.00000 (97.09822)
Epoch: [5][57/60]	Time 0.02382 (0.21072)	Data 0.00044 (0.12581)	Loss 1.2998 (1.2822)	Prec@1 62.50000 (61.84211)	Prec@5 100.00000 (97.14912)
Epoch: [5][58/60]	Time 0.02321 (0.20749)	Data 0.00059 (0.12365)	Loss 1.6711 (1.2889)	Prec@1 50.00000 (61.63793)	Prec@5 100.00000 (97.19827)
Epoch: [5][59/60]	Time 0.02302 (0.20436)	Data 0.00041 (0.12156)	Loss 1.8032 (1.2976)	Prec@1 50.00000 (61.44068)	Prec@5 100.00000 (97.24577)
Epoch: [5][60/60]	Time 0.02315 (0.20134)	Data 0.00063 (0.11954)	Loss 0.9315 (1.2915)	Prec@1 75.00000 (61.66667)	Prec@5 100.00000 (97.29167)
train at epoch 6
train at epoch 6
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [6][0/272]	 lr: 0.04000	Time 6.236 (6.236)	Data 5.128 (5.128)	Loss 0.7496 (0.7496)	Prec@1 75.00000 (75.00000)	Prec@5 96.87500 (96.87500)
Epoch: [6][10/272]	 lr: 0.04000	Time 0.393 (1.300)	Data 0.129 (0.931)	Loss 0.6672 (0.5406)	Prec@1 68.75000 (79.54546)	Prec@5 100.00000 (99.14773)
Epoch: [6][20/272]	 lr: 0.04000	Time 0.477 (0.883)	Data 0.128 (0.553)	Loss 0.6102 (0.5563)	Prec@1 71.87500 (78.57143)	Prec@5 100.00000 (99.55357)
Epoch: [6][30/272]	 lr: 0.04000	Time 0.543 (0.742)	Data 0.153 (0.419)	Loss 0.6979 (0.5575)	Prec@1 75.00000 (79.03226)	Prec@5 93.75000 (99.19354)
Epoch: [6][40/272]	 lr: 0.04000	Time 0.551 (0.669)	Data 0.128 (0.349)	Loss 0.2207 (0.5538)	Prec@1 96.87500 (79.49695)	Prec@5 100.00000 (99.31402)
Epoch: [6][50/272]	 lr: 0.04000	Time 0.383 (0.622)	Data 0.139 (0.306)	Loss 0.5943 (0.5566)	Prec@1 78.12500 (78.98285)	Prec@5 100.00000 (99.32598)
Epoch: [6][60/272]	 lr: 0.04000	Time 0.496 (0.597)	Data 0.127 (0.277)	Loss 0.7368 (0.5660)	Prec@1 68.75000 (79.04713)	Prec@5 100.00000 (99.28278)
Epoch: [6][70/272]	 lr: 0.04000	Time 0.400 (0.573)	Data 0.107 (0.256)	Loss 0.5736 (0.5661)	Prec@1 75.00000 (79.04929)	Prec@5 100.00000 (99.38380)
Epoch: [6][80/272]	 lr: 0.04000	Time 0.367 (0.556)	Data 0.110 (0.239)	Loss 0.7336 (0.5738)	Prec@1 71.87500 (78.81944)	Prec@5 96.87500 (99.42130)
Epoch: [6][90/272]	 lr: 0.04000	Time 0.456 (0.545)	Data 0.141 (0.227)	Loss 1.0353 (0.6049)	Prec@1 43.75000 (77.47253)	Prec@5 100.00000 (99.27885)
Epoch: [6][100/272]	 lr: 0.04000	Time 0.418 (0.533)	Data 0.130 (0.218)	Loss 0.3087 (0.5997)	Prec@1 90.62500 (77.90842)	Prec@5 100.00000 (99.28837)
Epoch: [6][110/272]	 lr: 0.04000	Time 0.458 (0.525)	Data 0.116 (0.209)	Loss 0.5049 (0.6015)	Prec@1 84.37500 (77.70271)	Prec@5 100.00000 (99.35248)
Epoch: [6][120/272]	 lr: 0.04000	Time 0.455 (0.518)	Data 0.127 (0.203)	Loss 0.5083 (0.5963)	Prec@1 81.25000 (77.89256)	Prec@5 100.00000 (99.38016)
Epoch: [6][130/272]	 lr: 0.04000	Time 0.380 (0.512)	Data 0.122 (0.197)	Loss 0.6431 (0.5932)	Prec@1 75.00000 (78.10114)	Prec@5 100.00000 (99.37977)
Epoch: [6][140/272]	 lr: 0.04000	Time 0.373 (0.508)	Data 0.120 (0.192)	Loss 0.5008 (0.5946)	Prec@1 87.50000 (78.28014)	Prec@5 96.87500 (99.31294)
Epoch: [6][150/272]	 lr: 0.04000	Time 0.334 (0.502)	Data 0.128 (0.188)	Loss 0.7667 (0.5958)	Prec@1 71.87500 (78.43543)	Prec@5 100.00000 (99.35844)
Epoch: [6][160/272]	 lr: 0.04000	Time 0.558 (0.500)	Data 0.107 (0.184)	Loss 0.5892 (0.5956)	Prec@1 84.37500 (78.47438)	Prec@5 96.87500 (99.34007)
Epoch: [6][170/272]	 lr: 0.04000	Time 0.459 (0.497)	Data 0.127 (0.181)	Loss 0.3087 (0.5872)	Prec@1 90.62500 (78.89255)	Prec@5 100.00000 (99.34211)
Epoch: [6][180/272]	 lr: 0.04000	Time 0.472 (0.495)	Data 0.128 (0.178)	Loss 0.4405 (0.5917)	Prec@1 87.50000 (78.60843)	Prec@5 100.00000 (99.32666)
Epoch: [6][190/272]	 lr: 0.04000	Time 0.474 (0.492)	Data 0.122 (0.176)	Loss 0.4609 (0.5976)	Prec@1 84.37500 (78.40314)	Prec@5 100.00000 (99.34555)
Epoch: [6][200/272]	 lr: 0.04000	Time 0.508 (0.490)	Data 0.127 (0.173)	Loss 0.8349 (0.6021)	Prec@1 75.00000 (78.28047)	Prec@5 96.87500 (99.33147)
Epoch: [6][210/272]	 lr: 0.04000	Time 0.397 (0.487)	Data 0.106 (0.171)	Loss 0.7568 (0.6051)	Prec@1 59.37500 (78.09538)	Prec@5 100.00000 (99.30392)
Epoch: [6][220/272]	 lr: 0.04000	Time 0.487 (0.486)	Data 0.101 (0.169)	Loss 0.4814 (0.6038)	Prec@1 81.25000 (78.15328)	Prec@5 100.00000 (99.30713)
Epoch: [6][230/272]	 lr: 0.04000	Time 0.368 (0.484)	Data 0.129 (0.167)	Loss 0.4868 (0.6045)	Prec@1 81.25000 (78.13853)	Prec@5 100.00000 (99.31007)
Epoch: [6][240/272]	 lr: 0.04000	Time 0.412 (0.482)	Data 0.128 (0.166)	Loss 0.2681 (0.6000)	Prec@1 96.87500 (78.38434)	Prec@5 100.00000 (99.33870)
Epoch: [6][250/272]	 lr: 0.04000	Time 0.239 (0.472)	Data 0.128 (0.164)	Loss 0.6580 (0.5969)	Prec@1 75.00000 (78.58566)	Prec@5 100.00000 (99.34014)
Epoch: [6][260/272]	 lr: 0.04000	Time 0.239 (0.463)	Data 0.129 (0.163)	Loss 0.3719 (0.5897)	Prec@1 81.25000 (78.91523)	Prec@5 100.00000 (99.36542)
Epoch: [6][270/272]	 lr: 0.04000	Time 0.241 (0.455)	Data 0.129 (0.162)	Loss 0.7684 (0.5872)	Prec@1 90.62500 (79.09364)	Prec@5 100.00000 (99.37730)
validation at epoch 6
validation at epoch 6
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [6][1/60]	Time 6.71376 (6.71376)	Data 6.65602 (6.65602)	Loss 0.8439 (0.8439)	Prec@1 87.50000 (87.50000)	Prec@5 87.50000 (87.50000)
Epoch: [6][2/60]	Time 0.07459 (3.39418)	Data 0.00064 (3.32833)	Loss 0.8333 (0.8386)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (93.75000)
Epoch: [6][3/60]	Time 0.15993 (2.31609)	Data 0.00762 (2.22142)	Loss 1.4747 (1.0506)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (91.66667)
Epoch: [6][4/60]	Time 0.65527 (1.90089)	Data 0.60306 (1.81683)	Loss 0.8357 (0.9969)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (93.75000)
Epoch: [6][5/60]	Time 0.06674 (1.53406)	Data 0.00550 (1.45457)	Loss 0.3913 (0.8758)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (95.00000)
Epoch: [6][6/60]	Time 0.06085 (1.28852)	Data 0.00066 (1.21225)	Loss 1.0268 (0.9009)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (95.83334)
Epoch: [6][7/60]	Time 0.15420 (1.12648)	Data 0.03654 (1.04429)	Loss 0.7190 (0.8749)	Prec@1 75.00000 (76.78572)	Prec@5 100.00000 (96.42857)
Epoch: [6][8/60]	Time 0.22908 (1.01430)	Data 0.01745 (0.91594)	Loss 0.7898 (0.8643)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (96.87500)
Epoch: [6][9/60]	Time 0.20315 (0.92417)	Data 0.00058 (0.81423)	Loss 1.1581 (0.8969)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (97.22222)
Epoch: [6][10/60]	Time 0.20570 (0.85233)	Data 0.00084 (0.73289)	Loss 0.3684 (0.8441)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [6][11/60]	Time 0.16565 (0.78990)	Data 0.02080 (0.66816)	Loss 0.4614 (0.8093)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.72727)
Epoch: [6][12/60]	Time 0.13833 (0.73560)	Data 0.02334 (0.61442)	Loss 1.6031 (0.8754)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (97.91667)
Epoch: [6][13/60]	Time 0.25606 (0.69872)	Data 0.00898 (0.56785)	Loss 3.3221 (1.0636)	Prec@1 37.50000 (71.15385)	Prec@5 75.00000 (96.15385)
Epoch: [6][14/60]	Time 0.13865 (0.65871)	Data 0.02373 (0.52898)	Loss 0.6167 (1.0317)	Prec@1 75.00000 (71.42857)	Prec@5 100.00000 (96.42857)
Epoch: [6][15/60]	Time 0.16818 (0.62601)	Data 0.07728 (0.49887)	Loss 2.1839 (1.1085)	Prec@1 25.00000 (68.33334)	Prec@5 100.00000 (96.66667)
Epoch: [6][16/60]	Time 0.12754 (0.59485)	Data 0.03513 (0.46989)	Loss 1.2100 (1.1149)	Prec@1 50.00000 (67.18750)	Prec@5 87.50000 (96.09375)
Epoch: [6][17/60]	Time 0.05122 (0.56288)	Data 0.00101 (0.44231)	Loss 1.6140 (1.1442)	Prec@1 50.00000 (66.17647)	Prec@5 87.50000 (95.58823)
Epoch: [6][18/60]	Time 0.06897 (0.53544)	Data 0.01238 (0.41842)	Loss 2.0409 (1.1940)	Prec@1 25.00000 (63.88889)	Prec@5 100.00000 (95.83334)
Epoch: [6][19/60]	Time 0.20196 (0.51789)	Data 0.05260 (0.39917)	Loss 0.6390 (1.1648)	Prec@1 62.50000 (63.81579)	Prec@5 100.00000 (96.05264)
Epoch: [6][20/60]	Time 0.18131 (0.50106)	Data 0.02262 (0.38034)	Loss 2.0155 (1.2074)	Prec@1 12.50000 (61.25000)	Prec@5 100.00000 (96.25000)
Epoch: [6][21/60]	Time 0.15732 (0.48469)	Data 0.01752 (0.36306)	Loss 2.3586 (1.2622)	Prec@1 25.00000 (59.52381)	Prec@5 87.50000 (95.83334)
Epoch: [6][22/60]	Time 0.13495 (0.46879)	Data 0.02550 (0.34772)	Loss 0.9940 (1.2500)	Prec@1 62.50000 (59.65909)	Prec@5 100.00000 (96.02273)
Epoch: [6][23/60]	Time 0.12060 (0.45365)	Data 0.00223 (0.33270)	Loss 1.3937 (1.2562)	Prec@1 62.50000 (59.78261)	Prec@5 100.00000 (96.19566)
Epoch: [6][24/60]	Time 0.10820 (0.43926)	Data 0.01177 (0.31932)	Loss 1.7845 (1.2783)	Prec@1 62.50000 (59.89584)	Prec@5 87.50000 (95.83334)
Epoch: [6][25/60]	Time 0.11050 (0.42611)	Data 0.01229 (0.30704)	Loss 0.8754 (1.2621)	Prec@1 87.50000 (61.00000)	Prec@5 87.50000 (95.50000)
Epoch: [6][26/60]	Time 0.10024 (0.41357)	Data 0.01468 (0.29580)	Loss 0.8852 (1.2476)	Prec@1 75.00000 (61.53846)	Prec@5 100.00000 (95.67308)
Epoch: [6][27/60]	Time 0.14722 (0.40371)	Data 0.02931 (0.28593)	Loss 0.9295 (1.2359)	Prec@1 62.50000 (61.57407)	Prec@5 100.00000 (95.83334)
Epoch: [6][28/60]	Time 0.20978 (0.39678)	Data 0.04945 (0.27748)	Loss 1.3231 (1.2390)	Prec@1 62.50000 (61.60715)	Prec@5 100.00000 (95.98215)
Epoch: [6][29/60]	Time 0.16720 (0.38887)	Data 0.00045 (0.26793)	Loss 1.3131 (1.2415)	Prec@1 50.00000 (61.20690)	Prec@5 100.00000 (96.12069)
Epoch: [6][30/60]	Time 0.09748 (0.37915)	Data 0.00063 (0.25902)	Loss 1.4798 (1.2495)	Prec@1 62.50000 (61.25000)	Prec@5 87.50000 (95.83334)
Epoch: [6][31/60]	Time 0.07997 (0.36950)	Data 0.00058 (0.25068)	Loss 3.4831 (1.3215)	Prec@1 12.50000 (59.67742)	Prec@5 87.50000 (95.56451)
Epoch: [6][32/60]	Time 0.05005 (0.35952)	Data 0.00042 (0.24286)	Loss 1.1164 (1.3151)	Prec@1 50.00000 (59.37500)	Prec@5 100.00000 (95.70312)
Epoch: [6][33/60]	Time 0.03460 (0.34967)	Data 0.00199 (0.23556)	Loss 0.0625 (1.2772)	Prec@1 100.00000 (60.60606)	Prec@5 100.00000 (95.83334)
Epoch: [6][34/60]	Time 0.02893 (0.34024)	Data 0.00045 (0.22865)	Loss 1.2116 (1.2752)	Prec@1 62.50000 (60.66177)	Prec@5 87.50000 (95.58823)
Epoch: [6][35/60]	Time 0.02350 (0.33119)	Data 0.00073 (0.22214)	Loss 2.4022 (1.3074)	Prec@1 50.00000 (60.35714)	Prec@5 87.50000 (95.35714)
Epoch: [6][36/60]	Time 0.02298 (0.32263)	Data 0.00047 (0.21598)	Loss 1.1355 (1.3027)	Prec@1 62.50000 (60.41667)	Prec@5 100.00000 (95.48611)
Epoch: [6][37/60]	Time 0.02371 (0.31455)	Data 0.00083 (0.21016)	Loss 1.7111 (1.3137)	Prec@1 62.50000 (60.47297)	Prec@5 87.50000 (95.27027)
Epoch: [6][38/60]	Time 0.02323 (0.30688)	Data 0.00081 (0.20465)	Loss 1.7073 (1.3240)	Prec@1 37.50000 (59.86842)	Prec@5 87.50000 (95.06579)
Epoch: [6][39/60]	Time 0.02308 (0.29961)	Data 0.00083 (0.19943)	Loss 0.1031 (1.2927)	Prec@1 100.00000 (60.89744)	Prec@5 100.00000 (95.19231)
Epoch: [6][40/60]	Time 0.02273 (0.29268)	Data 0.00041 (0.19445)	Loss 0.2752 (1.2673)	Prec@1 87.50000 (61.56250)	Prec@5 100.00000 (95.31250)
Epoch: [6][41/60]	Time 0.02320 (0.28611)	Data 0.00042 (0.18972)	Loss 1.0890 (1.2630)	Prec@1 50.00000 (61.28049)	Prec@5 100.00000 (95.42683)
Epoch: [6][42/60]	Time 0.02430 (0.27988)	Data 0.00044 (0.18521)	Loss 1.4443 (1.2673)	Prec@1 62.50000 (61.30952)	Prec@5 100.00000 (95.53571)
Epoch: [6][43/60]	Time 0.02285 (0.27390)	Data 0.00046 (0.18092)	Loss 0.9461 (1.2598)	Prec@1 75.00000 (61.62791)	Prec@5 100.00000 (95.63953)
Epoch: [6][44/60]	Time 0.02312 (0.26820)	Data 0.00042 (0.17682)	Loss 1.4478 (1.2641)	Prec@1 37.50000 (61.07955)	Prec@5 100.00000 (95.73864)
Epoch: [6][45/60]	Time 0.02345 (0.26276)	Data 0.00042 (0.17290)	Loss 1.1786 (1.2622)	Prec@1 75.00000 (61.38889)	Prec@5 87.50000 (95.55556)
Epoch: [6][46/60]	Time 0.02284 (0.25755)	Data 0.00051 (0.16915)	Loss 2.9799 (1.2995)	Prec@1 50.00000 (61.14130)	Prec@5 87.50000 (95.38044)
Epoch: [6][47/60]	Time 0.02348 (0.25257)	Data 0.00052 (0.16556)	Loss 1.3437 (1.3005)	Prec@1 75.00000 (61.43617)	Prec@5 87.50000 (95.21276)
Epoch: [6][48/60]	Time 0.02333 (0.24779)	Data 0.00046 (0.16212)	Loss 0.9149 (1.2924)	Prec@1 75.00000 (61.71875)	Prec@5 87.50000 (95.05209)
Epoch: [6][49/60]	Time 0.02279 (0.24320)	Data 0.00041 (0.15882)	Loss 2.2077 (1.3111)	Prec@1 50.00000 (61.47959)	Prec@5 87.50000 (94.89796)
Epoch: [6][50/60]	Time 0.02287 (0.23879)	Data 0.00046 (0.15565)	Loss 0.7181 (1.2992)	Prec@1 75.00000 (61.75000)	Prec@5 100.00000 (95.00000)
Epoch: [6][51/60]	Time 0.02308 (0.23456)	Data 0.00045 (0.15261)	Loss 1.0155 (1.2937)	Prec@1 75.00000 (62.00981)	Prec@5 100.00000 (95.09805)
Epoch: [6][52/60]	Time 0.02439 (0.23052)	Data 0.00047 (0.14968)	Loss 0.9499 (1.2871)	Prec@1 75.00000 (62.25962)	Prec@5 87.50000 (94.95193)
Epoch: [6][53/60]	Time 0.02342 (0.22661)	Data 0.00043 (0.14687)	Loss 1.5413 (1.2919)	Prec@1 50.00000 (62.02830)	Prec@5 87.50000 (94.81133)
Epoch: [6][54/60]	Time 0.02293 (0.22284)	Data 0.00045 (0.14416)	Loss 1.7664 (1.3007)	Prec@1 25.00000 (61.34259)	Prec@5 100.00000 (94.90741)
Epoch: [6][55/60]	Time 0.02277 (0.21920)	Data 0.00044 (0.14154)	Loss 1.2248 (1.2993)	Prec@1 75.00000 (61.59091)	Prec@5 87.50000 (94.77273)
Epoch: [6][56/60]	Time 0.02350 (0.21571)	Data 0.00056 (0.13903)	Loss 1.0382 (1.2946)	Prec@1 87.50000 (62.05357)	Prec@5 100.00000 (94.86607)
Epoch: [6][57/60]	Time 0.02297 (0.21233)	Data 0.00043 (0.13659)	Loss 2.1657 (1.3099)	Prec@1 62.50000 (62.06141)	Prec@5 100.00000 (94.95614)
Epoch: [6][58/60]	Time 0.02295 (0.20906)	Data 0.00043 (0.13425)	Loss 1.7484 (1.3175)	Prec@1 75.00000 (62.28448)	Prec@5 100.00000 (95.04311)
Epoch: [6][59/60]	Time 0.02274 (0.20590)	Data 0.00050 (0.13198)	Loss 1.3322 (1.3177)	Prec@1 62.50000 (62.28814)	Prec@5 100.00000 (95.12712)
Epoch: [6][60/60]	Time 0.02305 (0.20286)	Data 0.00055 (0.12979)	Loss 0.4933 (1.3040)	Prec@1 87.50000 (62.70834)	Prec@5 100.00000 (95.20834)
train at epoch 7
train at epoch 7
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [7][0/272]	 lr: 0.04000	Time 7.970 (7.970)	Data 6.886 (6.886)	Loss 0.3636 (0.3636)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [7][10/272]	 lr: 0.04000	Time 0.433 (1.305)	Data 0.130 (0.813)	Loss 0.9204 (0.7053)	Prec@1 65.62500 (74.71591)	Prec@5 100.00000 (100.00000)
Epoch: [7][20/272]	 lr: 0.04000	Time 0.464 (0.889)	Data 0.126 (0.488)	Loss 0.5420 (0.6897)	Prec@1 84.37500 (75.29762)	Prec@5 100.00000 (99.55357)
Epoch: [7][30/272]	 lr: 0.04000	Time 0.465 (0.745)	Data 0.129 (0.373)	Loss 0.5006 (0.6566)	Prec@1 81.25000 (76.41129)	Prec@5 100.00000 (99.19354)
Epoch: [7][40/272]	 lr: 0.04000	Time 0.392 (0.672)	Data 0.124 (0.312)	Loss 0.5356 (0.6582)	Prec@1 81.25000 (76.52439)	Prec@5 96.87500 (99.08537)
Epoch: [7][50/272]	 lr: 0.04000	Time 0.388 (0.626)	Data 0.128 (0.276)	Loss 0.7442 (0.6280)	Prec@1 78.12500 (77.69608)	Prec@5 100.00000 (99.26471)
Epoch: [7][60/272]	 lr: 0.04000	Time 0.457 (0.597)	Data 0.123 (0.252)	Loss 0.4190 (0.6213)	Prec@1 84.37500 (77.76639)	Prec@5 100.00000 (99.33401)
Epoch: [7][70/272]	 lr: 0.04000	Time 0.393 (0.572)	Data 0.111 (0.234)	Loss 0.6994 (0.6336)	Prec@1 78.12500 (77.59683)	Prec@5 100.00000 (99.29578)
Epoch: [7][80/272]	 lr: 0.04000	Time 0.395 (0.556)	Data 0.122 (0.221)	Loss 0.3354 (0.6272)	Prec@1 93.75000 (77.85494)	Prec@5 100.00000 (99.30556)
Epoch: [7][90/272]	 lr: 0.04000	Time 0.426 (0.543)	Data 0.109 (0.211)	Loss 0.3341 (0.6142)	Prec@1 93.75000 (78.29671)	Prec@5 100.00000 (99.38187)
Epoch: [7][100/272]	 lr: 0.04000	Time 0.401 (0.534)	Data 0.130 (0.202)	Loss 0.5066 (0.6093)	Prec@1 75.00000 (78.52723)	Prec@5 100.00000 (99.31931)
Epoch: [7][110/272]	 lr: 0.04000	Time 0.453 (0.528)	Data 0.114 (0.196)	Loss 0.7812 (0.6086)	Prec@1 68.75000 (78.54730)	Prec@5 96.87500 (99.32433)
Epoch: [7][120/272]	 lr: 0.04000	Time 0.498 (0.521)	Data 0.137 (0.190)	Loss 0.5946 (0.6052)	Prec@1 71.87500 (78.53822)	Prec@5 96.87500 (99.32851)
Epoch: [7][130/272]	 lr: 0.04000	Time 0.420 (0.515)	Data 0.122 (0.185)	Loss 0.4401 (0.6025)	Prec@1 90.62500 (78.76908)	Prec@5 100.00000 (99.26050)
Epoch: [7][140/272]	 lr: 0.04000	Time 0.469 (0.510)	Data 0.143 (0.181)	Loss 0.5818 (0.5991)	Prec@1 81.25000 (78.92287)	Prec@5 100.00000 (99.22429)
Epoch: [7][150/272]	 lr: 0.04000	Time 0.462 (0.505)	Data 0.125 (0.178)	Loss 0.5561 (0.5935)	Prec@1 75.00000 (79.24255)	Prec@5 100.00000 (99.27567)
Epoch: [7][160/272]	 lr: 0.04000	Time 0.453 (0.502)	Data 0.126 (0.175)	Loss 0.6116 (0.5880)	Prec@1 75.00000 (79.48370)	Prec@5 100.00000 (99.32066)
Epoch: [7][170/272]	 lr: 0.04000	Time 0.527 (0.499)	Data 0.129 (0.172)	Loss 1.4043 (0.5916)	Prec@1 68.75000 (79.31287)	Prec@5 87.50000 (99.26900)
Epoch: [7][180/272]	 lr: 0.04000	Time 0.432 (0.496)	Data 0.135 (0.170)	Loss 0.4054 (0.5869)	Prec@1 81.25000 (79.71340)	Prec@5 100.00000 (99.22307)
Epoch: [7][190/272]	 lr: 0.04000	Time 0.352 (0.493)	Data 0.126 (0.168)	Loss 0.3912 (0.5841)	Prec@1 81.25000 (79.63023)	Prec@5 100.00000 (99.24738)
Epoch: [7][200/272]	 lr: 0.04000	Time 0.505 (0.490)	Data 0.153 (0.166)	Loss 0.3294 (0.5791)	Prec@1 90.62500 (79.80410)	Prec@5 100.00000 (99.25373)
Epoch: [7][210/272]	 lr: 0.04000	Time 0.498 (0.488)	Data 0.126 (0.165)	Loss 0.6204 (0.5788)	Prec@1 75.00000 (79.78377)	Prec@5 100.00000 (99.25948)
Epoch: [7][220/272]	 lr: 0.04000	Time 0.518 (0.486)	Data 0.142 (0.163)	Loss 0.3278 (0.5762)	Prec@1 87.50000 (79.82184)	Prec@5 100.00000 (99.27885)
Epoch: [7][230/272]	 lr: 0.04000	Time 0.505 (0.485)	Data 0.131 (0.161)	Loss 0.3450 (0.5757)	Prec@1 87.50000 (79.74837)	Prec@5 96.87500 (99.25595)
Epoch: [7][240/272]	 lr: 0.04000	Time 0.278 (0.483)	Data 0.129 (0.160)	Loss 0.3248 (0.5723)	Prec@1 93.75000 (79.92739)	Prec@5 100.00000 (99.27386)
Epoch: [7][250/272]	 lr: 0.04000	Time 0.240 (0.473)	Data 0.128 (0.159)	Loss 0.5984 (0.5750)	Prec@1 75.00000 (79.76842)	Prec@5 100.00000 (99.29034)
Epoch: [7][260/272]	 lr: 0.04000	Time 0.236 (0.464)	Data 0.128 (0.158)	Loss 0.4736 (0.5787)	Prec@1 81.25000 (79.74138)	Prec@5 100.00000 (99.25766)
Epoch: [7][270/272]	 lr: 0.04000	Time 0.239 (0.456)	Data 0.129 (0.157)	Loss 1.6951 (0.5802)	Prec@1 34.37500 (79.67020)	Prec@5 96.87500 (99.25047)
validation at epoch 7
validation at epoch 7
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [7][1/60]	Time 7.11322 (7.11322)	Data 6.97489 (6.97489)	Loss 0.6769 (0.6769)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [7][2/60]	Time 0.26519 (3.68920)	Data 0.05687 (3.51588)	Loss 0.5421 (0.6095)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [7][3/60]	Time 0.15810 (2.51217)	Data 0.01484 (2.34887)	Loss 1.0819 (0.7670)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (100.00000)
Epoch: [7][4/60]	Time 0.13361 (1.91753)	Data 0.00246 (1.76226)	Loss 0.6592 (0.7400)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [7][5/60]	Time 0.22451 (1.57892)	Data 0.09095 (1.42800)	Loss 0.8696 (0.7659)	Prec@1 62.50000 (70.00000)	Prec@5 100.00000 (100.00000)
Epoch: [7][6/60]	Time 0.16611 (1.34346)	Data 0.02213 (1.19369)	Loss 0.3839 (0.7023)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [7][7/60]	Time 0.11763 (1.16834)	Data 0.02462 (1.02668)	Loss 1.3444 (0.7940)	Prec@1 50.00000 (69.64286)	Prec@5 87.50000 (98.21429)
Epoch: [7][8/60]	Time 0.19285 (1.04640)	Data 0.02326 (0.90125)	Loss 1.0715 (0.8287)	Prec@1 50.00000 (67.18750)	Prec@5 100.00000 (98.43750)
Epoch: [7][9/60]	Time 0.10661 (0.94198)	Data 0.00723 (0.80192)	Loss 1.1763 (0.8673)	Prec@1 62.50000 (66.66666)	Prec@5 100.00000 (98.61111)
Epoch: [7][10/60]	Time 0.15229 (0.86301)	Data 0.00276 (0.72200)	Loss 1.1532 (0.8959)	Prec@1 62.50000 (66.25000)	Prec@5 100.00000 (98.75000)
Epoch: [7][11/60]	Time 0.09693 (0.79337)	Data 0.02227 (0.65839)	Loss 0.6998 (0.8781)	Prec@1 62.50000 (65.90910)	Prec@5 100.00000 (98.86364)
Epoch: [7][12/60]	Time 0.16156 (0.74072)	Data 0.04641 (0.60739)	Loss 1.4538 (0.9261)	Prec@1 37.50000 (63.54167)	Prec@5 87.50000 (97.91667)
Epoch: [7][13/60]	Time 0.24371 (0.70249)	Data 0.07133 (0.56616)	Loss 2.6708 (1.0603)	Prec@1 25.00000 (60.57693)	Prec@5 100.00000 (98.07693)
Epoch: [7][14/60]	Time 0.18974 (0.66586)	Data 0.00729 (0.52624)	Loss 1.2197 (1.0717)	Prec@1 62.50000 (60.71429)	Prec@5 100.00000 (98.21429)
Epoch: [7][15/60]	Time 0.11348 (0.62904)	Data 0.01131 (0.49191)	Loss 1.3838 (1.0925)	Prec@1 37.50000 (59.16667)	Prec@5 100.00000 (98.33334)
Epoch: [7][16/60]	Time 0.12691 (0.59765)	Data 0.01099 (0.46185)	Loss 1.1110 (1.0936)	Prec@1 75.00000 (60.15625)	Prec@5 87.50000 (97.65625)
Epoch: [7][17/60]	Time 0.11512 (0.56927)	Data 0.00582 (0.43503)	Loss 1.3595 (1.1093)	Prec@1 75.00000 (61.02941)	Prec@5 75.00000 (96.32353)
Epoch: [7][18/60]	Time 0.14325 (0.54560)	Data 0.02029 (0.41198)	Loss 1.4619 (1.1289)	Prec@1 37.50000 (59.72222)	Prec@5 100.00000 (96.52778)
Epoch: [7][19/60]	Time 0.13314 (0.52389)	Data 0.01977 (0.39134)	Loss 0.5431 (1.0980)	Prec@1 75.00000 (60.52632)	Prec@5 100.00000 (96.71053)
Epoch: [7][20/60]	Time 0.10869 (0.50313)	Data 0.01834 (0.37269)	Loss 1.2552 (1.1059)	Prec@1 50.00000 (60.00000)	Prec@5 100.00000 (96.87500)
Epoch: [7][21/60]	Time 0.09260 (0.48358)	Data 0.00629 (0.35524)	Loss 2.9238 (1.1924)	Prec@1 37.50000 (58.92857)	Prec@5 50.00000 (94.64286)
Epoch: [7][22/60]	Time 0.15649 (0.46871)	Data 0.00081 (0.33913)	Loss 1.0844 (1.1875)	Prec@1 75.00000 (59.65909)	Prec@5 100.00000 (94.88637)
Epoch: [7][23/60]	Time 0.12750 (0.45388)	Data 0.00317 (0.32453)	Loss 1.0557 (1.1818)	Prec@1 62.50000 (59.78261)	Prec@5 100.00000 (95.10870)
Epoch: [7][24/60]	Time 0.19370 (0.44304)	Data 0.01128 (0.31147)	Loss 1.3888 (1.1904)	Prec@1 62.50000 (59.89584)	Prec@5 87.50000 (94.79167)
Epoch: [7][25/60]	Time 0.24896 (0.43528)	Data 0.02189 (0.29989)	Loss 1.0283 (1.1839)	Prec@1 75.00000 (60.50000)	Prec@5 87.50000 (94.50000)
Epoch: [7][26/60]	Time 0.05501 (0.42065)	Data 0.00059 (0.28838)	Loss 0.8982 (1.1730)	Prec@1 62.50000 (60.57693)	Prec@5 100.00000 (94.71154)
Epoch: [7][27/60]	Time 0.07373 (0.40780)	Data 0.00086 (0.27773)	Loss 0.3324 (1.1418)	Prec@1 87.50000 (61.57407)	Prec@5 100.00000 (94.90741)
Epoch: [7][28/60]	Time 0.22565 (0.40130)	Data 0.10723 (0.27164)	Loss 0.8829 (1.1326)	Prec@1 62.50000 (61.60715)	Prec@5 100.00000 (95.08929)
Epoch: [7][29/60]	Time 0.10230 (0.39099)	Data 0.00047 (0.26229)	Loss 0.7294 (1.1187)	Prec@1 62.50000 (61.63793)	Prec@5 100.00000 (95.25862)
Epoch: [7][30/60]	Time 0.06151 (0.38000)	Data 0.00043 (0.25356)	Loss 1.7421 (1.1395)	Prec@1 50.00000 (61.25000)	Prec@5 87.50000 (95.00001)
Epoch: [7][31/60]	Time 0.04336 (0.36914)	Data 0.00357 (0.24550)	Loss 3.2384 (1.2072)	Prec@1 25.00000 (60.08064)	Prec@5 100.00000 (95.16129)
Epoch: [7][32/60]	Time 0.04002 (0.35886)	Data 0.00190 (0.23789)	Loss 1.5615 (1.2182)	Prec@1 62.50000 (60.15625)	Prec@5 100.00000 (95.31250)
Epoch: [7][33/60]	Time 0.04294 (0.34929)	Data 0.00049 (0.23069)	Loss 0.6838 (1.2020)	Prec@1 87.50000 (60.98485)	Prec@5 87.50000 (95.07576)
Epoch: [7][34/60]	Time 0.03287 (0.33998)	Data 0.00269 (0.22399)	Loss 1.4022 (1.2079)	Prec@1 62.50000 (61.02941)	Prec@5 87.50000 (94.85294)
Epoch: [7][35/60]	Time 0.02963 (0.33111)	Data 0.00052 (0.21760)	Loss 1.9112 (1.2280)	Prec@1 62.50000 (61.07143)	Prec@5 75.00000 (94.28571)
Epoch: [7][36/60]	Time 0.02761 (0.32268)	Data 0.00051 (0.21157)	Loss 1.6012 (1.2384)	Prec@1 50.00000 (60.76389)	Prec@5 87.50000 (94.09722)
Epoch: [7][37/60]	Time 0.02843 (0.31473)	Data 0.00049 (0.20587)	Loss 1.3061 (1.2402)	Prec@1 62.50000 (60.81081)	Prec@5 100.00000 (94.25676)
Epoch: [7][38/60]	Time 0.02703 (0.30716)	Data 0.00052 (0.20046)	Loss 1.8306 (1.2558)	Prec@1 62.50000 (60.85526)	Prec@5 100.00000 (94.40790)
Epoch: [7][39/60]	Time 0.02659 (0.29996)	Data 0.00047 (0.19533)	Loss 0.7129 (1.2418)	Prec@1 87.50000 (61.53846)	Prec@5 87.50000 (94.23077)
Epoch: [7][40/60]	Time 0.02680 (0.29313)	Data 0.00044 (0.19046)	Loss 0.6805 (1.2278)	Prec@1 87.50000 (62.18750)	Prec@5 87.50000 (94.06250)
Epoch: [7][41/60]	Time 0.02306 (0.28655)	Data 0.00051 (0.18583)	Loss 0.8909 (1.2196)	Prec@1 62.50000 (62.19512)	Prec@5 100.00000 (94.20731)
Epoch: [7][42/60]	Time 0.02359 (0.28029)	Data 0.00049 (0.18142)	Loss 1.4501 (1.2251)	Prec@1 62.50000 (62.20238)	Prec@5 87.50000 (94.04762)
Epoch: [7][43/60]	Time 0.02226 (0.27429)	Data 0.00046 (0.17721)	Loss 0.8077 (1.2154)	Prec@1 75.00000 (62.50000)	Prec@5 100.00000 (94.18604)
Epoch: [7][44/60]	Time 0.02223 (0.26856)	Data 0.00045 (0.17319)	Loss 1.6821 (1.2260)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (94.31818)
Epoch: [7][45/60]	Time 0.02246 (0.26309)	Data 0.00048 (0.16935)	Loss 1.3714 (1.2292)	Prec@1 75.00000 (62.77778)	Prec@5 75.00000 (93.88889)
Epoch: [7][46/60]	Time 0.02196 (0.25785)	Data 0.00048 (0.16568)	Loss 2.7558 (1.2624)	Prec@1 50.00000 (62.50000)	Prec@5 75.00000 (93.47826)
Epoch: [7][47/60]	Time 0.02227 (0.25283)	Data 0.00066 (0.16217)	Loss 0.3235 (1.2424)	Prec@1 87.50000 (63.03191)	Prec@5 100.00000 (93.61702)
Epoch: [7][48/60]	Time 0.02170 (0.24802)	Data 0.00041 (0.15880)	Loss 1.4184 (1.2461)	Prec@1 50.00000 (62.76042)	Prec@5 100.00000 (93.75000)
Epoch: [7][49/60]	Time 0.02159 (0.24340)	Data 0.00043 (0.15557)	Loss 2.4272 (1.2702)	Prec@1 50.00000 (62.50000)	Prec@5 87.50000 (93.62244)
Epoch: [7][50/60]	Time 0.02175 (0.23897)	Data 0.00048 (0.15247)	Loss 0.6496 (1.2578)	Prec@1 75.00000 (62.75000)	Prec@5 100.00000 (93.75000)
Epoch: [7][51/60]	Time 0.03038 (0.23488)	Data 0.00039 (0.14948)	Loss 1.3144 (1.2589)	Prec@1 75.00000 (62.99020)	Prec@5 100.00000 (93.87255)
Epoch: [7][52/60]	Time 0.02987 (0.23093)	Data 0.00137 (0.14664)	Loss 0.8936 (1.2519)	Prec@1 75.00000 (63.22116)	Prec@5 100.00000 (93.99039)
Epoch: [7][53/60]	Time 0.02524 (0.22705)	Data 0.00038 (0.14388)	Loss 1.8578 (1.2633)	Prec@1 50.00000 (62.97170)	Prec@5 100.00000 (94.10378)
Epoch: [7][54/60]	Time 0.02172 (0.22325)	Data 0.00044 (0.14122)	Loss 2.4334 (1.2850)	Prec@1 50.00000 (62.73148)	Prec@5 100.00000 (94.21297)
Epoch: [7][55/60]	Time 0.02231 (0.21960)	Data 0.00043 (0.13866)	Loss 0.2664 (1.2664)	Prec@1 87.50000 (63.18182)	Prec@5 100.00000 (94.31818)
Epoch: [7][56/60]	Time 0.02410 (0.21610)	Data 0.00061 (0.13620)	Loss 1.0550 (1.2627)	Prec@1 87.50000 (63.61607)	Prec@5 87.50000 (94.19643)
Epoch: [7][57/60]	Time 0.02147 (0.21269)	Data 0.00046 (0.13381)	Loss 1.6841 (1.2701)	Prec@1 75.00000 (63.81579)	Prec@5 87.50000 (94.07895)
Epoch: [7][58/60]	Time 0.02203 (0.20940)	Data 0.00044 (0.13151)	Loss 1.8175 (1.2795)	Prec@1 75.00000 (64.00862)	Prec@5 75.00000 (93.75000)
Epoch: [7][59/60]	Time 0.02165 (0.20622)	Data 0.00047 (0.12929)	Loss 1.0629 (1.2758)	Prec@1 75.00000 (64.19492)	Prec@5 87.50000 (93.64407)
Epoch: [7][60/60]	Time 0.02495 (0.20320)	Data 0.00059 (0.12715)	Loss 1.0746 (1.2725)	Prec@1 87.50000 (64.58334)	Prec@5 100.00000 (93.75001)
train at epoch 8
train at epoch 8
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [8][0/272]	 lr: 0.04000	Time 9.094 (9.094)	Data 8.365 (8.365)	Loss 0.3415 (0.3415)	Prec@1 84.37500 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [8][10/272]	 lr: 0.04000	Time 0.355 (1.276)	Data 0.130 (0.873)	Loss 0.5733 (0.6028)	Prec@1 71.87500 (79.54546)	Prec@5 100.00000 (99.43182)
Epoch: [8][20/272]	 lr: 0.04000	Time 0.413 (0.864)	Data 0.128 (0.519)	Loss 0.2888 (0.5530)	Prec@1 90.62500 (81.39881)	Prec@5 100.00000 (99.70238)
Epoch: [8][30/272]	 lr: 0.04000	Time 0.430 (0.728)	Data 0.124 (0.394)	Loss 0.3352 (0.5288)	Prec@1 96.87500 (81.75403)	Prec@5 100.00000 (99.59677)
Epoch: [8][40/272]	 lr: 0.04000	Time 0.401 (0.657)	Data 0.126 (0.329)	Loss 0.2920 (0.5131)	Prec@1 93.75000 (82.62195)	Prec@5 100.00000 (99.46646)
Epoch: [8][50/272]	 lr: 0.04000	Time 0.504 (0.619)	Data 0.129 (0.290)	Loss 0.5471 (0.5074)	Prec@1 78.12500 (82.41422)	Prec@5 100.00000 (99.50980)
Epoch: [8][60/272]	 lr: 0.04000	Time 0.408 (0.590)	Data 0.128 (0.265)	Loss 0.6173 (0.5217)	Prec@1 75.00000 (82.12090)	Prec@5 100.00000 (99.43647)
Epoch: [8][70/272]	 lr: 0.04000	Time 0.521 (0.568)	Data 0.129 (0.245)	Loss 0.6140 (0.5349)	Prec@1 78.12500 (81.47007)	Prec@5 100.00000 (99.38380)
Epoch: [8][80/272]	 lr: 0.04000	Time 0.469 (0.551)	Data 0.127 (0.231)	Loss 0.7128 (0.5354)	Prec@1 75.00000 (81.82870)	Prec@5 100.00000 (99.38271)
Epoch: [8][90/272]	 lr: 0.04000	Time 0.506 (0.541)	Data 0.140 (0.219)	Loss 0.3626 (0.5375)	Prec@1 84.37500 (81.62775)	Prec@5 100.00000 (99.34753)
Epoch: [8][100/272]	 lr: 0.04000	Time 0.432 (0.530)	Data 0.121 (0.210)	Loss 0.3537 (0.5288)	Prec@1 90.62500 (81.99258)	Prec@5 100.00000 (99.35024)
Epoch: [8][110/272]	 lr: 0.04000	Time 0.516 (0.524)	Data 0.129 (0.203)	Loss 0.8830 (0.5227)	Prec@1 75.00000 (82.31982)	Prec@5 100.00000 (99.40878)
Epoch: [8][120/272]	 lr: 0.04000	Time 0.536 (0.518)	Data 0.128 (0.197)	Loss 0.5282 (0.5108)	Prec@1 87.50000 (82.82541)	Prec@5 100.00000 (99.43182)
Epoch: [8][130/272]	 lr: 0.04000	Time 0.446 (0.513)	Data 0.136 (0.192)	Loss 0.3796 (0.5048)	Prec@1 93.75000 (82.99141)	Prec@5 96.87500 (99.40363)
Epoch: [8][140/272]	 lr: 0.04000	Time 0.508 (0.506)	Data 0.118 (0.187)	Loss 0.2087 (0.5072)	Prec@1 93.75000 (83.04521)	Prec@5 100.00000 (99.42376)
Epoch: [8][150/272]	 lr: 0.04000	Time 0.450 (0.502)	Data 0.139 (0.183)	Loss 0.3562 (0.4996)	Prec@1 93.75000 (83.25745)	Prec@5 100.00000 (99.44122)
Epoch: [8][160/272]	 lr: 0.04000	Time 0.437 (0.498)	Data 0.132 (0.180)	Loss 0.2741 (0.4980)	Prec@1 93.75000 (83.19099)	Prec@5 100.00000 (99.45652)
Epoch: [8][170/272]	 lr: 0.04000	Time 0.473 (0.495)	Data 0.128 (0.177)	Loss 0.2915 (0.4936)	Prec@1 90.62500 (83.47953)	Prec@5 100.00000 (99.47003)
Epoch: [8][180/272]	 lr: 0.04000	Time 0.321 (0.492)	Data 0.124 (0.174)	Loss 0.5253 (0.4916)	Prec@1 78.12500 (83.42542)	Prec@5 100.00000 (99.49931)
Epoch: [8][190/272]	 lr: 0.04000	Time 0.489 (0.489)	Data 0.143 (0.172)	Loss 0.1440 (0.4882)	Prec@1 96.87500 (83.55694)	Prec@5 100.00000 (99.44372)
Epoch: [8][200/272]	 lr: 0.04000	Time 0.374 (0.487)	Data 0.128 (0.170)	Loss 0.4790 (0.4858)	Prec@1 81.25000 (83.50435)	Prec@5 96.87500 (99.44030)
Epoch: [8][210/272]	 lr: 0.04000	Time 0.432 (0.484)	Data 0.129 (0.168)	Loss 0.3940 (0.4857)	Prec@1 90.62500 (83.45676)	Prec@5 100.00000 (99.45202)
Epoch: [8][220/272]	 lr: 0.04000	Time 0.472 (0.482)	Data 0.127 (0.167)	Loss 0.3881 (0.4904)	Prec@1 81.25000 (83.34277)	Prec@5 100.00000 (99.44853)
Epoch: [8][230/272]	 lr: 0.04000	Time 0.466 (0.480)	Data 0.118 (0.165)	Loss 0.2562 (0.4842)	Prec@1 96.87500 (83.69859)	Prec@5 100.00000 (99.45888)
Epoch: [8][240/272]	 lr: 0.04000	Time 0.240 (0.477)	Data 0.120 (0.163)	Loss 0.4751 (0.4823)	Prec@1 78.12500 (83.75259)	Prec@5 100.00000 (99.48133)
Epoch: [8][250/272]	 lr: 0.04000	Time 0.240 (0.468)	Data 0.128 (0.162)	Loss 1.4995 (0.4867)	Prec@1 53.12500 (83.54084)	Prec@5 96.87500 (99.45219)
Epoch: [8][260/272]	 lr: 0.04000	Time 0.245 (0.459)	Data 0.129 (0.161)	Loss 0.8033 (0.4856)	Prec@1 68.75000 (83.51293)	Prec@5 100.00000 (99.44923)
Epoch: [8][270/272]	 lr: 0.04000	Time 0.240 (0.451)	Data 0.128 (0.159)	Loss 0.2506 (0.4807)	Prec@1 90.62500 (83.72925)	Prec@5 100.00000 (99.44650)
validation at epoch 8
validation at epoch 8
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [8][1/60]	Time 7.39660 (7.39660)	Data 7.19689 (7.19689)	Loss 0.5900 (0.5900)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [8][2/60]	Time 0.14479 (3.77070)	Data 0.01378 (3.60533)	Loss 0.1380 (0.3640)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [8][3/60]	Time 0.12811 (2.55650)	Data 0.00562 (2.40543)	Loss 1.1365 (0.6215)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [8][4/60]	Time 0.16674 (1.95906)	Data 0.01888 (1.80879)	Loss 0.2634 (0.5320)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [8][5/60]	Time 0.14676 (1.59660)	Data 0.00611 (1.44826)	Loss 0.5746 (0.5405)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (97.50000)
Epoch: [8][6/60]	Time 0.14594 (1.35482)	Data 0.02372 (1.21083)	Loss 0.1258 (0.4714)	Prec@1 100.00000 (85.41667)	Prec@5 100.00000 (97.91667)
Epoch: [8][7/60]	Time 0.16295 (1.18455)	Data 0.05541 (1.04577)	Loss 0.5971 (0.4893)	Prec@1 87.50000 (85.71429)	Prec@5 100.00000 (98.21429)
Epoch: [8][8/60]	Time 0.13905 (1.05387)	Data 0.01566 (0.91701)	Loss 0.8917 (0.5396)	Prec@1 75.00000 (84.37500)	Prec@5 100.00000 (98.43750)
Epoch: [8][9/60]	Time 0.12053 (0.95016)	Data 0.05058 (0.82074)	Loss 0.2441 (0.5068)	Prec@1 87.50000 (84.72222)	Prec@5 100.00000 (98.61111)
Epoch: [8][10/60]	Time 0.26067 (0.88121)	Data 0.08926 (0.74759)	Loss 0.3627 (0.4924)	Prec@1 75.00000 (83.75000)	Prec@5 100.00000 (98.75000)
Epoch: [8][11/60]	Time 0.04740 (0.80541)	Data 0.00720 (0.68028)	Loss 0.7383 (0.5147)	Prec@1 87.50000 (84.09091)	Prec@5 100.00000 (98.86364)
Epoch: [8][12/60]	Time 0.03653 (0.74134)	Data 0.00072 (0.62365)	Loss 0.1859 (0.4873)	Prec@1 100.00000 (85.41667)	Prec@5 100.00000 (98.95834)
Epoch: [8][13/60]	Time 0.07336 (0.68996)	Data 0.01967 (0.57719)	Loss 1.1885 (0.5413)	Prec@1 62.50000 (83.65385)	Prec@5 87.50000 (98.07693)
Epoch: [8][14/60]	Time 0.08875 (0.64701)	Data 0.00045 (0.53600)	Loss 0.2475 (0.5203)	Prec@1 87.50000 (83.92857)	Prec@5 100.00000 (98.21429)
Epoch: [8][15/60]	Time 0.08201 (0.60935)	Data 0.00219 (0.50041)	Loss 0.8218 (0.5404)	Prec@1 50.00000 (81.66667)	Prec@5 100.00000 (98.33334)
Epoch: [8][16/60]	Time 0.29244 (0.58954)	Data 0.10060 (0.47542)	Loss 1.4021 (0.5943)	Prec@1 62.50000 (80.46875)	Prec@5 100.00000 (98.43750)
Epoch: [8][17/60]	Time 0.21554 (0.56754)	Data 0.00058 (0.44749)	Loss 1.0325 (0.6200)	Prec@1 75.00000 (80.14706)	Prec@5 100.00000 (98.52941)
Epoch: [8][18/60]	Time 0.17756 (0.54587)	Data 0.00664 (0.42300)	Loss 2.0345 (0.6986)	Prec@1 62.50000 (79.16666)	Prec@5 100.00000 (98.61111)
Epoch: [8][19/60]	Time 0.23125 (0.52931)	Data 0.00341 (0.40091)	Loss 0.2210 (0.6735)	Prec@1 100.00000 (80.26316)	Prec@5 100.00000 (98.68421)
Epoch: [8][20/60]	Time 0.13474 (0.50959)	Data 0.00642 (0.38119)	Loss 2.4913 (0.7644)	Prec@1 62.50000 (79.37500)	Prec@5 100.00000 (98.75000)
Epoch: [8][21/60]	Time 0.10743 (0.49044)	Data 0.02367 (0.36417)	Loss 1.7384 (0.8107)	Prec@1 50.00000 (77.97619)	Prec@5 100.00000 (98.80952)
Epoch: [8][22/60]	Time 0.10826 (0.47306)	Data 0.02106 (0.34857)	Loss 1.2754 (0.8319)	Prec@1 62.50000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [8][23/60]	Time 0.12137 (0.45777)	Data 0.00283 (0.33354)	Loss 1.3594 (0.8548)	Prec@1 37.50000 (75.54348)	Prec@5 100.00000 (98.91305)
Epoch: [8][24/60]	Time 0.18091 (0.44624)	Data 0.04218 (0.32140)	Loss 1.2110 (0.8696)	Prec@1 50.00000 (74.47917)	Prec@5 87.50000 (98.43750)
Epoch: [8][25/60]	Time 0.09874 (0.43234)	Data 0.02354 (0.30948)	Loss 1.0638 (0.8774)	Prec@1 62.50000 (74.00000)	Prec@5 100.00000 (98.50000)
Epoch: [8][26/60]	Time 0.11201 (0.42002)	Data 0.01775 (0.29826)	Loss 0.8159 (0.8750)	Prec@1 62.50000 (73.55769)	Prec@5 100.00000 (98.55769)
Epoch: [8][27/60]	Time 0.07005 (0.40706)	Data 0.00257 (0.28731)	Loss 0.9523 (0.8779)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (98.61111)
Epoch: [8][28/60]	Time 0.05589 (0.39451)	Data 0.00437 (0.27721)	Loss 0.5930 (0.8677)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (98.66072)
Epoch: [8][29/60]	Time 0.06372 (0.38311)	Data 0.00045 (0.26766)	Loss 0.3637 (0.8504)	Prec@1 87.50000 (73.70689)	Prec@5 100.00000 (98.70689)
Epoch: [8][30/60]	Time 0.12534 (0.37451)	Data 0.00051 (0.25876)	Loss 1.4157 (0.8692)	Prec@1 62.50000 (73.33334)	Prec@5 87.50000 (98.33334)
Epoch: [8][31/60]	Time 0.11069 (0.36600)	Data 0.00923 (0.25071)	Loss 3.0309 (0.9389)	Prec@1 25.00000 (71.77419)	Prec@5 87.50000 (97.98387)
Epoch: [8][32/60]	Time 0.11259 (0.35808)	Data 0.02737 (0.24373)	Loss 1.9799 (0.9715)	Prec@1 37.50000 (70.70312)	Prec@5 100.00000 (98.04688)
Epoch: [8][33/60]	Time 0.10063 (0.35028)	Data 0.00046 (0.23636)	Loss 0.1228 (0.9457)	Prec@1 100.00000 (71.59091)	Prec@5 100.00000 (98.10606)
Epoch: [8][34/60]	Time 0.10315 (0.34301)	Data 0.00042 (0.22942)	Loss 1.0520 (0.9489)	Prec@1 75.00000 (71.69118)	Prec@5 100.00000 (98.16177)
Epoch: [8][35/60]	Time 0.06747 (0.33514)	Data 0.00040 (0.22287)	Loss 2.0632 (0.9807)	Prec@1 37.50000 (70.71429)	Prec@5 87.50000 (97.85715)
Epoch: [8][36/60]	Time 0.04976 (0.32721)	Data 0.00060 (0.21670)	Loss 1.4931 (0.9949)	Prec@1 75.00000 (70.83334)	Prec@5 100.00000 (97.91666)
Epoch: [8][37/60]	Time 0.03435 (0.31930)	Data 0.00050 (0.21086)	Loss 1.8529 (1.0181)	Prec@1 62.50000 (70.60811)	Prec@5 100.00000 (97.97298)
Epoch: [8][38/60]	Time 0.03538 (0.31183)	Data 0.00042 (0.20532)	Loss 1.1432 (1.0214)	Prec@1 62.50000 (70.39474)	Prec@5 100.00000 (98.02631)
Epoch: [8][39/60]	Time 0.03799 (0.30481)	Data 0.00047 (0.20007)	Loss 0.6238 (1.0112)	Prec@1 87.50000 (70.83334)	Prec@5 100.00000 (98.07693)
Epoch: [8][40/60]	Time 0.03233 (0.29799)	Data 0.00040 (0.19507)	Loss 0.0540 (0.9873)	Prec@1 100.00000 (71.56250)	Prec@5 100.00000 (98.12500)
Epoch: [8][41/60]	Time 0.02962 (0.29145)	Data 0.00044 (0.19033)	Loss 1.3610 (0.9964)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (98.17073)
Epoch: [8][42/60]	Time 0.03085 (0.28524)	Data 0.00060 (0.18581)	Loss 0.5268 (0.9852)	Prec@1 87.50000 (72.02381)	Prec@5 100.00000 (98.21429)
Epoch: [8][43/60]	Time 0.02907 (0.27929)	Data 0.00055 (0.18150)	Loss 1.5809 (0.9991)	Prec@1 50.00000 (71.51163)	Prec@5 100.00000 (98.25581)
Epoch: [8][44/60]	Time 0.02278 (0.27346)	Data 0.00043 (0.17739)	Loss 2.2729 (1.0280)	Prec@1 25.00000 (70.45454)	Prec@5 100.00000 (98.29546)
Epoch: [8][45/60]	Time 0.02255 (0.26788)	Data 0.00043 (0.17345)	Loss 2.6195 (1.0634)	Prec@1 25.00000 (69.44444)	Prec@5 87.50000 (98.05556)
Epoch: [8][46/60]	Time 0.02311 (0.26256)	Data 0.00047 (0.16969)	Loss 2.0821 (1.0855)	Prec@1 50.00000 (69.02174)	Prec@5 87.50000 (97.82609)
Epoch: [8][47/60]	Time 0.02323 (0.25747)	Data 0.00051 (0.16609)	Loss 1.1303 (1.0865)	Prec@1 87.50000 (69.41489)	Prec@5 87.50000 (97.60638)
Epoch: [8][48/60]	Time 0.02326 (0.25259)	Data 0.00047 (0.16264)	Loss 1.5012 (1.0951)	Prec@1 37.50000 (68.75000)	Prec@5 100.00000 (97.65625)
Epoch: [8][49/60]	Time 0.02283 (0.24790)	Data 0.00043 (0.15933)	Loss 1.3608 (1.1006)	Prec@1 75.00000 (68.87755)	Prec@5 87.50000 (97.44897)
Epoch: [8][50/60]	Time 0.02251 (0.24339)	Data 0.00049 (0.15616)	Loss 1.0690 (1.0999)	Prec@1 75.00000 (69.00000)	Prec@5 100.00000 (97.50000)
Epoch: [8][51/60]	Time 0.02330 (0.23908)	Data 0.00045 (0.15310)	Loss 0.2677 (1.0836)	Prec@1 87.50000 (69.36275)	Prec@5 100.00000 (97.54903)
Epoch: [8][52/60]	Time 0.02326 (0.23493)	Data 0.00050 (0.15017)	Loss 1.2091 (1.0860)	Prec@1 62.50000 (69.23077)	Prec@5 100.00000 (97.59616)
Epoch: [8][53/60]	Time 0.02280 (0.23092)	Data 0.00045 (0.14734)	Loss 1.2660 (1.0894)	Prec@1 50.00000 (68.86793)	Prec@5 100.00000 (97.64151)
Epoch: [8][54/60]	Time 0.02265 (0.22707)	Data 0.00046 (0.14462)	Loss 1.3855 (1.0949)	Prec@1 50.00000 (68.51852)	Prec@5 100.00000 (97.68519)
Epoch: [8][55/60]	Time 0.02274 (0.22335)	Data 0.00046 (0.14200)	Loss 1.2566 (1.0978)	Prec@1 75.00000 (68.63636)	Prec@5 87.50000 (97.50000)
Epoch: [8][56/60]	Time 0.02365 (0.21979)	Data 0.00044 (0.13947)	Loss 0.9313 (1.0949)	Prec@1 87.50000 (68.97322)	Prec@5 100.00000 (97.54465)
Epoch: [8][57/60]	Time 0.02254 (0.21633)	Data 0.00042 (0.13703)	Loss 2.2662 (1.1154)	Prec@1 25.00000 (68.20175)	Prec@5 100.00000 (97.58772)
Epoch: [8][58/60]	Time 0.02308 (0.21299)	Data 0.00046 (0.13468)	Loss 1.6125 (1.1240)	Prec@1 75.00000 (68.31896)	Prec@5 100.00000 (97.62931)
Epoch: [8][59/60]	Time 0.02306 (0.20977)	Data 0.00045 (0.13240)	Loss 1.8820 (1.1368)	Prec@1 37.50000 (67.79661)	Prec@5 100.00000 (97.66949)
Epoch: [8][60/60]	Time 0.02311 (0.20666)	Data 0.00059 (0.13021)	Loss 0.3920 (1.1244)	Prec@1 75.00000 (67.91667)	Prec@5 100.00000 (97.70834)
train at epoch 9
train at epoch 9
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [9][0/272]	 lr: 0.04000	Time 9.340 (9.340)	Data 7.948 (7.948)	Loss 0.3669 (0.3669)	Prec@1 90.62500 (90.62500)	Prec@5 100.00000 (100.00000)
Epoch: [9][10/272]	 lr: 0.04000	Time 0.572 (1.291)	Data 0.142 (0.842)	Loss 0.6193 (0.4478)	Prec@1 71.87500 (85.22727)	Prec@5 100.00000 (100.00000)
Epoch: [9][20/272]	 lr: 0.04000	Time 0.371 (0.874)	Data 0.129 (0.503)	Loss 0.6899 (0.5184)	Prec@1 68.75000 (81.84524)	Prec@5 96.87500 (99.55357)
Epoch: [9][30/272]	 lr: 0.04000	Time 0.402 (0.724)	Data 0.128 (0.384)	Loss 0.6673 (0.5205)	Prec@1 84.37500 (81.75403)	Prec@5 96.87500 (99.49596)
Epoch: [9][40/272]	 lr: 0.04000	Time 0.394 (0.657)	Data 0.128 (0.322)	Loss 0.4126 (0.5356)	Prec@1 87.50000 (81.40244)	Prec@5 100.00000 (99.46646)
Epoch: [9][50/272]	 lr: 0.04000	Time 0.412 (0.611)	Data 0.128 (0.284)	Loss 0.3555 (0.4971)	Prec@1 90.62500 (82.84314)	Prec@5 100.00000 (99.50980)
Epoch: [9][60/272]	 lr: 0.04000	Time 0.520 (0.585)	Data 0.119 (0.260)	Loss 0.6445 (0.4938)	Prec@1 65.62500 (82.53073)	Prec@5 100.00000 (99.48770)
Epoch: [9][70/272]	 lr: 0.04000	Time 0.524 (0.566)	Data 0.134 (0.241)	Loss 0.3518 (0.4902)	Prec@1 87.50000 (82.57042)	Prec@5 100.00000 (99.55986)
Epoch: [9][80/272]	 lr: 0.04000	Time 0.430 (0.547)	Data 0.127 (0.227)	Loss 0.4470 (0.4961)	Prec@1 84.37500 (82.17593)	Prec@5 100.00000 (99.57561)
Epoch: [9][90/272]	 lr: 0.04000	Time 0.518 (0.536)	Data 0.129 (0.215)	Loss 0.5214 (0.4980)	Prec@1 84.37500 (82.17720)	Prec@5 100.00000 (99.55357)
Epoch: [9][100/272]	 lr: 0.04000	Time 0.535 (0.526)	Data 0.129 (0.206)	Loss 1.1455 (0.5063)	Prec@1 71.87500 (82.05445)	Prec@5 87.50000 (99.44307)
Epoch: [9][110/272]	 lr: 0.04000	Time 0.371 (0.518)	Data 0.127 (0.199)	Loss 0.4429 (0.5013)	Prec@1 81.25000 (82.03829)	Prec@5 100.00000 (99.46510)
Epoch: [9][120/272]	 lr: 0.04000	Time 0.469 (0.510)	Data 0.143 (0.194)	Loss 0.4844 (0.5021)	Prec@1 75.00000 (82.02479)	Prec@5 100.00000 (99.50929)
Epoch: [9][130/272]	 lr: 0.04000	Time 0.528 (0.506)	Data 0.128 (0.189)	Loss 0.6207 (0.5049)	Prec@1 71.87500 (81.91794)	Prec@5 96.87500 (99.49905)
Epoch: [9][140/272]	 lr: 0.04000	Time 0.471 (0.501)	Data 0.141 (0.185)	Loss 0.7783 (0.5022)	Prec@1 65.62500 (81.98138)	Prec@5 96.87500 (99.49024)
Epoch: [9][150/272]	 lr: 0.04000	Time 0.346 (0.496)	Data 0.135 (0.181)	Loss 0.7000 (0.4988)	Prec@1 65.62500 (82.05712)	Prec@5 100.00000 (99.50331)
Epoch: [9][160/272]	 lr: 0.04000	Time 0.437 (0.493)	Data 0.136 (0.178)	Loss 0.3255 (0.5045)	Prec@1 87.50000 (81.90994)	Prec@5 100.00000 (99.49535)
Epoch: [9][170/272]	 lr: 0.04000	Time 0.507 (0.490)	Data 0.120 (0.175)	Loss 0.4985 (0.5003)	Prec@1 75.00000 (82.09064)	Prec@5 100.00000 (99.50658)
Epoch: [9][180/272]	 lr: 0.04000	Time 0.502 (0.488)	Data 0.119 (0.173)	Loss 0.2805 (0.4982)	Prec@1 93.75000 (82.11327)	Prec@5 100.00000 (99.49931)
Epoch: [9][190/272]	 lr: 0.04000	Time 0.457 (0.485)	Data 0.150 (0.170)	Loss 0.7892 (0.4931)	Prec@1 68.75000 (82.34621)	Prec@5 96.87500 (99.49281)
Epoch: [9][200/272]	 lr: 0.04000	Time 0.437 (0.484)	Data 0.117 (0.168)	Loss 0.3172 (0.4914)	Prec@1 90.62500 (82.40050)	Prec@5 100.00000 (99.47139)
Epoch: [9][210/272]	 lr: 0.04000	Time 0.548 (0.483)	Data 0.142 (0.166)	Loss 0.6642 (0.4909)	Prec@1 81.25000 (82.47927)	Prec@5 100.00000 (99.49645)
Epoch: [9][220/272]	 lr: 0.04000	Time 0.433 (0.482)	Data 0.129 (0.164)	Loss 0.3412 (0.4900)	Prec@1 93.75000 (82.59333)	Prec@5 100.00000 (99.51923)
Epoch: [9][230/272]	 lr: 0.04000	Time 0.329 (0.480)	Data 0.128 (0.163)	Loss 0.6492 (0.4863)	Prec@1 71.87500 (82.73810)	Prec@5 100.00000 (99.52651)
Epoch: [9][240/272]	 lr: 0.04000	Time 0.243 (0.477)	Data 0.129 (0.161)	Loss 0.6459 (0.4843)	Prec@1 71.87500 (82.83195)	Prec@5 96.87500 (99.53320)
Epoch: [9][250/272]	 lr: 0.04000	Time 0.238 (0.468)	Data 0.128 (0.160)	Loss 0.8927 (0.4847)	Prec@1 84.37500 (82.80627)	Prec@5 93.75000 (99.51444)
Epoch: [9][260/272]	 lr: 0.04000	Time 0.238 (0.459)	Data 0.128 (0.159)	Loss 0.7339 (0.4879)	Prec@1 68.75000 (82.72270)	Prec@5 100.00000 (99.52107)
Epoch: [9][270/272]	 lr: 0.04000	Time 0.239 (0.451)	Data 0.129 (0.157)	Loss 0.4395 (0.4869)	Prec@1 81.25000 (82.73755)	Prec@5 100.00000 (99.53875)
validation at epoch 9
validation at epoch 9
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [9][1/60]	Time 6.91202 (6.91202)	Data 6.80383 (6.80383)	Loss 0.4008 (0.4008)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [9][2/60]	Time 0.36464 (3.63833)	Data 0.14886 (3.47634)	Loss 0.8637 (0.6322)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [9][3/60]	Time 0.04713 (2.44126)	Data 0.00600 (2.31956)	Loss 1.0784 (0.7809)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [9][4/60]	Time 0.10838 (1.85804)	Data 0.00082 (1.73988)	Loss 0.7599 (0.7757)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [9][5/60]	Time 0.43918 (1.57427)	Data 0.39972 (1.47185)	Loss 1.1408 (0.8487)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [9][6/60]	Time 0.18027 (1.34194)	Data 0.00834 (1.22793)	Loss 0.1461 (0.7316)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [9][7/60]	Time 0.12427 (1.16798)	Data 0.05577 (1.06048)	Loss 1.1211 (0.7873)	Prec@1 75.00000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [9][8/60]	Time 0.11956 (1.03693)	Data 0.04203 (0.93317)	Loss 0.5566 (0.7584)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [9][9/60]	Time 0.07602 (0.93016)	Data 0.01341 (0.83098)	Loss 1.2723 (0.8155)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [9][10/60]	Time 0.07932 (0.84508)	Data 0.00163 (0.74804)	Loss 0.1723 (0.7512)	Prec@1 100.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [9][11/60]	Time 0.07556 (0.77512)	Data 0.00258 (0.68027)	Loss 0.2708 (0.7075)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [9][12/60]	Time 0.21510 (0.72845)	Data 0.05397 (0.62808)	Loss 0.9295 (0.7260)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [9][13/60]	Time 0.10876 (0.68079)	Data 0.00063 (0.57981)	Loss 1.5844 (0.7921)	Prec@1 37.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [9][14/60]	Time 0.07113 (0.63724)	Data 0.01458 (0.53944)	Loss 0.5766 (0.7767)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [9][15/60]	Time 0.22768 (0.60993)	Data 0.15134 (0.51357)	Loss 0.9544 (0.7885)	Prec@1 62.50000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [9][16/60]	Time 0.26458 (0.58835)	Data 0.13277 (0.48977)	Loss 1.6968 (0.8453)	Prec@1 62.50000 (74.21875)	Prec@5 87.50000 (99.21875)
Epoch: [9][17/60]	Time 0.15377 (0.56279)	Data 0.05584 (0.46424)	Loss 0.9160 (0.8494)	Prec@1 75.00000 (74.26471)	Prec@5 87.50000 (98.52941)
Epoch: [9][18/60]	Time 0.18425 (0.54176)	Data 0.11443 (0.44481)	Loss 2.1453 (0.9214)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (98.61111)
Epoch: [9][19/60]	Time 0.12539 (0.51984)	Data 0.00852 (0.42185)	Loss 0.0490 (0.8755)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (98.68421)
Epoch: [9][20/60]	Time 0.08882 (0.49829)	Data 0.01073 (0.40129)	Loss 2.8998 (0.9767)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [9][21/60]	Time 0.10458 (0.47954)	Data 0.00222 (0.38229)	Loss 1.5927 (1.0061)	Prec@1 50.00000 (73.80952)	Prec@5 62.50000 (97.02381)
Epoch: [9][22/60]	Time 0.13736 (0.46399)	Data 0.04344 (0.36688)	Loss 0.9824 (1.0050)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (97.15910)
Epoch: [9][23/60]	Time 0.10240 (0.44827)	Data 0.00888 (0.35132)	Loss 1.7208 (1.0361)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (97.28261)
Epoch: [9][24/60]	Time 0.11100 (0.43422)	Data 0.01087 (0.33713)	Loss 1.5555 (1.0578)	Prec@1 62.50000 (72.39584)	Prec@5 87.50000 (96.87500)
Epoch: [9][25/60]	Time 0.18074 (0.42408)	Data 0.00286 (0.32376)	Loss 0.7016 (1.0435)	Prec@1 87.50000 (73.00000)	Prec@5 87.50000 (96.50000)
Epoch: [9][26/60]	Time 0.14745 (0.41344)	Data 0.01991 (0.31208)	Loss 0.5172 (1.0233)	Prec@1 62.50000 (72.59615)	Prec@5 100.00000 (96.63462)
Epoch: [9][27/60]	Time 0.24507 (0.40720)	Data 0.06340 (0.30287)	Loss 1.2049 (1.0300)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (96.75926)
Epoch: [9][28/60]	Time 0.09177 (0.39594)	Data 0.01463 (0.29257)	Loss 0.1292 (0.9978)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (96.87501)
Epoch: [9][29/60]	Time 0.04254 (0.38375)	Data 0.00395 (0.28262)	Loss 0.5793 (0.9834)	Prec@1 62.50000 (72.84483)	Prec@5 100.00000 (96.98276)
Epoch: [9][30/60]	Time 0.05911 (0.37293)	Data 0.00083 (0.27323)	Loss 2.0867 (1.0202)	Prec@1 37.50000 (71.66667)	Prec@5 87.50000 (96.66667)
Epoch: [9][31/60]	Time 0.06276 (0.36292)	Data 0.00058 (0.26443)	Loss 3.8053 (1.1100)	Prec@1 12.50000 (69.75806)	Prec@5 87.50000 (96.37096)
Epoch: [9][32/60]	Time 0.06533 (0.35362)	Data 0.01254 (0.25656)	Loss 2.4702 (1.1525)	Prec@1 37.50000 (68.75000)	Prec@5 100.00000 (96.48438)
Epoch: [9][33/60]	Time 0.06731 (0.34495)	Data 0.00070 (0.24881)	Loss 0.0376 (1.1187)	Prec@1 100.00000 (69.69697)	Prec@5 100.00000 (96.59091)
Epoch: [9][34/60]	Time 0.04156 (0.33602)	Data 0.00037 (0.24150)	Loss 1.5577 (1.1316)	Prec@1 62.50000 (69.48530)	Prec@5 100.00000 (96.69118)
Epoch: [9][35/60]	Time 0.03914 (0.32754)	Data 0.00153 (0.23464)	Loss 2.4108 (1.1682)	Prec@1 62.50000 (69.28571)	Prec@5 87.50000 (96.42857)
Epoch: [9][36/60]	Time 0.03674 (0.31946)	Data 0.00063 (0.22814)	Loss 1.2949 (1.1717)	Prec@1 62.50000 (69.09722)	Prec@5 100.00000 (96.52778)
Epoch: [9][37/60]	Time 0.02499 (0.31150)	Data 0.00063 (0.22199)	Loss 2.0336 (1.1950)	Prec@1 62.50000 (68.91892)	Prec@5 87.50000 (96.28378)
Epoch: [9][38/60]	Time 0.03042 (0.30411)	Data 0.00376 (0.21625)	Loss 2.5778 (1.2314)	Prec@1 37.50000 (68.09210)	Prec@5 87.50000 (96.05264)
Epoch: [9][39/60]	Time 0.02313 (0.29690)	Data 0.00074 (0.21072)	Loss 0.0812 (1.2019)	Prec@1 100.00000 (68.91026)	Prec@5 100.00000 (96.15385)
Epoch: [9][40/60]	Time 0.02302 (0.29006)	Data 0.00075 (0.20548)	Loss 0.5581 (1.1858)	Prec@1 87.50000 (69.37500)	Prec@5 100.00000 (96.25000)
Epoch: [9][41/60]	Time 0.02419 (0.28357)	Data 0.00078 (0.20048)	Loss 2.0715 (1.2074)	Prec@1 50.00000 (68.90244)	Prec@5 100.00000 (96.34146)
Epoch: [9][42/60]	Time 0.02294 (0.27737)	Data 0.00060 (0.19572)	Loss 1.7179 (1.2196)	Prec@1 62.50000 (68.75000)	Prec@5 87.50000 (96.13095)
Epoch: [9][43/60]	Time 0.02313 (0.27145)	Data 0.00083 (0.19119)	Loss 1.4073 (1.2239)	Prec@1 62.50000 (68.60465)	Prec@5 100.00000 (96.22093)
Epoch: [9][44/60]	Time 0.02275 (0.26580)	Data 0.00047 (0.18686)	Loss 2.5721 (1.2546)	Prec@1 25.00000 (67.61364)	Prec@5 100.00000 (96.30682)
Epoch: [9][45/60]	Time 0.02307 (0.26041)	Data 0.00046 (0.18271)	Loss 1.4113 (1.2581)	Prec@1 75.00000 (67.77778)	Prec@5 87.50000 (96.11111)
Epoch: [9][46/60]	Time 0.02353 (0.25526)	Data 0.00049 (0.17875)	Loss 2.3204 (1.2811)	Prec@1 62.50000 (67.66305)	Prec@5 87.50000 (95.92391)
Epoch: [9][47/60]	Time 0.02278 (0.25031)	Data 0.00044 (0.17496)	Loss 0.2453 (1.2591)	Prec@1 87.50000 (68.08511)	Prec@5 100.00000 (96.01064)
Epoch: [9][48/60]	Time 0.02289 (0.24557)	Data 0.00043 (0.17132)	Loss 0.8195 (1.2500)	Prec@1 62.50000 (67.96875)	Prec@5 100.00000 (96.09375)
Epoch: [9][49/60]	Time 0.02260 (0.24102)	Data 0.00047 (0.16784)	Loss 1.4747 (1.2545)	Prec@1 62.50000 (67.85714)	Prec@5 87.50000 (95.91837)
Epoch: [9][50/60]	Time 0.02317 (0.23667)	Data 0.00043 (0.16449)	Loss 0.2010 (1.2335)	Prec@1 87.50000 (68.25000)	Prec@5 100.00000 (96.00000)
Epoch: [9][51/60]	Time 0.02336 (0.23248)	Data 0.00048 (0.16127)	Loss 1.2386 (1.2336)	Prec@1 87.50000 (68.62746)	Prec@5 100.00000 (96.07844)
Epoch: [9][52/60]	Time 0.02264 (0.22845)	Data 0.00047 (0.15818)	Loss 0.8846 (1.2269)	Prec@1 62.50000 (68.50962)	Prec@5 100.00000 (96.15385)
Epoch: [9][53/60]	Time 0.02263 (0.22456)	Data 0.00044 (0.15520)	Loss 2.2110 (1.2454)	Prec@1 50.00000 (68.16038)	Prec@5 87.50000 (95.99057)
Epoch: [9][54/60]	Time 0.02303 (0.22083)	Data 0.00044 (0.15234)	Loss 2.4287 (1.2673)	Prec@1 37.50000 (67.59259)	Prec@5 100.00000 (96.06482)
Epoch: [9][55/60]	Time 0.02358 (0.21725)	Data 0.00043 (0.14958)	Loss 0.0939 (1.2460)	Prec@1 100.00000 (68.18182)	Prec@5 100.00000 (96.13636)
Epoch: [9][56/60]	Time 0.02380 (0.21379)	Data 0.00044 (0.14691)	Loss 0.8922 (1.2397)	Prec@1 87.50000 (68.52679)	Prec@5 100.00000 (96.20536)
Epoch: [9][57/60]	Time 0.02286 (0.21044)	Data 0.00042 (0.14434)	Loss 1.6627 (1.2471)	Prec@1 62.50000 (68.42105)	Prec@5 75.00000 (95.83334)
Epoch: [9][58/60]	Time 0.02285 (0.20721)	Data 0.00046 (0.14186)	Loss 1.3620 (1.2491)	Prec@1 75.00000 (68.53448)	Prec@5 87.50000 (95.68965)
Epoch: [9][59/60]	Time 0.02470 (0.20411)	Data 0.00049 (0.13947)	Loss 1.5011 (1.2534)	Prec@1 37.50000 (68.00848)	Prec@5 100.00000 (95.76271)
Epoch: [9][60/60]	Time 0.02379 (0.20111)	Data 0.00052 (0.13715)	Loss 1.1341 (1.2514)	Prec@1 87.50000 (68.33334)	Prec@5 100.00000 (95.83334)
train at epoch 10
train at epoch 10
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [10][0/272]	 lr: 0.04000	Time 9.621 (9.621)	Data 8.840 (8.840)	Loss 0.3979 (0.3979)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10][10/272]	 lr: 0.04000	Time 0.468 (1.294)	Data 0.128 (0.921)	Loss 0.2512 (0.3311)	Prec@1 93.75000 (91.19318)	Prec@5 100.00000 (100.00000)
Epoch: [10][20/272]	 lr: 0.04000	Time 0.496 (0.873)	Data 0.130 (0.545)	Loss 0.5950 (0.3523)	Prec@1 81.25000 (89.58334)	Prec@5 100.00000 (99.85119)
Epoch: [10][30/272]	 lr: 0.04000	Time 0.444 (0.734)	Data 0.133 (0.412)	Loss 0.3856 (0.3753)	Prec@1 84.37500 (88.40726)	Prec@5 100.00000 (99.89919)
Epoch: [10][40/272]	 lr: 0.04000	Time 0.422 (0.663)	Data 0.135 (0.343)	Loss 0.2832 (0.3730)	Prec@1 87.50000 (87.72865)	Prec@5 100.00000 (99.84756)
Epoch: [10][50/272]	 lr: 0.04000	Time 0.500 (0.620)	Data 0.129 (0.301)	Loss 0.7267 (0.3886)	Prec@1 75.00000 (86.94853)	Prec@5 100.00000 (99.87746)
Epoch: [10][60/272]	 lr: 0.04000	Time 0.393 (0.594)	Data 0.123 (0.273)	Loss 0.4796 (0.4026)	Prec@1 87.50000 (86.68032)	Prec@5 100.00000 (99.84631)
Epoch: [10][70/272]	 lr: 0.04000	Time 0.391 (0.576)	Data 0.128 (0.252)	Loss 0.2888 (0.4004)	Prec@1 87.50000 (86.61972)	Prec@5 100.00000 (99.86796)
Epoch: [10][80/272]	 lr: 0.04000	Time 0.435 (0.557)	Data 0.127 (0.237)	Loss 0.2810 (0.4078)	Prec@1 90.62500 (86.34259)	Prec@5 100.00000 (99.80710)
Epoch: [10][90/272]	 lr: 0.04000	Time 0.382 (0.546)	Data 0.118 (0.225)	Loss 0.2057 (0.4011)	Prec@1 96.87500 (86.74451)	Prec@5 100.00000 (99.79396)
Epoch: [10][100/272]	 lr: 0.04000	Time 0.480 (0.536)	Data 0.128 (0.215)	Loss 0.3606 (0.4087)	Prec@1 87.50000 (86.35519)	Prec@5 100.00000 (99.81435)
Epoch: [10][110/272]	 lr: 0.04000	Time 0.436 (0.527)	Data 0.101 (0.207)	Loss 0.3762 (0.4142)	Prec@1 90.62500 (86.17680)	Prec@5 100.00000 (99.83109)
Epoch: [10][120/272]	 lr: 0.04000	Time 0.436 (0.520)	Data 0.103 (0.200)	Loss 0.4723 (0.4088)	Prec@1 81.25000 (86.33781)	Prec@5 100.00000 (99.84504)
Epoch: [10][130/272]	 lr: 0.04000	Time 0.487 (0.513)	Data 0.130 (0.194)	Loss 1.4450 (0.4145)	Prec@1 59.37500 (86.11641)	Prec@5 100.00000 (99.83302)
Epoch: [10][140/272]	 lr: 0.04000	Time 0.506 (0.507)	Data 0.141 (0.190)	Loss 0.1788 (0.4130)	Prec@1 96.87500 (86.23670)	Prec@5 100.00000 (99.82269)
Epoch: [10][150/272]	 lr: 0.04000	Time 0.420 (0.504)	Data 0.128 (0.186)	Loss 0.3287 (0.4135)	Prec@1 90.62500 (86.32037)	Prec@5 100.00000 (99.81374)
Epoch: [10][160/272]	 lr: 0.04000	Time 0.388 (0.501)	Data 0.120 (0.183)	Loss 0.1372 (0.4149)	Prec@1 100.00000 (86.21895)	Prec@5 100.00000 (99.82531)
Epoch: [10][170/272]	 lr: 0.04000	Time 0.452 (0.498)	Data 0.126 (0.180)	Loss 0.1910 (0.4108)	Prec@1 96.87500 (86.36696)	Prec@5 100.00000 (99.81725)
Epoch: [10][180/272]	 lr: 0.04000	Time 0.458 (0.495)	Data 0.132 (0.177)	Loss 0.1716 (0.4081)	Prec@1 96.87500 (86.46409)	Prec@5 100.00000 (99.81009)
Epoch: [10][190/272]	 lr: 0.04000	Time 0.411 (0.492)	Data 0.128 (0.175)	Loss 0.2898 (0.4065)	Prec@1 90.62500 (86.50196)	Prec@5 100.00000 (99.82003)
Epoch: [10][200/272]	 lr: 0.04000	Time 0.606 (0.490)	Data 0.126 (0.172)	Loss 0.5111 (0.4064)	Prec@1 84.37500 (86.53606)	Prec@5 100.00000 (99.82898)
Epoch: [10][210/272]	 lr: 0.04000	Time 0.439 (0.488)	Data 0.138 (0.170)	Loss 0.4510 (0.4087)	Prec@1 81.25000 (86.43365)	Prec@5 100.00000 (99.82228)
Epoch: [10][220/272]	 lr: 0.04000	Time 0.383 (0.485)	Data 0.125 (0.168)	Loss 0.5712 (0.4137)	Prec@1 81.25000 (86.15668)	Prec@5 100.00000 (99.81618)
Epoch: [10][230/272]	 lr: 0.04000	Time 0.430 (0.484)	Data 0.127 (0.167)	Loss 0.3430 (0.4174)	Prec@1 90.62500 (85.95779)	Prec@5 100.00000 (99.77002)
Epoch: [10][240/272]	 lr: 0.04000	Time 0.288 (0.482)	Data 0.132 (0.165)	Loss 0.5452 (0.4181)	Prec@1 75.00000 (85.90509)	Prec@5 96.87500 (99.75364)
Epoch: [10][250/272]	 lr: 0.04000	Time 0.239 (0.472)	Data 0.128 (0.163)	Loss 0.6065 (0.4175)	Prec@1 81.25000 (85.90638)	Prec@5 100.00000 (99.76345)
Epoch: [10][260/272]	 lr: 0.04000	Time 0.239 (0.463)	Data 0.129 (0.162)	Loss 0.2915 (0.4195)	Prec@1 90.62500 (85.89559)	Prec@5 100.00000 (99.77251)
Epoch: [10][270/272]	 lr: 0.04000	Time 0.238 (0.455)	Data 0.129 (0.161)	Loss 0.3851 (0.4189)	Prec@1 87.50000 (85.86255)	Prec@5 100.00000 (99.76937)
validation at epoch 10
validation at epoch 10
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [10][1/60]	Time 4.61272 (4.61272)	Data 4.43156 (4.43156)	Loss 0.6344 (0.6344)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10][2/60]	Time 0.22806 (2.42039)	Data 0.12462 (2.27809)	Loss 0.3773 (0.5058)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [10][3/60]	Time 2.48546 (2.44208)	Data 2.27268 (2.27629)	Loss 1.5340 (0.8486)	Prec@1 62.50000 (70.83334)	Prec@5 75.00000 (91.66667)
Epoch: [10][4/60]	Time 0.11151 (1.85944)	Data 0.00768 (1.70914)	Loss 0.5072 (0.7632)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (93.75000)
Epoch: [10][5/60]	Time 0.09726 (1.50700)	Data 0.00064 (1.36744)	Loss 2.0758 (1.0257)	Prec@1 37.50000 (65.00000)	Prec@5 87.50000 (92.50000)
Epoch: [10][6/60]	Time 0.15340 (1.28140)	Data 0.02242 (1.14327)	Loss 1.0141 (1.0238)	Prec@1 62.50000 (64.58334)	Prec@5 100.00000 (93.75000)
Epoch: [10][7/60]	Time 0.14598 (1.11920)	Data 0.00211 (0.98024)	Loss 1.6103 (1.1076)	Prec@1 62.50000 (64.28572)	Prec@5 100.00000 (94.64286)
Epoch: [10][8/60]	Time 0.15734 (0.99897)	Data 0.00895 (0.85883)	Loss 1.3196 (1.1341)	Prec@1 50.00000 (62.50000)	Prec@5 100.00000 (95.31250)
Epoch: [10][9/60]	Time 0.13715 (0.90321)	Data 0.01614 (0.76520)	Loss 1.6351 (1.1897)	Prec@1 50.00000 (61.11111)	Prec@5 100.00000 (95.83334)
Epoch: [10][10/60]	Time 0.29185 (0.84207)	Data 0.07964 (0.69664)	Loss 0.8131 (1.1521)	Prec@1 62.50000 (61.25000)	Prec@5 100.00000 (96.25000)
Epoch: [10][11/60]	Time 0.21929 (0.78546)	Data 0.00087 (0.63339)	Loss 1.0675 (1.1444)	Prec@1 62.50000 (61.36364)	Prec@5 100.00000 (96.59091)
Epoch: [10][12/60]	Time 0.20636 (0.73720)	Data 0.00071 (0.58067)	Loss 0.8112 (1.1166)	Prec@1 62.50000 (61.45834)	Prec@5 100.00000 (96.87500)
Epoch: [10][13/60]	Time 0.21623 (0.69712)	Data 0.13200 (0.54616)	Loss 1.9275 (1.1790)	Prec@1 12.50000 (57.69231)	Prec@5 87.50000 (96.15385)
Epoch: [10][14/60]	Time 0.16009 (0.65876)	Data 0.03907 (0.50993)	Loss 1.7564 (1.2202)	Prec@1 50.00000 (57.14286)	Prec@5 100.00000 (96.42857)
Epoch: [10][15/60]	Time 0.13729 (0.62400)	Data 0.00635 (0.47636)	Loss 1.7888 (1.2581)	Prec@1 62.50000 (57.50000)	Prec@5 100.00000 (96.66667)
Epoch: [10][16/60]	Time 0.15223 (0.59451)	Data 0.00723 (0.44704)	Loss 2.1730 (1.3153)	Prec@1 62.50000 (57.81250)	Prec@5 87.50000 (96.09375)
Epoch: [10][17/60]	Time 0.21030 (0.57191)	Data 0.09299 (0.42621)	Loss 0.9380 (1.2931)	Prec@1 62.50000 (58.08823)	Prec@5 100.00000 (96.32353)
Epoch: [10][18/60]	Time 0.20805 (0.55170)	Data 0.00998 (0.40309)	Loss 2.9834 (1.3870)	Prec@1 62.50000 (58.33333)	Prec@5 87.50000 (95.83334)
Epoch: [10][19/60]	Time 0.13394 (0.52971)	Data 0.01501 (0.38266)	Loss 0.4782 (1.3392)	Prec@1 87.50000 (59.86842)	Prec@5 100.00000 (96.05264)
Epoch: [10][20/60]	Time 0.06620 (0.50653)	Data 0.02083 (0.36457)	Loss 4.2317 (1.4838)	Prec@1 62.50000 (60.00000)	Prec@5 62.50000 (94.37500)
Epoch: [10][21/60]	Time 0.06949 (0.48572)	Data 0.00050 (0.34724)	Loss 0.9805 (1.4598)	Prec@1 50.00000 (59.52381)	Prec@5 100.00000 (94.64286)
Epoch: [10][22/60]	Time 0.11054 (0.46867)	Data 0.01101 (0.33195)	Loss 1.3368 (1.4543)	Prec@1 87.50000 (60.79546)	Prec@5 87.50000 (94.31818)
Epoch: [10][23/60]	Time 0.09078 (0.45224)	Data 0.00073 (0.31755)	Loss 2.8138 (1.5134)	Prec@1 37.50000 (59.78261)	Prec@5 87.50000 (94.02174)
Epoch: [10][24/60]	Time 0.16582 (0.44031)	Data 0.07675 (0.30752)	Loss 1.2146 (1.5009)	Prec@1 62.50000 (59.89584)	Prec@5 100.00000 (94.27084)
Epoch: [10][25/60]	Time 0.11449 (0.42727)	Data 0.01795 (0.29594)	Loss 0.8383 (1.4744)	Prec@1 75.00000 (60.50000)	Prec@5 100.00000 (94.50000)
Epoch: [10][26/60]	Time 0.09788 (0.41460)	Data 0.00516 (0.28475)	Loss 0.4594 (1.4354)	Prec@1 87.50000 (61.53846)	Prec@5 100.00000 (94.71154)
Epoch: [10][27/60]	Time 0.18332 (0.40604)	Data 0.01613 (0.27480)	Loss 2.1388 (1.4614)	Prec@1 62.50000 (61.57407)	Prec@5 87.50000 (94.44444)
Epoch: [10][28/60]	Time 0.17871 (0.39792)	Data 0.00646 (0.26522)	Loss 0.4295 (1.4246)	Prec@1 75.00000 (62.05357)	Prec@5 100.00000 (94.64286)
Epoch: [10][29/60]	Time 0.15801 (0.38965)	Data 0.00046 (0.25609)	Loss 1.3645 (1.4225)	Prec@1 50.00000 (61.63793)	Prec@5 100.00000 (94.82758)
Epoch: [10][30/60]	Time 0.11013 (0.38033)	Data 0.00054 (0.24757)	Loss 2.1956 (1.4483)	Prec@1 50.00000 (61.25000)	Prec@5 100.00000 (95.00001)
Epoch: [10][31/60]	Time 0.09929 (0.37126)	Data 0.00046 (0.23960)	Loss 4.1719 (1.5361)	Prec@1 50.00000 (60.88710)	Prec@5 100.00000 (95.16129)
Epoch: [10][32/60]	Time 0.06279 (0.36162)	Data 0.00042 (0.23213)	Loss 3.8187 (1.6075)	Prec@1 62.50000 (60.93750)	Prec@5 100.00000 (95.31250)
Epoch: [10][33/60]	Time 0.04287 (0.35196)	Data 0.00041 (0.22510)	Loss 0.4414 (1.5721)	Prec@1 87.50000 (61.74243)	Prec@5 100.00000 (95.45455)
Epoch: [10][34/60]	Time 0.02933 (0.34247)	Data 0.00214 (0.21855)	Loss 3.4190 (1.6264)	Prec@1 37.50000 (61.02941)	Prec@5 100.00000 (95.58823)
Epoch: [10][35/60]	Time 0.03229 (0.33361)	Data 0.00358 (0.21241)	Loss 2.1945 (1.6427)	Prec@1 50.00000 (60.71429)	Prec@5 100.00000 (95.71429)
Epoch: [10][36/60]	Time 0.03011 (0.32518)	Data 0.00192 (0.20656)	Loss 2.7234 (1.6727)	Prec@1 75.00000 (61.11111)	Prec@5 100.00000 (95.83334)
Epoch: [10][37/60]	Time 0.03199 (0.31726)	Data 0.00181 (0.20102)	Loss 2.2423 (1.6881)	Prec@1 62.50000 (61.14865)	Prec@5 100.00000 (95.94595)
Epoch: [10][38/60]	Time 0.02973 (0.30969)	Data 0.00193 (0.19579)	Loss 4.1396 (1.7526)	Prec@1 37.50000 (60.52632)	Prec@5 100.00000 (96.05264)
Epoch: [10][39/60]	Time 0.02920 (0.30250)	Data 0.00210 (0.19082)	Loss 0.1041 (1.7103)	Prec@1 100.00000 (61.53846)	Prec@5 100.00000 (96.15385)
Epoch: [10][40/60]	Time 0.02641 (0.29560)	Data 0.00038 (0.18606)	Loss 2.3269 (1.7258)	Prec@1 62.50000 (61.56250)	Prec@5 100.00000 (96.25000)
Epoch: [10][41/60]	Time 0.02749 (0.28906)	Data 0.00099 (0.18154)	Loss 2.3812 (1.7417)	Prec@1 75.00000 (61.89024)	Prec@5 100.00000 (96.34146)
Epoch: [10][42/60]	Time 0.02761 (0.28283)	Data 0.00107 (0.17725)	Loss 2.9833 (1.7713)	Prec@1 37.50000 (61.30952)	Prec@5 100.00000 (96.42857)
Epoch: [10][43/60]	Time 0.02712 (0.27689)	Data 0.00091 (0.17315)	Loss 2.7043 (1.7930)	Prec@1 75.00000 (61.62791)	Prec@5 100.00000 (96.51163)
Epoch: [10][44/60]	Time 0.02690 (0.27120)	Data 0.00096 (0.16923)	Loss 2.7094 (1.8138)	Prec@1 62.50000 (61.64773)	Prec@5 100.00000 (96.59091)
Epoch: [10][45/60]	Time 0.02678 (0.26577)	Data 0.00044 (0.16548)	Loss 1.0762 (1.7974)	Prec@1 75.00000 (61.94445)	Prec@5 100.00000 (96.66667)
Epoch: [10][46/60]	Time 0.02852 (0.26061)	Data 0.00044 (0.16189)	Loss 1.0789 (1.7818)	Prec@1 50.00000 (61.68478)	Prec@5 100.00000 (96.73914)
Epoch: [10][47/60]	Time 0.02645 (0.25563)	Data 0.00051 (0.15846)	Loss 1.5172 (1.7762)	Prec@1 75.00000 (61.96808)	Prec@5 87.50000 (96.54255)
Epoch: [10][48/60]	Time 0.02610 (0.25085)	Data 0.00042 (0.15517)	Loss 1.7744 (1.7761)	Prec@1 37.50000 (61.45834)	Prec@5 87.50000 (96.35417)
Epoch: [10][49/60]	Time 0.02288 (0.24620)	Data 0.00041 (0.15201)	Loss 0.8217 (1.7567)	Prec@1 50.00000 (61.22449)	Prec@5 100.00000 (96.42857)
Epoch: [10][50/60]	Time 0.02278 (0.24173)	Data 0.00049 (0.14898)	Loss 1.3068 (1.7477)	Prec@1 62.50000 (61.25000)	Prec@5 87.50000 (96.25000)
Epoch: [10][51/60]	Time 0.02275 (0.23744)	Data 0.00047 (0.14607)	Loss 0.5442 (1.7241)	Prec@1 75.00000 (61.51961)	Prec@5 100.00000 (96.32353)
Epoch: [10][52/60]	Time 0.02229 (0.23330)	Data 0.00043 (0.14327)	Loss 2.9166 (1.7470)	Prec@1 37.50000 (61.05769)	Prec@5 75.00000 (95.91347)
Epoch: [10][53/60]	Time 0.02207 (0.22931)	Data 0.00038 (0.14057)	Loss 2.3026 (1.7575)	Prec@1 37.50000 (60.61321)	Prec@5 87.50000 (95.75471)
Epoch: [10][54/60]	Time 0.02258 (0.22548)	Data 0.00045 (0.13798)	Loss 1.2934 (1.7489)	Prec@1 75.00000 (60.87963)	Prec@5 100.00000 (95.83334)
Epoch: [10][55/60]	Time 0.02263 (0.22180)	Data 0.00045 (0.13548)	Loss 2.2560 (1.7581)	Prec@1 50.00000 (60.68182)	Prec@5 87.50000 (95.68182)
Epoch: [10][56/60]	Time 0.02277 (0.21824)	Data 0.00049 (0.13306)	Loss 0.8914 (1.7426)	Prec@1 62.50000 (60.71429)	Prec@5 100.00000 (95.75893)
Epoch: [10][57/60]	Time 0.02357 (0.21483)	Data 0.00044 (0.13074)	Loss 1.3255 (1.7353)	Prec@1 62.50000 (60.74561)	Prec@5 87.50000 (95.61404)
Epoch: [10][58/60]	Time 0.02283 (0.21152)	Data 0.00049 (0.12849)	Loss 0.8007 (1.7192)	Prec@1 75.00000 (60.99138)	Prec@5 100.00000 (95.68965)
Epoch: [10][59/60]	Time 0.02210 (0.20831)	Data 0.00048 (0.12632)	Loss 1.3718 (1.7133)	Prec@1 75.00000 (61.22881)	Prec@5 100.00000 (95.76271)
Epoch: [10][60/60]	Time 0.02331 (0.20522)	Data 0.00059 (0.12423)	Loss 0.4798 (1.6928)	Prec@1 87.50000 (61.66667)	Prec@5 100.00000 (95.83334)
train at epoch 11
train at epoch 11
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [11][0/272]	 lr: 0.04000	Time 9.363 (9.363)	Data 9.010 (9.010)	Loss 0.7416 (0.7416)	Prec@1 71.87500 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [11][10/272]	 lr: 0.04000	Time 0.488 (1.304)	Data 0.143 (0.937)	Loss 0.4786 (0.4744)	Prec@1 84.37500 (82.38637)	Prec@5 100.00000 (99.71591)
Epoch: [11][20/272]	 lr: 0.04000	Time 0.430 (0.886)	Data 0.147 (0.555)	Loss 0.1385 (0.5336)	Prec@1 96.87500 (80.80357)	Prec@5 100.00000 (98.95834)
Epoch: [11][30/272]	 lr: 0.04000	Time 0.349 (0.743)	Data 0.131 (0.419)	Loss 0.3849 (0.4882)	Prec@1 81.25000 (82.66129)	Prec@5 100.00000 (99.19354)
Epoch: [11][40/272]	 lr: 0.04000	Time 0.406 (0.672)	Data 0.127 (0.348)	Loss 0.2946 (0.4746)	Prec@1 87.50000 (83.07926)	Prec@5 100.00000 (99.31402)
Epoch: [11][50/272]	 lr: 0.04000	Time 0.420 (0.628)	Data 0.125 (0.306)	Loss 0.2149 (0.4527)	Prec@1 93.75000 (83.82353)	Prec@5 100.00000 (99.38726)
Epoch: [11][60/272]	 lr: 0.04000	Time 0.439 (0.600)	Data 0.118 (0.277)	Loss 0.2196 (0.4331)	Prec@1 96.87500 (84.88729)	Prec@5 100.00000 (99.43647)
Epoch: [11][70/272]	 lr: 0.04000	Time 0.416 (0.577)	Data 0.109 (0.256)	Loss 0.2694 (0.4300)	Prec@1 90.62500 (84.99120)	Prec@5 100.00000 (99.47183)
Epoch: [11][80/272]	 lr: 0.04000	Time 0.382 (0.558)	Data 0.126 (0.240)	Loss 0.5547 (0.4268)	Prec@1 78.12500 (85.14661)	Prec@5 100.00000 (99.53704)
Epoch: [11][90/272]	 lr: 0.04000	Time 0.415 (0.548)	Data 0.151 (0.229)	Loss 0.2285 (0.4175)	Prec@1 93.75000 (85.54259)	Prec@5 100.00000 (99.55357)
Epoch: [11][100/272]	 lr: 0.04000	Time 0.562 (0.538)	Data 0.147 (0.219)	Loss 0.2741 (0.4207)	Prec@1 90.62500 (85.48886)	Prec@5 96.87500 (99.50495)
Epoch: [11][110/272]	 lr: 0.04000	Time 0.516 (0.529)	Data 0.147 (0.211)	Loss 0.3451 (0.4220)	Prec@1 90.62500 (85.36036)	Prec@5 100.00000 (99.52140)
Epoch: [11][120/272]	 lr: 0.04000	Time 0.334 (0.523)	Data 0.125 (0.204)	Loss 0.4563 (0.4225)	Prec@1 81.25000 (85.20144)	Prec@5 100.00000 (99.56094)
Epoch: [11][130/272]	 lr: 0.04000	Time 0.408 (0.516)	Data 0.131 (0.199)	Loss 0.6099 (0.4235)	Prec@1 81.25000 (85.18607)	Prec@5 96.87500 (99.57061)
Epoch: [11][140/272]	 lr: 0.04000	Time 0.400 (0.511)	Data 0.127 (0.193)	Loss 0.3973 (0.4176)	Prec@1 84.37500 (85.50532)	Prec@5 100.00000 (99.60106)
Epoch: [11][150/272]	 lr: 0.04000	Time 0.515 (0.509)	Data 0.109 (0.189)	Loss 0.7849 (0.4147)	Prec@1 78.12500 (85.69950)	Prec@5 100.00000 (99.62748)
Epoch: [11][160/272]	 lr: 0.04000	Time 0.545 (0.505)	Data 0.128 (0.185)	Loss 0.3110 (0.4143)	Prec@1 87.50000 (85.75311)	Prec@5 100.00000 (99.63121)
Epoch: [11][170/272]	 lr: 0.04000	Time 0.555 (0.502)	Data 0.121 (0.182)	Loss 0.3957 (0.4169)	Prec@1 87.50000 (85.78217)	Prec@5 96.87500 (99.59795)
Epoch: [11][180/272]	 lr: 0.04000	Time 0.412 (0.499)	Data 0.146 (0.179)	Loss 0.3820 (0.4125)	Prec@1 87.50000 (85.87708)	Prec@5 100.00000 (99.62017)
Epoch: [11][190/272]	 lr: 0.04000	Time 0.462 (0.496)	Data 0.127 (0.177)	Loss 0.4393 (0.4114)	Prec@1 78.12500 (85.94568)	Prec@5 100.00000 (99.64005)
Epoch: [11][200/272]	 lr: 0.04000	Time 0.449 (0.493)	Data 0.108 (0.174)	Loss 0.5788 (0.4100)	Prec@1 84.37500 (86.06965)	Prec@5 100.00000 (99.64241)
Epoch: [11][210/272]	 lr: 0.04000	Time 0.440 (0.489)	Data 0.121 (0.172)	Loss 0.4544 (0.4097)	Prec@1 87.50000 (86.06339)	Prec@5 100.00000 (99.65936)
Epoch: [11][220/272]	 lr: 0.04000	Time 0.431 (0.487)	Data 0.128 (0.170)	Loss 0.1300 (0.4133)	Prec@1 100.00000 (85.93044)	Prec@5 100.00000 (99.66064)
Epoch: [11][230/272]	 lr: 0.04000	Time 0.420 (0.485)	Data 0.129 (0.168)	Loss 0.5852 (0.4113)	Prec@1 75.00000 (86.10660)	Prec@5 96.87500 (99.64827)
Epoch: [11][240/272]	 lr: 0.04000	Time 0.239 (0.482)	Data 0.128 (0.167)	Loss 0.6828 (0.4174)	Prec@1 65.62500 (85.86619)	Prec@5 96.87500 (99.64990)
Epoch: [11][250/272]	 lr: 0.04000	Time 0.238 (0.472)	Data 0.128 (0.165)	Loss 0.3336 (0.4159)	Prec@1 87.50000 (86.00598)	Prec@5 100.00000 (99.66385)
Epoch: [11][260/272]	 lr: 0.04000	Time 0.239 (0.463)	Data 0.129 (0.164)	Loss 0.9818 (0.4131)	Prec@1 59.37500 (86.12309)	Prec@5 96.87500 (99.65278)
Epoch: [11][270/272]	 lr: 0.04000	Time 0.239 (0.455)	Data 0.129 (0.162)	Loss 0.4271 (0.4112)	Prec@1 81.25000 (86.09318)	Prec@5 100.00000 (99.64253)
validation at epoch 11
validation at epoch 11
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [11][1/60]	Time 3.79901 (3.79901)	Data 3.68335 (3.68335)	Loss 1.2410 (1.2410)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [11][2/60]	Time 2.73099 (3.26500)	Data 2.62420 (3.15377)	Loss 1.3082 (1.2746)	Prec@1 87.50000 (87.50000)	Prec@5 87.50000 (93.75000)
Epoch: [11][3/60]	Time 0.88767 (2.47256)	Data 0.82356 (2.37703)	Loss 1.8676 (1.4723)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (91.66667)
Epoch: [11][4/60]	Time 0.18883 (1.90163)	Data 0.01871 (1.78745)	Loss 0.8679 (1.3212)	Prec@1 75.00000 (81.25000)	Prec@5 87.50000 (90.62500)
Epoch: [11][5/60]	Time 0.10468 (1.54224)	Data 0.01684 (1.43333)	Loss 0.3320 (1.1233)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (92.50000)
Epoch: [11][6/60]	Time 0.10330 (1.30241)	Data 0.00635 (1.19550)	Loss 1.5867 (1.2006)	Prec@1 62.50000 (79.16667)	Prec@5 75.00000 (89.58334)
Epoch: [11][7/60]	Time 0.16928 (1.14054)	Data 0.00735 (1.02577)	Loss 0.7781 (1.1402)	Prec@1 75.00000 (78.57143)	Prec@5 100.00000 (91.07143)
Epoch: [11][8/60]	Time 0.15779 (1.01769)	Data 0.00062 (0.89762)	Loss 1.1551 (1.1421)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (92.18750)
Epoch: [11][9/60]	Time 0.17699 (0.92428)	Data 0.00051 (0.79794)	Loss 0.7836 (1.1022)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (93.05556)
Epoch: [11][10/60]	Time 0.15021 (0.84688)	Data 0.02093 (0.72024)	Loss 0.1285 (1.0049)	Prec@1 100.00000 (80.00000)	Prec@5 100.00000 (93.75000)
Epoch: [11][11/60]	Time 0.09172 (0.77823)	Data 0.03232 (0.65770)	Loss 0.6833 (0.9756)	Prec@1 75.00000 (79.54546)	Prec@5 100.00000 (94.31818)
Epoch: [11][12/60]	Time 0.25251 (0.73442)	Data 0.10282 (0.61146)	Loss 1.2468 (0.9982)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (94.79167)
Epoch: [11][13/60]	Time 0.07435 (0.68364)	Data 0.00881 (0.56511)	Loss 4.4119 (1.2608)	Prec@1 25.00000 (74.03847)	Prec@5 87.50000 (94.23077)
Epoch: [11][14/60]	Time 0.21246 (0.64999)	Data 0.00921 (0.52540)	Loss 0.4457 (1.2026)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (94.64286)
Epoch: [11][15/60]	Time 0.13496 (0.61565)	Data 0.05166 (0.49382)	Loss 2.1493 (1.2657)	Prec@1 37.50000 (70.83334)	Prec@5 100.00000 (95.00001)
Epoch: [11][16/60]	Time 0.17189 (0.58791)	Data 0.10570 (0.46956)	Loss 0.9717 (1.2473)	Prec@1 75.00000 (71.09375)	Prec@5 87.50000 (94.53125)
Epoch: [11][17/60]	Time 0.12945 (0.56095)	Data 0.00866 (0.44245)	Loss 1.8638 (1.2836)	Prec@1 50.00000 (69.85294)	Prec@5 87.50000 (94.11765)
Epoch: [11][18/60]	Time 0.08897 (0.53473)	Data 0.00468 (0.41813)	Loss 1.9784 (1.3222)	Prec@1 37.50000 (68.05556)	Prec@5 100.00000 (94.44444)
Epoch: [11][19/60]	Time 0.11131 (0.51244)	Data 0.01250 (0.39678)	Loss 0.1213 (1.2590)	Prec@1 87.50000 (69.07895)	Prec@5 100.00000 (94.73684)
Epoch: [11][20/60]	Time 0.13933 (0.49378)	Data 0.00951 (0.37741)	Loss 1.8275 (1.2874)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (95.00000)
Epoch: [11][21/60]	Time 0.09809 (0.47494)	Data 0.00547 (0.35970)	Loss 2.2887 (1.3351)	Prec@1 25.00000 (66.66666)	Prec@5 62.50000 (93.45238)
Epoch: [11][22/60]	Time 0.22395 (0.46353)	Data 0.07598 (0.34681)	Loss 1.0862 (1.3238)	Prec@1 62.50000 (66.47727)	Prec@5 100.00000 (93.75000)
Epoch: [11][23/60]	Time 0.07910 (0.44682)	Data 0.00086 (0.33177)	Loss 1.4181 (1.3279)	Prec@1 62.50000 (66.30435)	Prec@5 100.00000 (94.02174)
Epoch: [11][24/60]	Time 0.15538 (0.43468)	Data 0.04562 (0.31984)	Loss 1.9477 (1.3537)	Prec@1 62.50000 (66.14584)	Prec@5 87.50000 (93.75000)
Epoch: [11][25/60]	Time 0.15344 (0.42343)	Data 0.03049 (0.30827)	Loss 0.9484 (1.3375)	Prec@1 75.00000 (66.50000)	Prec@5 87.50000 (93.50000)
Epoch: [11][26/60]	Time 0.23136 (0.41604)	Data 0.04964 (0.29832)	Loss 0.6772 (1.3121)	Prec@1 75.00000 (66.82693)	Prec@5 100.00000 (93.75000)
Epoch: [11][27/60]	Time 0.09058 (0.40398)	Data 0.00745 (0.28755)	Loss 0.5676 (1.2845)	Prec@1 75.00000 (67.12963)	Prec@5 100.00000 (93.98148)
Epoch: [11][28/60]	Time 0.23976 (0.39812)	Data 0.09269 (0.28059)	Loss 1.1628 (1.2802)	Prec@1 62.50000 (66.96429)	Prec@5 100.00000 (94.19643)
Epoch: [11][29/60]	Time 0.16148 (0.38996)	Data 0.00045 (0.27093)	Loss 0.7948 (1.2634)	Prec@1 62.50000 (66.81034)	Prec@5 100.00000 (94.39655)
Epoch: [11][30/60]	Time 0.10933 (0.38061)	Data 0.00041 (0.26191)	Loss 1.9821 (1.2874)	Prec@1 62.50000 (66.66667)	Prec@5 87.50000 (94.16667)
Epoch: [11][31/60]	Time 0.03070 (0.36932)	Data 0.00345 (0.25357)	Loss 4.1530 (1.3798)	Prec@1 12.50000 (64.91935)	Prec@5 87.50000 (93.95161)
Epoch: [11][32/60]	Time 0.03119 (0.35875)	Data 0.00295 (0.24574)	Loss 1.7235 (1.3906)	Prec@1 37.50000 (64.06250)	Prec@5 100.00000 (94.14062)
Epoch: [11][33/60]	Time 0.02798 (0.34873)	Data 0.00159 (0.23834)	Loss 0.5182 (1.3641)	Prec@1 75.00000 (64.39394)	Prec@5 100.00000 (94.31818)
Epoch: [11][34/60]	Time 0.02307 (0.33915)	Data 0.00084 (0.23136)	Loss 1.4750 (1.3674)	Prec@1 62.50000 (64.33823)	Prec@5 100.00000 (94.48530)
Epoch: [11][35/60]	Time 0.02323 (0.33012)	Data 0.00100 (0.22478)	Loss 2.3376 (1.3951)	Prec@1 50.00000 (63.92857)	Prec@5 87.50000 (94.28571)
Epoch: [11][36/60]	Time 0.02358 (0.32161)	Data 0.00090 (0.21856)	Loss 1.7476 (1.4049)	Prec@1 50.00000 (63.54167)	Prec@5 100.00000 (94.44444)
Epoch: [11][37/60]	Time 0.02301 (0.31354)	Data 0.00087 (0.21267)	Loss 2.0977 (1.4236)	Prec@1 50.00000 (63.17568)	Prec@5 100.00000 (94.59460)
Epoch: [11][38/60]	Time 0.02295 (0.30589)	Data 0.00095 (0.20710)	Loss 2.2673 (1.4458)	Prec@1 50.00000 (62.82895)	Prec@5 87.50000 (94.40790)
Epoch: [11][39/60]	Time 0.02218 (0.29862)	Data 0.00038 (0.20180)	Loss 0.3090 (1.4167)	Prec@1 87.50000 (63.46154)	Prec@5 100.00000 (94.55128)
Epoch: [11][40/60]	Time 0.02203 (0.29170)	Data 0.00040 (0.19677)	Loss 0.4403 (1.3923)	Prec@1 87.50000 (64.06250)	Prec@5 100.00000 (94.68750)
Epoch: [11][41/60]	Time 0.02597 (0.28522)	Data 0.00042 (0.19198)	Loss 1.6151 (1.3977)	Prec@1 50.00000 (63.71951)	Prec@5 100.00000 (94.81707)
Epoch: [11][42/60]	Time 0.02318 (0.27898)	Data 0.00084 (0.18743)	Loss 1.4425 (1.3988)	Prec@1 62.50000 (63.69048)	Prec@5 100.00000 (94.94048)
Epoch: [11][43/60]	Time 0.02220 (0.27301)	Data 0.00040 (0.18308)	Loss 1.2785 (1.3960)	Prec@1 62.50000 (63.66279)	Prec@5 100.00000 (95.05814)
Epoch: [11][44/60]	Time 0.02203 (0.26731)	Data 0.00041 (0.17893)	Loss 1.9753 (1.4092)	Prec@1 37.50000 (63.06818)	Prec@5 100.00000 (95.17046)
Epoch: [11][45/60]	Time 0.02240 (0.26186)	Data 0.00041 (0.17496)	Loss 1.2496 (1.4056)	Prec@1 75.00000 (63.33334)	Prec@5 100.00000 (95.27778)
Epoch: [11][46/60]	Time 0.02242 (0.25666)	Data 0.00044 (0.17117)	Loss 2.4961 (1.4293)	Prec@1 50.00000 (63.04348)	Prec@5 100.00000 (95.38044)
Epoch: [11][47/60]	Time 0.02252 (0.25168)	Data 0.00043 (0.16753)	Loss 2.0038 (1.4415)	Prec@1 75.00000 (63.29787)	Prec@5 87.50000 (95.21276)
Epoch: [11][48/60]	Time 0.02204 (0.24689)	Data 0.00042 (0.16405)	Loss 1.5569 (1.4439)	Prec@1 75.00000 (63.54167)	Prec@5 87.50000 (95.05209)
Epoch: [11][49/60]	Time 0.02215 (0.24231)	Data 0.00044 (0.16071)	Loss 1.7770 (1.4507)	Prec@1 62.50000 (63.52041)	Prec@5 100.00000 (95.15306)
Epoch: [11][50/60]	Time 0.02233 (0.23791)	Data 0.00045 (0.15751)	Loss 1.3663 (1.4490)	Prec@1 62.50000 (63.50000)	Prec@5 87.50000 (95.00000)
Epoch: [11][51/60]	Time 0.02287 (0.23369)	Data 0.00043 (0.15443)	Loss 0.4893 (1.4302)	Prec@1 87.50000 (63.97059)	Prec@5 100.00000 (95.09805)
Epoch: [11][52/60]	Time 0.02211 (0.22962)	Data 0.00044 (0.15147)	Loss 2.2379 (1.4458)	Prec@1 62.50000 (63.94231)	Prec@5 75.00000 (94.71154)
Epoch: [11][53/60]	Time 0.02199 (0.22570)	Data 0.00040 (0.14862)	Loss 2.1216 (1.4585)	Prec@1 62.50000 (63.91510)	Prec@5 87.50000 (94.57547)
Epoch: [11][54/60]	Time 0.02213 (0.22193)	Data 0.00044 (0.14587)	Loss 1.7063 (1.4631)	Prec@1 50.00000 (63.65741)	Prec@5 100.00000 (94.67593)
Epoch: [11][55/60]	Time 0.02300 (0.21832)	Data 0.00044 (0.14323)	Loss 1.7826 (1.4689)	Prec@1 75.00000 (63.86364)	Prec@5 87.50000 (94.54545)
Epoch: [11][56/60]	Time 0.02432 (0.21485)	Data 0.00053 (0.14068)	Loss 0.7295 (1.4557)	Prec@1 87.50000 (64.28572)	Prec@5 100.00000 (94.64286)
Epoch: [11][57/60]	Time 0.02277 (0.21148)	Data 0.00042 (0.13822)	Loss 3.0868 (1.4843)	Prec@1 37.50000 (63.81579)	Prec@5 87.50000 (94.51755)
Epoch: [11][58/60]	Time 0.02224 (0.20822)	Data 0.00044 (0.13584)	Loss 1.1259 (1.4781)	Prec@1 75.00000 (64.00862)	Prec@5 100.00000 (94.61207)
Epoch: [11][59/60]	Time 0.02269 (0.20508)	Data 0.00040 (0.13355)	Loss 1.4968 (1.4785)	Prec@1 37.50000 (63.55932)	Prec@5 100.00000 (94.70339)
Epoch: [11][60/60]	Time 0.02319 (0.20204)	Data 0.00053 (0.13133)	Loss 0.2119 (1.4573)	Prec@1 87.50000 (63.95834)	Prec@5 100.00000 (94.79167)
train at epoch 12
train at epoch 12
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [12][0/272]	 lr: 0.04000	Time 7.761 (7.761)	Data 6.684 (6.684)	Loss 0.7702 (0.7702)	Prec@1 78.12500 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [12][10/272]	 lr: 0.04000	Time 0.459 (1.279)	Data 0.128 (0.821)	Loss 0.4154 (0.4311)	Prec@1 84.37500 (86.93182)	Prec@5 96.87500 (99.71591)
Epoch: [12][20/272]	 lr: 0.04000	Time 0.424 (0.865)	Data 0.128 (0.494)	Loss 0.3216 (0.3649)	Prec@1 84.37500 (88.24405)	Prec@5 100.00000 (99.85119)
Epoch: [12][30/272]	 lr: 0.04000	Time 0.323 (0.719)	Data 0.129 (0.377)	Loss 0.2639 (0.3581)	Prec@1 96.87500 (88.40726)	Prec@5 96.87500 (99.69758)
Epoch: [12][40/272]	 lr: 0.04000	Time 0.398 (0.654)	Data 0.127 (0.318)	Loss 0.8102 (0.3674)	Prec@1 59.37500 (87.88110)	Prec@5 100.00000 (99.69512)
Epoch: [12][50/272]	 lr: 0.04000	Time 0.400 (0.614)	Data 0.126 (0.281)	Loss 0.1955 (0.3516)	Prec@1 93.75000 (88.60294)	Prec@5 100.00000 (99.75491)
Epoch: [12][60/272]	 lr: 0.04000	Time 0.461 (0.584)	Data 0.136 (0.257)	Loss 0.8908 (0.3466)	Prec@1 62.50000 (88.47336)	Prec@5 100.00000 (99.79507)
Epoch: [12][70/272]	 lr: 0.04000	Time 0.435 (0.561)	Data 0.129 (0.239)	Loss 0.3810 (0.3567)	Prec@1 87.50000 (88.29225)	Prec@5 100.00000 (99.77993)
Epoch: [12][80/272]	 lr: 0.04000	Time 0.379 (0.546)	Data 0.129 (0.226)	Loss 0.6895 (0.3615)	Prec@1 78.12500 (88.23302)	Prec@5 100.00000 (99.76852)
Epoch: [12][90/272]	 lr: 0.04000	Time 0.346 (0.536)	Data 0.128 (0.215)	Loss 0.1760 (0.3632)	Prec@1 93.75000 (88.28984)	Prec@5 100.00000 (99.75962)
Epoch: [12][100/272]	 lr: 0.04000	Time 0.373 (0.523)	Data 0.127 (0.206)	Loss 0.1958 (0.3601)	Prec@1 96.87500 (88.42822)	Prec@5 100.00000 (99.78342)
Epoch: [12][110/272]	 lr: 0.04000	Time 0.440 (0.515)	Data 0.127 (0.199)	Loss 0.3447 (0.3542)	Prec@1 84.37500 (88.73874)	Prec@5 100.00000 (99.74663)
Epoch: [12][120/272]	 lr: 0.04000	Time 0.410 (0.508)	Data 0.139 (0.194)	Loss 0.2113 (0.3512)	Prec@1 93.75000 (88.73966)	Prec@5 100.00000 (99.76756)
Epoch: [12][130/272]	 lr: 0.04000	Time 0.440 (0.503)	Data 0.127 (0.189)	Loss 0.6256 (0.3486)	Prec@1 81.25000 (88.74046)	Prec@5 100.00000 (99.76145)
Epoch: [12][140/272]	 lr: 0.04000	Time 0.402 (0.496)	Data 0.155 (0.185)	Loss 0.4894 (0.3527)	Prec@1 87.50000 (88.63032)	Prec@5 100.00000 (99.73404)
Epoch: [12][150/272]	 lr: 0.04000	Time 0.515 (0.494)	Data 0.129 (0.181)	Loss 1.4851 (0.3555)	Prec@1 56.25000 (88.53477)	Prec@5 87.50000 (99.66888)
Epoch: [12][160/272]	 lr: 0.04000	Time 0.441 (0.489)	Data 0.121 (0.178)	Loss 0.2191 (0.3503)	Prec@1 93.75000 (88.80047)	Prec@5 100.00000 (99.68945)
Epoch: [12][170/272]	 lr: 0.04000	Time 0.495 (0.486)	Data 0.127 (0.175)	Loss 0.3859 (0.3473)	Prec@1 81.25000 (88.83407)	Prec@5 100.00000 (99.70760)
Epoch: [12][180/272]	 lr: 0.04000	Time 0.417 (0.485)	Data 0.125 (0.172)	Loss 0.2345 (0.3530)	Prec@1 93.75000 (88.57044)	Prec@5 100.00000 (99.70650)
Epoch: [12][190/272]	 lr: 0.04000	Time 0.445 (0.483)	Data 0.130 (0.170)	Loss 0.1439 (0.3504)	Prec@1 100.00000 (88.62893)	Prec@5 100.00000 (99.72186)
Epoch: [12][200/272]	 lr: 0.04000	Time 0.520 (0.482)	Data 0.142 (0.168)	Loss 0.1643 (0.3504)	Prec@1 93.75000 (88.57276)	Prec@5 100.00000 (99.73569)
Epoch: [12][210/272]	 lr: 0.04000	Time 0.446 (0.480)	Data 0.127 (0.166)	Loss 0.5212 (0.3496)	Prec@1 84.37500 (88.53674)	Prec@5 96.87500 (99.73341)
Epoch: [12][220/272]	 lr: 0.04000	Time 0.413 (0.478)	Data 0.129 (0.164)	Loss 0.3747 (0.3504)	Prec@1 87.50000 (88.51810)	Prec@5 100.00000 (99.74548)
Epoch: [12][230/272]	 lr: 0.04000	Time 0.474 (0.476)	Data 0.136 (0.163)	Loss 0.2341 (0.3474)	Prec@1 90.62500 (88.66342)	Prec@5 100.00000 (99.75649)
Epoch: [12][240/272]	 lr: 0.04000	Time 0.362 (0.473)	Data 0.129 (0.162)	Loss 0.5307 (0.3501)	Prec@1 75.00000 (88.58922)	Prec@5 100.00000 (99.74067)
Epoch: [12][250/272]	 lr: 0.04000	Time 0.240 (0.464)	Data 0.128 (0.160)	Loss 0.1486 (0.3515)	Prec@1 96.87500 (88.48357)	Prec@5 100.00000 (99.73855)
Epoch: [12][260/272]	 lr: 0.04000	Time 0.239 (0.455)	Data 0.129 (0.159)	Loss 0.3495 (0.3511)	Prec@1 90.62500 (88.46983)	Prec@5 100.00000 (99.73659)
Epoch: [12][270/272]	 lr: 0.04000	Time 0.240 (0.448)	Data 0.128 (0.158)	Loss 0.4171 (0.3526)	Prec@1 87.50000 (88.38792)	Prec@5 100.00000 (99.74631)
validation at epoch 12
validation at epoch 12
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [12][1/60]	Time 7.03146 (7.03146)	Data 6.95247 (6.95247)	Loss 0.3061 (0.3061)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [12][2/60]	Time 0.10561 (3.56853)	Data 0.00205 (3.47726)	Loss 0.5429 (0.4245)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [12][3/60]	Time 0.19108 (2.44271)	Data 0.01285 (2.32246)	Loss 1.4170 (0.7553)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [12][4/60]	Time 0.09574 (1.85597)	Data 0.02563 (1.74825)	Loss 0.6394 (0.7263)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (96.87500)
Epoch: [12][5/60]	Time 0.21979 (1.52873)	Data 0.00804 (1.40021)	Loss 1.6607 (0.9132)	Prec@1 50.00000 (67.50000)	Prec@5 100.00000 (97.50000)
Epoch: [12][6/60]	Time 0.04783 (1.28191)	Data 0.00514 (1.16770)	Loss 1.0830 (0.9415)	Prec@1 50.00000 (64.58334)	Prec@5 100.00000 (97.91667)
Epoch: [12][7/60]	Time 0.20176 (1.12761)	Data 0.00057 (1.00096)	Loss 0.8950 (0.9349)	Prec@1 62.50000 (64.28572)	Prec@5 100.00000 (98.21429)
Epoch: [12][8/60]	Time 0.19041 (1.01046)	Data 0.00049 (0.87591)	Loss 1.4631 (1.0009)	Prec@1 50.00000 (62.50000)	Prec@5 100.00000 (98.43750)
Epoch: [12][9/60]	Time 0.17072 (0.91715)	Data 0.00700 (0.77936)	Loss 1.1493 (1.0174)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (98.61111)
Epoch: [12][10/60]	Time 0.11677 (0.83711)	Data 0.01613 (0.70304)	Loss 0.6806 (0.9837)	Prec@1 75.00000 (63.75000)	Prec@5 100.00000 (98.75000)
Epoch: [12][11/60]	Time 0.10192 (0.77028)	Data 0.00292 (0.63939)	Loss 1.2138 (1.0046)	Prec@1 62.50000 (63.63636)	Prec@5 100.00000 (98.86364)
Epoch: [12][12/60]	Time 0.26788 (0.72841)	Data 0.09880 (0.59434)	Loss 0.1606 (0.9343)	Prec@1 100.00000 (66.66667)	Prec@5 100.00000 (98.95834)
Epoch: [12][13/60]	Time 0.18894 (0.68691)	Data 0.00089 (0.54869)	Loss 1.7258 (0.9952)	Prec@1 37.50000 (64.42308)	Prec@5 87.50000 (98.07693)
Epoch: [12][14/60]	Time 0.19931 (0.65208)	Data 0.01278 (0.51041)	Loss 1.1699 (1.0077)	Prec@1 50.00000 (63.39286)	Prec@5 100.00000 (98.21429)
Epoch: [12][15/60]	Time 0.08690 (0.61441)	Data 0.01585 (0.47744)	Loss 1.2380 (1.0230)	Prec@1 62.50000 (63.33334)	Prec@5 100.00000 (98.33334)
Epoch: [12][16/60]	Time 0.11567 (0.58323)	Data 0.01023 (0.44824)	Loss 1.9791 (1.0828)	Prec@1 75.00000 (64.06250)	Prec@5 75.00000 (96.87500)
Epoch: [12][17/60]	Time 0.14708 (0.55758)	Data 0.00241 (0.42202)	Loss 0.8913 (1.0715)	Prec@1 62.50000 (63.97059)	Prec@5 100.00000 (97.05882)
Epoch: [12][18/60]	Time 0.21828 (0.53873)	Data 0.10666 (0.40450)	Loss 2.3799 (1.1442)	Prec@1 75.00000 (64.58334)	Prec@5 87.50000 (96.52778)
Epoch: [12][19/60]	Time 0.10691 (0.51600)	Data 0.00178 (0.38330)	Loss 0.5476 (1.1128)	Prec@1 87.50000 (65.78947)	Prec@5 100.00000 (96.71053)
Epoch: [12][20/60]	Time 0.13582 (0.49699)	Data 0.00423 (0.36435)	Loss 3.3222 (1.2233)	Prec@1 62.50000 (65.62500)	Prec@5 62.50000 (95.00000)
Epoch: [12][21/60]	Time 0.10602 (0.47837)	Data 0.00496 (0.34723)	Loss 1.4444 (1.2338)	Prec@1 62.50000 (65.47619)	Prec@5 87.50000 (94.64286)
Epoch: [12][22/60]	Time 0.15312 (0.46359)	Data 0.04630 (0.33355)	Loss 0.7925 (1.2137)	Prec@1 87.50000 (66.47727)	Prec@5 87.50000 (94.31818)
Epoch: [12][23/60]	Time 0.15458 (0.45015)	Data 0.02098 (0.31996)	Loss 2.1384 (1.2539)	Prec@1 37.50000 (65.21739)	Prec@5 87.50000 (94.02174)
Epoch: [12][24/60]	Time 0.12809 (0.43674)	Data 0.01341 (0.30719)	Loss 1.0714 (1.2463)	Prec@1 75.00000 (65.62500)	Prec@5 100.00000 (94.27084)
Epoch: [12][25/60]	Time 0.12661 (0.42433)	Data 0.03579 (0.29634)	Loss 1.1481 (1.2424)	Prec@1 75.00000 (66.00000)	Prec@5 87.50000 (94.00000)
Epoch: [12][26/60]	Time 0.25872 (0.41796)	Data 0.09102 (0.28844)	Loss 0.3063 (1.2064)	Prec@1 87.50000 (66.82693)	Prec@5 100.00000 (94.23077)
Epoch: [12][27/60]	Time 0.16519 (0.40860)	Data 0.02364 (0.27863)	Loss 1.6613 (1.2232)	Prec@1 62.50000 (66.66666)	Prec@5 87.50000 (93.98148)
Epoch: [12][28/60]	Time 0.17774 (0.40035)	Data 0.00760 (0.26895)	Loss 0.3161 (1.1908)	Prec@1 87.50000 (67.41072)	Prec@5 100.00000 (94.19643)
Epoch: [12][29/60]	Time 0.07792 (0.38924)	Data 0.00823 (0.25996)	Loss 1.3104 (1.1950)	Prec@1 50.00000 (66.81034)	Prec@5 100.00000 (94.39655)
Epoch: [12][30/60]	Time 0.03077 (0.37729)	Data 0.00048 (0.25131)	Loss 1.7893 (1.2148)	Prec@1 62.50000 (66.66667)	Prec@5 100.00000 (94.58334)
Epoch: [12][31/60]	Time 0.05596 (0.36692)	Data 0.00058 (0.24322)	Loss 4.8575 (1.3323)	Prec@1 12.50000 (64.91935)	Prec@5 87.50000 (94.35484)
Epoch: [12][32/60]	Time 0.05542 (0.35719)	Data 0.00047 (0.23564)	Loss 3.2483 (1.3922)	Prec@1 62.50000 (64.84375)	Prec@5 100.00000 (94.53125)
Epoch: [12][33/60]	Time 0.04976 (0.34787)	Data 0.00048 (0.22851)	Loss 0.1549 (1.3547)	Prec@1 87.50000 (65.53030)	Prec@5 100.00000 (94.69698)
Epoch: [12][34/60]	Time 0.05096 (0.33914)	Data 0.00041 (0.22180)	Loss 2.8210 (1.3978)	Prec@1 50.00000 (65.07353)	Prec@5 100.00000 (94.85294)
Epoch: [12][35/60]	Time 0.03501 (0.33045)	Data 0.00054 (0.21548)	Loss 3.3289 (1.4530)	Prec@1 50.00000 (64.64286)	Prec@5 87.50000 (94.64286)
Epoch: [12][36/60]	Time 0.02983 (0.32210)	Data 0.00074 (0.20952)	Loss 2.0065 (1.4683)	Prec@1 62.50000 (64.58334)	Prec@5 100.00000 (94.79166)
Epoch: [12][37/60]	Time 0.02852 (0.31416)	Data 0.00054 (0.20387)	Loss 2.9912 (1.5095)	Prec@1 62.50000 (64.52703)	Prec@5 87.50000 (94.59460)
Epoch: [12][38/60]	Time 0.02860 (0.30665)	Data 0.00048 (0.19852)	Loss 4.0825 (1.5772)	Prec@1 37.50000 (63.81579)	Prec@5 100.00000 (94.73684)
Epoch: [12][39/60]	Time 0.02726 (0.29948)	Data 0.00048 (0.19344)	Loss 0.0546 (1.5382)	Prec@1 100.00000 (64.74359)	Prec@5 100.00000 (94.87180)
Epoch: [12][40/60]	Time 0.02348 (0.29258)	Data 0.00057 (0.18862)	Loss 1.8242 (1.5453)	Prec@1 50.00000 (64.37500)	Prec@5 100.00000 (95.00000)
Epoch: [12][41/60]	Time 0.02300 (0.28601)	Data 0.00051 (0.18403)	Loss 2.5852 (1.5707)	Prec@1 50.00000 (64.02439)	Prec@5 100.00000 (95.12195)
Epoch: [12][42/60]	Time 0.02516 (0.27980)	Data 0.00046 (0.17966)	Loss 2.5882 (1.5949)	Prec@1 62.50000 (63.98810)	Prec@5 100.00000 (95.23810)
Epoch: [12][43/60]	Time 0.02260 (0.27382)	Data 0.00043 (0.17549)	Loss 2.3367 (1.6122)	Prec@1 62.50000 (63.95349)	Prec@5 100.00000 (95.34884)
Epoch: [12][44/60]	Time 0.02343 (0.26813)	Data 0.00046 (0.17151)	Loss 3.3042 (1.6506)	Prec@1 50.00000 (63.63636)	Prec@5 100.00000 (95.45455)
Epoch: [12][45/60]	Time 0.02287 (0.26268)	Data 0.00045 (0.16771)	Loss 1.7424 (1.6527)	Prec@1 75.00000 (63.88889)	Prec@5 87.50000 (95.27778)
Epoch: [12][46/60]	Time 0.02274 (0.25746)	Data 0.00045 (0.16407)	Loss 4.1083 (1.7060)	Prec@1 62.50000 (63.85870)	Prec@5 75.00000 (94.83696)
Epoch: [12][47/60]	Time 0.02300 (0.25247)	Data 0.00051 (0.16059)	Loss 0.5960 (1.6824)	Prec@1 75.00000 (64.09574)	Prec@5 100.00000 (94.94681)
Epoch: [12][48/60]	Time 0.02350 (0.24770)	Data 0.00050 (0.15726)	Loss 1.3483 (1.6755)	Prec@1 62.50000 (64.06250)	Prec@5 100.00000 (95.05209)
Epoch: [12][49/60]	Time 0.02318 (0.24312)	Data 0.00050 (0.15406)	Loss 2.4419 (1.6911)	Prec@1 62.50000 (64.03061)	Prec@5 87.50000 (94.89796)
Epoch: [12][50/60]	Time 0.02277 (0.23871)	Data 0.00047 (0.15099)	Loss 0.9151 (1.6756)	Prec@1 62.50000 (64.00000)	Prec@5 100.00000 (95.00000)
Epoch: [12][51/60]	Time 0.02304 (0.23448)	Data 0.00045 (0.14804)	Loss 0.8129 (1.6587)	Prec@1 87.50000 (64.46078)	Prec@5 100.00000 (95.09805)
Epoch: [12][52/60]	Time 0.02457 (0.23045)	Data 0.00048 (0.14520)	Loss 1.2659 (1.6511)	Prec@1 50.00000 (64.18269)	Prec@5 100.00000 (95.19231)
Epoch: [12][53/60]	Time 0.02344 (0.22654)	Data 0.00065 (0.14247)	Loss 2.3180 (1.6637)	Prec@1 25.00000 (63.44340)	Prec@5 100.00000 (95.28302)
Epoch: [12][54/60]	Time 0.02349 (0.22278)	Data 0.00053 (0.13984)	Loss 2.3118 (1.6757)	Prec@1 37.50000 (62.96296)	Prec@5 100.00000 (95.37037)
Epoch: [12][55/60]	Time 0.02285 (0.21915)	Data 0.00044 (0.13731)	Loss 0.4214 (1.6529)	Prec@1 87.50000 (63.40909)	Prec@5 100.00000 (95.45454)
Epoch: [12][56/60]	Time 0.02271 (0.21564)	Data 0.00052 (0.13486)	Loss 1.8723 (1.6568)	Prec@1 87.50000 (63.83929)	Prec@5 87.50000 (95.31251)
Epoch: [12][57/60]	Time 0.02283 (0.21226)	Data 0.00043 (0.13251)	Loss 2.7418 (1.6759)	Prec@1 62.50000 (63.81579)	Prec@5 87.50000 (95.17544)
Epoch: [12][58/60]	Time 0.02309 (0.20899)	Data 0.00048 (0.13023)	Loss 3.0122 (1.6989)	Prec@1 75.00000 (64.00862)	Prec@5 87.50000 (95.04311)
Epoch: [12][59/60]	Time 0.02376 (0.20585)	Data 0.00048 (0.12803)	Loss 2.3969 (1.7107)	Prec@1 50.00000 (63.77119)	Prec@5 100.00000 (95.12712)
Epoch: [12][60/60]	Time 0.02274 (0.20280)	Data 0.00056 (0.12591)	Loss 0.8208 (1.6959)	Prec@1 87.50000 (64.16667)	Prec@5 100.00000 (95.20834)
train at epoch 13
train at epoch 13
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [13][0/272]	 lr: 0.04000	Time 6.854 (6.854)	Data 4.959 (4.959)	Loss 0.3201 (0.3201)	Prec@1 84.37500 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [13][10/272]	 lr: 0.04000	Time 0.332 (1.296)	Data 0.111 (0.770)	Loss 0.3624 (0.3134)	Prec@1 93.75000 (89.20455)	Prec@5 100.00000 (100.00000)
Epoch: [13][20/272]	 lr: 0.04000	Time 0.448 (0.880)	Data 0.129 (0.466)	Loss 0.6239 (0.3091)	Prec@1 84.37500 (90.17857)	Prec@5 96.87500 (99.70238)
Epoch: [13][30/272]	 lr: 0.04000	Time 0.451 (0.734)	Data 0.129 (0.358)	Loss 0.3066 (0.3016)	Prec@1 87.50000 (90.42339)	Prec@5 100.00000 (99.79839)
Epoch: [13][40/272]	 lr: 0.04000	Time 0.367 (0.663)	Data 0.129 (0.303)	Loss 0.6255 (0.3031)	Prec@1 84.37500 (90.62500)	Prec@5 100.00000 (99.84756)
Epoch: [13][50/272]	 lr: 0.04000	Time 0.502 (0.619)	Data 0.132 (0.270)	Loss 0.2199 (0.2990)	Prec@1 93.75000 (90.68628)	Prec@5 100.00000 (99.87746)
Epoch: [13][60/272]	 lr: 0.04000	Time 0.459 (0.593)	Data 0.131 (0.247)	Loss 0.2088 (0.3008)	Prec@1 96.87500 (90.57377)	Prec@5 100.00000 (99.89754)
Epoch: [13][70/272]	 lr: 0.04000	Time 0.442 (0.572)	Data 0.128 (0.230)	Loss 0.3814 (0.2956)	Prec@1 78.12500 (90.58099)	Prec@5 100.00000 (99.82394)
Epoch: [13][80/272]	 lr: 0.04000	Time 0.418 (0.555)	Data 0.129 (0.218)	Loss 0.3064 (0.3036)	Prec@1 90.62500 (90.12346)	Prec@5 100.00000 (99.84568)
Epoch: [13][90/272]	 lr: 0.04000	Time 0.486 (0.544)	Data 0.129 (0.208)	Loss 0.4752 (0.3136)	Prec@1 90.62500 (89.86951)	Prec@5 100.00000 (99.86264)
Epoch: [13][100/272]	 lr: 0.04000	Time 0.520 (0.534)	Data 0.127 (0.200)	Loss 0.0743 (0.3107)	Prec@1 100.00000 (89.88242)	Prec@5 100.00000 (99.87624)
Epoch: [13][110/272]	 lr: 0.04000	Time 0.446 (0.526)	Data 0.143 (0.193)	Loss 0.4780 (0.3128)	Prec@1 75.00000 (89.78041)	Prec@5 100.00000 (99.88739)
Epoch: [13][120/272]	 lr: 0.04000	Time 0.380 (0.517)	Data 0.128 (0.188)	Loss 0.4040 (0.3158)	Prec@1 78.12500 (89.48863)	Prec@5 100.00000 (99.89669)
Epoch: [13][130/272]	 lr: 0.04000	Time 0.411 (0.512)	Data 0.128 (0.183)	Loss 0.3581 (0.3146)	Prec@1 87.50000 (89.62309)	Prec@5 100.00000 (99.88072)
Epoch: [13][140/272]	 lr: 0.04000	Time 0.411 (0.506)	Data 0.141 (0.180)	Loss 0.2514 (0.3109)	Prec@1 93.75000 (89.76064)	Prec@5 100.00000 (99.88918)
Epoch: [13][150/272]	 lr: 0.04000	Time 0.414 (0.502)	Data 0.127 (0.176)	Loss 0.1343 (0.3164)	Prec@1 100.00000 (89.56953)	Prec@5 100.00000 (99.89652)
Epoch: [13][160/272]	 lr: 0.04000	Time 0.487 (0.499)	Data 0.140 (0.173)	Loss 0.2138 (0.3211)	Prec@1 93.75000 (89.36336)	Prec@5 100.00000 (99.90295)
Epoch: [13][170/272]	 lr: 0.04000	Time 0.480 (0.496)	Data 0.127 (0.170)	Loss 0.2928 (0.3232)	Prec@1 93.75000 (89.27266)	Prec@5 100.00000 (99.90862)
Epoch: [13][180/272]	 lr: 0.04000	Time 0.412 (0.492)	Data 0.127 (0.168)	Loss 0.2049 (0.3212)	Prec@1 96.87500 (89.41644)	Prec@5 100.00000 (99.91368)
Epoch: [13][190/272]	 lr: 0.04000	Time 0.433 (0.489)	Data 0.128 (0.166)	Loss 0.3945 (0.3229)	Prec@1 93.75000 (89.39790)	Prec@5 100.00000 (99.88548)
Epoch: [13][200/272]	 lr: 0.04000	Time 0.436 (0.488)	Data 0.129 (0.164)	Loss 0.8730 (0.3244)	Prec@1 71.87500 (89.27238)	Prec@5 96.87500 (99.87562)
Epoch: [13][210/272]	 lr: 0.04000	Time 0.464 (0.485)	Data 0.131 (0.162)	Loss 0.3645 (0.3245)	Prec@1 84.37500 (89.23283)	Prec@5 100.00000 (99.88152)
Epoch: [13][220/272]	 lr: 0.04000	Time 0.461 (0.483)	Data 0.126 (0.161)	Loss 0.3746 (0.3243)	Prec@1 87.50000 (89.26754)	Prec@5 100.00000 (99.88688)
Epoch: [13][230/272]	 lr: 0.04000	Time 0.393 (0.480)	Data 0.133 (0.159)	Loss 0.2300 (0.3241)	Prec@1 93.75000 (89.28571)	Prec@5 100.00000 (99.89178)
Epoch: [13][240/272]	 lr: 0.04000	Time 0.269 (0.478)	Data 0.128 (0.158)	Loss 0.8756 (0.3263)	Prec@1 71.87500 (89.14679)	Prec@5 100.00000 (99.88330)
Epoch: [13][250/272]	 lr: 0.04000	Time 0.237 (0.469)	Data 0.126 (0.157)	Loss 0.4840 (0.3272)	Prec@1 78.12500 (89.15588)	Prec@5 96.87500 (99.87550)
Epoch: [13][260/272]	 lr: 0.04000	Time 0.237 (0.460)	Data 0.129 (0.156)	Loss 0.1444 (0.3260)	Prec@1 100.00000 (89.26006)	Prec@5 100.00000 (99.85632)
Epoch: [13][270/272]	 lr: 0.04000	Time 0.240 (0.452)	Data 0.129 (0.155)	Loss 0.3207 (0.3262)	Prec@1 84.37500 (89.16051)	Prec@5 100.00000 (99.85009)
validation at epoch 13
validation at epoch 13
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [13][1/60]	Time 6.18659 (6.18659)	Data 5.91822 (5.91822)	Loss 0.5113 (0.5113)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [13][2/60]	Time 0.26530 (3.22595)	Data 0.03135 (2.97479)	Loss 0.3805 (0.4459)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [13][3/60]	Time 0.20079 (2.21756)	Data 0.00059 (1.98339)	Loss 1.8873 (0.9264)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (100.00000)
Epoch: [13][4/60]	Time 0.95029 (1.90074)	Data 0.88678 (1.70924)	Loss 0.9414 (0.9301)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (100.00000)
Epoch: [13][5/60]	Time 0.12337 (1.54527)	Data 0.00057 (1.36750)	Loss 2.4368 (1.2315)	Prec@1 25.00000 (60.00000)	Prec@5 100.00000 (100.00000)
Epoch: [13][6/60]	Time 0.05352 (1.29664)	Data 0.00061 (1.13969)	Loss 0.3593 (1.0861)	Prec@1 87.50000 (64.58334)	Prec@5 100.00000 (100.00000)
Epoch: [13][7/60]	Time 0.18078 (1.13724)	Data 0.00114 (0.97704)	Loss 1.7873 (1.1863)	Prec@1 37.50000 (60.71429)	Prec@5 100.00000 (100.00001)
Epoch: [13][8/60]	Time 0.07377 (1.00430)	Data 0.01434 (0.85670)	Loss 1.0233 (1.1659)	Prec@1 50.00000 (59.37500)	Prec@5 100.00000 (100.00000)
Epoch: [13][9/60]	Time 0.18083 (0.91281)	Data 0.00825 (0.76243)	Loss 1.2715 (1.1776)	Prec@1 50.00000 (58.33333)	Prec@5 87.50000 (98.61111)
Epoch: [13][10/60]	Time 0.17154 (0.83868)	Data 0.00065 (0.68625)	Loss 0.8335 (1.1432)	Prec@1 62.50000 (58.75000)	Prec@5 100.00000 (98.75000)
Epoch: [13][11/60]	Time 0.20300 (0.78089)	Data 0.09636 (0.63263)	Loss 0.4068 (1.0763)	Prec@1 75.00000 (60.22728)	Prec@5 100.00000 (98.86364)
Epoch: [13][12/60]	Time 0.07386 (0.72197)	Data 0.00065 (0.57996)	Loss 2.9238 (1.2302)	Prec@1 37.50000 (58.33334)	Prec@5 100.00000 (98.95834)
Epoch: [13][13/60]	Time 0.16586 (0.67919)	Data 0.05929 (0.53991)	Loss 2.8488 (1.3547)	Prec@1 12.50000 (54.80769)	Prec@5 100.00000 (99.03847)
Epoch: [13][14/60]	Time 0.14339 (0.64092)	Data 0.02054 (0.50281)	Loss 1.8113 (1.3873)	Prec@1 62.50000 (55.35715)	Prec@5 100.00000 (99.10715)
Epoch: [13][15/60]	Time 0.22261 (0.61303)	Data 0.00978 (0.46994)	Loss 0.8524 (1.3517)	Prec@1 75.00000 (56.66667)	Prec@5 87.50000 (98.33334)
Epoch: [13][16/60]	Time 0.08443 (0.58000)	Data 0.00291 (0.44075)	Loss 1.6303 (1.3691)	Prec@1 62.50000 (57.03125)	Prec@5 87.50000 (97.65625)
Epoch: [13][17/60]	Time 0.09363 (0.55139)	Data 0.00462 (0.41510)	Loss 0.4424 (1.3146)	Prec@1 75.00000 (58.08823)	Prec@5 100.00000 (97.79412)
Epoch: [13][18/60]	Time 0.15483 (0.52935)	Data 0.00074 (0.39208)	Loss 1.9471 (1.3497)	Prec@1 62.50000 (58.33333)	Prec@5 87.50000 (97.22222)
Epoch: [13][19/60]	Time 0.10742 (0.50715)	Data 0.02022 (0.37251)	Loss 0.5323 (1.3067)	Prec@1 87.50000 (59.86842)	Prec@5 100.00000 (97.36842)
Epoch: [13][20/60]	Time 0.14133 (0.48886)	Data 0.01731 (0.35475)	Loss 3.1308 (1.3979)	Prec@1 62.50000 (60.00000)	Prec@5 62.50000 (95.62500)
Epoch: [13][21/60]	Time 0.16071 (0.47323)	Data 0.02294 (0.33895)	Loss 1.3061 (1.3935)	Prec@1 50.00000 (59.52381)	Prec@5 100.00000 (95.83334)
Epoch: [13][22/60]	Time 0.06176 (0.45453)	Data 0.00891 (0.32394)	Loss 1.1236 (1.3813)	Prec@1 62.50000 (59.65909)	Prec@5 100.00000 (96.02273)
Epoch: [13][23/60]	Time 0.21017 (0.44390)	Data 0.07477 (0.31311)	Loss 2.1100 (1.4129)	Prec@1 50.00000 (59.23913)	Prec@5 87.50000 (95.65218)
Epoch: [13][24/60]	Time 0.16619 (0.43233)	Data 0.00072 (0.30009)	Loss 0.3732 (1.3696)	Prec@1 87.50000 (60.41667)	Prec@5 100.00000 (95.83334)
Epoch: [13][25/60]	Time 0.07630 (0.41809)	Data 0.00618 (0.28834)	Loss 0.9181 (1.3516)	Prec@1 62.50000 (60.50000)	Prec@5 100.00000 (96.00000)
Epoch: [13][26/60]	Time 0.15472 (0.40796)	Data 0.07781 (0.28024)	Loss 0.7546 (1.3286)	Prec@1 62.50000 (60.57693)	Prec@5 100.00000 (96.15385)
Epoch: [13][27/60]	Time 0.23171 (0.40143)	Data 0.00572 (0.27007)	Loss 1.3255 (1.3285)	Prec@1 62.50000 (60.64815)	Prec@5 100.00000 (96.29630)
Epoch: [13][28/60]	Time 0.10258 (0.39076)	Data 0.05187 (0.26228)	Loss 0.3626 (1.2940)	Prec@1 87.50000 (61.60715)	Prec@5 100.00000 (96.42857)
Epoch: [13][29/60]	Time 0.13113 (0.38181)	Data 0.00047 (0.25325)	Loss 1.3475 (1.2958)	Prec@1 50.00000 (61.20690)	Prec@5 100.00000 (96.55173)
Epoch: [13][30/60]	Time 0.10143 (0.37246)	Data 0.00047 (0.24483)	Loss 1.9715 (1.3184)	Prec@1 25.00000 (60.00000)	Prec@5 100.00000 (96.66667)
Epoch: [13][31/60]	Time 0.05792 (0.36231)	Data 0.00060 (0.23695)	Loss 2.5817 (1.3591)	Prec@1 37.50000 (59.27419)	Prec@5 100.00000 (96.77419)
Epoch: [13][32/60]	Time 0.06189 (0.35293)	Data 0.00059 (0.22956)	Loss 1.8213 (1.3736)	Prec@1 37.50000 (58.59375)	Prec@5 100.00000 (96.87500)
Epoch: [13][33/60]	Time 0.04449 (0.34358)	Data 0.00050 (0.22262)	Loss 1.0021 (1.3623)	Prec@1 75.00000 (59.09091)	Prec@5 100.00000 (96.96970)
Epoch: [13][34/60]	Time 0.03917 (0.33463)	Data 0.00131 (0.21611)	Loss 1.4232 (1.3641)	Prec@1 50.00000 (58.82353)	Prec@5 100.00000 (97.05882)
Epoch: [13][35/60]	Time 0.03147 (0.32596)	Data 0.00065 (0.20996)	Loss 1.2191 (1.3599)	Prec@1 50.00000 (58.57143)	Prec@5 100.00000 (97.14286)
Epoch: [13][36/60]	Time 0.02900 (0.31772)	Data 0.00076 (0.20414)	Loss 1.8449 (1.3734)	Prec@1 50.00000 (58.33333)	Prec@5 100.00000 (97.22222)
Epoch: [13][37/60]	Time 0.02430 (0.30979)	Data 0.00076 (0.19865)	Loss 0.9329 (1.3615)	Prec@1 75.00000 (58.78379)	Prec@5 100.00000 (97.29730)
Epoch: [13][38/60]	Time 0.02279 (0.30223)	Data 0.00069 (0.19344)	Loss 1.5303 (1.3660)	Prec@1 50.00000 (58.55263)	Prec@5 100.00000 (97.36842)
Epoch: [13][39/60]	Time 0.02360 (0.29509)	Data 0.00066 (0.18850)	Loss 0.6658 (1.3480)	Prec@1 75.00000 (58.97436)	Prec@5 100.00000 (97.43590)
Epoch: [13][40/60]	Time 0.02258 (0.28828)	Data 0.00086 (0.18380)	Loss 0.6914 (1.3316)	Prec@1 87.50000 (59.68750)	Prec@5 100.00000 (97.50000)
Epoch: [13][41/60]	Time 0.02290 (0.28180)	Data 0.00097 (0.17934)	Loss 0.7556 (1.3175)	Prec@1 75.00000 (60.06097)	Prec@5 100.00000 (97.56097)
Epoch: [13][42/60]	Time 0.02270 (0.27563)	Data 0.00097 (0.17510)	Loss 1.2874 (1.3168)	Prec@1 37.50000 (59.52381)	Prec@5 100.00000 (97.61905)
Epoch: [13][43/60]	Time 0.02260 (0.26975)	Data 0.00099 (0.17105)	Loss 1.0861 (1.3115)	Prec@1 62.50000 (59.59302)	Prec@5 100.00000 (97.67442)
Epoch: [13][44/60]	Time 0.02419 (0.26417)	Data 0.00112 (0.16719)	Loss 1.1505 (1.3078)	Prec@1 50.00000 (59.37500)	Prec@5 100.00000 (97.72727)
Epoch: [13][45/60]	Time 0.02300 (0.25881)	Data 0.00065 (0.16349)	Loss 0.6022 (1.2921)	Prec@1 75.00000 (59.72223)	Prec@5 100.00000 (97.77778)
Epoch: [13][46/60]	Time 0.02284 (0.25368)	Data 0.00092 (0.15995)	Loss 1.9518 (1.3065)	Prec@1 50.00000 (59.51087)	Prec@5 87.50000 (97.55435)
Epoch: [13][47/60]	Time 0.02253 (0.24876)	Data 0.00043 (0.15656)	Loss 0.7535 (1.2947)	Prec@1 75.00000 (59.84042)	Prec@5 87.50000 (97.34042)
Epoch: [13][48/60]	Time 0.02216 (0.24404)	Data 0.00044 (0.15331)	Loss 1.1252 (1.2912)	Prec@1 62.50000 (59.89584)	Prec@5 100.00000 (97.39584)
Epoch: [13][49/60]	Time 0.02277 (0.23953)	Data 0.00045 (0.15019)	Loss 1.2433 (1.2902)	Prec@1 75.00000 (60.20408)	Prec@5 87.50000 (97.19388)
Epoch: [13][50/60]	Time 0.02208 (0.23518)	Data 0.00042 (0.14719)	Loss 1.0180 (1.2847)	Prec@1 75.00000 (60.50000)	Prec@5 100.00000 (97.25000)
Epoch: [13][51/60]	Time 0.02218 (0.23100)	Data 0.00045 (0.14431)	Loss 0.3636 (1.2667)	Prec@1 75.00000 (60.78432)	Prec@5 100.00000 (97.30392)
Epoch: [13][52/60]	Time 0.02216 (0.22698)	Data 0.00042 (0.14155)	Loss 1.8211 (1.2773)	Prec@1 37.50000 (60.33654)	Prec@5 100.00000 (97.35577)
Epoch: [13][53/60]	Time 0.02215 (0.22312)	Data 0.00047 (0.13888)	Loss 0.9719 (1.2716)	Prec@1 75.00000 (60.61321)	Prec@5 100.00000 (97.40566)
Epoch: [13][54/60]	Time 0.02327 (0.21942)	Data 0.00043 (0.13632)	Loss 1.2149 (1.2705)	Prec@1 75.00000 (60.87963)	Prec@5 100.00000 (97.45370)
Epoch: [13][55/60]	Time 0.02220 (0.21583)	Data 0.00045 (0.13385)	Loss 1.3941 (1.2728)	Prec@1 62.50000 (60.90909)	Prec@5 87.50000 (97.27273)
Epoch: [13][56/60]	Time 0.02198 (0.21237)	Data 0.00047 (0.13147)	Loss 1.2574 (1.2725)	Prec@1 62.50000 (60.93750)	Prec@5 100.00000 (97.32143)
Epoch: [13][57/60]	Time 0.02276 (0.20904)	Data 0.00045 (0.12917)	Loss 1.9475 (1.2843)	Prec@1 62.50000 (60.96491)	Prec@5 87.50000 (97.14912)
Epoch: [13][58/60]	Time 0.02242 (0.20583)	Data 0.00045 (0.12695)	Loss 1.9050 (1.2950)	Prec@1 50.00000 (60.77586)	Prec@5 87.50000 (96.98276)
Epoch: [13][59/60]	Time 0.02273 (0.20272)	Data 0.00047 (0.12481)	Loss 1.4063 (1.2969)	Prec@1 62.50000 (60.80508)	Prec@5 100.00000 (97.03390)
Epoch: [13][60/60]	Time 0.02197 (0.19971)	Data 0.00049 (0.12273)	Loss 0.9390 (1.2910)	Prec@1 87.50000 (61.25000)	Prec@5 100.00000 (97.08334)
train at epoch 14
train at epoch 14
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [14][0/272]	 lr: 0.04000	Time 6.523 (6.523)	Data 5.502 (5.502)	Loss 0.1366 (0.1366)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [14][10/272]	 lr: 0.04000	Time 0.447 (1.279)	Data 0.127 (0.817)	Loss 0.2116 (0.2914)	Prec@1 93.75000 (90.05682)	Prec@5 100.00000 (100.00000)
Epoch: [14][20/272]	 lr: 0.04000	Time 0.386 (0.872)	Data 0.127 (0.490)	Loss 0.2564 (0.3419)	Prec@1 90.62500 (87.79762)	Prec@5 100.00000 (100.00000)
Epoch: [14][30/272]	 lr: 0.04000	Time 0.420 (0.730)	Data 0.130 (0.374)	Loss 0.3147 (0.3308)	Prec@1 93.75000 (88.30645)	Prec@5 100.00000 (100.00000)
Epoch: [14][40/272]	 lr: 0.04000	Time 0.458 (0.662)	Data 0.129 (0.315)	Loss 0.5901 (0.3305)	Prec@1 84.37500 (88.87195)	Prec@5 96.87500 (99.92377)
Epoch: [14][50/272]	 lr: 0.04000	Time 0.428 (0.624)	Data 0.128 (0.279)	Loss 0.5440 (0.3316)	Prec@1 75.00000 (88.78677)	Prec@5 100.00000 (99.87746)
Epoch: [14][60/272]	 lr: 0.04000	Time 0.444 (0.595)	Data 0.119 (0.254)	Loss 0.5648 (0.3455)	Prec@1 81.25000 (88.42213)	Prec@5 100.00000 (99.79507)
Epoch: [14][70/272]	 lr: 0.04000	Time 0.411 (0.572)	Data 0.126 (0.237)	Loss 0.1147 (0.3263)	Prec@1 93.75000 (89.34859)	Prec@5 100.00000 (99.82394)
Epoch: [14][80/272]	 lr: 0.04000	Time 0.593 (0.558)	Data 0.130 (0.223)	Loss 0.8693 (0.3311)	Prec@1 75.00000 (89.04321)	Prec@5 100.00000 (99.84568)
Epoch: [14][90/272]	 lr: 0.04000	Time 0.453 (0.543)	Data 0.137 (0.213)	Loss 0.3110 (0.3426)	Prec@1 90.62500 (88.56456)	Prec@5 100.00000 (99.82830)
Epoch: [14][100/272]	 lr: 0.04000	Time 0.447 (0.535)	Data 0.115 (0.204)	Loss 0.4474 (0.3454)	Prec@1 78.12500 (88.45916)	Prec@5 100.00000 (99.84530)
Epoch: [14][110/272]	 lr: 0.04000	Time 0.408 (0.526)	Data 0.127 (0.198)	Loss 0.4605 (0.3627)	Prec@1 81.25000 (87.95045)	Prec@5 100.00000 (99.85924)
Epoch: [14][120/272]	 lr: 0.04000	Time 0.428 (0.518)	Data 0.127 (0.192)	Loss 0.1741 (0.3709)	Prec@1 96.87500 (87.73244)	Prec@5 100.00000 (99.81921)
Epoch: [14][130/272]	 lr: 0.04000	Time 0.450 (0.512)	Data 0.141 (0.188)	Loss 0.3333 (0.3699)	Prec@1 87.50000 (87.78626)	Prec@5 100.00000 (99.80916)
Epoch: [14][140/272]	 lr: 0.04000	Time 0.503 (0.507)	Data 0.128 (0.183)	Loss 0.4017 (0.3634)	Prec@1 84.37500 (88.00975)	Prec@5 100.00000 (99.82269)
Epoch: [14][150/272]	 lr: 0.04000	Time 0.455 (0.502)	Data 0.127 (0.180)	Loss 0.2920 (0.3621)	Prec@1 96.87500 (87.93460)	Prec@5 96.87500 (99.81374)
Epoch: [14][160/272]	 lr: 0.04000	Time 0.537 (0.497)	Data 0.129 (0.177)	Loss 0.1975 (0.3583)	Prec@1 87.50000 (88.04348)	Prec@5 100.00000 (99.82531)
Epoch: [14][170/272]	 lr: 0.04000	Time 0.369 (0.494)	Data 0.123 (0.174)	Loss 0.4040 (0.3581)	Prec@1 84.37500 (87.93860)	Prec@5 100.00000 (99.83553)
Epoch: [14][180/272]	 lr: 0.04000	Time 0.413 (0.492)	Data 0.119 (0.171)	Loss 0.2266 (0.3552)	Prec@1 93.75000 (88.06976)	Prec@5 100.00000 (99.82735)
Epoch: [14][190/272]	 lr: 0.04000	Time 0.432 (0.488)	Data 0.128 (0.169)	Loss 0.3876 (0.3529)	Prec@1 81.25000 (88.12173)	Prec@5 100.00000 (99.83639)
Epoch: [14][200/272]	 lr: 0.04000	Time 0.383 (0.487)	Data 0.141 (0.167)	Loss 0.2568 (0.3492)	Prec@1 90.62500 (88.24627)	Prec@5 100.00000 (99.84453)
Epoch: [14][210/272]	 lr: 0.04000	Time 0.537 (0.485)	Data 0.142 (0.165)	Loss 0.2057 (0.3478)	Prec@1 93.75000 (88.25533)	Prec@5 100.00000 (99.85190)
Epoch: [14][220/272]	 lr: 0.04000	Time 0.490 (0.483)	Data 0.132 (0.164)	Loss 0.2186 (0.3450)	Prec@1 93.75000 (88.37670)	Prec@5 100.00000 (99.85860)
Epoch: [14][230/272]	 lr: 0.04000	Time 0.424 (0.481)	Data 0.130 (0.163)	Loss 0.7870 (0.3450)	Prec@1 71.87500 (88.35227)	Prec@5 100.00000 (99.85119)
Epoch: [14][240/272]	 lr: 0.04000	Time 0.315 (0.478)	Data 0.128 (0.161)	Loss 0.1491 (0.3430)	Prec@1 100.00000 (88.39471)	Prec@5 100.00000 (99.85737)
Epoch: [14][250/272]	 lr: 0.04000	Time 0.233 (0.469)	Data 0.117 (0.160)	Loss 0.7059 (0.3434)	Prec@1 65.62500 (88.34662)	Prec@5 100.00000 (99.86305)
Epoch: [14][260/272]	 lr: 0.04000	Time 0.242 (0.460)	Data 0.127 (0.159)	Loss 0.7946 (0.3438)	Prec@1 68.75000 (88.39799)	Prec@5 96.87500 (99.85632)
Epoch: [14][270/272]	 lr: 0.04000	Time 0.238 (0.452)	Data 0.129 (0.158)	Loss 0.4112 (0.3408)	Prec@1 75.00000 (88.42251)	Prec@5 100.00000 (99.86163)
validation at epoch 14
validation at epoch 14
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [14][1/60]	Time 4.27261 (4.27261)	Data 4.10733 (4.10733)	Loss 0.9446 (0.9446)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [14][2/60]	Time 0.29421 (2.28341)	Data 0.13478 (2.12105)	Loss 0.6233 (0.7840)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (100.00000)
Epoch: [14][3/60]	Time 0.28931 (1.61871)	Data 0.04316 (1.42842)	Loss 1.0498 (0.8726)	Prec@1 62.50000 (66.66667)	Prec@5 100.00000 (100.00000)
Epoch: [14][4/60]	Time 2.59640 (1.86313)	Data 2.52890 (1.70354)	Loss 0.7328 (0.8376)	Prec@1 50.00000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [14][5/60]	Time 0.07271 (1.50505)	Data 0.01194 (1.36522)	Loss 0.7571 (0.8215)	Prec@1 50.00000 (60.00000)	Prec@5 100.00000 (100.00000)
Epoch: [14][6/60]	Time 0.09726 (1.27042)	Data 0.01738 (1.14058)	Loss 0.9287 (0.8394)	Prec@1 25.00000 (54.16667)	Prec@5 100.00000 (100.00000)
Epoch: [14][7/60]	Time 0.09140 (1.10199)	Data 0.02039 (0.98055)	Loss 0.2065 (0.7490)	Prec@1 87.50000 (58.92857)	Prec@5 100.00000 (100.00001)
Epoch: [14][8/60]	Time 0.11884 (0.97909)	Data 0.02138 (0.86066)	Loss 0.4786 (0.7152)	Prec@1 75.00000 (60.93750)	Prec@5 100.00000 (100.00000)
Epoch: [14][9/60]	Time 0.09006 (0.88031)	Data 0.00363 (0.76543)	Loss 0.2514 (0.6636)	Prec@1 87.50000 (63.88889)	Prec@5 100.00000 (100.00000)
Epoch: [14][10/60]	Time 0.08619 (0.80090)	Data 0.00068 (0.68896)	Loss 0.0439 (0.6017)	Prec@1 100.00000 (67.50000)	Prec@5 100.00000 (100.00000)
Epoch: [14][11/60]	Time 0.20956 (0.74714)	Data 0.00197 (0.62650)	Loss 0.3464 (0.5785)	Prec@1 87.50000 (69.31818)	Prec@5 100.00000 (100.00000)
Epoch: [14][12/60]	Time 0.20743 (0.70217)	Data 0.08839 (0.58166)	Loss 0.3441 (0.5589)	Prec@1 87.50000 (70.83334)	Prec@5 100.00000 (100.00000)
Epoch: [14][13/60]	Time 0.09447 (0.65542)	Data 0.00284 (0.53714)	Loss 2.1529 (0.6815)	Prec@1 25.00000 (67.30769)	Prec@5 100.00000 (100.00000)
Epoch: [14][14/60]	Time 0.17162 (0.62086)	Data 0.01240 (0.49965)	Loss 0.3428 (0.6574)	Prec@1 87.50000 (68.75000)	Prec@5 100.00000 (100.00001)
Epoch: [14][15/60]	Time 0.07903 (0.58474)	Data 0.00051 (0.46638)	Loss 0.4019 (0.6403)	Prec@1 87.50000 (70.00000)	Prec@5 100.00000 (100.00001)
Epoch: [14][16/60]	Time 0.21881 (0.56187)	Data 0.05605 (0.44073)	Loss 1.5286 (0.6958)	Prec@1 62.50000 (69.53125)	Prec@5 100.00000 (100.00000)
Epoch: [14][17/60]	Time 0.18703 (0.53982)	Data 0.02610 (0.41634)	Loss 1.5018 (0.7432)	Prec@1 62.50000 (69.11765)	Prec@5 100.00000 (100.00000)
Epoch: [14][18/60]	Time 0.15464 (0.51842)	Data 0.01248 (0.39391)	Loss 2.3749 (0.8339)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (100.00000)
Epoch: [14][19/60]	Time 0.09827 (0.49631)	Data 0.00951 (0.37367)	Loss 0.6636 (0.8249)	Prec@1 87.50000 (69.73684)	Prec@5 100.00000 (100.00000)
Epoch: [14][20/60]	Time 0.13169 (0.47808)	Data 0.04573 (0.35728)	Loss 3.3808 (0.9527)	Prec@1 50.00000 (68.75000)	Prec@5 100.00000 (100.00000)
Epoch: [14][21/60]	Time 0.07604 (0.45893)	Data 0.00076 (0.34030)	Loss 2.3163 (1.0177)	Prec@1 50.00000 (67.85715)	Prec@5 100.00000 (100.00000)
Epoch: [14][22/60]	Time 0.29465 (0.45147)	Data 0.08578 (0.32873)	Loss 1.6775 (1.0476)	Prec@1 62.50000 (67.61364)	Prec@5 100.00000 (100.00000)
Epoch: [14][23/60]	Time 0.13909 (0.43788)	Data 0.07016 (0.31749)	Loss 3.2028 (1.1413)	Prec@1 25.00000 (65.76087)	Prec@5 100.00000 (100.00000)
Epoch: [14][24/60]	Time 0.07597 (0.42280)	Data 0.01105 (0.30472)	Loss 1.6091 (1.1608)	Prec@1 50.00000 (65.10417)	Prec@5 100.00000 (100.00000)
Epoch: [14][25/60]	Time 0.06648 (0.40855)	Data 0.01327 (0.29306)	Loss 1.6802 (1.1816)	Prec@1 62.50000 (65.00000)	Prec@5 100.00000 (100.00000)
Epoch: [14][26/60]	Time 0.21549 (0.40113)	Data 0.05506 (0.28391)	Loss 1.6263 (1.1987)	Prec@1 62.50000 (64.90385)	Prec@5 100.00000 (100.00000)
Epoch: [14][27/60]	Time 0.12875 (0.39104)	Data 0.02923 (0.27448)	Loss 2.0379 (1.2298)	Prec@1 62.50000 (64.81481)	Prec@5 100.00000 (100.00000)
Epoch: [14][28/60]	Time 0.03770 (0.37842)	Data 0.00649 (0.26490)	Loss 1.4849 (1.2389)	Prec@1 62.50000 (64.73215)	Prec@5 100.00000 (100.00001)
Epoch: [14][29/60]	Time 0.04092 (0.36678)	Data 0.00060 (0.25579)	Loss 2.0994 (1.2686)	Prec@1 25.00000 (63.36207)	Prec@5 100.00000 (100.00000)
Epoch: [14][30/60]	Time 0.03924 (0.35586)	Data 0.00038 (0.24728)	Loss 1.6169 (1.2802)	Prec@1 62.50000 (63.33334)	Prec@5 100.00000 (100.00001)
Epoch: [14][31/60]	Time 0.07490 (0.34680)	Data 0.01085 (0.23965)	Loss 3.8629 (1.3635)	Prec@1 37.50000 (62.50000)	Prec@5 87.50000 (99.59677)
Epoch: [14][32/60]	Time 0.12238 (0.33979)	Data 0.00041 (0.23217)	Loss 2.9940 (1.4145)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (99.60938)
Epoch: [14][33/60]	Time 0.05928 (0.33129)	Data 0.00039 (0.22515)	Loss 0.0369 (1.3727)	Prec@1 100.00000 (63.63636)	Prec@5 100.00000 (99.62122)
Epoch: [14][34/60]	Time 0.05496 (0.32316)	Data 0.00048 (0.21854)	Loss 1.4408 (1.3747)	Prec@1 62.50000 (63.60294)	Prec@5 100.00000 (99.63235)
Epoch: [14][35/60]	Time 0.04108 (0.31510)	Data 0.00047 (0.21231)	Loss 2.3313 (1.4020)	Prec@1 50.00000 (63.21429)	Prec@5 87.50000 (99.28571)
Epoch: [14][36/60]	Time 0.03597 (0.30735)	Data 0.00072 (0.20643)	Loss 1.9054 (1.4160)	Prec@1 75.00000 (63.54167)	Prec@5 100.00000 (99.30556)
Epoch: [14][37/60]	Time 0.02988 (0.29985)	Data 0.00066 (0.20087)	Loss 2.4847 (1.4449)	Prec@1 62.50000 (63.51352)	Prec@5 100.00000 (99.32433)
Epoch: [14][38/60]	Time 0.02732 (0.29267)	Data 0.00055 (0.19560)	Loss 1.6377 (1.4500)	Prec@1 62.50000 (63.48684)	Prec@5 100.00000 (99.34211)
Epoch: [14][39/60]	Time 0.02226 (0.28574)	Data 0.00046 (0.19060)	Loss 0.2342 (1.4188)	Prec@1 87.50000 (64.10256)	Prec@5 100.00000 (99.35898)
Epoch: [14][40/60]	Time 0.02274 (0.27917)	Data 0.00102 (0.18586)	Loss 0.0716 (1.3851)	Prec@1 100.00000 (65.00000)	Prec@5 100.00000 (99.37500)
Epoch: [14][41/60]	Time 0.02328 (0.27292)	Data 0.00115 (0.18135)	Loss 2.1514 (1.4038)	Prec@1 75.00000 (65.24390)	Prec@5 100.00000 (99.39024)
Epoch: [14][42/60]	Time 0.02277 (0.26697)	Data 0.00073 (0.17705)	Loss 0.9008 (1.3918)	Prec@1 75.00000 (65.47619)	Prec@5 100.00000 (99.40476)
Epoch: [14][43/60]	Time 0.02149 (0.26126)	Data 0.00041 (0.17294)	Loss 2.0121 (1.4063)	Prec@1 75.00000 (65.69768)	Prec@5 100.00000 (99.41860)
Epoch: [14][44/60]	Time 0.02237 (0.25583)	Data 0.00038 (0.16902)	Loss 2.8781 (1.4397)	Prec@1 50.00000 (65.34091)	Prec@5 100.00000 (99.43182)
Epoch: [14][45/60]	Time 0.02190 (0.25063)	Data 0.00047 (0.16528)	Loss 2.0856 (1.4541)	Prec@1 50.00000 (65.00000)	Prec@5 100.00000 (99.44445)
Epoch: [14][46/60]	Time 0.02221 (0.24567)	Data 0.00042 (0.16169)	Loss 1.2213 (1.4490)	Prec@1 62.50000 (64.94566)	Prec@5 100.00000 (99.45652)
Epoch: [14][47/60]	Time 0.02215 (0.24091)	Data 0.00043 (0.15826)	Loss 0.5706 (1.4303)	Prec@1 87.50000 (65.42553)	Prec@5 87.50000 (99.20213)
Epoch: [14][48/60]	Time 0.02411 (0.23639)	Data 0.00044 (0.15497)	Loss 0.9654 (1.4206)	Prec@1 62.50000 (65.36459)	Prec@5 100.00000 (99.21875)
Epoch: [14][49/60]	Time 0.02715 (0.23212)	Data 0.00063 (0.15182)	Loss 1.0495 (1.4131)	Prec@1 87.50000 (65.81632)	Prec@5 100.00000 (99.23470)
Epoch: [14][50/60]	Time 0.02259 (0.22793)	Data 0.00042 (0.14880)	Loss 1.1452 (1.4077)	Prec@1 50.00000 (65.50000)	Prec@5 100.00000 (99.25000)
Epoch: [14][51/60]	Time 0.02330 (0.22392)	Data 0.00051 (0.14589)	Loss 0.0790 (1.3816)	Prec@1 100.00000 (66.17648)	Prec@5 100.00000 (99.26471)
Epoch: [14][52/60]	Time 0.02289 (0.22005)	Data 0.00052 (0.14309)	Loss 1.4699 (1.3833)	Prec@1 37.50000 (65.62500)	Prec@5 100.00000 (99.27885)
Epoch: [14][53/60]	Time 0.02268 (0.21633)	Data 0.00050 (0.14040)	Loss 0.8647 (1.3736)	Prec@1 75.00000 (65.80189)	Prec@5 100.00000 (99.29246)
Epoch: [14][54/60]	Time 0.02256 (0.21274)	Data 0.00046 (0.13781)	Loss 1.5415 (1.3767)	Prec@1 75.00000 (65.97222)	Prec@5 100.00000 (99.30556)
Epoch: [14][55/60]	Time 0.02259 (0.20929)	Data 0.00041 (0.13531)	Loss 0.7286 (1.3649)	Prec@1 75.00000 (66.13636)	Prec@5 100.00000 (99.31818)
Epoch: [14][56/60]	Time 0.02353 (0.20597)	Data 0.00053 (0.13291)	Loss 1.1248 (1.3606)	Prec@1 62.50000 (66.07143)	Prec@5 100.00000 (99.33036)
Epoch: [14][57/60]	Time 0.02759 (0.20284)	Data 0.00045 (0.13058)	Loss 1.7632 (1.3677)	Prec@1 62.50000 (66.00877)	Prec@5 100.00000 (99.34211)
Epoch: [14][58/60]	Time 0.02341 (0.19974)	Data 0.00079 (0.12834)	Loss 1.5221 (1.3703)	Prec@1 50.00000 (65.73276)	Prec@5 100.00000 (99.35345)
Epoch: [14][59/60]	Time 0.02256 (0.19674)	Data 0.00057 (0.12618)	Loss 2.0507 (1.3819)	Prec@1 50.00000 (65.46610)	Prec@5 100.00000 (99.36441)
Epoch: [14][60/60]	Time 0.02272 (0.19384)	Data 0.00050 (0.12408)	Loss 0.9650 (1.3749)	Prec@1 75.00000 (65.62500)	Prec@5 100.00000 (99.37501)
train at epoch 15
train at epoch 15
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [15][0/272]	 lr: 0.04000	Time 4.076 (4.076)	Data 3.384 (3.384)	Loss 0.1415 (0.1415)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [15][10/272]	 lr: 0.04000	Time 0.377 (1.279)	Data 0.128 (0.776)	Loss 0.2434 (0.2753)	Prec@1 90.62500 (90.90910)	Prec@5 100.00000 (100.00000)
Epoch: [15][20/272]	 lr: 0.04000	Time 0.433 (0.877)	Data 0.129 (0.469)	Loss 0.1027 (0.2906)	Prec@1 100.00000 (89.58334)	Prec@5 100.00000 (100.00000)
Epoch: [15][30/272]	 lr: 0.04000	Time 0.525 (0.746)	Data 0.130 (0.361)	Loss 0.1478 (0.3022)	Prec@1 96.87500 (89.61694)	Prec@5 100.00000 (99.89919)
Epoch: [15][40/272]	 lr: 0.04000	Time 0.436 (0.677)	Data 0.118 (0.305)	Loss 0.0885 (0.3330)	Prec@1 100.00000 (88.49085)	Prec@5 100.00000 (99.84756)
Epoch: [15][50/272]	 lr: 0.04000	Time 0.450 (0.634)	Data 0.138 (0.271)	Loss 0.3212 (0.3399)	Prec@1 87.50000 (88.54167)	Prec@5 100.00000 (99.87746)
Epoch: [15][60/272]	 lr: 0.04000	Time 0.430 (0.601)	Data 0.124 (0.248)	Loss 0.1020 (0.3330)	Prec@1 100.00000 (89.08811)	Prec@5 100.00000 (99.89754)
Epoch: [15][70/272]	 lr: 0.04000	Time 0.635 (0.583)	Data 0.129 (0.231)	Loss 0.3724 (0.3312)	Prec@1 81.25000 (89.08450)	Prec@5 100.00000 (99.86796)
Epoch: [15][80/272]	 lr: 0.04000	Time 0.403 (0.568)	Data 0.127 (0.218)	Loss 0.4935 (0.3240)	Prec@1 81.25000 (89.46759)	Prec@5 100.00000 (99.88426)
Epoch: [15][90/272]	 lr: 0.04000	Time 0.467 (0.555)	Data 0.117 (0.208)	Loss 0.1382 (0.3204)	Prec@1 96.87500 (89.59478)	Prec@5 100.00000 (99.89698)
Epoch: [15][100/272]	 lr: 0.04000	Time 0.497 (0.544)	Data 0.127 (0.200)	Loss 0.3922 (0.3211)	Prec@1 84.37500 (89.51114)	Prec@5 100.00000 (99.90717)
Epoch: [15][110/272]	 lr: 0.04000	Time 0.377 (0.536)	Data 0.128 (0.193)	Loss 0.2198 (0.3291)	Prec@1 93.75000 (89.30180)	Prec@5 100.00000 (99.91554)
Epoch: [15][120/272]	 lr: 0.04000	Time 0.458 (0.531)	Data 0.142 (0.188)	Loss 0.2630 (0.3297)	Prec@1 93.75000 (89.28202)	Prec@5 100.00000 (99.92252)
Epoch: [15][130/272]	 lr: 0.04000	Time 0.509 (0.527)	Data 0.111 (0.183)	Loss 0.1595 (0.3293)	Prec@1 96.87500 (89.43225)	Prec@5 100.00000 (99.92844)
Epoch: [15][140/272]	 lr: 0.04000	Time 0.492 (0.522)	Data 0.128 (0.179)	Loss 0.1925 (0.3214)	Prec@1 93.75000 (89.73847)	Prec@5 100.00000 (99.93351)
Epoch: [15][150/272]	 lr: 0.04000	Time 0.497 (0.517)	Data 0.126 (0.176)	Loss 0.1088 (0.3245)	Prec@1 96.87500 (89.50745)	Prec@5 100.00000 (99.93791)
Epoch: [15][160/272]	 lr: 0.04000	Time 0.403 (0.513)	Data 0.131 (0.173)	Loss 0.3604 (0.3226)	Prec@1 87.50000 (89.53805)	Prec@5 100.00000 (99.94177)
Epoch: [15][170/272]	 lr: 0.04000	Time 0.450 (0.508)	Data 0.127 (0.171)	Loss 0.2122 (0.3198)	Prec@1 93.75000 (89.65643)	Prec@5 100.00000 (99.94518)
Epoch: [15][180/272]	 lr: 0.04000	Time 0.418 (0.504)	Data 0.130 (0.168)	Loss 0.2083 (0.3219)	Prec@1 96.87500 (89.67542)	Prec@5 100.00000 (99.94821)
Epoch: [15][190/272]	 lr: 0.04000	Time 0.483 (0.500)	Data 0.135 (0.166)	Loss 0.1878 (0.3181)	Prec@1 93.75000 (89.80694)	Prec@5 100.00000 (99.95092)
Epoch: [15][200/272]	 lr: 0.04000	Time 0.478 (0.497)	Data 0.127 (0.164)	Loss 0.4052 (0.3193)	Prec@1 87.50000 (89.75435)	Prec@5 100.00000 (99.95335)
Epoch: [15][210/272]	 lr: 0.04000	Time 0.401 (0.494)	Data 0.126 (0.162)	Loss 0.4738 (0.3164)	Prec@1 87.50000 (89.89929)	Prec@5 100.00000 (99.95557)
Epoch: [15][220/272]	 lr: 0.04000	Time 0.560 (0.492)	Data 0.127 (0.161)	Loss 0.2271 (0.3159)	Prec@1 93.75000 (89.86143)	Prec@5 100.00000 (99.95758)
Epoch: [15][230/272]	 lr: 0.04000	Time 0.452 (0.490)	Data 0.128 (0.160)	Loss 0.2305 (0.3135)	Prec@1 93.75000 (89.92154)	Prec@5 100.00000 (99.95942)
Epoch: [15][240/272]	 lr: 0.04000	Time 0.250 (0.487)	Data 0.127 (0.158)	Loss 0.1279 (0.3102)	Prec@1 96.87500 (90.06743)	Prec@5 100.00000 (99.96111)
Epoch: [15][250/272]	 lr: 0.04000	Time 0.238 (0.477)	Data 0.128 (0.157)	Loss 0.2638 (0.3112)	Prec@1 93.75000 (90.00249)	Prec@5 100.00000 (99.96265)
Epoch: [15][260/272]	 lr: 0.04000	Time 0.238 (0.468)	Data 0.129 (0.156)	Loss 0.3164 (0.3147)	Prec@1 84.37500 (89.77490)	Prec@5 100.00000 (99.95210)
Epoch: [15][270/272]	 lr: 0.04000	Time 0.238 (0.460)	Data 0.128 (0.155)	Loss 0.9379 (0.3202)	Prec@1 78.12500 (89.63330)	Prec@5 100.00000 (99.94234)
validation at epoch 15
validation at epoch 15
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [15][1/60]	Time 6.26477 (6.26477)	Data 6.19779 (6.19779)	Loss 0.2146 (0.2146)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [15][2/60]	Time 0.12678 (3.19577)	Data 0.00261 (3.10020)	Loss 0.4499 (0.3323)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [15][3/60]	Time 0.14325 (2.17827)	Data 0.00697 (2.06912)	Loss 1.4432 (0.7026)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [15][4/60]	Time 0.44786 (1.74567)	Data 0.38718 (1.64864)	Loss 0.3630 (0.6177)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [15][5/60]	Time 0.06463 (1.40946)	Data 0.00861 (1.32063)	Loss 0.9128 (0.6767)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [15][6/60]	Time 0.06772 (1.18583)	Data 0.00168 (1.10081)	Loss 0.5643 (0.6580)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.91667)
Epoch: [15][7/60]	Time 0.13396 (1.03557)	Data 0.00293 (0.94397)	Loss 0.6966 (0.6635)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [15][8/60]	Time 0.12659 (0.92195)	Data 0.01406 (0.82773)	Loss 0.3447 (0.6236)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (98.43750)
Epoch: [15][9/60]	Time 0.10748 (0.83145)	Data 0.00723 (0.73656)	Loss 1.1334 (0.6803)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [15][10/60]	Time 0.24885 (0.77319)	Data 0.09956 (0.67286)	Loss 0.1631 (0.6286)	Prec@1 100.00000 (80.00000)	Prec@5 100.00000 (98.75000)
Epoch: [15][11/60]	Time 1.25332 (0.81684)	Data 1.17684 (0.71868)	Loss 0.1731 (0.5872)	Prec@1 100.00000 (81.81818)	Prec@5 100.00000 (98.86364)
Epoch: [15][12/60]	Time 0.15000 (0.76127)	Data 0.00457 (0.65917)	Loss 1.7883 (0.6873)	Prec@1 62.50000 (80.20834)	Prec@5 75.00000 (96.87500)
Epoch: [15][13/60]	Time 0.20188 (0.71824)	Data 0.01458 (0.60958)	Loss 1.9080 (0.7812)	Prec@1 50.00000 (77.88462)	Prec@5 87.50000 (96.15385)
Epoch: [15][14/60]	Time 0.05821 (0.67109)	Data 0.01347 (0.56700)	Loss 0.4043 (0.7542)	Prec@1 75.00000 (77.67857)	Prec@5 100.00000 (96.42857)
Epoch: [15][15/60]	Time 0.16547 (0.63738)	Data 0.04480 (0.53219)	Loss 0.8308 (0.7593)	Prec@1 87.50000 (78.33334)	Prec@5 100.00000 (96.66667)
Epoch: [15][16/60]	Time 0.17064 (0.60821)	Data 0.00073 (0.49897)	Loss 1.3101 (0.7938)	Prec@1 62.50000 (77.34375)	Prec@5 100.00000 (96.87500)
Epoch: [15][17/60]	Time 0.12357 (0.57970)	Data 0.00327 (0.46982)	Loss 0.3659 (0.7686)	Prec@1 87.50000 (77.94118)	Prec@5 100.00000 (97.05882)
Epoch: [15][18/60]	Time 0.10678 (0.55343)	Data 0.00732 (0.44412)	Loss 1.5219 (0.8104)	Prec@1 75.00000 (77.77778)	Prec@5 87.50000 (96.52778)
Epoch: [15][19/60]	Time 0.10830 (0.53000)	Data 0.00096 (0.42080)	Loss 0.5132 (0.7948)	Prec@1 87.50000 (78.28947)	Prec@5 100.00000 (96.71053)
Epoch: [15][20/60]	Time 0.15736 (0.51137)	Data 0.05680 (0.40260)	Loss 2.1779 (0.8639)	Prec@1 50.00000 (76.87500)	Prec@5 87.50000 (96.25000)
Epoch: [15][21/60]	Time 0.12844 (0.49314)	Data 0.00396 (0.38361)	Loss 0.6312 (0.8529)	Prec@1 75.00000 (76.78571)	Prec@5 100.00000 (96.42857)
Epoch: [15][22/60]	Time 0.18795 (0.47926)	Data 0.00512 (0.36641)	Loss 0.3921 (0.8319)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (96.59091)
Epoch: [15][23/60]	Time 0.28827 (0.47096)	Data 0.06934 (0.35349)	Loss 1.8249 (0.8751)	Prec@1 50.00000 (76.08696)	Prec@5 100.00000 (96.73914)
Epoch: [15][24/60]	Time 0.15279 (0.45770)	Data 0.03437 (0.34020)	Loss 0.2834 (0.8504)	Prec@1 100.00000 (77.08334)	Prec@5 100.00000 (96.87500)
Epoch: [15][25/60]	Time 0.33852 (0.45294)	Data 0.08458 (0.32997)	Loss 1.0192 (0.8572)	Prec@1 62.50000 (76.50000)	Prec@5 100.00000 (97.00000)
Epoch: [15][26/60]	Time 0.21112 (0.44363)	Data 0.02297 (0.31816)	Loss 1.2139 (0.8709)	Prec@1 62.50000 (75.96154)	Prec@5 100.00000 (97.11539)
Epoch: [15][27/60]	Time 0.05319 (0.42917)	Data 0.01280 (0.30685)	Loss 0.5933 (0.8606)	Prec@1 75.00000 (75.92593)	Prec@5 100.00000 (97.22222)
Epoch: [15][28/60]	Time 0.08545 (0.41690)	Data 0.01639 (0.29648)	Loss 0.8849 (0.8615)	Prec@1 75.00000 (75.89286)	Prec@5 100.00000 (97.32143)
Epoch: [15][29/60]	Time 0.12038 (0.40667)	Data 0.01344 (0.28672)	Loss 1.3268 (0.8775)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (97.41380)
Epoch: [15][30/60]	Time 0.11238 (0.39686)	Data 0.00669 (0.27739)	Loss 1.5631 (0.9004)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (97.50001)
Epoch: [15][31/60]	Time 0.10585 (0.38748)	Data 0.00046 (0.26845)	Loss 2.1852 (0.9418)	Prec@1 37.50000 (73.38709)	Prec@5 100.00000 (97.58064)
Epoch: [15][32/60]	Time 0.08110 (0.37790)	Data 0.00050 (0.26008)	Loss 1.0696 (0.9458)	Prec@1 50.00000 (72.65625)	Prec@5 100.00000 (97.65625)
Epoch: [15][33/60]	Time 0.03841 (0.36761)	Data 0.00453 (0.25234)	Loss 0.4972 (0.9322)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (97.72727)
Epoch: [15][34/60]	Time 0.02902 (0.35765)	Data 0.00048 (0.24493)	Loss 1.0762 (0.9365)	Prec@1 50.00000 (72.05882)	Prec@5 100.00000 (97.79412)
Epoch: [15][35/60]	Time 0.02813 (0.34824)	Data 0.00049 (0.23794)	Loss 0.7255 (0.9304)	Prec@1 75.00000 (72.14286)	Prec@5 100.00000 (97.85715)
Epoch: [15][36/60]	Time 0.02700 (0.33932)	Data 0.00069 (0.23135)	Loss 0.9393 (0.9307)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (97.91666)
Epoch: [15][37/60]	Time 0.02507 (0.33082)	Data 0.00079 (0.22512)	Loss 0.6951 (0.9243)	Prec@1 62.50000 (71.95946)	Prec@5 100.00000 (97.97298)
Epoch: [15][38/60]	Time 0.02689 (0.32283)	Data 0.00070 (0.21922)	Loss 1.2655 (0.9333)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (98.02631)
Epoch: [15][39/60]	Time 0.02281 (0.31513)	Data 0.00063 (0.21361)	Loss 0.1838 (0.9141)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (98.07693)
Epoch: [15][40/60]	Time 0.02382 (0.30785)	Data 0.00072 (0.20829)	Loss 0.3866 (0.9009)	Prec@1 62.50000 (71.56250)	Prec@5 100.00000 (98.12500)
Epoch: [15][41/60]	Time 0.02296 (0.30090)	Data 0.00072 (0.20323)	Loss 0.9517 (0.9021)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (98.17073)
Epoch: [15][42/60]	Time 0.02284 (0.29428)	Data 0.00043 (0.19840)	Loss 1.0010 (0.9045)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [15][43/60]	Time 0.02288 (0.28797)	Data 0.00048 (0.19380)	Loss 0.7373 (0.9006)	Prec@1 75.00000 (71.51163)	Prec@5 100.00000 (98.25581)
Epoch: [15][44/60]	Time 0.02312 (0.28195)	Data 0.00045 (0.18940)	Loss 1.3711 (0.9113)	Prec@1 50.00000 (71.02273)	Prec@5 100.00000 (98.29546)
Epoch: [15][45/60]	Time 0.02370 (0.27621)	Data 0.00045 (0.18520)	Loss 0.3568 (0.8990)	Prec@1 75.00000 (71.11111)	Prec@5 100.00000 (98.33334)
Epoch: [15][46/60]	Time 0.02673 (0.27079)	Data 0.00044 (0.18119)	Loss 1.7932 (0.9184)	Prec@1 75.00000 (71.19566)	Prec@5 87.50000 (98.09783)
Epoch: [15][47/60]	Time 0.02290 (0.26551)	Data 0.00044 (0.17734)	Loss 1.4545 (0.9298)	Prec@1 75.00000 (71.27660)	Prec@5 87.50000 (97.87234)
Epoch: [15][48/60]	Time 0.02247 (0.26045)	Data 0.00047 (0.17366)	Loss 1.3197 (0.9379)	Prec@1 62.50000 (71.09375)	Prec@5 87.50000 (97.65625)
Epoch: [15][49/60]	Time 0.02300 (0.25560)	Data 0.00041 (0.17012)	Loss 1.1153 (0.9416)	Prec@1 75.00000 (71.17347)	Prec@5 87.50000 (97.44897)
Epoch: [15][50/60]	Time 0.02353 (0.25096)	Data 0.00041 (0.16673)	Loss 1.8373 (0.9595)	Prec@1 75.00000 (71.25000)	Prec@5 87.50000 (97.25000)
Epoch: [15][51/60]	Time 0.02274 (0.24649)	Data 0.00043 (0.16346)	Loss 0.3975 (0.9485)	Prec@1 75.00000 (71.32353)	Prec@5 100.00000 (97.30392)
Epoch: [15][52/60]	Time 0.02242 (0.24218)	Data 0.00046 (0.16033)	Loss 2.3697 (0.9758)	Prec@1 50.00000 (70.91347)	Prec@5 75.00000 (96.87500)
Epoch: [15][53/60]	Time 0.02275 (0.23804)	Data 0.00046 (0.15731)	Loss 1.9631 (0.9944)	Prec@1 75.00000 (70.99057)	Prec@5 87.50000 (96.69811)
Epoch: [15][54/60]	Time 0.02311 (0.23406)	Data 0.00043 (0.15441)	Loss 0.6144 (0.9874)	Prec@1 87.50000 (71.29630)	Prec@5 100.00000 (96.75926)
Epoch: [15][55/60]	Time 0.02399 (0.23024)	Data 0.00067 (0.15161)	Loss 1.3850 (0.9946)	Prec@1 87.50000 (71.59090)	Prec@5 87.50000 (96.59090)
Epoch: [15][56/60]	Time 0.02546 (0.22658)	Data 0.00049 (0.14891)	Loss 0.9140 (0.9932)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (96.65179)
Epoch: [15][57/60]	Time 0.02307 (0.22301)	Data 0.00054 (0.14631)	Loss 2.2968 (1.0160)	Prec@1 62.50000 (71.71053)	Prec@5 75.00000 (96.27193)
Epoch: [15][58/60]	Time 0.02315 (0.21957)	Data 0.00044 (0.14380)	Loss 1.5201 (1.0247)	Prec@1 75.00000 (71.76724)	Prec@5 87.50000 (96.12069)
Epoch: [15][59/60]	Time 0.02268 (0.21623)	Data 0.00041 (0.14137)	Loss 1.3834 (1.0308)	Prec@1 62.50000 (71.61017)	Prec@5 100.00000 (96.18644)
Epoch: [15][60/60]	Time 0.02358 (0.21302)	Data 0.00052 (0.13902)	Loss 0.5600 (1.0230)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (96.25001)
train at epoch 16
train at epoch 16
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [16][0/272]	 lr: 0.04000	Time 8.156 (8.156)	Data 6.784 (6.784)	Loss 0.1133 (0.1133)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [16][10/272]	 lr: 0.04000	Time 0.407 (1.309)	Data 0.151 (0.785)	Loss 0.2313 (0.2686)	Prec@1 93.75000 (92.32955)	Prec@5 100.00000 (100.00000)
Epoch: [16][20/272]	 lr: 0.04000	Time 0.441 (0.883)	Data 0.158 (0.474)	Loss 0.2428 (0.2573)	Prec@1 93.75000 (92.41071)	Prec@5 100.00000 (100.00000)
Epoch: [16][30/272]	 lr: 0.04000	Time 0.416 (0.737)	Data 0.128 (0.364)	Loss 0.1668 (0.2719)	Prec@1 96.87500 (92.33871)	Prec@5 100.00000 (99.89919)
Epoch: [16][40/272]	 lr: 0.04000	Time 0.448 (0.661)	Data 0.136 (0.307)	Loss 0.4666 (0.2834)	Prec@1 78.12500 (91.69207)	Prec@5 100.00000 (99.92377)
Epoch: [16][50/272]	 lr: 0.04000	Time 0.479 (0.618)	Data 0.127 (0.273)	Loss 0.1830 (0.2982)	Prec@1 96.87500 (90.93137)	Prec@5 100.00000 (99.81618)
Epoch: [16][60/272]	 lr: 0.04000	Time 0.363 (0.589)	Data 0.128 (0.249)	Loss 0.1978 (0.3003)	Prec@1 93.75000 (90.88114)	Prec@5 100.00000 (99.84631)
Epoch: [16][70/272]	 lr: 0.04000	Time 0.482 (0.569)	Data 0.137 (0.232)	Loss 0.2942 (0.2960)	Prec@1 87.50000 (90.84507)	Prec@5 100.00000 (99.86796)
Epoch: [16][80/272]	 lr: 0.04000	Time 0.421 (0.552)	Data 0.134 (0.220)	Loss 0.1976 (0.2950)	Prec@1 96.87500 (91.01080)	Prec@5 100.00000 (99.88426)
Epoch: [16][90/272]	 lr: 0.04000	Time 0.460 (0.539)	Data 0.134 (0.210)	Loss 0.2460 (0.2966)	Prec@1 90.62500 (90.83105)	Prec@5 100.00000 (99.89698)
Epoch: [16][100/272]	 lr: 0.04000	Time 0.390 (0.529)	Data 0.129 (0.202)	Loss 0.1041 (0.2974)	Prec@1 100.00000 (90.74876)	Prec@5 100.00000 (99.87624)
Epoch: [16][110/272]	 lr: 0.04000	Time 0.385 (0.521)	Data 0.128 (0.196)	Loss 0.4002 (0.2991)	Prec@1 84.37500 (90.59685)	Prec@5 100.00000 (99.88739)
Epoch: [16][120/272]	 lr: 0.04000	Time 0.402 (0.515)	Data 0.101 (0.190)	Loss 0.0827 (0.2961)	Prec@1 100.00000 (90.62500)	Prec@5 100.00000 (99.89669)
Epoch: [16][130/272]	 lr: 0.04000	Time 0.472 (0.511)	Data 0.129 (0.185)	Loss 0.3348 (0.3011)	Prec@1 90.62500 (90.52958)	Prec@5 100.00000 (99.90458)
Epoch: [16][140/272]	 lr: 0.04000	Time 0.556 (0.504)	Data 0.133 (0.180)	Loss 0.4654 (0.2994)	Prec@1 84.37500 (90.53635)	Prec@5 100.00000 (99.91135)
Epoch: [16][150/272]	 lr: 0.04000	Time 0.524 (0.499)	Data 0.136 (0.177)	Loss 0.0919 (0.2992)	Prec@1 100.00000 (90.43874)	Prec@5 100.00000 (99.91722)
Epoch: [16][160/272]	 lr: 0.04000	Time 0.455 (0.494)	Data 0.135 (0.174)	Loss 0.4700 (0.2979)	Prec@1 84.37500 (90.43090)	Prec@5 100.00000 (99.92236)
Epoch: [16][170/272]	 lr: 0.04000	Time 0.355 (0.491)	Data 0.104 (0.171)	Loss 0.8049 (0.2994)	Prec@1 59.37500 (90.25951)	Prec@5 100.00000 (99.92690)
Epoch: [16][180/272]	 lr: 0.04000	Time 0.429 (0.488)	Data 0.134 (0.169)	Loss 0.1155 (0.3017)	Prec@1 96.87500 (90.12431)	Prec@5 100.00000 (99.93095)
Epoch: [16][190/272]	 lr: 0.04000	Time 0.416 (0.485)	Data 0.126 (0.166)	Loss 0.2383 (0.3011)	Prec@1 93.75000 (90.13416)	Prec@5 100.00000 (99.93456)
Epoch: [16][200/272]	 lr: 0.04000	Time 0.525 (0.484)	Data 0.109 (0.164)	Loss 0.6243 (0.3038)	Prec@1 68.75000 (89.92537)	Prec@5 100.00000 (99.93781)
Epoch: [16][210/272]	 lr: 0.04000	Time 0.386 (0.482)	Data 0.127 (0.163)	Loss 0.1749 (0.2987)	Prec@1 93.75000 (90.18069)	Prec@5 100.00000 (99.94077)
Epoch: [16][220/272]	 lr: 0.04000	Time 0.490 (0.481)	Data 0.126 (0.161)	Loss 0.3765 (0.2989)	Prec@1 87.50000 (90.11595)	Prec@5 100.00000 (99.92931)
Epoch: [16][230/272]	 lr: 0.04000	Time 0.409 (0.479)	Data 0.127 (0.160)	Loss 0.3651 (0.2943)	Prec@1 87.50000 (90.28680)	Prec@5 100.00000 (99.93236)
Epoch: [16][240/272]	 lr: 0.04000	Time 0.300 (0.477)	Data 0.129 (0.158)	Loss 0.3538 (0.2938)	Prec@1 90.62500 (90.37864)	Prec@5 100.00000 (99.92220)
Epoch: [16][250/272]	 lr: 0.04000	Time 0.239 (0.468)	Data 0.128 (0.157)	Loss 0.2627 (0.2934)	Prec@1 90.62500 (90.40090)	Prec@5 100.00000 (99.92530)
Epoch: [16][260/272]	 lr: 0.04000	Time 0.240 (0.459)	Data 0.129 (0.156)	Loss 0.0805 (0.2959)	Prec@1 100.00000 (90.36159)	Prec@5 100.00000 (99.88026)
Epoch: [16][270/272]	 lr: 0.04000	Time 0.240 (0.451)	Data 0.128 (0.155)	Loss 0.1966 (0.2980)	Prec@1 93.75000 (90.29059)	Prec@5 100.00000 (99.88469)
validation at epoch 16
validation at epoch 16
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [16][1/60]	Time 6.75213 (6.75213)	Data 6.66530 (6.66530)	Loss 1.3209 (1.3209)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [16][2/60]	Time 0.99250 (3.87231)	Data 0.92426 (3.79478)	Loss 1.7135 (1.5172)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [16][3/60]	Time 0.11475 (2.61979)	Data 0.05808 (2.54921)	Loss 2.2613 (1.7652)	Prec@1 50.00000 (58.33334)	Prec@5 100.00000 (100.00000)
Epoch: [16][4/60]	Time 0.08028 (1.98491)	Data 0.00427 (1.91298)	Loss 2.3000 (1.8989)	Prec@1 37.50000 (53.12500)	Prec@5 100.00000 (100.00000)
Epoch: [16][5/60]	Time 0.12154 (1.61224)	Data 0.00086 (1.53055)	Loss 2.3026 (1.9797)	Prec@1 25.00000 (47.50000)	Prec@5 100.00000 (100.00000)
Epoch: [16][6/60]	Time 0.17360 (1.37247)	Data 0.05696 (1.28495)	Loss 2.2618 (2.0267)	Prec@1 37.50000 (45.83334)	Prec@5 100.00000 (100.00000)
Epoch: [16][7/60]	Time 0.12079 (1.19365)	Data 0.00696 (1.10238)	Loss 3.1857 (2.1923)	Prec@1 50.00000 (46.42857)	Prec@5 87.50000 (98.21429)
Epoch: [16][8/60]	Time 0.13562 (1.06140)	Data 0.02218 (0.96736)	Loss 2.8562 (2.2752)	Prec@1 37.50000 (45.31250)	Prec@5 100.00000 (98.43750)
Epoch: [16][9/60]	Time 0.28725 (0.97538)	Data 0.05673 (0.86618)	Loss 2.1364 (2.2598)	Prec@1 62.50000 (47.22222)	Prec@5 87.50000 (97.22222)
Epoch: [16][10/60]	Time 0.11176 (0.88902)	Data 0.00104 (0.77966)	Loss 1.3223 (2.1661)	Prec@1 75.00000 (50.00000)	Prec@5 100.00000 (97.50000)
Epoch: [16][11/60]	Time 0.17296 (0.82392)	Data 0.01033 (0.70972)	Loss 1.5891 (2.1136)	Prec@1 62.50000 (51.13636)	Prec@5 100.00000 (97.72727)
Epoch: [16][12/60]	Time 0.18544 (0.77072)	Data 0.00078 (0.65065)	Loss 5.6384 (2.4073)	Prec@1 37.50000 (50.00000)	Prec@5 100.00000 (97.91667)
Epoch: [16][13/60]	Time 0.09414 (0.71867)	Data 0.01447 (0.60171)	Loss 5.5602 (2.6499)	Prec@1 12.50000 (47.11539)	Prec@5 100.00000 (98.07693)
Epoch: [16][14/60]	Time 0.05160 (0.67102)	Data 0.00342 (0.55897)	Loss 1.8267 (2.5911)	Prec@1 50.00000 (47.32143)	Prec@5 100.00000 (98.21429)
Epoch: [16][15/60]	Time 0.14864 (0.63620)	Data 0.02900 (0.52364)	Loss 3.6898 (2.6643)	Prec@1 37.50000 (46.66667)	Prec@5 87.50000 (97.50001)
Epoch: [16][16/60]	Time 0.17501 (0.60738)	Data 0.00064 (0.49096)	Loss 2.0795 (2.6278)	Prec@1 37.50000 (46.09375)	Prec@5 100.00000 (97.65625)
Epoch: [16][17/60]	Time 0.14568 (0.58022)	Data 0.04353 (0.46464)	Loss 2.3288 (2.6102)	Prec@1 12.50000 (44.11765)	Prec@5 100.00000 (97.79412)
Epoch: [16][18/60]	Time 0.12218 (0.55477)	Data 0.00509 (0.43911)	Loss 3.0553 (2.6349)	Prec@1 37.50000 (43.75000)	Prec@5 100.00000 (97.91666)
Epoch: [16][19/60]	Time 0.13213 (0.53253)	Data 0.01615 (0.41684)	Loss 2.1334 (2.6085)	Prec@1 62.50000 (44.73684)	Prec@5 100.00000 (98.02631)
Epoch: [16][20/60]	Time 0.14599 (0.51320)	Data 0.02361 (0.39718)	Loss 3.4701 (2.6516)	Prec@1 12.50000 (43.12500)	Prec@5 100.00000 (98.12500)
Epoch: [16][21/60]	Time 0.03796 (0.49057)	Data 0.00062 (0.37830)	Loss 2.8134 (2.6593)	Prec@1 25.00000 (42.26191)	Prec@5 100.00000 (98.21429)
Epoch: [16][22/60]	Time 0.17797 (0.47636)	Data 0.00727 (0.36143)	Loss 0.8508 (2.5771)	Prec@1 75.00000 (43.75000)	Prec@5 100.00000 (98.29546)
Epoch: [16][23/60]	Time 0.13063 (0.46133)	Data 0.01910 (0.34655)	Loss 2.7053 (2.5827)	Prec@1 37.50000 (43.47826)	Prec@5 100.00000 (98.36957)
Epoch: [16][24/60]	Time 0.19509 (0.45023)	Data 0.06126 (0.33466)	Loss 1.3119 (2.5297)	Prec@1 50.00000 (43.75000)	Prec@5 100.00000 (98.43750)
Epoch: [16][25/60]	Time 0.12826 (0.43736)	Data 0.03012 (0.32248)	Loss 1.5367 (2.4900)	Prec@1 75.00000 (45.00000)	Prec@5 100.00000 (98.50000)
Epoch: [16][26/60]	Time 0.05418 (0.42262)	Data 0.00112 (0.31012)	Loss 1.5359 (2.4533)	Prec@1 62.50000 (45.67308)	Prec@5 100.00000 (98.55769)
Epoch: [16][27/60]	Time 0.05310 (0.40893)	Data 0.00262 (0.29873)	Loss 1.0102 (2.3999)	Prec@1 62.50000 (46.29630)	Prec@5 100.00000 (98.61111)
Epoch: [16][28/60]	Time 0.25163 (0.40331)	Data 0.09718 (0.29153)	Loss 2.9161 (2.4183)	Prec@1 37.50000 (45.98214)	Prec@5 100.00000 (98.66072)
Epoch: [16][29/60]	Time 0.14384 (0.39437)	Data 0.00059 (0.28150)	Loss 3.4121 (2.4526)	Prec@1 25.00000 (45.25862)	Prec@5 87.50000 (98.27586)
Epoch: [16][30/60]	Time 0.10961 (0.38488)	Data 0.00049 (0.27213)	Loss 1.5463 (2.4224)	Prec@1 50.00000 (45.41667)	Prec@5 100.00000 (98.33334)
Epoch: [16][31/60]	Time 0.10866 (0.37597)	Data 0.00058 (0.26337)	Loss 4.1676 (2.4787)	Prec@1 12.50000 (44.35484)	Prec@5 87.50000 (97.98387)
Epoch: [16][32/60]	Time 0.08579 (0.36690)	Data 0.00036 (0.25516)	Loss 1.6015 (2.4512)	Prec@1 50.00000 (44.53125)	Prec@5 100.00000 (98.04688)
Epoch: [16][33/60]	Time 0.05163 (0.35734)	Data 0.00037 (0.24743)	Loss 0.3235 (2.3868)	Prec@1 87.50000 (45.83334)	Prec@5 100.00000 (98.10606)
Epoch: [16][34/60]	Time 0.02748 (0.34764)	Data 0.00045 (0.24017)	Loss 1.0305 (2.3469)	Prec@1 50.00000 (45.95588)	Prec@5 100.00000 (98.16177)
Epoch: [16][35/60]	Time 0.03467 (0.33870)	Data 0.00052 (0.23332)	Loss 1.7992 (2.3312)	Prec@1 62.50000 (46.42857)	Prec@5 87.50000 (97.85715)
Epoch: [16][36/60]	Time 0.03727 (0.33033)	Data 0.00163 (0.22689)	Loss 2.2004 (2.3276)	Prec@1 50.00000 (46.52778)	Prec@5 100.00000 (97.91666)
Epoch: [16][37/60]	Time 0.03523 (0.32235)	Data 0.00037 (0.22076)	Loss 1.6119 (2.3083)	Prec@1 50.00000 (46.62162)	Prec@5 100.00000 (97.97298)
Epoch: [16][38/60]	Time 0.03059 (0.31467)	Data 0.00044 (0.21497)	Loss 1.1698 (2.2783)	Prec@1 62.50000 (47.03947)	Prec@5 100.00000 (98.02631)
Epoch: [16][39/60]	Time 0.02328 (0.30720)	Data 0.00060 (0.20947)	Loss 0.1806 (2.2245)	Prec@1 87.50000 (48.07692)	Prec@5 100.00000 (98.07693)
Epoch: [16][40/60]	Time 0.02341 (0.30011)	Data 0.00050 (0.20425)	Loss 0.2356 (2.1748)	Prec@1 87.50000 (49.06250)	Prec@5 100.00000 (98.12500)
Epoch: [16][41/60]	Time 0.02276 (0.29334)	Data 0.00039 (0.19927)	Loss 1.3621 (2.1550)	Prec@1 62.50000 (49.39024)	Prec@5 100.00000 (98.17073)
Epoch: [16][42/60]	Time 0.02279 (0.28690)	Data 0.00042 (0.19454)	Loss 0.4028 (2.1132)	Prec@1 75.00000 (50.00000)	Prec@5 100.00000 (98.21429)
Epoch: [16][43/60]	Time 0.02276 (0.28076)	Data 0.00041 (0.19002)	Loss 1.4338 (2.0974)	Prec@1 62.50000 (50.29070)	Prec@5 100.00000 (98.25581)
Epoch: [16][44/60]	Time 0.02291 (0.27490)	Data 0.00043 (0.18572)	Loss 1.6990 (2.0884)	Prec@1 37.50000 (50.00000)	Prec@5 100.00000 (98.29546)
Epoch: [16][45/60]	Time 0.02507 (0.26935)	Data 0.00046 (0.18160)	Loss 0.9187 (2.0624)	Prec@1 75.00000 (50.55556)	Prec@5 100.00000 (98.33334)
Epoch: [16][46/60]	Time 0.02335 (0.26400)	Data 0.00053 (0.17766)	Loss 1.3915 (2.0478)	Prec@1 50.00000 (50.54348)	Prec@5 100.00000 (98.36957)
Epoch: [16][47/60]	Time 0.02280 (0.25887)	Data 0.00041 (0.17389)	Loss 0.7186 (2.0195)	Prec@1 87.50000 (51.32978)	Prec@5 100.00000 (98.40425)
Epoch: [16][48/60]	Time 0.02274 (0.25395)	Data 0.00040 (0.17028)	Loss 0.6086 (1.9901)	Prec@1 75.00000 (51.82292)	Prec@5 100.00000 (98.43750)
Epoch: [16][49/60]	Time 0.02315 (0.24924)	Data 0.00043 (0.16681)	Loss 1.1318 (1.9726)	Prec@1 50.00000 (51.78571)	Prec@5 100.00000 (98.46938)
Epoch: [16][50/60]	Time 0.02301 (0.24471)	Data 0.00043 (0.16348)	Loss 0.7444 (1.9481)	Prec@1 62.50000 (52.00000)	Prec@5 100.00000 (98.50000)
Epoch: [16][51/60]	Time 0.02298 (0.24036)	Data 0.00042 (0.16029)	Loss 0.3979 (1.9177)	Prec@1 87.50000 (52.69608)	Prec@5 100.00000 (98.52942)
Epoch: [16][52/60]	Time 0.02283 (0.23618)	Data 0.00040 (0.15721)	Loss 1.0960 (1.9019)	Prec@1 62.50000 (52.88462)	Prec@5 100.00000 (98.55769)
Epoch: [16][53/60]	Time 0.02277 (0.23215)	Data 0.00040 (0.15425)	Loss 1.2007 (1.8886)	Prec@1 62.50000 (53.06604)	Prec@5 100.00000 (98.58491)
Epoch: [16][54/60]	Time 0.02259 (0.22827)	Data 0.00041 (0.15140)	Loss 0.7302 (1.8672)	Prec@1 75.00000 (53.47222)	Prec@5 100.00000 (98.61111)
Epoch: [16][55/60]	Time 0.02481 (0.22457)	Data 0.00041 (0.14866)	Loss 0.5687 (1.8436)	Prec@1 87.50000 (54.09091)	Prec@5 100.00000 (98.63636)
Epoch: [16][56/60]	Time 0.02267 (0.22097)	Data 0.00056 (0.14601)	Loss 0.7689 (1.8244)	Prec@1 75.00000 (54.46429)	Prec@5 100.00000 (98.66072)
Epoch: [16][57/60]	Time 0.02283 (0.21749)	Data 0.00060 (0.14346)	Loss 1.2413 (1.8141)	Prec@1 50.00000 (54.38596)	Prec@5 100.00000 (98.68421)
Epoch: [16][58/60]	Time 0.02331 (0.21414)	Data 0.00041 (0.14100)	Loss 0.9650 (1.7995)	Prec@1 62.50000 (54.52586)	Prec@5 100.00000 (98.70689)
Epoch: [16][59/60]	Time 0.02333 (0.21091)	Data 0.00042 (0.13861)	Loss 0.7373 (1.7815)	Prec@1 62.50000 (54.66102)	Prec@5 100.00000 (98.72881)
Epoch: [16][60/60]	Time 0.02262 (0.20777)	Data 0.00054 (0.13631)	Loss 0.1568 (1.7544)	Prec@1 87.50000 (55.20834)	Prec@5 100.00000 (98.75001)
train at epoch 17
train at epoch 17
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [17][0/272]	 lr: 0.04000	Time 9.301 (9.301)	Data 8.236 (8.236)	Loss 0.1354 (0.1354)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [17][10/272]	 lr: 0.04000	Time 0.439 (1.313)	Data 0.129 (0.867)	Loss 0.0866 (0.2406)	Prec@1 100.00000 (93.75000)	Prec@5 100.00000 (99.71591)
Epoch: [17][20/272]	 lr: 0.04000	Time 0.380 (0.891)	Data 0.126 (0.516)	Loss 0.2067 (0.2442)	Prec@1 90.62500 (92.11310)	Prec@5 100.00000 (99.85119)
Epoch: [17][30/272]	 lr: 0.04000	Time 0.512 (0.744)	Data 0.129 (0.392)	Loss 0.1357 (0.2732)	Prec@1 96.87500 (90.62500)	Prec@5 100.00000 (99.89919)
Epoch: [17][40/272]	 lr: 0.04000	Time 0.514 (0.672)	Data 0.127 (0.327)	Loss 0.1396 (0.2854)	Prec@1 96.87500 (90.16768)	Prec@5 100.00000 (99.77134)
Epoch: [17][50/272]	 lr: 0.04000	Time 0.356 (0.624)	Data 0.124 (0.288)	Loss 0.1242 (0.3119)	Prec@1 93.75000 (89.15441)	Prec@5 100.00000 (99.50980)
Epoch: [17][60/272]	 lr: 0.04000	Time 0.427 (0.592)	Data 0.119 (0.261)	Loss 0.1840 (0.2993)	Prec@1 96.87500 (89.85655)	Prec@5 100.00000 (99.59016)
Epoch: [17][70/272]	 lr: 0.04000	Time 0.387 (0.567)	Data 0.128 (0.242)	Loss 0.1304 (0.2841)	Prec@1 96.87500 (90.36092)	Prec@5 100.00000 (99.64789)
Epoch: [17][80/272]	 lr: 0.04000	Time 0.412 (0.551)	Data 0.127 (0.228)	Loss 0.1674 (0.2799)	Prec@1 93.75000 (90.66358)	Prec@5 100.00000 (99.69136)
Epoch: [17][90/272]	 lr: 0.04000	Time 0.525 (0.541)	Data 0.135 (0.217)	Loss 0.1262 (0.2772)	Prec@1 96.87500 (90.86539)	Prec@5 100.00000 (99.72528)
Epoch: [17][100/272]	 lr: 0.04000	Time 0.457 (0.532)	Data 0.154 (0.208)	Loss 0.2248 (0.2735)	Prec@1 96.87500 (91.08910)	Prec@5 100.00000 (99.75247)
Epoch: [17][110/272]	 lr: 0.04000	Time 0.494 (0.526)	Data 0.128 (0.201)	Loss 0.2401 (0.2748)	Prec@1 84.37500 (90.96284)	Prec@5 100.00000 (99.77478)
Epoch: [17][120/272]	 lr: 0.04000	Time 0.406 (0.517)	Data 0.129 (0.195)	Loss 0.6093 (0.2680)	Prec@1 78.12500 (91.29649)	Prec@5 100.00000 (99.79338)
Epoch: [17][130/272]	 lr: 0.04000	Time 0.578 (0.510)	Data 0.128 (0.190)	Loss 0.1695 (0.2644)	Prec@1 93.75000 (91.50764)	Prec@5 100.00000 (99.78531)
Epoch: [17][140/272]	 lr: 0.04000	Time 0.434 (0.505)	Data 0.128 (0.185)	Loss 0.1227 (0.2633)	Prec@1 100.00000 (91.51152)	Prec@5 100.00000 (99.80053)
Epoch: [17][150/272]	 lr: 0.04000	Time 0.384 (0.499)	Data 0.126 (0.181)	Loss 0.0657 (0.2582)	Prec@1 96.87500 (91.70116)	Prec@5 100.00000 (99.81374)
Epoch: [17][160/272]	 lr: 0.04000	Time 0.381 (0.497)	Data 0.126 (0.178)	Loss 0.2413 (0.2590)	Prec@1 93.75000 (91.73137)	Prec@5 100.00000 (99.82531)
Epoch: [17][170/272]	 lr: 0.04000	Time 0.524 (0.494)	Data 0.136 (0.176)	Loss 0.3408 (0.2582)	Prec@1 90.62500 (91.73977)	Prec@5 100.00000 (99.83553)
Epoch: [17][180/272]	 lr: 0.04000	Time 0.380 (0.490)	Data 0.127 (0.173)	Loss 0.8332 (0.2617)	Prec@1 68.75000 (91.67818)	Prec@5 100.00000 (99.84462)
Epoch: [17][190/272]	 lr: 0.04000	Time 0.514 (0.488)	Data 0.142 (0.171)	Loss 0.2513 (0.2575)	Prec@1 90.62500 (91.88482)	Prec@5 100.00000 (99.85275)
Epoch: [17][200/272]	 lr: 0.04000	Time 0.409 (0.485)	Data 0.110 (0.168)	Loss 0.2382 (0.2545)	Prec@1 93.75000 (92.08644)	Prec@5 100.00000 (99.84453)
Epoch: [17][210/272]	 lr: 0.04000	Time 0.421 (0.483)	Data 0.142 (0.167)	Loss 0.2997 (0.2579)	Prec@1 90.62500 (91.89870)	Prec@5 100.00000 (99.85190)
Epoch: [17][220/272]	 lr: 0.04000	Time 0.408 (0.482)	Data 0.128 (0.165)	Loss 0.4449 (0.2572)	Prec@1 81.25000 (91.86935)	Prec@5 100.00000 (99.85860)
Epoch: [17][230/272]	 lr: 0.04000	Time 0.346 (0.479)	Data 0.129 (0.164)	Loss 0.9275 (0.2625)	Prec@1 75.00000 (91.66666)	Prec@5 100.00000 (99.85119)
Epoch: [17][240/272]	 lr: 0.04000	Time 0.267 (0.477)	Data 0.129 (0.162)	Loss 0.0747 (0.2621)	Prec@1 100.00000 (91.64938)	Prec@5 100.00000 (99.85737)
Epoch: [17][250/272]	 lr: 0.04000	Time 0.239 (0.467)	Data 0.129 (0.161)	Loss 0.2502 (0.2609)	Prec@1 90.62500 (91.77042)	Prec@5 100.00000 (99.85060)
Epoch: [17][260/272]	 lr: 0.04000	Time 0.240 (0.459)	Data 0.129 (0.160)	Loss 0.2669 (0.2584)	Prec@1 90.62500 (91.88218)	Prec@5 100.00000 (99.84435)
Epoch: [17][270/272]	 lr: 0.04000	Time 0.240 (0.451)	Data 0.129 (0.158)	Loss 0.1673 (0.2594)	Prec@1 93.75000 (91.81273)	Prec@5 100.00000 (99.83856)
validation at epoch 17
validation at epoch 17
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [17][1/60]	Time 3.49307 (3.49307)	Data 3.39814 (3.39814)	Loss 0.9142 (0.9142)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [17][2/60]	Time 3.44024 (3.46666)	Data 3.35504 (3.37659)	Loss 0.2790 (0.5966)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [17][3/60]	Time 0.19973 (2.37768)	Data 0.02837 (2.26052)	Loss 1.0421 (0.7451)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [17][4/60]	Time 0.79778 (1.98271)	Data 0.75190 (1.88336)	Loss 0.4867 (0.6805)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [17][5/60]	Time 0.08913 (1.60399)	Data 0.00058 (1.50681)	Loss 1.0420 (0.7528)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [17][6/60]	Time 0.05661 (1.34609)	Data 0.00290 (1.25616)	Loss 0.1478 (0.6520)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [17][7/60]	Time 0.08508 (1.16595)	Data 0.00730 (1.07775)	Loss 0.4315 (0.6205)	Prec@1 87.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [17][8/60]	Time 0.18083 (1.04281)	Data 0.00202 (0.94328)	Loss 0.1574 (0.5626)	Prec@1 87.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [17][9/60]	Time 0.17819 (0.94674)	Data 0.02877 (0.84167)	Loss 0.7723 (0.5859)	Prec@1 75.00000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [17][10/60]	Time 0.05880 (0.85795)	Data 0.00305 (0.75781)	Loss 0.0583 (0.5331)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [17][11/60]	Time 0.08578 (0.78775)	Data 0.00105 (0.68901)	Loss 0.2611 (0.5084)	Prec@1 75.00000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [17][12/60]	Time 0.15762 (0.73524)	Data 0.03816 (0.63477)	Loss 0.1007 (0.4744)	Prec@1 100.00000 (82.29167)	Prec@5 100.00000 (100.00000)
Epoch: [17][13/60]	Time 0.13099 (0.68876)	Data 0.00548 (0.58637)	Loss 0.9601 (0.5118)	Prec@1 62.50000 (80.76923)	Prec@5 100.00000 (100.00000)
Epoch: [17][14/60]	Time 0.12480 (0.64848)	Data 0.00049 (0.54452)	Loss 0.5450 (0.5142)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00001)
Epoch: [17][15/60]	Time 0.22838 (0.62047)	Data 0.06078 (0.51227)	Loss 0.0136 (0.4808)	Prec@1 100.00000 (82.50001)	Prec@5 100.00000 (100.00001)
Epoch: [17][16/60]	Time 0.31133 (0.60115)	Data 0.09981 (0.48649)	Loss 2.0738 (0.5803)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [17][17/60]	Time 0.14367 (0.57424)	Data 0.05005 (0.46082)	Loss 0.6604 (0.5851)	Prec@1 87.50000 (81.61765)	Prec@5 100.00000 (100.00000)
Epoch: [17][18/60]	Time 0.15999 (0.55122)	Data 0.02328 (0.43651)	Loss 2.5534 (0.6944)	Prec@1 75.00000 (81.25000)	Prec@5 87.50000 (99.30556)
Epoch: [17][19/60]	Time 0.19010 (0.53222)	Data 0.00213 (0.41365)	Loss 0.3828 (0.6780)	Prec@1 75.00000 (80.92105)	Prec@5 100.00000 (99.34211)
Epoch: [17][20/60]	Time 0.16911 (0.51406)	Data 0.02015 (0.39397)	Loss 3.5163 (0.8199)	Prec@1 50.00000 (79.37500)	Prec@5 87.50000 (98.75000)
Epoch: [17][21/60]	Time 0.19465 (0.49885)	Data 0.00197 (0.37531)	Loss 0.6403 (0.8114)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (98.80952)
Epoch: [17][22/60]	Time 0.13307 (0.48223)	Data 0.00250 (0.35836)	Loss 1.3093 (0.8340)	Prec@1 75.00000 (78.40910)	Prec@5 87.50000 (98.29546)
Epoch: [17][23/60]	Time 0.07809 (0.46465)	Data 0.02773 (0.34398)	Loss 2.0164 (0.8854)	Prec@1 37.50000 (76.63044)	Prec@5 87.50000 (97.82609)
Epoch: [17][24/60]	Time 0.24328 (0.45543)	Data 0.12073 (0.33468)	Loss 0.9736 (0.8891)	Prec@1 50.00000 (75.52084)	Prec@5 100.00000 (97.91667)
Epoch: [17][25/60]	Time 0.10350 (0.44135)	Data 0.01169 (0.32176)	Loss 0.8918 (0.8892)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.00000)
Epoch: [17][26/60]	Time 0.10121 (0.42827)	Data 0.01330 (0.30990)	Loss 0.9169 (0.8903)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.07693)
Epoch: [17][27/60]	Time 0.05419 (0.41442)	Data 0.00099 (0.29846)	Loss 1.5602 (0.9151)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (98.14815)
Epoch: [17][28/60]	Time 0.05890 (0.40172)	Data 0.01495 (0.28833)	Loss 0.3960 (0.8965)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (98.21429)
Epoch: [17][29/60]	Time 0.06735 (0.39019)	Data 0.00056 (0.27841)	Loss 1.8455 (0.9293)	Prec@1 62.50000 (73.70689)	Prec@5 100.00000 (98.27586)
Epoch: [17][30/60]	Time 0.04877 (0.37881)	Data 0.00311 (0.26923)	Loss 2.7349 (0.9894)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (98.33334)
Epoch: [17][31/60]	Time 0.06252 (0.36861)	Data 0.00060 (0.26057)	Loss 3.5041 (1.0706)	Prec@1 62.50000 (72.98387)	Prec@5 87.50000 (97.98387)
Epoch: [17][32/60]	Time 0.06582 (0.35914)	Data 0.01213 (0.25280)	Loss 1.9900 (1.0993)	Prec@1 62.50000 (72.65625)	Prec@5 100.00000 (98.04688)
Epoch: [17][33/60]	Time 0.06191 (0.35014)	Data 0.00039 (0.24515)	Loss 0.0189 (1.0666)	Prec@1 100.00000 (73.48485)	Prec@5 100.00000 (98.10606)
Epoch: [17][34/60]	Time 0.05840 (0.34156)	Data 0.00043 (0.23796)	Loss 1.0697 (1.0666)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (98.16177)
Epoch: [17][35/60]	Time 0.08957 (0.33436)	Data 0.00065 (0.23118)	Loss 1.7089 (1.0850)	Prec@1 87.50000 (73.92857)	Prec@5 87.50000 (97.85715)
Epoch: [17][36/60]	Time 0.06942 (0.32700)	Data 0.00059 (0.22477)	Loss 2.2784 (1.1181)	Prec@1 75.00000 (73.95834)	Prec@5 100.00000 (97.91666)
Epoch: [17][37/60]	Time 0.08530 (0.32046)	Data 0.01257 (0.21904)	Loss 1.9855 (1.1416)	Prec@1 75.00000 (73.98649)	Prec@5 100.00000 (97.97298)
Epoch: [17][38/60]	Time 0.04980 (0.31334)	Data 0.00042 (0.21328)	Loss 1.7155 (1.1567)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (98.02631)
Epoch: [17][39/60]	Time 0.03208 (0.30613)	Data 0.00125 (0.20785)	Loss 0.0244 (1.1277)	Prec@1 100.00000 (74.03846)	Prec@5 100.00000 (98.07693)
Epoch: [17][40/60]	Time 0.03006 (0.29923)	Data 0.00064 (0.20267)	Loss 0.2807 (1.1065)	Prec@1 87.50000 (74.37500)	Prec@5 100.00000 (98.12500)
Epoch: [17][41/60]	Time 0.02967 (0.29265)	Data 0.00081 (0.19774)	Loss 1.3087 (1.1114)	Prec@1 75.00000 (74.39024)	Prec@5 100.00000 (98.17073)
Epoch: [17][42/60]	Time 0.02995 (0.28640)	Data 0.00080 (0.19305)	Loss 0.6287 (1.0999)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (98.21429)
Epoch: [17][43/60]	Time 0.03803 (0.28062)	Data 0.00086 (0.18858)	Loss 1.4413 (1.1079)	Prec@1 75.00000 (74.41860)	Prec@5 100.00000 (98.25581)
Epoch: [17][44/60]	Time 0.03576 (0.27506)	Data 0.00055 (0.18431)	Loss 1.3573 (1.1135)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (98.29546)
Epoch: [17][45/60]	Time 0.03539 (0.26973)	Data 0.00075 (0.18023)	Loss 0.8966 (1.1087)	Prec@1 87.50000 (74.72222)	Prec@5 100.00000 (98.33334)
Epoch: [17][46/60]	Time 0.03054 (0.26453)	Data 0.00067 (0.17633)	Loss 0.5844 (1.0973)	Prec@1 75.00000 (74.72826)	Prec@5 100.00000 (98.36957)
Epoch: [17][47/60]	Time 0.03016 (0.25955)	Data 0.00072 (0.17259)	Loss 0.2433 (1.0791)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.40425)
Epoch: [17][48/60]	Time 0.02868 (0.25474)	Data 0.00075 (0.16901)	Loss 0.8403 (1.0742)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.43750)
Epoch: [17][49/60]	Time 0.02680 (0.25008)	Data 0.00079 (0.16558)	Loss 0.6667 (1.0659)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.46938)
Epoch: [17][50/60]	Time 0.02342 (0.24555)	Data 0.00117 (0.16229)	Loss 0.0702 (1.0459)	Prec@1 100.00000 (75.50000)	Prec@5 100.00000 (98.50000)
Epoch: [17][51/60]	Time 0.02352 (0.24120)	Data 0.00049 (0.15912)	Loss 0.9619 (1.0443)	Prec@1 75.00000 (75.49020)	Prec@5 100.00000 (98.52942)
Epoch: [17][52/60]	Time 0.02298 (0.23700)	Data 0.00045 (0.15607)	Loss 1.5122 (1.0533)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (98.55769)
Epoch: [17][53/60]	Time 0.02247 (0.23295)	Data 0.00046 (0.15313)	Loss 1.1700 (1.0555)	Prec@1 62.50000 (74.76415)	Prec@5 100.00000 (98.58491)
Epoch: [17][54/60]	Time 0.02238 (0.22905)	Data 0.00039 (0.15030)	Loss 2.5395 (1.0830)	Prec@1 50.00000 (74.30556)	Prec@5 100.00000 (98.61111)
Epoch: [17][55/60]	Time 0.02306 (0.22531)	Data 0.00043 (0.14758)	Loss 0.6439 (1.0750)	Prec@1 75.00000 (74.31818)	Prec@5 100.00000 (98.63636)
Epoch: [17][56/60]	Time 0.02352 (0.22170)	Data 0.00049 (0.14495)	Loss 0.9926 (1.0735)	Prec@1 62.50000 (74.10715)	Prec@5 100.00000 (98.66072)
Epoch: [17][57/60]	Time 0.02262 (0.21821)	Data 0.00049 (0.14242)	Loss 0.9981 (1.0722)	Prec@1 75.00000 (74.12281)	Prec@5 100.00000 (98.68421)
Epoch: [17][58/60]	Time 0.02280 (0.21484)	Data 0.00043 (0.13997)	Loss 1.3653 (1.0772)	Prec@1 62.50000 (73.92242)	Prec@5 100.00000 (98.70689)
Epoch: [17][59/60]	Time 0.02268 (0.21159)	Data 0.00043 (0.13760)	Loss 1.6840 (1.0875)	Prec@1 75.00000 (73.94068)	Prec@5 100.00000 (98.72881)
Epoch: [17][60/60]	Time 0.02391 (0.20846)	Data 0.00051 (0.13532)	Loss 2.1628 (1.1055)	Prec@1 50.00000 (73.54167)	Prec@5 100.00000 (98.75001)
train at epoch 18
train at epoch 18
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [18][0/272]	 lr: 0.04000	Time 9.502 (9.502)	Data 9.008 (9.008)	Loss 0.1041 (0.1041)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [18][10/272]	 lr: 0.04000	Time 0.395 (1.299)	Data 0.128 (0.935)	Loss 0.1641 (0.2328)	Prec@1 100.00000 (92.89773)	Prec@5 100.00000 (100.00000)
Epoch: [18][20/272]	 lr: 0.04000	Time 0.489 (0.886)	Data 0.122 (0.551)	Loss 0.1542 (0.2382)	Prec@1 96.87500 (92.11310)	Prec@5 100.00000 (100.00000)
Epoch: [18][30/272]	 lr: 0.04000	Time 0.537 (0.747)	Data 0.131 (0.416)	Loss 0.2767 (0.2265)	Prec@1 90.62500 (92.33871)	Prec@5 100.00000 (100.00000)
Epoch: [18][40/272]	 lr: 0.04000	Time 0.479 (0.669)	Data 0.128 (0.345)	Loss 0.1489 (0.2156)	Prec@1 96.87500 (92.91158)	Prec@5 100.00000 (99.92377)
Epoch: [18][50/272]	 lr: 0.04000	Time 0.504 (0.631)	Data 0.121 (0.302)	Loss 0.2248 (0.2245)	Prec@1 90.62500 (92.46324)	Prec@5 100.00000 (99.93873)
Epoch: [18][60/272]	 lr: 0.04000	Time 0.472 (0.603)	Data 0.137 (0.274)	Loss 0.3320 (0.2221)	Prec@1 90.62500 (92.31557)	Prec@5 100.00000 (99.94877)
Epoch: [18][70/272]	 lr: 0.04000	Time 0.576 (0.579)	Data 0.128 (0.254)	Loss 0.3523 (0.2224)	Prec@1 87.50000 (92.47359)	Prec@5 100.00000 (99.95599)
Epoch: [18][80/272]	 lr: 0.04000	Time 0.434 (0.563)	Data 0.128 (0.238)	Loss 0.4165 (0.2283)	Prec@1 84.37500 (92.20679)	Prec@5 100.00000 (99.96142)
Epoch: [18][90/272]	 lr: 0.04000	Time 0.442 (0.550)	Data 0.128 (0.226)	Loss 0.2778 (0.2254)	Prec@1 93.75000 (92.37637)	Prec@5 100.00000 (99.96566)
Epoch: [18][100/272]	 lr: 0.04000	Time 0.448 (0.539)	Data 0.131 (0.216)	Loss 0.2776 (0.2252)	Prec@1 87.50000 (92.32673)	Prec@5 100.00000 (99.96906)
Epoch: [18][110/272]	 lr: 0.04000	Time 0.404 (0.531)	Data 0.154 (0.208)	Loss 0.1399 (0.2264)	Prec@1 96.87500 (92.62388)	Prec@5 100.00000 (99.97185)
Epoch: [18][120/272]	 lr: 0.04000	Time 0.439 (0.525)	Data 0.147 (0.202)	Loss 0.1367 (0.2267)	Prec@1 100.00000 (92.56198)	Prec@5 100.00000 (99.94834)
Epoch: [18][130/272]	 lr: 0.04000	Time 0.355 (0.520)	Data 0.105 (0.197)	Loss 0.1391 (0.2274)	Prec@1 96.87500 (92.58111)	Prec@5 100.00000 (99.95229)
Epoch: [18][140/272]	 lr: 0.04000	Time 0.512 (0.516)	Data 0.115 (0.192)	Loss 0.0405 (0.2258)	Prec@1 100.00000 (92.64184)	Prec@5 100.00000 (99.93351)
Epoch: [18][150/272]	 lr: 0.04000	Time 0.515 (0.513)	Data 0.128 (0.188)	Loss 0.1733 (0.2250)	Prec@1 93.75000 (92.65314)	Prec@5 100.00000 (99.93791)
Epoch: [18][160/272]	 lr: 0.04000	Time 0.441 (0.509)	Data 0.132 (0.184)	Loss 0.2132 (0.2256)	Prec@1 90.62500 (92.58540)	Prec@5 100.00000 (99.94177)
Epoch: [18][170/272]	 lr: 0.04000	Time 0.463 (0.506)	Data 0.127 (0.181)	Loss 0.3579 (0.2243)	Prec@1 87.50000 (92.69006)	Prec@5 100.00000 (99.94518)
Epoch: [18][180/272]	 lr: 0.04000	Time 0.428 (0.502)	Data 0.129 (0.178)	Loss 0.2583 (0.2204)	Prec@1 87.50000 (92.88674)	Prec@5 100.00000 (99.94821)
Epoch: [18][190/272]	 lr: 0.04000	Time 0.341 (0.498)	Data 0.122 (0.176)	Loss 0.2707 (0.2232)	Prec@1 90.62500 (92.81741)	Prec@5 100.00000 (99.95092)
Epoch: [18][200/272]	 lr: 0.04000	Time 0.454 (0.495)	Data 0.128 (0.173)	Loss 0.1201 (0.2243)	Prec@1 96.87500 (92.72388)	Prec@5 100.00000 (99.93781)
Epoch: [18][210/272]	 lr: 0.04000	Time 0.430 (0.492)	Data 0.138 (0.171)	Loss 0.3007 (0.2210)	Prec@1 87.50000 (92.86138)	Prec@5 100.00000 (99.94077)
Epoch: [18][220/272]	 lr: 0.04000	Time 0.355 (0.489)	Data 0.127 (0.169)	Loss 0.1146 (0.2182)	Prec@1 100.00000 (92.97229)	Prec@5 100.00000 (99.94344)
Epoch: [18][230/272]	 lr: 0.04000	Time 0.502 (0.488)	Data 0.137 (0.168)	Loss 0.0545 (0.2148)	Prec@1 100.00000 (93.10065)	Prec@5 100.00000 (99.94588)
Epoch: [18][240/272]	 lr: 0.04000	Time 0.320 (0.485)	Data 0.137 (0.166)	Loss 0.2190 (0.2167)	Prec@1 93.75000 (93.03683)	Prec@5 100.00000 (99.93517)
Epoch: [18][250/272]	 lr: 0.04000	Time 0.239 (0.475)	Data 0.127 (0.165)	Loss 0.1000 (0.2142)	Prec@1 96.87500 (93.11504)	Prec@5 100.00000 (99.93775)
Epoch: [18][260/272]	 lr: 0.04000	Time 0.240 (0.466)	Data 0.127 (0.163)	Loss 0.1409 (0.2130)	Prec@1 96.87500 (93.15134)	Prec@5 100.00000 (99.94013)
Epoch: [18][270/272]	 lr: 0.04000	Time 0.242 (0.458)	Data 0.126 (0.162)	Loss 0.1564 (0.2107)	Prec@1 90.62500 (93.23109)	Prec@5 100.00000 (99.94234)
validation at epoch 18
validation at epoch 18
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [18][1/60]	Time 5.06873 (5.06873)	Data 4.82255 (4.82255)	Loss 0.5036 (0.5036)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [18][2/60]	Time 2.72054 (3.89464)	Data 2.65529 (3.73892)	Loss 0.6079 (0.5557)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [18][3/60]	Time 0.09196 (2.62708)	Data 0.00357 (2.49380)	Loss 1.6929 (0.9348)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [18][4/60]	Time 0.08004 (1.99032)	Data 0.00243 (1.87096)	Loss 0.5669 (0.8428)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [18][5/60]	Time 0.11511 (1.61528)	Data 0.05416 (1.50760)	Loss 1.2346 (0.9212)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [18][6/60]	Time 0.21726 (1.38227)	Data 0.06946 (1.26791)	Loss 0.5760 (0.8636)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (97.91667)
Epoch: [18][7/60]	Time 0.13728 (1.20442)	Data 0.05637 (1.09483)	Loss 1.1817 (0.9091)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [18][8/60]	Time 0.11963 (1.06882)	Data 0.01031 (0.95927)	Loss 1.6690 (1.0041)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.43750)
Epoch: [18][9/60]	Time 0.20581 (0.97293)	Data 0.07527 (0.86105)	Loss 0.4452 (0.9420)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [18][10/60]	Time 0.27488 (0.90312)	Data 0.06896 (0.78184)	Loss 0.3187 (0.8797)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [18][11/60]	Time 0.08357 (0.82862)	Data 0.00832 (0.71152)	Loss 0.9369 (0.8849)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [18][12/60]	Time 0.12624 (0.77009)	Data 0.02094 (0.65397)	Loss 0.8257 (0.8799)	Prec@1 87.50000 (76.04167)	Prec@5 100.00000 (98.95834)
Epoch: [18][13/60]	Time 0.18212 (0.72486)	Data 0.00937 (0.60439)	Loss 2.9350 (1.0380)	Prec@1 37.50000 (73.07693)	Prec@5 87.50000 (98.07693)
Epoch: [18][14/60]	Time 0.12723 (0.68217)	Data 0.00449 (0.56154)	Loss 0.9783 (1.0338)	Prec@1 50.00000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [18][15/60]	Time 0.20277 (0.65021)	Data 0.05912 (0.52804)	Loss 2.1454 (1.1079)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (98.33334)
Epoch: [18][16/60]	Time 0.11099 (0.61651)	Data 0.00055 (0.49507)	Loss 1.0265 (1.1028)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (98.43750)
Epoch: [18][17/60]	Time 0.11450 (0.58698)	Data 0.00612 (0.46631)	Loss 0.4680 (1.0654)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (98.52941)
Epoch: [18][18/60]	Time 0.07732 (0.55867)	Data 0.00472 (0.44067)	Loss 1.7606 (1.1041)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (98.61111)
Epoch: [18][19/60]	Time 0.15994 (0.53768)	Data 0.00081 (0.41752)	Loss 0.2523 (1.0592)	Prec@1 87.50000 (73.68421)	Prec@5 100.00000 (98.68421)
Epoch: [18][20/60]	Time 0.09460 (0.51553)	Data 0.00488 (0.39689)	Loss 2.4290 (1.1277)	Prec@1 62.50000 (73.12500)	Prec@5 100.00000 (98.75000)
Epoch: [18][21/60]	Time 0.08037 (0.49480)	Data 0.00899 (0.37841)	Loss 0.6079 (1.1030)	Prec@1 87.50000 (73.80952)	Prec@5 100.00000 (98.80952)
Epoch: [18][22/60]	Time 0.18667 (0.48080)	Data 0.06367 (0.36411)	Loss 0.4361 (1.0727)	Prec@1 87.50000 (74.43182)	Prec@5 100.00000 (98.86364)
Epoch: [18][23/60]	Time 0.20923 (0.46899)	Data 0.02523 (0.34937)	Loss 1.1478 (1.0759)	Prec@1 75.00000 (74.45652)	Prec@5 100.00000 (98.91305)
Epoch: [18][24/60]	Time 0.14617 (0.45554)	Data 0.03043 (0.33608)	Loss 0.2653 (1.0421)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.95834)
Epoch: [18][25/60]	Time 0.09052 (0.44094)	Data 0.03443 (0.32402)	Loss 0.7600 (1.0309)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.00000)
Epoch: [18][26/60]	Time 0.20023 (0.43168)	Data 0.00878 (0.31189)	Loss 0.2143 (0.9994)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (99.03847)
Epoch: [18][27/60]	Time 0.07629 (0.41852)	Data 0.01318 (0.30083)	Loss 0.4895 (0.9806)	Prec@1 87.50000 (76.38889)	Prec@5 100.00000 (99.07407)
Epoch: [18][28/60]	Time 0.06098 (0.40575)	Data 0.00094 (0.29012)	Loss 0.3396 (0.9577)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (99.10715)
Epoch: [18][29/60]	Time 0.06432 (0.39398)	Data 0.00803 (0.28039)	Loss 0.5139 (0.9424)	Prec@1 87.50000 (77.15517)	Prec@5 100.00000 (99.13793)
Epoch: [18][30/60]	Time 0.08264 (0.38360)	Data 0.00046 (0.27106)	Loss 1.1823 (0.9504)	Prec@1 62.50000 (76.66667)	Prec@5 100.00000 (99.16667)
Epoch: [18][31/60]	Time 0.07180 (0.37354)	Data 0.00040 (0.26233)	Loss 4.7667 (1.0735)	Prec@1 25.00000 (75.00000)	Prec@5 87.50000 (98.79032)
Epoch: [18][32/60]	Time 0.06620 (0.36394)	Data 0.00038 (0.25414)	Loss 1.6182 (1.0905)	Prec@1 62.50000 (74.60938)	Prec@5 100.00000 (98.82812)
Epoch: [18][33/60]	Time 0.09940 (0.35592)	Data 0.01132 (0.24679)	Loss 0.3716 (1.0687)	Prec@1 75.00000 (74.62122)	Prec@5 100.00000 (98.86364)
Epoch: [18][34/60]	Time 0.05364 (0.34703)	Data 0.00042 (0.23954)	Loss 1.8915 (1.0929)	Prec@1 50.00000 (73.89706)	Prec@5 100.00000 (98.89706)
Epoch: [18][35/60]	Time 0.03168 (0.33802)	Data 0.00074 (0.23272)	Loss 2.6326 (1.1369)	Prec@1 62.50000 (73.57143)	Prec@5 87.50000 (98.57143)
Epoch: [18][36/60]	Time 0.03108 (0.32949)	Data 0.00313 (0.22634)	Loss 2.0993 (1.1636)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (98.61111)
Epoch: [18][37/60]	Time 0.02995 (0.32140)	Data 0.00215 (0.22028)	Loss 2.3018 (1.1944)	Prec@1 50.00000 (72.63514)	Prec@5 100.00000 (98.64865)
Epoch: [18][38/60]	Time 0.02982 (0.31372)	Data 0.00143 (0.21452)	Loss 2.5252 (1.2294)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (98.68421)
Epoch: [18][39/60]	Time 0.02950 (0.30644)	Data 0.00185 (0.20907)	Loss 0.0540 (1.1993)	Prec@1 100.00000 (72.75641)	Prec@5 100.00000 (98.71795)
Epoch: [18][40/60]	Time 0.03144 (0.29956)	Data 0.00268 (0.20391)	Loss 0.0747 (1.1712)	Prec@1 100.00000 (73.43750)	Prec@5 100.00000 (98.75000)
Epoch: [18][41/60]	Time 0.02938 (0.29297)	Data 0.00255 (0.19900)	Loss 1.8908 (1.1887)	Prec@1 62.50000 (73.17073)	Prec@5 100.00000 (98.78049)
Epoch: [18][42/60]	Time 0.02713 (0.28664)	Data 0.00081 (0.19428)	Loss 1.1758 (1.1884)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (98.80952)
Epoch: [18][43/60]	Time 0.03080 (0.28069)	Data 0.00474 (0.18987)	Loss 2.0119 (1.2076)	Prec@1 62.50000 (72.96512)	Prec@5 100.00000 (98.83721)
Epoch: [18][44/60]	Time 0.02355 (0.27485)	Data 0.00040 (0.18556)	Loss 1.7737 (1.2204)	Prec@1 62.50000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [18][45/60]	Time 0.02320 (0.26926)	Data 0.00047 (0.18145)	Loss 1.2976 (1.2221)	Prec@1 75.00000 (72.77778)	Prec@5 100.00000 (98.88889)
Epoch: [18][46/60]	Time 0.02290 (0.26390)	Data 0.00041 (0.17752)	Loss 2.6651 (1.2535)	Prec@1 50.00000 (72.28261)	Prec@5 100.00000 (98.91305)
Epoch: [18][47/60]	Time 0.02291 (0.25877)	Data 0.00047 (0.17375)	Loss 1.1894 (1.2521)	Prec@1 75.00000 (72.34042)	Prec@5 87.50000 (98.67021)
Epoch: [18][48/60]	Time 0.02254 (0.25385)	Data 0.00045 (0.17014)	Loss 0.8952 (1.2447)	Prec@1 62.50000 (72.13542)	Prec@5 100.00000 (98.69792)
Epoch: [18][49/60]	Time 0.02336 (0.24915)	Data 0.00043 (0.16667)	Loss 1.2750 (1.2453)	Prec@1 75.00000 (72.19388)	Prec@5 100.00000 (98.72449)
Epoch: [18][50/60]	Time 0.02239 (0.24461)	Data 0.00042 (0.16335)	Loss 0.9476 (1.2394)	Prec@1 75.00000 (72.25000)	Prec@5 100.00000 (98.75000)
Epoch: [18][51/60]	Time 0.02250 (0.24026)	Data 0.00038 (0.16015)	Loss 0.3719 (1.2224)	Prec@1 87.50000 (72.54902)	Prec@5 100.00000 (98.77451)
Epoch: [18][52/60]	Time 0.02233 (0.23607)	Data 0.00043 (0.15708)	Loss 1.1667 (1.2213)	Prec@1 62.50000 (72.35577)	Prec@5 87.50000 (98.55769)
Epoch: [18][53/60]	Time 0.02276 (0.23204)	Data 0.00043 (0.15413)	Loss 1.4409 (1.2254)	Prec@1 50.00000 (71.93396)	Prec@5 100.00000 (98.58491)
Epoch: [18][54/60]	Time 0.02358 (0.22818)	Data 0.00041 (0.15128)	Loss 0.8561 (1.2186)	Prec@1 75.00000 (71.99074)	Prec@5 100.00000 (98.61111)
Epoch: [18][55/60]	Time 0.02392 (0.22447)	Data 0.00045 (0.14854)	Loss 0.9279 (1.2133)	Prec@1 87.50000 (72.27273)	Prec@5 87.50000 (98.40909)
Epoch: [18][56/60]	Time 0.02283 (0.22087)	Data 0.00053 (0.14589)	Loss 1.2603 (1.2142)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (98.43751)
Epoch: [18][57/60]	Time 0.02288 (0.21739)	Data 0.00046 (0.14334)	Loss 2.2590 (1.2325)	Prec@1 37.50000 (71.71053)	Prec@5 87.50000 (98.24561)
Epoch: [18][58/60]	Time 0.02280 (0.21404)	Data 0.00047 (0.14088)	Loss 1.7923 (1.2421)	Prec@1 62.50000 (71.55173)	Prec@5 100.00000 (98.27586)
Epoch: [18][59/60]	Time 0.02382 (0.21081)	Data 0.00044 (0.13850)	Loss 1.5224 (1.2469)	Prec@1 50.00000 (71.18644)	Prec@5 100.00000 (98.30508)
Epoch: [18][60/60]	Time 0.02310 (0.20769)	Data 0.00059 (0.13620)	Loss 0.4371 (1.2334)	Prec@1 75.00000 (71.25000)	Prec@5 100.00000 (98.33334)
train at epoch 19
train at epoch 19
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [19][0/272]	 lr: 0.04000	Time 6.234 (6.234)	Data 4.874 (4.874)	Loss 0.2558 (0.2558)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [19][10/272]	 lr: 0.04000	Time 0.381 (1.295)	Data 0.129 (0.647)	Loss 0.1529 (0.1874)	Prec@1 100.00000 (94.88637)	Prec@5 100.00000 (99.71591)
Epoch: [19][20/272]	 lr: 0.04000	Time 0.369 (0.869)	Data 0.126 (0.400)	Loss 0.2480 (0.1779)	Prec@1 93.75000 (94.94048)	Prec@5 100.00000 (99.85119)
Epoch: [19][30/272]	 lr: 0.04000	Time 0.504 (0.733)	Data 0.127 (0.313)	Loss 0.2194 (0.2065)	Prec@1 90.62500 (93.85081)	Prec@5 100.00000 (99.89919)
Epoch: [19][40/272]	 lr: 0.04000	Time 0.385 (0.661)	Data 0.117 (0.269)	Loss 0.1005 (0.2140)	Prec@1 100.00000 (93.82622)	Prec@5 100.00000 (99.92377)
Epoch: [19][50/272]	 lr: 0.04000	Time 0.499 (0.617)	Data 0.129 (0.241)	Loss 0.1247 (0.2275)	Prec@1 100.00000 (93.25980)	Prec@5 100.00000 (99.93873)
Epoch: [19][60/272]	 lr: 0.04000	Time 0.562 (0.590)	Data 0.132 (0.223)	Loss 0.2673 (0.2344)	Prec@1 90.62500 (92.72540)	Prec@5 100.00000 (99.94877)
Epoch: [19][70/272]	 lr: 0.04000	Time 0.481 (0.567)	Data 0.143 (0.209)	Loss 0.1749 (0.2424)	Prec@1 96.87500 (92.64964)	Prec@5 100.00000 (99.95599)
Epoch: [19][80/272]	 lr: 0.04000	Time 0.548 (0.552)	Data 0.137 (0.200)	Loss 0.3999 (0.2423)	Prec@1 90.62500 (92.66975)	Prec@5 100.00000 (99.96142)
Epoch: [19][90/272]	 lr: 0.04000	Time 0.520 (0.538)	Data 0.131 (0.193)	Loss 0.1540 (0.2494)	Prec@1 90.62500 (92.34203)	Prec@5 100.00000 (99.96566)
Epoch: [19][100/272]	 lr: 0.04000	Time 0.476 (0.530)	Data 0.127 (0.186)	Loss 0.2359 (0.2560)	Prec@1 90.62500 (92.17203)	Prec@5 100.00000 (99.93812)
Epoch: [19][110/272]	 lr: 0.04000	Time 0.436 (0.522)	Data 0.126 (0.181)	Loss 0.2740 (0.2502)	Prec@1 87.50000 (92.42680)	Prec@5 100.00000 (99.94370)
Epoch: [19][120/272]	 lr: 0.04000	Time 0.383 (0.515)	Data 0.128 (0.177)	Loss 0.2724 (0.2489)	Prec@1 87.50000 (92.51033)	Prec@5 100.00000 (99.94834)
Epoch: [19][130/272]	 lr: 0.04000	Time 0.291 (0.509)	Data 0.127 (0.174)	Loss 0.5281 (0.2543)	Prec@1 78.12500 (92.00859)	Prec@5 100.00000 (99.92844)
Epoch: [19][140/272]	 lr: 0.04000	Time 0.508 (0.505)	Data 0.118 (0.171)	Loss 0.4485 (0.2576)	Prec@1 90.62500 (91.93262)	Prec@5 100.00000 (99.93351)
Epoch: [19][150/272]	 lr: 0.04000	Time 0.515 (0.501)	Data 0.124 (0.168)	Loss 0.2101 (0.2573)	Prec@1 93.75000 (91.90811)	Prec@5 100.00000 (99.93791)
Epoch: [19][160/272]	 lr: 0.04000	Time 0.417 (0.497)	Data 0.133 (0.166)	Loss 0.1496 (0.2599)	Prec@1 96.87500 (91.77019)	Prec@5 100.00000 (99.94177)
Epoch: [19][170/272]	 lr: 0.04000	Time 0.510 (0.493)	Data 0.127 (0.164)	Loss 0.2076 (0.2602)	Prec@1 93.75000 (91.75804)	Prec@5 100.00000 (99.90862)
Epoch: [19][180/272]	 lr: 0.04000	Time 0.455 (0.490)	Data 0.125 (0.162)	Loss 0.2421 (0.2544)	Prec@1 90.62500 (92.00622)	Prec@5 100.00000 (99.91368)
Epoch: [19][190/272]	 lr: 0.04000	Time 0.448 (0.488)	Data 0.119 (0.160)	Loss 0.1978 (0.2524)	Prec@1 90.62500 (92.04843)	Prec@5 100.00000 (99.91820)
Epoch: [19][200/272]	 lr: 0.04000	Time 0.454 (0.486)	Data 0.122 (0.158)	Loss 0.2053 (0.2491)	Prec@1 93.75000 (92.16418)	Prec@5 100.00000 (99.92226)
Epoch: [19][210/272]	 lr: 0.04000	Time 0.489 (0.484)	Data 0.131 (0.157)	Loss 0.1502 (0.2461)	Prec@1 96.87500 (92.25415)	Prec@5 100.00000 (99.92595)
Epoch: [19][220/272]	 lr: 0.04000	Time 0.508 (0.483)	Data 0.134 (0.155)	Loss 0.1055 (0.2422)	Prec@1 100.00000 (92.40668)	Prec@5 100.00000 (99.92931)
Epoch: [19][230/272]	 lr: 0.04000	Time 0.472 (0.481)	Data 0.128 (0.154)	Loss 0.1041 (0.2402)	Prec@1 96.87500 (92.54600)	Prec@5 100.00000 (99.93236)
Epoch: [19][240/272]	 lr: 0.04000	Time 0.293 (0.478)	Data 0.129 (0.153)	Loss 0.1228 (0.2392)	Prec@1 96.87500 (92.55706)	Prec@5 100.00000 (99.93517)
Epoch: [19][250/272]	 lr: 0.04000	Time 0.241 (0.469)	Data 0.126 (0.152)	Loss 0.2157 (0.2424)	Prec@1 87.50000 (92.34313)	Prec@5 100.00000 (99.93775)
Epoch: [19][260/272]	 lr: 0.04000	Time 0.241 (0.460)	Data 0.127 (0.151)	Loss 0.2230 (0.2431)	Prec@1 90.62500 (92.32519)	Prec@5 100.00000 (99.94013)
Epoch: [19][270/272]	 lr: 0.04000	Time 0.241 (0.452)	Data 0.127 (0.150)	Loss 0.2622 (0.2417)	Prec@1 93.75000 (92.37777)	Prec@5 100.00000 (99.94234)
validation at epoch 19
validation at epoch 19
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [19][1/60]	Time 5.78445 (5.78445)	Data 5.57827 (5.57827)	Loss 0.6214 (0.6214)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [19][2/60]	Time 1.82414 (3.80430)	Data 1.73510 (3.65669)	Loss 0.6709 (0.6462)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [19][3/60]	Time 0.06537 (2.55799)	Data 0.00481 (2.43940)	Loss 1.1050 (0.7991)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [19][4/60]	Time 0.10529 (1.94481)	Data 0.00269 (1.83022)	Loss 1.0039 (0.8503)	Prec@1 62.50000 (78.12500)	Prec@5 87.50000 (96.87500)
Epoch: [19][5/60]	Time 0.08909 (1.57367)	Data 0.00062 (1.46430)	Loss 0.6502 (0.8103)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (97.50000)
Epoch: [19][6/60]	Time 0.15833 (1.33778)	Data 0.00187 (1.22056)	Loss 0.6791 (0.7884)	Prec@1 87.50000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [19][7/60]	Time 0.20462 (1.17590)	Data 0.04148 (1.05212)	Loss 1.1179 (0.8355)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (96.42857)
Epoch: [19][8/60]	Time 0.16461 (1.04949)	Data 0.00044 (0.92066)	Loss 1.6137 (0.9328)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (96.87500)
Epoch: [19][9/60]	Time 0.12899 (0.94721)	Data 0.00712 (0.81916)	Loss 0.4135 (0.8751)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (97.22222)
Epoch: [19][10/60]	Time 0.11351 (0.86384)	Data 0.02583 (0.73982)	Loss 0.5912 (0.8467)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [19][11/60]	Time 0.15278 (0.79920)	Data 0.00191 (0.67274)	Loss 0.7348 (0.8365)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.72727)
Epoch: [19][12/60]	Time 0.15236 (0.74529)	Data 0.02983 (0.61916)	Loss 1.1694 (0.8642)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (97.91667)
Epoch: [19][13/60]	Time 0.14881 (0.69941)	Data 0.01430 (0.57264)	Loss 2.6366 (1.0006)	Prec@1 50.00000 (72.11539)	Prec@5 100.00000 (98.07693)
Epoch: [19][14/60]	Time 0.28686 (0.66994)	Data 0.10359 (0.53913)	Loss 0.3708 (0.9556)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (98.21429)
Epoch: [19][15/60]	Time 0.12546 (0.63364)	Data 0.04110 (0.50593)	Loss 1.6603 (1.0026)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (98.33334)
Epoch: [19][16/60]	Time 0.09571 (0.60002)	Data 0.00484 (0.47461)	Loss 1.0390 (1.0049)	Prec@1 75.00000 (71.09375)	Prec@5 100.00000 (98.43750)
Epoch: [19][17/60]	Time 0.24333 (0.57904)	Data 0.08076 (0.45144)	Loss 0.2909 (0.9629)	Prec@1 87.50000 (72.05882)	Prec@5 100.00000 (98.52941)
Epoch: [19][18/60]	Time 0.09902 (0.55237)	Data 0.00451 (0.42662)	Loss 1.5799 (0.9971)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [19][19/60]	Time 0.09006 (0.52804)	Data 0.00059 (0.40419)	Loss 0.0181 (0.9456)	Prec@1 100.00000 (73.68421)	Prec@5 100.00000 (98.68421)
Epoch: [19][20/60]	Time 0.09506 (0.50639)	Data 0.01758 (0.38486)	Loss 2.2862 (1.0126)	Prec@1 62.50000 (73.12500)	Prec@5 100.00000 (98.75000)
Epoch: [19][21/60]	Time 0.12569 (0.48826)	Data 0.00477 (0.36676)	Loss 0.4974 (0.9881)	Prec@1 62.50000 (72.61905)	Prec@5 100.00000 (98.80952)
Epoch: [19][22/60]	Time 0.14132 (0.47249)	Data 0.00066 (0.35012)	Loss 0.8707 (0.9828)	Prec@1 87.50000 (73.29546)	Prec@5 100.00000 (98.86364)
Epoch: [19][23/60]	Time 0.14900 (0.45843)	Data 0.01669 (0.33562)	Loss 1.3233 (0.9976)	Prec@1 62.50000 (72.82609)	Prec@5 100.00000 (98.91305)
Epoch: [19][24/60]	Time 0.13855 (0.44510)	Data 0.02531 (0.32269)	Loss 0.4978 (0.9767)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [19][25/60]	Time 0.13774 (0.43281)	Data 0.00968 (0.31017)	Loss 0.2855 (0.9491)	Prec@1 87.50000 (73.50000)	Prec@5 100.00000 (99.00000)
Epoch: [19][26/60]	Time 0.13625 (0.42140)	Data 0.03998 (0.29978)	Loss 0.4365 (0.9294)	Prec@1 75.00000 (73.55769)	Prec@5 100.00000 (99.03847)
Epoch: [19][27/60]	Time 0.21483 (0.41375)	Data 0.05841 (0.29084)	Loss 1.0459 (0.9337)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.07407)
Epoch: [19][28/60]	Time 0.12607 (0.40347)	Data 0.00476 (0.28063)	Loss 0.2389 (0.9089)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (99.10715)
Epoch: [19][29/60]	Time 0.10418 (0.39315)	Data 0.00042 (0.27096)	Loss 0.3166 (0.8885)	Prec@1 75.00000 (74.13793)	Prec@5 100.00000 (99.13793)
Epoch: [19][30/60]	Time 0.07655 (0.38260)	Data 0.00045 (0.26195)	Loss 1.0784 (0.8948)	Prec@1 62.50000 (73.75001)	Prec@5 100.00000 (99.16667)
Epoch: [19][31/60]	Time 0.08477 (0.37299)	Data 0.00039 (0.25351)	Loss 2.8398 (0.9575)	Prec@1 25.00000 (72.17741)	Prec@5 87.50000 (98.79032)
Epoch: [19][32/60]	Time 0.04074 (0.36261)	Data 0.00045 (0.24560)	Loss 1.2941 (0.9681)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.82812)
Epoch: [19][33/60]	Time 0.03908 (0.35281)	Data 0.00043 (0.23817)	Loss 0.2652 (0.9468)	Prec@1 87.50000 (72.34849)	Prec@5 100.00000 (98.86364)
Epoch: [19][34/60]	Time 0.03392 (0.34343)	Data 0.00387 (0.23128)	Loss 1.2688 (0.9562)	Prec@1 62.50000 (72.05882)	Prec@5 100.00000 (98.89706)
Epoch: [19][35/60]	Time 0.03636 (0.33465)	Data 0.00403 (0.22479)	Loss 1.5306 (0.9726)	Prec@1 62.50000 (71.78571)	Prec@5 87.50000 (98.57143)
Epoch: [19][36/60]	Time 0.03321 (0.32628)	Data 0.00074 (0.21856)	Loss 0.9797 (0.9728)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (98.61111)
Epoch: [19][37/60]	Time 0.03431 (0.31839)	Data 0.00062 (0.21267)	Loss 1.2588 (0.9806)	Prec@1 75.00000 (71.95946)	Prec@5 100.00000 (98.64865)
Epoch: [19][38/60]	Time 0.02875 (0.31077)	Data 0.00050 (0.20709)	Loss 1.4593 (0.9932)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (98.68421)
Epoch: [19][39/60]	Time 0.02726 (0.30350)	Data 0.00071 (0.20180)	Loss 0.1851 (0.9724)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (98.71795)
Epoch: [19][40/60]	Time 0.02696 (0.29658)	Data 0.00051 (0.19677)	Loss 0.0423 (0.9492)	Prec@1 100.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [19][41/60]	Time 0.02820 (0.29004)	Data 0.00077 (0.19199)	Loss 1.3419 (0.9588)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (98.78049)
Epoch: [19][42/60]	Time 0.02327 (0.28369)	Data 0.00058 (0.18743)	Loss 0.5656 (0.9494)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (98.80952)
Epoch: [19][43/60]	Time 0.02235 (0.27761)	Data 0.00049 (0.18308)	Loss 1.1183 (0.9533)	Prec@1 62.50000 (72.38372)	Prec@5 100.00000 (98.83721)
Epoch: [19][44/60]	Time 0.02199 (0.27180)	Data 0.00043 (0.17893)	Loss 1.3624 (0.9626)	Prec@1 62.50000 (72.15910)	Prec@5 100.00000 (98.86364)
Epoch: [19][45/60]	Time 0.02175 (0.26624)	Data 0.00045 (0.17496)	Loss 0.9076 (0.9614)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.88889)
Epoch: [19][46/60]	Time 0.02257 (0.26095)	Data 0.00046 (0.17117)	Loss 1.1385 (0.9653)	Prec@1 75.00000 (72.28261)	Prec@5 100.00000 (98.91305)
Epoch: [19][47/60]	Time 0.02171 (0.25586)	Data 0.00045 (0.16754)	Loss 0.5880 (0.9572)	Prec@1 87.50000 (72.60638)	Prec@5 100.00000 (98.93616)
Epoch: [19][48/60]	Time 0.02157 (0.25098)	Data 0.00039 (0.16406)	Loss 0.5432 (0.9486)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (98.95834)
Epoch: [19][49/60]	Time 0.02238 (0.24631)	Data 0.00043 (0.16072)	Loss 0.7116 (0.9438)	Prec@1 75.00000 (72.70408)	Prec@5 100.00000 (98.97959)
Epoch: [19][50/60]	Time 0.02234 (0.24183)	Data 0.00047 (0.15751)	Loss 0.4616 (0.9341)	Prec@1 87.50000 (73.00000)	Prec@5 100.00000 (99.00000)
Epoch: [19][51/60]	Time 0.02267 (0.23753)	Data 0.00046 (0.15443)	Loss 0.0650 (0.9171)	Prec@1 100.00000 (73.52941)	Prec@5 100.00000 (99.01961)
Epoch: [19][52/60]	Time 0.02218 (0.23339)	Data 0.00042 (0.15147)	Loss 0.7822 (0.9145)	Prec@1 75.00000 (73.55769)	Prec@5 100.00000 (99.03847)
Epoch: [19][53/60]	Time 0.02183 (0.22940)	Data 0.00049 (0.14862)	Loss 0.2702 (0.9023)	Prec@1 87.50000 (73.82076)	Prec@5 100.00000 (99.05660)
Epoch: [19][54/60]	Time 0.02185 (0.22556)	Data 0.00042 (0.14588)	Loss 0.4545 (0.8940)	Prec@1 87.50000 (74.07407)	Prec@5 100.00000 (99.07407)
Epoch: [19][55/60]	Time 0.02157 (0.22185)	Data 0.00043 (0.14323)	Loss 0.7505 (0.8914)	Prec@1 75.00000 (74.09090)	Prec@5 100.00000 (99.09090)
Epoch: [19][56/60]	Time 0.02292 (0.21830)	Data 0.00045 (0.14068)	Loss 0.6053 (0.8863)	Prec@1 87.50000 (74.33036)	Prec@5 100.00000 (99.10715)
Epoch: [19][57/60]	Time 0.02244 (0.21486)	Data 0.00050 (0.13822)	Loss 1.6076 (0.8990)	Prec@1 62.50000 (74.12281)	Prec@5 100.00000 (99.12281)
Epoch: [19][58/60]	Time 0.02191 (0.21153)	Data 0.00040 (0.13585)	Loss 0.8654 (0.8984)	Prec@1 75.00000 (74.13793)	Prec@5 100.00000 (99.13793)
Epoch: [19][59/60]	Time 0.02199 (0.20832)	Data 0.00046 (0.13355)	Loss 0.5609 (0.8927)	Prec@1 75.00000 (74.15254)	Prec@5 100.00000 (99.15254)
Epoch: [19][60/60]	Time 0.02198 (0.20521)	Data 0.00056 (0.13134)	Loss 0.5560 (0.8871)	Prec@1 87.50000 (74.37501)	Prec@5 100.00000 (99.16667)
train at epoch 20
train at epoch 20
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [20][0/272]	 lr: 0.04000	Time 9.823 (9.823)	Data 9.054 (9.054)	Loss 0.1701 (0.1701)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [20][10/272]	 lr: 0.04000	Time 0.397 (1.332)	Data 0.142 (0.940)	Loss 0.5711 (0.1756)	Prec@1 90.62500 (96.30682)	Prec@5 100.00000 (100.00000)
Epoch: [20][20/272]	 lr: 0.04000	Time 0.464 (0.897)	Data 0.142 (0.554)	Loss 0.1905 (0.1639)	Prec@1 93.75000 (96.13095)	Prec@5 100.00000 (100.00000)
Epoch: [20][30/272]	 lr: 0.04000	Time 0.470 (0.747)	Data 0.151 (0.417)	Loss 0.1376 (0.1606)	Prec@1 96.87500 (95.86694)	Prec@5 100.00000 (100.00000)
Epoch: [20][40/272]	 lr: 0.04000	Time 0.387 (0.668)	Data 0.125 (0.347)	Loss 0.1870 (0.1517)	Prec@1 93.75000 (96.11280)	Prec@5 100.00000 (100.00000)
Epoch: [20][50/272]	 lr: 0.04000	Time 0.341 (0.621)	Data 0.128 (0.304)	Loss 0.1027 (0.1526)	Prec@1 100.00000 (96.07844)	Prec@5 100.00000 (100.00000)
Epoch: [20][60/272]	 lr: 0.04000	Time 0.471 (0.590)	Data 0.128 (0.276)	Loss 0.0715 (0.1590)	Prec@1 100.00000 (95.85040)	Prec@5 100.00000 (99.99999)
Epoch: [20][70/272]	 lr: 0.04000	Time 0.453 (0.570)	Data 0.129 (0.255)	Loss 0.0880 (0.1627)	Prec@1 96.87500 (95.55457)	Prec@5 100.00000 (100.00000)
Epoch: [20][80/272]	 lr: 0.04000	Time 0.453 (0.554)	Data 0.130 (0.239)	Loss 0.1914 (0.1756)	Prec@1 96.87500 (94.98457)	Prec@5 100.00000 (100.00000)
Epoch: [20][90/272]	 lr: 0.04000	Time 0.445 (0.544)	Data 0.129 (0.227)	Loss 0.3853 (0.1817)	Prec@1 81.25000 (94.67720)	Prec@5 100.00000 (100.00000)
Epoch: [20][100/272]	 lr: 0.04000	Time 0.525 (0.534)	Data 0.139 (0.217)	Loss 0.1364 (0.1828)	Prec@1 96.87500 (94.61633)	Prec@5 100.00000 (100.00000)
Epoch: [20][110/272]	 lr: 0.04000	Time 0.386 (0.527)	Data 0.141 (0.210)	Loss 0.2334 (0.1902)	Prec@1 87.50000 (94.25676)	Prec@5 100.00000 (100.00000)
Epoch: [20][120/272]	 lr: 0.04000	Time 0.481 (0.520)	Data 0.128 (0.203)	Loss 0.5009 (0.1911)	Prec@1 81.25000 (94.18905)	Prec@5 100.00000 (99.97417)
Epoch: [20][130/272]	 lr: 0.04000	Time 0.381 (0.514)	Data 0.124 (0.197)	Loss 0.2445 (0.1985)	Prec@1 93.75000 (94.13168)	Prec@5 100.00000 (99.97614)
Epoch: [20][140/272]	 lr: 0.04000	Time 0.381 (0.508)	Data 0.120 (0.192)	Loss 0.1240 (0.1990)	Prec@1 100.00000 (94.08244)	Prec@5 100.00000 (99.97784)
Epoch: [20][150/272]	 lr: 0.04000	Time 0.422 (0.505)	Data 0.127 (0.188)	Loss 0.2819 (0.2024)	Prec@1 87.50000 (93.91557)	Prec@5 100.00000 (99.97930)
Epoch: [20][160/272]	 lr: 0.04000	Time 0.344 (0.499)	Data 0.128 (0.185)	Loss 0.1711 (0.1995)	Prec@1 96.87500 (93.98292)	Prec@5 100.00000 (99.98059)
Epoch: [20][170/272]	 lr: 0.04000	Time 0.329 (0.495)	Data 0.129 (0.182)	Loss 0.0480 (0.2007)	Prec@1 100.00000 (93.98757)	Prec@5 100.00000 (99.98173)
Epoch: [20][180/272]	 lr: 0.04000	Time 0.485 (0.492)	Data 0.113 (0.179)	Loss 0.3134 (0.2057)	Prec@1 90.62500 (93.76727)	Prec@5 100.00000 (99.96548)
Epoch: [20][190/272]	 lr: 0.04000	Time 0.493 (0.491)	Data 0.125 (0.176)	Loss 0.1863 (0.2045)	Prec@1 93.75000 (93.81544)	Prec@5 100.00000 (99.96728)
Epoch: [20][200/272]	 lr: 0.04000	Time 0.474 (0.488)	Data 0.129 (0.174)	Loss 0.3140 (0.2028)	Prec@1 96.87500 (93.93656)	Prec@5 100.00000 (99.96890)
Epoch: [20][210/272]	 lr: 0.04000	Time 0.375 (0.486)	Data 0.128 (0.172)	Loss 0.0982 (0.2009)	Prec@1 100.00000 (94.06102)	Prec@5 100.00000 (99.97038)
Epoch: [20][220/272]	 lr: 0.04000	Time 0.540 (0.486)	Data 0.129 (0.170)	Loss 0.1109 (0.1994)	Prec@1 100.00000 (94.14594)	Prec@5 100.00000 (99.97173)
Epoch: [20][230/272]	 lr: 0.04000	Time 0.522 (0.485)	Data 0.153 (0.169)	Loss 0.5939 (0.2015)	Prec@1 87.50000 (94.08820)	Prec@5 100.00000 (99.95942)
Epoch: [20][240/272]	 lr: 0.04000	Time 0.365 (0.482)	Data 0.127 (0.167)	Loss 0.4149 (0.2019)	Prec@1 81.25000 (93.99638)	Prec@5 100.00000 (99.96111)
Epoch: [20][250/272]	 lr: 0.04000	Time 0.235 (0.473)	Data 0.125 (0.165)	Loss 0.0402 (0.1996)	Prec@1 100.00000 (94.08616)	Prec@5 100.00000 (99.96265)
Epoch: [20][260/272]	 lr: 0.04000	Time 0.239 (0.464)	Data 0.128 (0.164)	Loss 0.1193 (0.1984)	Prec@1 100.00000 (94.12117)	Prec@5 100.00000 (99.96408)
Epoch: [20][270/272]	 lr: 0.04000	Time 0.241 (0.455)	Data 0.128 (0.163)	Loss 0.1164 (0.1986)	Prec@1 96.87500 (94.13054)	Prec@5 100.00000 (99.96541)
validation at epoch 20
validation at epoch 20
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [20][1/60]	Time 7.06226 (7.06226)	Data 6.96353 (6.96353)	Loss 0.3231 (0.3231)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [20][2/60]	Time 0.13109 (3.59668)	Data 0.02389 (3.49371)	Loss 0.8431 (0.5831)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [20][3/60]	Time 0.18910 (2.46082)	Data 0.00056 (2.32932)	Loss 1.5902 (0.9188)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [20][4/60]	Time 0.16080 (1.88581)	Data 0.00686 (1.74871)	Loss 0.1634 (0.7299)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [20][5/60]	Time 0.19575 (1.54780)	Data 0.03990 (1.40695)	Loss 0.4303 (0.6700)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (97.50000)
Epoch: [20][6/60]	Time 0.26902 (1.33467)	Data 0.01723 (1.17533)	Loss 0.2055 (0.5926)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (97.91667)
Epoch: [20][7/60]	Time 0.19727 (1.17218)	Data 0.00055 (1.00750)	Loss 1.5830 (0.7341)	Prec@1 75.00000 (85.71429)	Prec@5 87.50000 (96.42857)
Epoch: [20][8/60]	Time 0.13719 (1.04281)	Data 0.01566 (0.88352)	Loss 0.7217 (0.7325)	Prec@1 75.00000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [20][9/60]	Time 0.09047 (0.93699)	Data 0.01583 (0.78711)	Loss 0.4887 (0.7054)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (97.22222)
Epoch: [20][10/60]	Time 0.21143 (0.86444)	Data 0.00692 (0.70909)	Loss 0.2774 (0.6626)	Prec@1 87.50000 (83.75000)	Prec@5 100.00000 (97.50000)
Epoch: [20][11/60]	Time 0.14251 (0.79881)	Data 0.00779 (0.64534)	Loss 0.7297 (0.6687)	Prec@1 75.00000 (82.95455)	Prec@5 100.00000 (97.72727)
Epoch: [20][12/60]	Time 0.10619 (0.74109)	Data 0.01238 (0.59259)	Loss 1.5978 (0.7462)	Prec@1 62.50000 (81.25000)	Prec@5 87.50000 (96.87500)
Epoch: [20][13/60]	Time 0.16339 (0.69665)	Data 0.06088 (0.55169)	Loss 2.4677 (0.8786)	Prec@1 50.00000 (78.84615)	Prec@5 87.50000 (96.15385)
Epoch: [20][14/60]	Time 0.24626 (0.66448)	Data 0.09078 (0.51877)	Loss 0.2608 (0.8345)	Prec@1 87.50000 (79.46429)	Prec@5 100.00000 (96.42857)
Epoch: [20][15/60]	Time 0.09886 (0.62677)	Data 0.00047 (0.48422)	Loss 0.9074 (0.8393)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (96.66667)
Epoch: [20][16/60]	Time 0.05655 (0.59113)	Data 0.00690 (0.45438)	Loss 0.9794 (0.8481)	Prec@1 87.50000 (79.68750)	Prec@5 100.00000 (96.87500)
Epoch: [20][17/60]	Time 0.07016 (0.56049)	Data 0.01585 (0.42859)	Loss 0.9426 (0.8536)	Prec@1 62.50000 (78.67647)	Prec@5 87.50000 (96.32353)
Epoch: [20][18/60]	Time 0.18644 (0.53971)	Data 0.00048 (0.40480)	Loss 1.6772 (0.8994)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (96.52778)
Epoch: [20][19/60]	Time 0.19902 (0.52178)	Data 0.04608 (0.38592)	Loss 0.0575 (0.8551)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (96.71053)
Epoch: [20][20/60]	Time 0.12341 (0.50186)	Data 0.01347 (0.36730)	Loss 1.7246 (0.8985)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (96.87500)
Epoch: [20][21/60]	Time 0.13766 (0.48452)	Data 0.01412 (0.35048)	Loss 1.3325 (0.9192)	Prec@1 62.50000 (77.97619)	Prec@5 87.50000 (96.42857)
Epoch: [20][22/60]	Time 0.22303 (0.47263)	Data 0.00799 (0.33491)	Loss 0.5271 (0.9014)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (96.59091)
Epoch: [20][23/60]	Time 0.06885 (0.45507)	Data 0.00422 (0.32054)	Loss 1.4192 (0.9239)	Prec@1 75.00000 (78.26087)	Prec@5 100.00000 (96.73914)
Epoch: [20][24/60]	Time 0.17052 (0.44322)	Data 0.00193 (0.30726)	Loss 1.3175 (0.9403)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [20][25/60]	Time 0.07434 (0.42846)	Data 0.01791 (0.29569)	Loss 0.7229 (0.9316)	Prec@1 87.50000 (78.50000)	Prec@5 87.50000 (96.50000)
Epoch: [20][26/60]	Time 0.11337 (0.41634)	Data 0.02447 (0.28526)	Loss 0.5424 (0.9166)	Prec@1 87.50000 (78.84615)	Prec@5 100.00000 (96.63462)
Epoch: [20][27/60]	Time 0.17020 (0.40723)	Data 0.03749 (0.27608)	Loss 0.9384 (0.9174)	Prec@1 75.00000 (78.70370)	Prec@5 100.00000 (96.75926)
Epoch: [20][28/60]	Time 0.13380 (0.39746)	Data 0.02238 (0.26702)	Loss 1.2534 (0.9294)	Prec@1 75.00000 (78.57143)	Prec@5 100.00000 (96.87501)
Epoch: [20][29/60]	Time 0.09351 (0.38698)	Data 0.00043 (0.25783)	Loss 0.9858 (0.9314)	Prec@1 62.50000 (78.01724)	Prec@5 100.00000 (96.98276)
Epoch: [20][30/60]	Time 0.09501 (0.37725)	Data 0.00046 (0.24925)	Loss 1.0593 (0.9357)	Prec@1 75.00000 (77.91667)	Prec@5 100.00000 (97.08334)
Epoch: [20][31/60]	Time 0.10112 (0.36834)	Data 0.00044 (0.24122)	Loss 2.9724 (1.0014)	Prec@1 37.50000 (76.61290)	Prec@5 87.50000 (96.77419)
Epoch: [20][32/60]	Time 0.08930 (0.35962)	Data 0.00043 (0.23370)	Loss 0.6535 (0.9905)	Prec@1 62.50000 (76.17188)	Prec@5 100.00000 (96.87500)
Epoch: [20][33/60]	Time 0.04951 (0.35022)	Data 0.00039 (0.22663)	Loss 0.3788 (0.9720)	Prec@1 87.50000 (76.51515)	Prec@5 100.00000 (96.96970)
Epoch: [20][34/60]	Time 0.03849 (0.34106)	Data 0.00322 (0.22006)	Loss 1.9042 (0.9994)	Prec@1 50.00000 (75.73530)	Prec@5 100.00000 (97.05882)
Epoch: [20][35/60]	Time 0.02521 (0.33203)	Data 0.00077 (0.21379)	Loss 2.0311 (1.0288)	Prec@1 62.50000 (75.35714)	Prec@5 87.50000 (96.78571)
Epoch: [20][36/60]	Time 0.03891 (0.32389)	Data 0.00374 (0.20796)	Loss 1.1191 (1.0314)	Prec@1 75.00000 (75.34722)	Prec@5 100.00000 (96.87500)
Epoch: [20][37/60]	Time 0.02840 (0.31590)	Data 0.00074 (0.20236)	Loss 2.2225 (1.0635)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (96.95947)
Epoch: [20][38/60]	Time 0.03391 (0.30848)	Data 0.00056 (0.19704)	Loss 2.8037 (1.1093)	Prec@1 50.00000 (74.34210)	Prec@5 100.00000 (97.03947)
Epoch: [20][39/60]	Time 0.02444 (0.30120)	Data 0.00051 (0.19201)	Loss 0.1214 (1.0840)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (97.11539)
Epoch: [20][40/60]	Time 0.02942 (0.29440)	Data 0.00182 (0.18725)	Loss 0.0965 (1.0593)	Prec@1 100.00000 (75.62500)	Prec@5 100.00000 (97.18750)
Epoch: [20][41/60]	Time 0.03057 (0.28797)	Data 0.00155 (0.18272)	Loss 0.5517 (1.0469)	Prec@1 75.00000 (75.60976)	Prec@5 100.00000 (97.25610)
Epoch: [20][42/60]	Time 0.02809 (0.28178)	Data 0.00039 (0.17838)	Loss 1.4636 (1.0569)	Prec@1 62.50000 (75.29762)	Prec@5 100.00000 (97.32143)
Epoch: [20][43/60]	Time 0.02813 (0.27588)	Data 0.00106 (0.17426)	Loss 0.5806 (1.0458)	Prec@1 75.00000 (75.29070)	Prec@5 100.00000 (97.38372)
Epoch: [20][44/60]	Time 0.02847 (0.27026)	Data 0.00131 (0.17033)	Loss 1.1590 (1.0484)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (97.44318)
Epoch: [20][45/60]	Time 0.03258 (0.26498)	Data 0.00473 (0.16665)	Loss 1.3682 (1.0555)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [20][46/60]	Time 0.02702 (0.25980)	Data 0.00085 (0.16304)	Loss 2.4549 (1.0859)	Prec@1 50.00000 (74.45652)	Prec@5 100.00000 (97.55435)
Epoch: [20][47/60]	Time 0.02274 (0.25476)	Data 0.00043 (0.15958)	Loss 1.6668 (1.0982)	Prec@1 75.00000 (74.46809)	Prec@5 87.50000 (97.34042)
Epoch: [20][48/60]	Time 0.02280 (0.24993)	Data 0.00042 (0.15627)	Loss 1.1039 (1.0984)	Prec@1 75.00000 (74.47917)	Prec@5 100.00000 (97.39584)
Epoch: [20][49/60]	Time 0.02304 (0.24530)	Data 0.00045 (0.15309)	Loss 2.0335 (1.1174)	Prec@1 62.50000 (74.23470)	Prec@5 100.00000 (97.44897)
Epoch: [20][50/60]	Time 0.02232 (0.24084)	Data 0.00042 (0.15003)	Loss 0.9748 (1.1146)	Prec@1 62.50000 (74.00000)	Prec@5 100.00000 (97.50000)
Epoch: [20][51/60]	Time 0.02335 (0.23657)	Data 0.00041 (0.14710)	Loss 0.5610 (1.1037)	Prec@1 75.00000 (74.01961)	Prec@5 100.00000 (97.54903)
Epoch: [20][52/60]	Time 0.02262 (0.23246)	Data 0.00054 (0.14428)	Loss 1.5974 (1.1132)	Prec@1 62.50000 (73.79808)	Prec@5 87.50000 (97.35577)
Epoch: [20][53/60]	Time 0.02311 (0.22851)	Data 0.00040 (0.14157)	Loss 1.4998 (1.1205)	Prec@1 62.50000 (73.58491)	Prec@5 100.00000 (97.40566)
Epoch: [20][54/60]	Time 0.02227 (0.22469)	Data 0.00041 (0.13895)	Loss 1.3160 (1.1241)	Prec@1 50.00000 (73.14815)	Prec@5 100.00000 (97.45370)
Epoch: [20][55/60]	Time 0.02247 (0.22101)	Data 0.00044 (0.13643)	Loss 1.6795 (1.1342)	Prec@1 75.00000 (73.18182)	Prec@5 87.50000 (97.27273)
Epoch: [20][56/60]	Time 0.02253 (0.21747)	Data 0.00052 (0.13401)	Loss 0.7403 (1.1272)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (97.32143)
Epoch: [20][57/60]	Time 0.02259 (0.21405)	Data 0.00043 (0.13166)	Loss 2.9539 (1.1593)	Prec@1 50.00000 (73.02631)	Prec@5 87.50000 (97.14912)
Epoch: [20][58/60]	Time 0.02358 (0.21077)	Data 0.00042 (0.12940)	Loss 1.4660 (1.1645)	Prec@1 75.00000 (73.06034)	Prec@5 100.00000 (97.19827)
Epoch: [20][59/60]	Time 0.02229 (0.20757)	Data 0.00043 (0.12721)	Loss 0.9598 (1.1611)	Prec@1 62.50000 (72.88136)	Prec@5 100.00000 (97.24577)
Epoch: [20][60/60]	Time 0.02252 (0.20449)	Data 0.00051 (0.12510)	Loss 0.4066 (1.1485)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (97.29167)
train at epoch 21
train at epoch 21
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [21][0/272]	 lr: 0.04000	Time 9.508 (9.508)	Data 8.744 (8.744)	Loss 0.3003 (0.3003)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [21][10/272]	 lr: 0.04000	Time 0.292 (1.334)	Data 0.127 (0.916)	Loss 0.2015 (0.2184)	Prec@1 93.75000 (94.88637)	Prec@5 100.00000 (100.00000)
Epoch: [21][20/272]	 lr: 0.04000	Time 0.498 (0.907)	Data 0.129 (0.542)	Loss 0.0957 (0.1898)	Prec@1 96.87500 (95.38691)	Prec@5 100.00000 (99.85119)
Epoch: [21][30/272]	 lr: 0.04000	Time 0.423 (0.751)	Data 0.128 (0.408)	Loss 0.0435 (0.1798)	Prec@1 100.00000 (95.16129)	Prec@5 100.00000 (99.89919)
Epoch: [21][40/272]	 lr: 0.04000	Time 0.448 (0.677)	Data 0.142 (0.339)	Loss 0.1442 (0.1879)	Prec@1 96.87500 (94.35975)	Prec@5 100.00000 (99.84756)
Epoch: [21][50/272]	 lr: 0.04000	Time 0.328 (0.633)	Data 0.128 (0.298)	Loss 0.2066 (0.1992)	Prec@1 93.75000 (93.81128)	Prec@5 100.00000 (99.81618)
Epoch: [21][60/272]	 lr: 0.04000	Time 0.426 (0.603)	Data 0.141 (0.270)	Loss 0.2927 (0.1995)	Prec@1 90.62500 (93.74999)	Prec@5 100.00000 (99.84631)
Epoch: [21][70/272]	 lr: 0.04000	Time 0.406 (0.578)	Data 0.128 (0.250)	Loss 0.1831 (0.2032)	Prec@1 96.87500 (93.79401)	Prec@5 100.00000 (99.86796)
Epoch: [21][80/272]	 lr: 0.04000	Time 0.508 (0.563)	Data 0.127 (0.236)	Loss 0.0937 (0.2071)	Prec@1 96.87500 (93.67284)	Prec@5 100.00000 (99.88426)
Epoch: [21][90/272]	 lr: 0.04000	Time 0.297 (0.547)	Data 0.128 (0.224)	Loss 0.1125 (0.2134)	Prec@1 100.00000 (93.26923)	Prec@5 100.00000 (99.89698)
Epoch: [21][100/272]	 lr: 0.04000	Time 0.502 (0.539)	Data 0.137 (0.214)	Loss 0.2043 (0.2171)	Prec@1 93.75000 (93.03837)	Prec@5 100.00000 (99.90717)
Epoch: [21][110/272]	 lr: 0.04000	Time 0.317 (0.527)	Data 0.127 (0.206)	Loss 0.0670 (0.2138)	Prec@1 100.00000 (93.04617)	Prec@5 100.00000 (99.91554)
Epoch: [21][120/272]	 lr: 0.04000	Time 0.430 (0.520)	Data 0.130 (0.200)	Loss 0.0369 (0.2107)	Prec@1 100.00000 (93.28512)	Prec@5 100.00000 (99.89669)
Epoch: [21][130/272]	 lr: 0.04000	Time 0.368 (0.516)	Data 0.127 (0.195)	Loss 0.1672 (0.2126)	Prec@1 96.87500 (93.17748)	Prec@5 100.00000 (99.90458)
Epoch: [21][140/272]	 lr: 0.04000	Time 0.417 (0.509)	Data 0.129 (0.190)	Loss 0.1529 (0.2095)	Prec@1 96.87500 (93.32890)	Prec@5 100.00000 (99.91135)
Epoch: [21][150/272]	 lr: 0.04000	Time 0.412 (0.506)	Data 0.129 (0.186)	Loss 0.0876 (0.2079)	Prec@1 96.87500 (93.35679)	Prec@5 100.00000 (99.91722)
Epoch: [21][160/272]	 lr: 0.04000	Time 0.392 (0.502)	Data 0.120 (0.182)	Loss 0.4056 (0.2061)	Prec@1 87.50000 (93.34239)	Prec@5 100.00000 (99.90295)
Epoch: [21][170/272]	 lr: 0.04000	Time 0.436 (0.497)	Data 0.127 (0.179)	Loss 0.1295 (0.2030)	Prec@1 100.00000 (93.47588)	Prec@5 100.00000 (99.90862)
Epoch: [21][180/272]	 lr: 0.04000	Time 0.370 (0.494)	Data 0.122 (0.176)	Loss 0.2463 (0.2045)	Prec@1 93.75000 (93.50829)	Prec@5 100.00000 (99.91368)
Epoch: [21][190/272]	 lr: 0.04000	Time 0.516 (0.492)	Data 0.141 (0.174)	Loss 0.0679 (0.2023)	Prec@1 100.00000 (93.66820)	Prec@5 100.00000 (99.91820)
Epoch: [21][200/272]	 lr: 0.04000	Time 0.420 (0.490)	Data 0.122 (0.172)	Loss 0.0754 (0.1981)	Prec@1 100.00000 (93.84328)	Prec@5 100.00000 (99.92226)
Epoch: [21][210/272]	 lr: 0.04000	Time 0.466 (0.488)	Data 0.155 (0.170)	Loss 0.2611 (0.1954)	Prec@1 84.37500 (93.89811)	Prec@5 100.00000 (99.92595)
Epoch: [21][220/272]	 lr: 0.04000	Time 0.527 (0.486)	Data 0.141 (0.168)	Loss 0.2800 (0.1953)	Prec@1 87.50000 (93.86313)	Prec@5 100.00000 (99.92931)
Epoch: [21][230/272]	 lr: 0.04000	Time 0.509 (0.484)	Data 0.125 (0.167)	Loss 0.1435 (0.1946)	Prec@1 96.87500 (93.83117)	Prec@5 100.00000 (99.93236)
Epoch: [21][240/272]	 lr: 0.04000	Time 0.390 (0.481)	Data 0.126 (0.165)	Loss 0.1448 (0.1932)	Prec@1 96.87500 (93.87967)	Prec@5 100.00000 (99.93517)
Epoch: [21][250/272]	 lr: 0.04000	Time 0.241 (0.471)	Data 0.128 (0.163)	Loss 0.5120 (0.1915)	Prec@1 78.12500 (93.92431)	Prec@5 100.00000 (99.93775)
Epoch: [21][260/272]	 lr: 0.04000	Time 0.238 (0.462)	Data 0.129 (0.162)	Loss 0.2008 (0.1917)	Prec@1 96.87500 (93.95354)	Prec@5 100.00000 (99.94013)
Epoch: [21][270/272]	 lr: 0.04000	Time 0.241 (0.454)	Data 0.129 (0.161)	Loss 0.0813 (0.1922)	Prec@1 100.00000 (93.89991)	Prec@5 100.00000 (99.94234)
validation at epoch 21
validation at epoch 21
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [21][1/60]	Time 3.44347 (3.44347)	Data 3.36099 (3.36099)	Loss 0.4263 (0.4263)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [21][2/60]	Time 3.43122 (3.43734)	Data 3.30442 (3.33271)	Loss 0.6934 (0.5599)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [21][3/60]	Time 0.09049 (2.32173)	Data 0.03053 (2.23198)	Loss 1.3725 (0.8307)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [21][4/60]	Time 0.09958 (1.76619)	Data 0.03053 (1.68162)	Loss 1.2490 (0.9353)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (96.87500)
Epoch: [21][5/60]	Time 0.34578 (1.48211)	Data 0.22956 (1.39121)	Loss 1.3824 (1.0247)	Prec@1 62.50000 (70.00000)	Prec@5 100.00000 (97.50000)
Epoch: [21][6/60]	Time 0.28035 (1.28181)	Data 0.10439 (1.17674)	Loss 1.5022 (1.1043)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (97.91667)
Epoch: [21][7/60]	Time 0.14388 (1.11925)	Data 0.00089 (1.00876)	Loss 0.9242 (1.0786)	Prec@1 75.00000 (69.64286)	Prec@5 100.00000 (98.21429)
Epoch: [21][8/60]	Time 0.15284 (0.99845)	Data 0.01600 (0.88466)	Loss 0.5473 (1.0122)	Prec@1 75.00000 (70.31250)	Prec@5 100.00000 (98.43750)
Epoch: [21][9/60]	Time 0.20071 (0.90981)	Data 0.03810 (0.79060)	Loss 1.4047 (1.0558)	Prec@1 62.50000 (69.44444)	Prec@5 100.00000 (98.61111)
Epoch: [21][10/60]	Time 0.09360 (0.82819)	Data 0.00924 (0.71247)	Loss 0.1226 (0.9625)	Prec@1 100.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [21][11/60]	Time 0.15675 (0.76715)	Data 0.02590 (0.65005)	Loss 0.2522 (0.8979)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [21][12/60]	Time 0.16328 (0.71683)	Data 0.01204 (0.59688)	Loss 1.5167 (0.9495)	Prec@1 62.50000 (72.91667)	Prec@5 75.00000 (96.87500)
Epoch: [21][13/60]	Time 0.37731 (0.69071)	Data 0.32319 (0.57583)	Loss 2.3222 (1.0551)	Prec@1 25.00000 (69.23077)	Prec@5 87.50000 (96.15385)
Epoch: [21][14/60]	Time 0.04315 (0.64446)	Data 0.01334 (0.53565)	Loss 0.6889 (1.0289)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (96.42857)
Epoch: [21][15/60]	Time 0.10302 (0.60836)	Data 0.00078 (0.49999)	Loss 0.9344 (1.0226)	Prec@1 75.00000 (69.16667)	Prec@5 100.00000 (96.66667)
Epoch: [21][16/60]	Time 0.08594 (0.57571)	Data 0.01323 (0.46957)	Loss 1.7235 (1.0664)	Prec@1 50.00000 (67.96875)	Prec@5 100.00000 (96.87500)
Epoch: [21][17/60]	Time 0.08886 (0.54707)	Data 0.01020 (0.44255)	Loss 1.0050 (1.0628)	Prec@1 62.50000 (67.64706)	Prec@5 100.00000 (97.05882)
Epoch: [21][18/60]	Time 0.20526 (0.52808)	Data 0.11332 (0.42426)	Loss 2.1684 (1.1242)	Prec@1 75.00000 (68.05556)	Prec@5 100.00000 (97.22222)
Epoch: [21][19/60]	Time 0.22603 (0.51218)	Data 0.03382 (0.40371)	Loss 0.2002 (1.0756)	Prec@1 87.50000 (69.07895)	Prec@5 100.00000 (97.36842)
Epoch: [21][20/60]	Time 0.09808 (0.49148)	Data 0.01913 (0.38448)	Loss 2.6462 (1.1541)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (97.50000)
Epoch: [21][21/60]	Time 0.07573 (0.47168)	Data 0.01699 (0.36698)	Loss 1.6660 (1.1785)	Prec@1 62.50000 (68.45238)	Prec@5 100.00000 (97.61905)
Epoch: [21][22/60]	Time 0.02739 (0.45149)	Data 0.00062 (0.35033)	Loss 0.9737 (1.1692)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (97.72727)
Epoch: [21][23/60]	Time 0.15684 (0.43868)	Data 0.00730 (0.33541)	Loss 1.8181 (1.1974)	Prec@1 50.00000 (67.93478)	Prec@5 100.00000 (97.82609)
Epoch: [21][24/60]	Time 0.36503 (0.43561)	Data 0.00815 (0.32178)	Loss 1.4369 (1.2074)	Prec@1 37.50000 (66.66667)	Prec@5 100.00000 (97.91667)
Epoch: [21][25/60]	Time 0.13330 (0.42352)	Data 0.00097 (0.30895)	Loss 0.9943 (1.1989)	Prec@1 62.50000 (66.50000)	Prec@5 100.00000 (98.00000)
Epoch: [21][26/60]	Time 0.06796 (0.40984)	Data 0.01557 (0.29766)	Loss 0.3729 (1.1671)	Prec@1 87.50000 (67.30769)	Prec@5 100.00000 (98.07693)
Epoch: [21][27/60]	Time 0.11609 (0.39896)	Data 0.00101 (0.28667)	Loss 1.6191 (1.1838)	Prec@1 62.50000 (67.12963)	Prec@5 100.00000 (98.14815)
Epoch: [21][28/60]	Time 0.13909 (0.38968)	Data 0.02812 (0.27744)	Loss 0.9425 (1.1752)	Prec@1 87.50000 (67.85715)	Prec@5 100.00000 (98.21429)
Epoch: [21][29/60]	Time 0.13524 (0.38091)	Data 0.00667 (0.26810)	Loss 1.0850 (1.1721)	Prec@1 62.50000 (67.67242)	Prec@5 100.00000 (98.27586)
Epoch: [21][30/60]	Time 0.11172 (0.37193)	Data 0.00043 (0.25918)	Loss 1.3676 (1.1786)	Prec@1 75.00000 (67.91667)	Prec@5 100.00000 (98.33334)
Epoch: [21][31/60]	Time 0.09177 (0.36289)	Data 0.00045 (0.25083)	Loss 2.2625 (1.2136)	Prec@1 50.00000 (67.33871)	Prec@5 100.00000 (98.38709)
Epoch: [21][32/60]	Time 0.02803 (0.35243)	Data 0.00078 (0.24302)	Loss 1.2872 (1.2159)	Prec@1 62.50000 (67.18750)	Prec@5 100.00000 (98.43750)
Epoch: [21][33/60]	Time 0.02855 (0.34262)	Data 0.00078 (0.23568)	Loss 0.3213 (1.1888)	Prec@1 87.50000 (67.80303)	Prec@5 100.00000 (98.48485)
Epoch: [21][34/60]	Time 0.02979 (0.33342)	Data 0.00062 (0.22877)	Loss 1.9186 (1.2102)	Prec@1 37.50000 (66.91177)	Prec@5 100.00000 (98.52941)
Epoch: [21][35/60]	Time 0.02650 (0.32465)	Data 0.00045 (0.22224)	Loss 1.1574 (1.2087)	Prec@1 87.50000 (67.50000)	Prec@5 100.00000 (98.57143)
Epoch: [21][36/60]	Time 0.02996 (0.31646)	Data 0.00294 (0.21615)	Loss 1.0866 (1.2053)	Prec@1 75.00000 (67.70834)	Prec@5 100.00000 (98.61111)
Epoch: [21][37/60]	Time 0.03282 (0.30879)	Data 0.00477 (0.21044)	Loss 1.4818 (1.2128)	Prec@1 62.50000 (67.56757)	Prec@5 100.00000 (98.64865)
Epoch: [21][38/60]	Time 0.03724 (0.30165)	Data 0.00387 (0.20500)	Loss 2.1348 (1.2371)	Prec@1 50.00000 (67.10526)	Prec@5 100.00000 (98.68421)
Epoch: [21][39/60]	Time 0.03647 (0.29485)	Data 0.00044 (0.19976)	Loss 0.0379 (1.2063)	Prec@1 100.00000 (67.94872)	Prec@5 100.00000 (98.71795)
Epoch: [21][40/60]	Time 0.02897 (0.28820)	Data 0.00046 (0.19477)	Loss 0.0596 (1.1777)	Prec@1 100.00000 (68.75000)	Prec@5 100.00000 (98.75000)
Epoch: [21][41/60]	Time 0.02929 (0.28189)	Data 0.00054 (0.19004)	Loss 1.2657 (1.1798)	Prec@1 75.00000 (68.90244)	Prec@5 100.00000 (98.78049)
Epoch: [21][42/60]	Time 0.02780 (0.27584)	Data 0.00061 (0.18553)	Loss 1.0931 (1.1777)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (98.80952)
Epoch: [21][43/60]	Time 0.02329 (0.26996)	Data 0.00043 (0.18122)	Loss 0.9282 (1.1719)	Prec@1 75.00000 (68.89535)	Prec@5 100.00000 (98.83721)
Epoch: [21][44/60]	Time 0.02750 (0.26445)	Data 0.00474 (0.17721)	Loss 1.2555 (1.1738)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (98.86364)
Epoch: [21][45/60]	Time 0.02333 (0.25910)	Data 0.00048 (0.17328)	Loss 0.8820 (1.1674)	Prec@1 87.50000 (69.16667)	Prec@5 100.00000 (98.88889)
Epoch: [21][46/60]	Time 0.02320 (0.25397)	Data 0.00051 (0.16953)	Loss 0.4201 (1.1511)	Prec@1 87.50000 (69.56522)	Prec@5 100.00000 (98.91305)
Epoch: [21][47/60]	Time 0.02387 (0.24907)	Data 0.00049 (0.16593)	Loss 1.7800 (1.1645)	Prec@1 75.00000 (69.68085)	Prec@5 87.50000 (98.67021)
Epoch: [21][48/60]	Time 0.02302 (0.24436)	Data 0.00049 (0.16248)	Loss 1.8274 (1.1783)	Prec@1 62.50000 (69.53125)	Prec@5 87.50000 (98.43750)
Epoch: [21][49/60]	Time 0.02268 (0.23984)	Data 0.00050 (0.15918)	Loss 0.3561 (1.1615)	Prec@1 87.50000 (69.89796)	Prec@5 100.00000 (98.46938)
Epoch: [21][50/60]	Time 0.02309 (0.23550)	Data 0.00047 (0.15600)	Loss 2.2525 (1.1833)	Prec@1 62.50000 (69.75000)	Prec@5 87.50000 (98.25000)
Epoch: [21][51/60]	Time 0.02306 (0.23134)	Data 0.00054 (0.15296)	Loss 0.5228 (1.1704)	Prec@1 75.00000 (69.85294)	Prec@5 100.00000 (98.28432)
Epoch: [21][52/60]	Time 0.02274 (0.22733)	Data 0.00045 (0.15002)	Loss 2.5482 (1.1969)	Prec@1 37.50000 (69.23077)	Prec@5 75.00000 (97.83654)
Epoch: [21][53/60]	Time 0.02272 (0.22347)	Data 0.00050 (0.14720)	Loss 1.7868 (1.2080)	Prec@1 75.00000 (69.33962)	Prec@5 87.50000 (97.64151)
Epoch: [21][54/60]	Time 0.02338 (0.21976)	Data 0.00046 (0.14448)	Loss 1.2355 (1.2085)	Prec@1 75.00000 (69.44444)	Prec@5 100.00000 (97.68519)
Epoch: [21][55/60]	Time 0.02341 (0.21619)	Data 0.00052 (0.14187)	Loss 2.0148 (1.2232)	Prec@1 75.00000 (69.54546)	Prec@5 87.50000 (97.50000)
Epoch: [21][56/60]	Time 0.02305 (0.21274)	Data 0.00062 (0.13935)	Loss 0.5664 (1.2115)	Prec@1 75.00000 (69.64286)	Prec@5 100.00000 (97.54465)
Epoch: [21][57/60]	Time 0.02255 (0.20940)	Data 0.00051 (0.13691)	Loss 1.9414 (1.2243)	Prec@1 62.50000 (69.51755)	Prec@5 87.50000 (97.36842)
Epoch: [21][58/60]	Time 0.02371 (0.20620)	Data 0.00047 (0.13456)	Loss 0.6431 (1.2142)	Prec@1 75.00000 (69.61207)	Prec@5 100.00000 (97.41380)
Epoch: [21][59/60]	Time 0.02271 (0.20309)	Data 0.00059 (0.13229)	Loss 1.4553 (1.2183)	Prec@1 75.00000 (69.70339)	Prec@5 100.00000 (97.45763)
Epoch: [21][60/60]	Time 0.02364 (0.20010)	Data 0.00056 (0.13009)	Loss 0.9027 (1.2131)	Prec@1 75.00000 (69.79167)	Prec@5 100.00000 (97.50001)
train at epoch 22
train at epoch 22
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [22][0/272]	 lr: 0.04000	Time 7.557 (7.557)	Data 5.881 (5.881)	Loss 0.1501 (0.1501)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [22][10/272]	 lr: 0.04000	Time 0.297 (1.302)	Data 0.121 (0.708)	Loss 0.2595 (0.1635)	Prec@1 90.62500 (94.31818)	Prec@5 100.00000 (100.00000)
Epoch: [22][20/272]	 lr: 0.04000	Time 0.395 (0.882)	Data 0.127 (0.432)	Loss 0.0972 (0.1584)	Prec@1 96.87500 (95.38691)	Prec@5 100.00000 (100.00000)
Epoch: [22][30/272]	 lr: 0.04000	Time 0.475 (0.748)	Data 0.105 (0.333)	Loss 0.2439 (0.1787)	Prec@1 90.62500 (94.45564)	Prec@5 100.00000 (100.00000)
Epoch: [22][40/272]	 lr: 0.04000	Time 0.387 (0.673)	Data 0.129 (0.283)	Loss 0.1571 (0.1735)	Prec@1 93.75000 (94.58841)	Prec@5 100.00000 (100.00000)
Epoch: [22][50/272]	 lr: 0.04000	Time 0.357 (0.633)	Data 0.108 (0.252)	Loss 0.0607 (0.1663)	Prec@1 100.00000 (95.03677)	Prec@5 100.00000 (100.00000)
Epoch: [22][60/272]	 lr: 0.04000	Time 0.463 (0.604)	Data 0.111 (0.231)	Loss 0.0503 (0.1648)	Prec@1 100.00000 (95.03073)	Prec@5 100.00000 (99.99999)
Epoch: [22][70/272]	 lr: 0.04000	Time 0.501 (0.581)	Data 0.122 (0.216)	Loss 0.1186 (0.1614)	Prec@1 93.75000 (95.02641)	Prec@5 100.00000 (100.00000)
Epoch: [22][80/272]	 lr: 0.04000	Time 0.340 (0.564)	Data 0.102 (0.205)	Loss 0.2729 (0.1614)	Prec@1 96.87500 (95.10031)	Prec@5 100.00000 (100.00000)
Epoch: [22][90/272]	 lr: 0.04000	Time 0.468 (0.551)	Data 0.137 (0.196)	Loss 0.0344 (0.1637)	Prec@1 100.00000 (94.84890)	Prec@5 100.00000 (100.00000)
Epoch: [22][100/272]	 lr: 0.04000	Time 0.452 (0.542)	Data 0.126 (0.190)	Loss 0.2285 (0.1661)	Prec@1 93.75000 (94.55445)	Prec@5 100.00000 (100.00000)
Epoch: [22][110/272]	 lr: 0.04000	Time 0.468 (0.533)	Data 0.138 (0.184)	Loss 0.3365 (0.1672)	Prec@1 84.37500 (94.59460)	Prec@5 100.00000 (100.00000)
Epoch: [22][120/272]	 lr: 0.04000	Time 0.431 (0.525)	Data 0.125 (0.179)	Loss 0.2871 (0.1770)	Prec@1 90.62500 (94.36983)	Prec@5 100.00000 (99.99999)
Epoch: [22][130/272]	 lr: 0.04000	Time 0.498 (0.518)	Data 0.136 (0.176)	Loss 0.0958 (0.1765)	Prec@1 96.87500 (94.46565)	Prec@5 100.00000 (100.00000)
Epoch: [22][140/272]	 lr: 0.04000	Time 0.375 (0.513)	Data 0.115 (0.172)	Loss 0.3519 (0.1773)	Prec@1 93.75000 (94.43706)	Prec@5 100.00000 (100.00000)
Epoch: [22][150/272]	 lr: 0.04000	Time 0.470 (0.511)	Data 0.111 (0.169)	Loss 0.2066 (0.1841)	Prec@1 90.62500 (94.12251)	Prec@5 100.00000 (99.97930)
Epoch: [22][160/272]	 lr: 0.04000	Time 0.502 (0.507)	Data 0.132 (0.166)	Loss 0.1454 (0.1893)	Prec@1 96.87500 (93.92469)	Prec@5 96.87500 (99.96118)
Epoch: [22][170/272]	 lr: 0.04000	Time 0.403 (0.503)	Data 0.117 (0.164)	Loss 0.4992 (0.1956)	Prec@1 87.50000 (93.75000)	Prec@5 100.00000 (99.96345)
Epoch: [22][180/272]	 lr: 0.04000	Time 0.422 (0.499)	Data 0.124 (0.162)	Loss 0.2283 (0.1956)	Prec@1 87.50000 (93.69821)	Prec@5 100.00000 (99.96548)
Epoch: [22][190/272]	 lr: 0.04000	Time 0.568 (0.496)	Data 0.126 (0.160)	Loss 0.1505 (0.1979)	Prec@1 96.87500 (93.57003)	Prec@5 100.00000 (99.96728)
Epoch: [22][200/272]	 lr: 0.04000	Time 0.391 (0.493)	Data 0.109 (0.159)	Loss 0.2197 (0.1979)	Prec@1 93.75000 (93.61007)	Prec@5 100.00000 (99.96890)
Epoch: [22][210/272]	 lr: 0.04000	Time 0.419 (0.491)	Data 0.117 (0.157)	Loss 0.1271 (0.1989)	Prec@1 96.87500 (93.57228)	Prec@5 100.00000 (99.97038)
Epoch: [22][220/272]	 lr: 0.04000	Time 0.391 (0.489)	Data 0.149 (0.156)	Loss 0.1322 (0.2011)	Prec@1 96.87500 (93.49548)	Prec@5 100.00000 (99.95758)
Epoch: [22][230/272]	 lr: 0.04000	Time 0.446 (0.487)	Data 0.115 (0.155)	Loss 0.0785 (0.1991)	Prec@1 100.00000 (93.62825)	Prec@5 100.00000 (99.95942)
Epoch: [22][240/272]	 lr: 0.04000	Time 0.255 (0.484)	Data 0.127 (0.153)	Loss 0.0763 (0.1978)	Prec@1 96.87500 (93.69814)	Prec@5 100.00000 (99.96111)
Epoch: [22][250/272]	 lr: 0.04000	Time 0.246 (0.474)	Data 0.129 (0.152)	Loss 0.0458 (0.1948)	Prec@1 100.00000 (93.79980)	Prec@5 100.00000 (99.96265)
Epoch: [22][260/272]	 lr: 0.04000	Time 0.239 (0.465)	Data 0.128 (0.151)	Loss 0.2776 (0.1925)	Prec@1 84.37500 (93.89368)	Prec@5 100.00000 (99.96408)
Epoch: [22][270/272]	 lr: 0.04000	Time 0.239 (0.457)	Data 0.128 (0.150)	Loss 0.0846 (0.1901)	Prec@1 100.00000 (93.98063)	Prec@5 100.00000 (99.96541)
validation at epoch 22
validation at epoch 22
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [22][1/60]	Time 7.71849 (7.71849)	Data 7.67948 (7.67948)	Loss 0.4380 (0.4380)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [22][2/60]	Time 0.03823 (3.87836)	Data 0.00064 (3.84006)	Loss 0.2581 (0.3480)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [22][3/60]	Time 0.09038 (2.61570)	Data 0.00468 (2.56160)	Loss 1.2928 (0.6630)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [22][4/60]	Time 0.11100 (1.98953)	Data 0.00071 (1.92138)	Loss 0.1936 (0.5456)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [22][5/60]	Time 0.07414 (1.60645)	Data 0.01892 (1.54089)	Loss 0.3148 (0.4995)	Prec@1 75.00000 (82.50000)	Prec@5 100.00000 (97.50000)
Epoch: [22][6/60]	Time 0.09139 (1.35394)	Data 0.03841 (1.29047)	Loss 0.5277 (0.5042)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (97.91667)
Epoch: [22][7/60]	Time 0.17334 (1.18528)	Data 0.04421 (1.11244)	Loss 0.1762 (0.4573)	Prec@1 87.50000 (82.14286)	Prec@5 100.00000 (98.21429)
Epoch: [22][8/60]	Time 0.12961 (1.05332)	Data 0.01450 (0.97519)	Loss 0.5382 (0.4674)	Prec@1 87.50000 (82.81250)	Prec@5 100.00000 (98.43750)
Epoch: [22][9/60]	Time 0.21622 (0.96031)	Data 0.00439 (0.86733)	Loss 0.3145 (0.4504)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (98.61111)
Epoch: [22][10/60]	Time 0.17580 (0.88186)	Data 0.02158 (0.78275)	Loss 0.0426 (0.4096)	Prec@1 100.00000 (85.00000)	Prec@5 100.00000 (98.75000)
Epoch: [22][11/60]	Time 0.10948 (0.81164)	Data 0.01476 (0.71293)	Loss 0.4807 (0.4161)	Prec@1 87.50000 (85.22727)	Prec@5 100.00000 (98.86364)
Epoch: [22][12/60]	Time 0.09715 (0.75210)	Data 0.00627 (0.65405)	Loss 0.0989 (0.3897)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (98.95834)
Epoch: [22][13/60]	Time 0.27555 (0.71544)	Data 0.06837 (0.60899)	Loss 1.9448 (0.5093)	Prec@1 50.00000 (82.69231)	Prec@5 87.50000 (98.07693)
Epoch: [22][14/60]	Time 0.16638 (0.67623)	Data 0.03303 (0.56785)	Loss 0.1930 (0.4867)	Prec@1 87.50000 (83.03572)	Prec@5 100.00000 (98.21429)
Epoch: [22][15/60]	Time 0.09132 (0.63723)	Data 0.02584 (0.53172)	Loss 0.0689 (0.4588)	Prec@1 100.00000 (84.16667)	Prec@5 100.00000 (98.33334)
Epoch: [22][16/60]	Time 0.15200 (0.60691)	Data 0.04352 (0.50121)	Loss 2.3265 (0.5756)	Prec@1 37.50000 (81.25000)	Prec@5 100.00000 (98.43750)
Epoch: [22][17/60]	Time 0.10757 (0.57753)	Data 0.00055 (0.47176)	Loss 0.8512 (0.5918)	Prec@1 87.50000 (81.61765)	Prec@5 100.00000 (98.52941)
Epoch: [22][18/60]	Time 0.13417 (0.55290)	Data 0.00233 (0.44568)	Loss 2.5553 (0.7009)	Prec@1 50.00000 (79.86111)	Prec@5 100.00000 (98.61111)
Epoch: [22][19/60]	Time 0.15778 (0.53211)	Data 0.00137 (0.42229)	Loss 0.5745 (0.6942)	Prec@1 75.00000 (79.60526)	Prec@5 100.00000 (98.68421)
Epoch: [22][20/60]	Time 0.23597 (0.51730)	Data 0.08361 (0.40536)	Loss 2.6759 (0.7933)	Prec@1 62.50000 (78.75000)	Prec@5 100.00000 (98.75000)
Epoch: [22][21/60]	Time 0.16872 (0.50070)	Data 0.02826 (0.38740)	Loss 1.5670 (0.8301)	Prec@1 62.50000 (77.97619)	Prec@5 100.00000 (98.80952)
Epoch: [22][22/60]	Time 0.05238 (0.48032)	Data 0.01051 (0.37027)	Loss 1.1746 (0.8458)	Prec@1 62.50000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [22][23/60]	Time 0.12106 (0.46470)	Data 0.00810 (0.35452)	Loss 1.4382 (0.8716)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (98.91305)
Epoch: [22][24/60]	Time 0.09518 (0.44930)	Data 0.00482 (0.33995)	Loss 1.8054 (0.9105)	Prec@1 50.00000 (75.52084)	Prec@5 87.50000 (98.43750)
Epoch: [22][25/60]	Time 0.09031 (0.43494)	Data 0.00490 (0.32655)	Loss 1.2144 (0.9226)	Prec@1 75.00000 (75.50000)	Prec@5 100.00000 (98.50000)
Epoch: [22][26/60]	Time 0.13749 (0.42350)	Data 0.03024 (0.31515)	Loss 0.3384 (0.9002)	Prec@1 75.00000 (75.48077)	Prec@5 100.00000 (98.55769)
Epoch: [22][27/60]	Time 0.18573 (0.41470)	Data 0.03488 (0.30477)	Loss 1.8782 (0.9364)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (98.61111)
Epoch: [22][28/60]	Time 0.12141 (0.40422)	Data 0.00455 (0.29405)	Loss 0.4014 (0.9173)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.66072)
Epoch: [22][29/60]	Time 0.12446 (0.39458)	Data 0.00075 (0.28394)	Loss 0.5183 (0.9035)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.70689)
Epoch: [22][30/60]	Time 0.08562 (0.38428)	Data 0.00049 (0.27449)	Loss 1.4983 (0.9233)	Prec@1 62.50000 (74.58334)	Prec@5 87.50000 (98.33334)
Epoch: [22][31/60]	Time 0.07555 (0.37432)	Data 0.00056 (0.26565)	Loss 2.1317 (0.9623)	Prec@1 62.50000 (74.19354)	Prec@5 87.50000 (97.98387)
Epoch: [22][32/60]	Time 0.07558 (0.36498)	Data 0.00042 (0.25736)	Loss 0.5820 (0.9504)	Prec@1 62.50000 (73.82812)	Prec@5 100.00000 (98.04688)
Epoch: [22][33/60]	Time 0.03620 (0.35502)	Data 0.00048 (0.24958)	Loss 0.0231 (0.9223)	Prec@1 100.00000 (74.62122)	Prec@5 100.00000 (98.10606)
Epoch: [22][34/60]	Time 0.02368 (0.34528)	Data 0.00045 (0.24225)	Loss 1.2232 (0.9312)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (98.16177)
Epoch: [22][35/60]	Time 0.02255 (0.33605)	Data 0.00057 (0.23535)	Loss 1.5556 (0.9490)	Prec@1 87.50000 (74.64286)	Prec@5 87.50000 (97.85715)
Epoch: [22][36/60]	Time 0.02337 (0.32737)	Data 0.00093 (0.22884)	Loss 0.5871 (0.9390)	Prec@1 75.00000 (74.65278)	Prec@5 100.00000 (97.91666)
Epoch: [22][37/60]	Time 0.02485 (0.31919)	Data 0.00078 (0.22267)	Loss 1.5144 (0.9545)	Prec@1 62.50000 (74.32433)	Prec@5 87.50000 (97.63514)
Epoch: [22][38/60]	Time 0.02240 (0.31138)	Data 0.00058 (0.21683)	Loss 2.2478 (0.9886)	Prec@1 62.50000 (74.01316)	Prec@5 100.00000 (97.69737)
Epoch: [22][39/60]	Time 0.02250 (0.30398)	Data 0.00087 (0.21129)	Loss 0.0297 (0.9640)	Prec@1 100.00000 (74.67949)	Prec@5 100.00000 (97.75641)
Epoch: [22][40/60]	Time 0.02253 (0.29694)	Data 0.00103 (0.20603)	Loss 0.0861 (0.9420)	Prec@1 100.00000 (75.31250)	Prec@5 100.00000 (97.81250)
Epoch: [22][41/60]	Time 0.02298 (0.29026)	Data 0.00041 (0.20102)	Loss 0.4598 (0.9303)	Prec@1 75.00000 (75.30488)	Prec@5 100.00000 (97.86585)
Epoch: [22][42/60]	Time 0.02228 (0.28388)	Data 0.00049 (0.19624)	Loss 1.1571 (0.9357)	Prec@1 75.00000 (75.29762)	Prec@5 100.00000 (97.91667)
Epoch: [22][43/60]	Time 0.02280 (0.27780)	Data 0.00044 (0.19169)	Loss 0.5890 (0.9276)	Prec@1 75.00000 (75.29070)	Prec@5 100.00000 (97.96512)
Epoch: [22][44/60]	Time 0.02234 (0.27200)	Data 0.00047 (0.18734)	Loss 0.6058 (0.9203)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.01137)
Epoch: [22][45/60]	Time 0.02206 (0.26644)	Data 0.00046 (0.18319)	Loss 0.9473 (0.9209)	Prec@1 87.50000 (75.27778)	Prec@5 87.50000 (97.77778)
Epoch: [22][46/60]	Time 0.02273 (0.26115)	Data 0.00043 (0.17922)	Loss 0.6509 (0.9150)	Prec@1 75.00000 (75.27174)	Prec@5 100.00000 (97.82609)
Epoch: [22][47/60]	Time 0.02258 (0.25607)	Data 0.00047 (0.17542)	Loss 1.7623 (0.9330)	Prec@1 87.50000 (75.53191)	Prec@5 87.50000 (97.60638)
Epoch: [22][48/60]	Time 0.02491 (0.25125)	Data 0.00043 (0.17177)	Loss 1.0939 (0.9364)	Prec@1 62.50000 (75.26042)	Prec@5 100.00000 (97.65625)
Epoch: [22][49/60]	Time 0.02655 (0.24667)	Data 0.00047 (0.16827)	Loss 0.3415 (0.9243)	Prec@1 87.50000 (75.51020)	Prec@5 100.00000 (97.70408)
Epoch: [22][50/60]	Time 0.02266 (0.24219)	Data 0.00045 (0.16492)	Loss 1.4228 (0.9342)	Prec@1 62.50000 (75.25000)	Prec@5 100.00000 (97.75000)
Epoch: [22][51/60]	Time 0.02313 (0.23789)	Data 0.00053 (0.16169)	Loss 0.4187 (0.9241)	Prec@1 87.50000 (75.49020)	Prec@5 100.00000 (97.79412)
Epoch: [22][52/60]	Time 0.02249 (0.23375)	Data 0.00047 (0.15859)	Loss 1.7452 (0.9399)	Prec@1 50.00000 (75.00000)	Prec@5 87.50000 (97.59616)
Epoch: [22][53/60]	Time 0.02256 (0.22977)	Data 0.00046 (0.15561)	Loss 1.2399 (0.9456)	Prec@1 62.50000 (74.76415)	Prec@5 100.00000 (97.64151)
Epoch: [22][54/60]	Time 0.02247 (0.22593)	Data 0.00046 (0.15274)	Loss 1.5219 (0.9562)	Prec@1 62.50000 (74.53704)	Prec@5 100.00000 (97.68519)
Epoch: [22][55/60]	Time 0.02313 (0.22224)	Data 0.00046 (0.14997)	Loss 2.1034 (0.9771)	Prec@1 75.00000 (74.54546)	Prec@5 87.50000 (97.50000)
Epoch: [22][56/60]	Time 0.02364 (0.21869)	Data 0.00048 (0.14730)	Loss 0.6672 (0.9716)	Prec@1 75.00000 (74.55357)	Prec@5 100.00000 (97.54465)
Epoch: [22][57/60]	Time 0.02699 (0.21533)	Data 0.00043 (0.14472)	Loss 2.0730 (0.9909)	Prec@1 50.00000 (74.12281)	Prec@5 87.50000 (97.36842)
Epoch: [22][58/60]	Time 0.02345 (0.21202)	Data 0.00053 (0.14224)	Loss 0.8791 (0.9890)	Prec@1 62.50000 (73.92242)	Prec@5 100.00000 (97.41380)
Epoch: [22][59/60]	Time 0.02281 (0.20882)	Data 0.00055 (0.13983)	Loss 1.3333 (0.9948)	Prec@1 75.00000 (73.94068)	Prec@5 100.00000 (97.45763)
Epoch: [22][60/60]	Time 0.02350 (0.20573)	Data 0.00055 (0.13751)	Loss 1.4400 (1.0022)	Prec@1 50.00000 (73.54167)	Prec@5 100.00000 (97.50001)
train at epoch 23
train at epoch 23
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [23][0/272]	 lr: 0.04000	Time 8.737 (8.737)	Data 7.563 (7.563)	Loss 0.2834 (0.2834)	Prec@1 90.62500 (90.62500)	Prec@5 100.00000 (100.00000)
Epoch: [23][10/272]	 lr: 0.04000	Time 0.510 (1.280)	Data 0.128 (0.808)	Loss 0.0911 (0.1448)	Prec@1 96.87500 (96.02273)	Prec@5 100.00000 (100.00000)
Epoch: [23][20/272]	 lr: 0.04000	Time 0.439 (0.873)	Data 0.127 (0.484)	Loss 0.1654 (0.1610)	Prec@1 96.87500 (94.94048)	Prec@5 100.00000 (100.00000)
Epoch: [23][30/272]	 lr: 0.04000	Time 0.509 (0.737)	Data 0.133 (0.369)	Loss 0.1406 (0.1452)	Prec@1 96.87500 (95.76613)	Prec@5 100.00000 (100.00000)
Epoch: [23][40/272]	 lr: 0.04000	Time 0.449 (0.666)	Data 0.121 (0.311)	Loss 0.1912 (0.1579)	Prec@1 96.87500 (94.81707)	Prec@5 100.00000 (100.00000)
Epoch: [23][50/272]	 lr: 0.04000	Time 0.407 (0.620)	Data 0.129 (0.276)	Loss 0.1594 (0.1722)	Prec@1 96.87500 (94.66912)	Prec@5 100.00000 (100.00000)
Epoch: [23][60/272]	 lr: 0.04000	Time 0.373 (0.589)	Data 0.133 (0.252)	Loss 0.0483 (0.1651)	Prec@1 100.00000 (95.13319)	Prec@5 100.00000 (99.99999)
Epoch: [23][70/272]	 lr: 0.04000	Time 0.427 (0.565)	Data 0.126 (0.235)	Loss 0.0835 (0.1673)	Prec@1 100.00000 (94.89436)	Prec@5 100.00000 (100.00000)
Epoch: [23][80/272]	 lr: 0.04000	Time 0.383 (0.549)	Data 0.127 (0.222)	Loss 0.2676 (0.1679)	Prec@1 87.50000 (94.67593)	Prec@5 100.00000 (100.00000)
Epoch: [23][90/272]	 lr: 0.04000	Time 0.494 (0.537)	Data 0.127 (0.211)	Loss 0.1181 (0.1647)	Prec@1 96.87500 (94.84890)	Prec@5 100.00000 (100.00000)
Epoch: [23][100/272]	 lr: 0.04000	Time 0.367 (0.527)	Data 0.141 (0.203)	Loss 0.3364 (0.1690)	Prec@1 84.37500 (94.67822)	Prec@5 100.00000 (100.00000)
Epoch: [23][110/272]	 lr: 0.04000	Time 0.447 (0.520)	Data 0.131 (0.196)	Loss 0.1825 (0.1678)	Prec@1 96.87500 (94.81982)	Prec@5 100.00000 (100.00000)
Epoch: [23][120/272]	 lr: 0.04000	Time 0.433 (0.513)	Data 0.125 (0.191)	Loss 0.1189 (0.1725)	Prec@1 96.87500 (94.57644)	Prec@5 100.00000 (99.99999)
Epoch: [23][130/272]	 lr: 0.04000	Time 0.448 (0.508)	Data 0.128 (0.187)	Loss 0.2215 (0.1705)	Prec@1 90.62500 (94.72805)	Prec@5 100.00000 (100.00000)
Epoch: [23][140/272]	 lr: 0.04000	Time 0.399 (0.506)	Data 0.108 (0.182)	Loss 0.3058 (0.1709)	Prec@1 90.62500 (94.68085)	Prec@5 100.00000 (100.00000)
Epoch: [23][150/272]	 lr: 0.04000	Time 0.327 (0.501)	Data 0.127 (0.179)	Loss 0.2478 (0.1789)	Prec@1 93.75000 (94.37086)	Prec@5 100.00000 (100.00000)
Epoch: [23][160/272]	 lr: 0.04000	Time 0.441 (0.498)	Data 0.140 (0.176)	Loss 0.1851 (0.1774)	Prec@1 93.75000 (94.46817)	Prec@5 100.00000 (100.00000)
Epoch: [23][170/272]	 lr: 0.04000	Time 0.419 (0.495)	Data 0.130 (0.174)	Loss 0.1328 (0.1762)	Prec@1 96.87500 (94.49927)	Prec@5 100.00000 (100.00000)
Epoch: [23][180/272]	 lr: 0.04000	Time 0.536 (0.493)	Data 0.122 (0.171)	Loss 0.1997 (0.1840)	Prec@1 90.62500 (94.16437)	Prec@5 100.00000 (100.00001)
Epoch: [23][190/272]	 lr: 0.04000	Time 0.436 (0.490)	Data 0.126 (0.169)	Loss 0.0611 (0.1838)	Prec@1 100.00000 (94.24084)	Prec@5 100.00000 (100.00000)
Epoch: [23][200/272]	 lr: 0.04000	Time 0.403 (0.488)	Data 0.128 (0.167)	Loss 0.4921 (0.1838)	Prec@1 84.37500 (94.21642)	Prec@5 100.00000 (100.00000)
Epoch: [23][210/272]	 lr: 0.04000	Time 0.558 (0.486)	Data 0.128 (0.165)	Loss 0.0607 (0.1822)	Prec@1 100.00000 (94.34242)	Prec@5 100.00000 (100.00000)
Epoch: [23][220/272]	 lr: 0.04000	Time 0.397 (0.485)	Data 0.127 (0.164)	Loss 0.0570 (0.1821)	Prec@1 100.00000 (94.40046)	Prec@5 100.00000 (100.00001)
Epoch: [23][230/272]	 lr: 0.04000	Time 0.288 (0.482)	Data 0.123 (0.162)	Loss 0.0438 (0.1811)	Prec@1 100.00000 (94.42641)	Prec@5 100.00000 (100.00000)
Epoch: [23][240/272]	 lr: 0.04000	Time 0.267 (0.480)	Data 0.113 (0.161)	Loss 0.1914 (0.1820)	Prec@1 93.75000 (94.42428)	Prec@5 100.00000 (99.98704)
Epoch: [23][250/272]	 lr: 0.04000	Time 0.250 (0.471)	Data 0.126 (0.159)	Loss 0.5736 (0.1893)	Prec@1 65.62500 (94.11106)	Prec@5 100.00000 (99.97511)
Epoch: [23][260/272]	 lr: 0.04000	Time 0.237 (0.462)	Data 0.128 (0.158)	Loss 0.1698 (0.1890)	Prec@1 93.75000 (94.09722)	Prec@5 100.00000 (99.97605)
Epoch: [23][270/272]	 lr: 0.04000	Time 0.241 (0.454)	Data 0.129 (0.157)	Loss 0.4594 (0.1900)	Prec@1 90.62500 (94.04982)	Prec@5 100.00000 (99.97694)
validation at epoch 23
validation at epoch 23
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [23][1/60]	Time 6.33144 (6.33144)	Data 6.23489 (6.23489)	Loss 0.7655 (0.7655)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [23][2/60]	Time 0.13860 (3.23502)	Data 0.06474 (3.14981)	Loss 0.3921 (0.5788)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [23][3/60]	Time 0.07442 (2.18148)	Data 0.00371 (2.10111)	Loss 1.4735 (0.8770)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [23][4/60]	Time 0.06120 (1.65141)	Data 0.00058 (1.57598)	Loss 1.4977 (1.0322)	Prec@1 50.00000 (68.75000)	Prec@5 87.50000 (93.75000)
Epoch: [23][5/60]	Time 0.24681 (1.37049)	Data 0.00173 (1.26113)	Loss 2.0884 (1.2434)	Prec@1 37.50000 (62.50000)	Prec@5 100.00000 (95.00000)
Epoch: [23][6/60]	Time 0.95048 (1.30049)	Data 0.86363 (1.19488)	Loss 0.8991 (1.1860)	Prec@1 87.50000 (66.66667)	Prec@5 100.00000 (95.83334)
Epoch: [23][7/60]	Time 0.10800 (1.13013)	Data 0.00903 (1.02547)	Loss 1.6615 (1.2540)	Prec@1 50.00000 (64.28572)	Prec@5 100.00000 (96.42857)
Epoch: [23][8/60]	Time 0.20257 (1.01419)	Data 0.00096 (0.89741)	Loss 1.7408 (1.3148)	Prec@1 50.00000 (62.50000)	Prec@5 100.00000 (96.87500)
Epoch: [23][9/60]	Time 0.24865 (0.92913)	Data 0.02564 (0.80055)	Loss 2.1330 (1.4057)	Prec@1 62.50000 (62.50000)	Prec@5 87.50000 (95.83334)
Epoch: [23][10/60]	Time 0.09588 (0.84581)	Data 0.00394 (0.72089)	Loss 0.4811 (1.3133)	Prec@1 75.00000 (63.75000)	Prec@5 100.00000 (96.25000)
Epoch: [23][11/60]	Time 0.13780 (0.78144)	Data 0.00859 (0.65613)	Loss 0.9582 (1.2810)	Prec@1 75.00000 (64.77273)	Prec@5 100.00000 (96.59091)
Epoch: [23][12/60]	Time 0.11544 (0.72594)	Data 0.00061 (0.60150)	Loss 2.0594 (1.3459)	Prec@1 62.50000 (64.58334)	Prec@5 75.00000 (94.79167)
Epoch: [23][13/60]	Time 0.15694 (0.68217)	Data 0.00834 (0.55588)	Loss 3.0095 (1.4738)	Prec@1 25.00000 (61.53846)	Prec@5 75.00000 (93.26923)
Epoch: [23][14/60]	Time 0.11056 (0.64134)	Data 0.00906 (0.51682)	Loss 1.2374 (1.4569)	Prec@1 62.50000 (61.60715)	Prec@5 100.00000 (93.75001)
Epoch: [23][15/60]	Time 0.05697 (0.60238)	Data 0.00042 (0.48239)	Loss 1.9893 (1.4924)	Prec@1 50.00000 (60.83334)	Prec@5 87.50000 (93.33334)
Epoch: [23][16/60]	Time 0.06099 (0.56855)	Data 0.00046 (0.45227)	Loss 1.7756 (1.5101)	Prec@1 75.00000 (61.71875)	Prec@5 87.50000 (92.96875)
Epoch: [23][17/60]	Time 0.29483 (0.55245)	Data 0.10526 (0.43186)	Loss 0.2050 (1.4334)	Prec@1 87.50000 (63.23529)	Prec@5 100.00000 (93.38235)
Epoch: [23][18/60]	Time 0.08707 (0.52659)	Data 0.00903 (0.40837)	Loss 2.3969 (1.4869)	Prec@1 75.00000 (63.88889)	Prec@5 100.00000 (93.75000)
Epoch: [23][19/60]	Time 0.14308 (0.50641)	Data 0.00378 (0.38707)	Loss 0.6389 (1.4423)	Prec@1 87.50000 (65.13158)	Prec@5 100.00000 (94.07895)
Epoch: [23][20/60]	Time 0.21220 (0.49170)	Data 0.05384 (0.37041)	Loss 3.5213 (1.5462)	Prec@1 62.50000 (65.00000)	Prec@5 87.50000 (93.75000)
Epoch: [23][21/60]	Time 0.18202 (0.47695)	Data 0.00183 (0.35286)	Loss 0.3079 (1.4872)	Prec@1 100.00000 (66.66666)	Prec@5 100.00000 (94.04762)
Epoch: [23][22/60]	Time 0.10401 (0.46000)	Data 0.01413 (0.33746)	Loss 1.0430 (1.4671)	Prec@1 87.50000 (67.61364)	Prec@5 100.00000 (94.31818)
Epoch: [23][23/60]	Time 0.22819 (0.44992)	Data 0.05838 (0.32533)	Loss 2.0603 (1.4928)	Prec@1 50.00000 (66.84782)	Prec@5 87.50000 (94.02174)
Epoch: [23][24/60]	Time 0.11422 (0.43593)	Data 0.01620 (0.31245)	Loss 0.6462 (1.4576)	Prec@1 75.00000 (67.18750)	Prec@5 100.00000 (94.27084)
Epoch: [23][25/60]	Time 0.16790 (0.42521)	Data 0.04861 (0.30190)	Loss 0.8921 (1.4349)	Prec@1 75.00000 (67.50000)	Prec@5 100.00000 (94.50000)
Epoch: [23][26/60]	Time 0.08979 (0.41231)	Data 0.00624 (0.29052)	Loss 0.5366 (1.4004)	Prec@1 75.00000 (67.78847)	Prec@5 100.00000 (94.71154)
Epoch: [23][27/60]	Time 0.11993 (0.40148)	Data 0.01374 (0.28027)	Loss 1.4581 (1.4025)	Prec@1 75.00000 (68.05556)	Prec@5 100.00000 (94.90741)
Epoch: [23][28/60]	Time 0.16269 (0.39295)	Data 0.00875 (0.27058)	Loss 0.2511 (1.3614)	Prec@1 87.50000 (68.75000)	Prec@5 100.00000 (95.08929)
Epoch: [23][29/60]	Time 0.06242 (0.38155)	Data 0.00086 (0.26128)	Loss 1.4419 (1.3642)	Prec@1 62.50000 (68.53448)	Prec@5 100.00000 (95.25862)
Epoch: [23][30/60]	Time 0.05033 (0.37051)	Data 0.00067 (0.25259)	Loss 2.4849 (1.4015)	Prec@1 50.00000 (67.91667)	Prec@5 100.00000 (95.41667)
Epoch: [23][31/60]	Time 0.06819 (0.36076)	Data 0.00304 (0.24454)	Loss 3.8744 (1.4813)	Prec@1 12.50000 (66.12903)	Prec@5 100.00000 (95.56451)
Epoch: [23][32/60]	Time 0.03965 (0.35073)	Data 0.00055 (0.23691)	Loss 2.8914 (1.5254)	Prec@1 50.00000 (65.62500)	Prec@5 100.00000 (95.70312)
Epoch: [23][33/60]	Time 0.05466 (0.34176)	Data 0.01758 (0.23027)	Loss 0.2702 (1.4873)	Prec@1 75.00000 (65.90910)	Prec@5 100.00000 (95.83334)
Epoch: [23][34/60]	Time 0.03787 (0.33282)	Data 0.00051 (0.22351)	Loss 1.6106 (1.4910)	Prec@1 50.00000 (65.44118)	Prec@5 100.00000 (95.95588)
Epoch: [23][35/60]	Time 0.03761 (0.32438)	Data 0.00045 (0.21714)	Loss 1.4419 (1.4896)	Prec@1 50.00000 (65.00000)	Prec@5 100.00000 (96.07143)
Epoch: [23][36/60]	Time 0.03175 (0.31625)	Data 0.00061 (0.21112)	Loss 2.2912 (1.5118)	Prec@1 62.50000 (64.93056)	Prec@5 100.00000 (96.18056)
Epoch: [23][37/60]	Time 0.02992 (0.30852)	Data 0.00041 (0.20543)	Loss 1.7877 (1.5193)	Prec@1 62.50000 (64.86487)	Prec@5 100.00000 (96.28378)
Epoch: [23][38/60]	Time 0.03016 (0.30119)	Data 0.00080 (0.20004)	Loss 1.8574 (1.5282)	Prec@1 37.50000 (64.14474)	Prec@5 100.00000 (96.38158)
Epoch: [23][39/60]	Time 0.03537 (0.29437)	Data 0.00039 (0.19492)	Loss 0.1558 (1.4930)	Prec@1 87.50000 (64.74359)	Prec@5 100.00000 (96.47436)
Epoch: [23][40/60]	Time 0.03565 (0.28791)	Data 0.00054 (0.19006)	Loss 0.6852 (1.4728)	Prec@1 75.00000 (65.00000)	Prec@5 100.00000 (96.56250)
Epoch: [23][41/60]	Time 0.03604 (0.28176)	Data 0.00072 (0.18545)	Loss 2.1448 (1.4892)	Prec@1 75.00000 (65.24390)	Prec@5 100.00000 (96.64634)
Epoch: [23][42/60]	Time 0.04013 (0.27601)	Data 0.00074 (0.18105)	Loss 0.8927 (1.4750)	Prec@1 50.00000 (64.88095)	Prec@5 100.00000 (96.72619)
Epoch: [23][43/60]	Time 0.02733 (0.27023)	Data 0.00038 (0.17685)	Loss 1.9796 (1.4867)	Prec@1 62.50000 (64.82558)	Prec@5 100.00000 (96.80232)
Epoch: [23][44/60]	Time 0.02309 (0.26461)	Data 0.00093 (0.17285)	Loss 2.4719 (1.5091)	Prec@1 50.00000 (64.48864)	Prec@5 100.00000 (96.87500)
Epoch: [23][45/60]	Time 0.02322 (0.25925)	Data 0.00078 (0.16902)	Loss 0.7454 (1.4921)	Prec@1 75.00000 (64.72222)	Prec@5 100.00000 (96.94445)
Epoch: [23][46/60]	Time 0.02273 (0.25410)	Data 0.00074 (0.16537)	Loss 1.6712 (1.4960)	Prec@1 62.50000 (64.67391)	Prec@5 75.00000 (96.46739)
Epoch: [23][47/60]	Time 0.02328 (0.24919)	Data 0.00079 (0.16186)	Loss 0.2775 (1.4701)	Prec@1 87.50000 (65.15957)	Prec@5 100.00000 (96.54255)
Epoch: [23][48/60]	Time 0.02356 (0.24449)	Data 0.00076 (0.15851)	Loss 0.9466 (1.4592)	Prec@1 75.00000 (65.36459)	Prec@5 87.50000 (96.35417)
Epoch: [23][49/60]	Time 0.02297 (0.23997)	Data 0.00078 (0.15529)	Loss 0.9198 (1.4482)	Prec@1 87.50000 (65.81632)	Prec@5 87.50000 (96.17347)
Epoch: [23][50/60]	Time 0.02322 (0.23564)	Data 0.00085 (0.15220)	Loss 0.8620 (1.4365)	Prec@1 75.00000 (66.00000)	Prec@5 87.50000 (96.00000)
Epoch: [23][51/60]	Time 0.02512 (0.23151)	Data 0.00075 (0.14923)	Loss 0.1152 (1.4106)	Prec@1 100.00000 (66.66667)	Prec@5 100.00000 (96.07844)
Epoch: [23][52/60]	Time 0.02310 (0.22750)	Data 0.00054 (0.14637)	Loss 1.0847 (1.4043)	Prec@1 50.00000 (66.34615)	Prec@5 100.00000 (96.15385)
Epoch: [23][53/60]	Time 0.02360 (0.22365)	Data 0.00039 (0.14362)	Loss 0.5025 (1.3873)	Prec@1 75.00000 (66.50944)	Prec@5 100.00000 (96.22642)
Epoch: [23][54/60]	Time 0.02245 (0.21993)	Data 0.00044 (0.14097)	Loss 0.9891 (1.3799)	Prec@1 87.50000 (66.89815)	Prec@5 100.00000 (96.29630)
Epoch: [23][55/60]	Time 0.02275 (0.21634)	Data 0.00044 (0.13841)	Loss 0.3540 (1.3613)	Prec@1 75.00000 (67.04546)	Prec@5 100.00000 (96.36363)
Epoch: [23][56/60]	Time 0.02270 (0.21288)	Data 0.00049 (0.13595)	Loss 0.9012 (1.3530)	Prec@1 75.00000 (67.18750)	Prec@5 100.00000 (96.42857)
Epoch: [23][57/60]	Time 0.02297 (0.20955)	Data 0.00043 (0.13357)	Loss 1.5221 (1.3560)	Prec@1 62.50000 (67.10526)	Prec@5 87.50000 (96.27193)
Epoch: [23][58/60]	Time 0.02287 (0.20633)	Data 0.00044 (0.13127)	Loss 1.4282 (1.3573)	Prec@1 62.50000 (67.02586)	Prec@5 87.50000 (96.12069)
Epoch: [23][59/60]	Time 0.02238 (0.20322)	Data 0.00042 (0.12906)	Loss 1.5203 (1.3600)	Prec@1 62.50000 (66.94915)	Prec@5 100.00000 (96.18644)
Epoch: [23][60/60]	Time 0.02254 (0.20020)	Data 0.00054 (0.12692)	Loss 0.5651 (1.3468)	Prec@1 87.50000 (67.29167)	Prec@5 100.00000 (96.25001)
train at epoch 24
train at epoch 24
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [24][0/272]	 lr: 0.04000	Time 8.644 (8.644)	Data 7.115 (7.115)	Loss 0.1457 (0.1457)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [24][10/272]	 lr: 0.04000	Time 0.458 (1.270)	Data 0.121 (0.767)	Loss 0.5420 (0.1873)	Prec@1 84.37500 (94.31818)	Prec@5 100.00000 (100.00000)
Epoch: [24][20/272]	 lr: 0.04000	Time 0.410 (0.857)	Data 0.141 (0.466)	Loss 0.0459 (0.1710)	Prec@1 100.00000 (94.94048)	Prec@5 100.00000 (100.00000)
Epoch: [24][30/272]	 lr: 0.04000	Time 0.494 (0.722)	Data 0.129 (0.359)	Loss 0.1196 (0.1755)	Prec@1 100.00000 (94.85887)	Prec@5 100.00000 (100.00000)
Epoch: [24][40/272]	 lr: 0.04000	Time 0.503 (0.651)	Data 0.133 (0.302)	Loss 0.0344 (0.1903)	Prec@1 100.00000 (94.74085)	Prec@5 100.00000 (99.92377)
Epoch: [24][50/272]	 lr: 0.04000	Time 0.440 (0.608)	Data 0.128 (0.269)	Loss 0.1676 (0.1901)	Prec@1 90.62500 (94.30148)	Prec@5 100.00000 (99.87746)
Epoch: [24][60/272]	 lr: 0.04000	Time 0.611 (0.581)	Data 0.128 (0.245)	Loss 0.2433 (0.1893)	Prec@1 87.50000 (94.46721)	Prec@5 100.00000 (99.89754)
Epoch: [24][70/272]	 lr: 0.04000	Time 0.426 (0.559)	Data 0.119 (0.228)	Loss 0.2781 (0.1920)	Prec@1 93.75000 (94.54225)	Prec@5 100.00000 (99.91197)
Epoch: [24][80/272]	 lr: 0.04000	Time 0.523 (0.546)	Data 0.119 (0.216)	Loss 0.4638 (0.2005)	Prec@1 78.12500 (94.05864)	Prec@5 100.00000 (99.92284)
Epoch: [24][90/272]	 lr: 0.04000	Time 0.472 (0.534)	Data 0.126 (0.206)	Loss 0.2419 (0.2064)	Prec@1 90.62500 (93.81869)	Prec@5 100.00000 (99.93132)
Epoch: [24][100/272]	 lr: 0.04000	Time 0.493 (0.526)	Data 0.101 (0.198)	Loss 0.1477 (0.2057)	Prec@1 96.87500 (93.81188)	Prec@5 100.00000 (99.93812)
Epoch: [24][110/272]	 lr: 0.04000	Time 0.419 (0.518)	Data 0.129 (0.192)	Loss 0.4182 (0.2016)	Prec@1 81.25000 (93.94707)	Prec@5 100.00000 (99.94370)
Epoch: [24][120/272]	 lr: 0.04000	Time 0.372 (0.513)	Data 0.128 (0.187)	Loss 0.1331 (0.2043)	Prec@1 96.87500 (93.72417)	Prec@5 100.00000 (99.94834)
Epoch: [24][130/272]	 lr: 0.04000	Time 0.374 (0.506)	Data 0.128 (0.182)	Loss 0.1537 (0.2066)	Prec@1 100.00000 (93.67844)	Prec@5 100.00000 (99.95229)
Epoch: [24][140/272]	 lr: 0.04000	Time 0.469 (0.502)	Data 0.127 (0.179)	Loss 0.1412 (0.2070)	Prec@1 96.87500 (93.63918)	Prec@5 100.00000 (99.95567)
Epoch: [24][150/272]	 lr: 0.04000	Time 0.440 (0.498)	Data 0.135 (0.175)	Loss 0.1495 (0.2094)	Prec@1 96.87500 (93.50166)	Prec@5 100.00000 (99.93791)
Epoch: [24][160/272]	 lr: 0.04000	Time 0.528 (0.493)	Data 0.150 (0.172)	Loss 0.1280 (0.2071)	Prec@1 96.87500 (93.53649)	Prec@5 100.00000 (99.94177)
Epoch: [24][170/272]	 lr: 0.04000	Time 0.559 (0.490)	Data 0.114 (0.170)	Loss 0.1868 (0.2057)	Prec@1 93.75000 (93.49416)	Prec@5 100.00000 (99.94518)
Epoch: [24][180/272]	 lr: 0.04000	Time 0.441 (0.487)	Data 0.129 (0.168)	Loss 0.0835 (0.2045)	Prec@1 100.00000 (93.59462)	Prec@5 100.00000 (99.94821)
Epoch: [24][190/272]	 lr: 0.04000	Time 0.444 (0.486)	Data 0.138 (0.166)	Loss 0.6038 (0.2059)	Prec@1 81.25000 (93.60275)	Prec@5 100.00000 (99.95092)
Epoch: [24][200/272]	 lr: 0.04000	Time 0.353 (0.484)	Data 0.129 (0.164)	Loss 0.0993 (0.2041)	Prec@1 96.87500 (93.62562)	Prec@5 100.00000 (99.95335)
Epoch: [24][210/272]	 lr: 0.04000	Time 0.396 (0.482)	Data 0.130 (0.162)	Loss 0.1700 (0.2061)	Prec@1 93.75000 (93.54266)	Prec@5 100.00000 (99.94077)
Epoch: [24][220/272]	 lr: 0.04000	Time 0.465 (0.480)	Data 0.140 (0.161)	Loss 0.4694 (0.2064)	Prec@1 81.25000 (93.50962)	Prec@5 100.00000 (99.94344)
Epoch: [24][230/272]	 lr: 0.04000	Time 0.314 (0.478)	Data 0.129 (0.160)	Loss 0.5480 (0.2047)	Prec@1 84.37500 (93.54708)	Prec@5 96.87500 (99.93236)
Epoch: [24][240/272]	 lr: 0.04000	Time 0.405 (0.476)	Data 0.129 (0.159)	Loss 0.0821 (0.2050)	Prec@1 96.87500 (93.49067)	Prec@5 100.00000 (99.92220)
Epoch: [24][250/272]	 lr: 0.04000	Time 0.238 (0.466)	Data 0.128 (0.157)	Loss 0.1618 (0.2019)	Prec@1 96.87500 (93.67530)	Prec@5 100.00000 (99.92530)
Epoch: [24][260/272]	 lr: 0.04000	Time 0.238 (0.458)	Data 0.127 (0.156)	Loss 0.2491 (0.1997)	Prec@1 90.62500 (93.75000)	Prec@5 100.00000 (99.92816)
Epoch: [24][270/272]	 lr: 0.04000	Time 0.238 (0.450)	Data 0.129 (0.155)	Loss 0.6421 (0.1991)	Prec@1 71.87500 (93.75000)	Prec@5 100.00000 (99.93082)
validation at epoch 24
validation at epoch 24
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [24][1/60]	Time 6.37334 (6.37334)	Data 6.08002 (6.08002)	Loss 1.0184 (1.0184)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [24][2/60]	Time 0.24901 (3.31118)	Data 0.00060 (3.04031)	Loss 0.8446 (0.9315)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [24][3/60]	Time 0.35471 (2.32569)	Data 0.02361 (2.03474)	Loss 1.8062 (1.2231)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [24][4/60]	Time 0.26128 (1.80959)	Data 0.01802 (1.53056)	Loss 0.5877 (1.0642)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [24][5/60]	Time 0.16568 (1.48080)	Data 0.02683 (1.22982)	Loss 0.8879 (1.0290)	Prec@1 62.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [24][6/60]	Time 0.23384 (1.27298)	Data 0.03421 (1.03055)	Loss 0.8480 (0.9988)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (97.91667)
Epoch: [24][7/60]	Time 0.19603 (1.11913)	Data 0.06806 (0.89305)	Loss 0.2756 (0.8955)	Prec@1 75.00000 (78.57143)	Prec@5 100.00000 (98.21429)
Epoch: [24][8/60]	Time 0.11015 (0.99301)	Data 0.02309 (0.78431)	Loss 0.6256 (0.8618)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (98.43750)
Epoch: [24][9/60]	Time 0.57360 (0.94641)	Data 0.50051 (0.75277)	Loss 0.3938 (0.8098)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (98.61111)
Epoch: [24][10/60]	Time 0.06774 (0.85854)	Data 0.00853 (0.67835)	Loss 0.0843 (0.7372)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (98.75000)
Epoch: [24][11/60]	Time 0.07748 (0.78753)	Data 0.01253 (0.61782)	Loss 0.2681 (0.6946)	Prec@1 87.50000 (81.81818)	Prec@5 100.00000 (98.86364)
Epoch: [24][12/60]	Time 0.07942 (0.72852)	Data 0.00045 (0.56637)	Loss 0.1902 (0.6525)	Prec@1 87.50000 (82.29167)	Prec@5 100.00000 (98.95834)
Epoch: [24][13/60]	Time 0.09730 (0.67997)	Data 0.00896 (0.52349)	Loss 3.3102 (0.8570)	Prec@1 50.00000 (79.80769)	Prec@5 87.50000 (98.07693)
Epoch: [24][14/60]	Time 0.31033 (0.65357)	Data 0.01618 (0.48726)	Loss 0.4039 (0.8246)	Prec@1 75.00000 (79.46429)	Prec@5 100.00000 (98.21429)
Epoch: [24][15/60]	Time 0.21490 (0.62432)	Data 0.02142 (0.45620)	Loss 1.0790 (0.8416)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (98.33334)
Epoch: [24][16/60]	Time 0.17768 (0.59641)	Data 0.00049 (0.42772)	Loss 1.2409 (0.8665)	Prec@1 75.00000 (78.90625)	Prec@5 100.00000 (98.43750)
Epoch: [24][17/60]	Time 0.06456 (0.56512)	Data 0.01094 (0.40320)	Loss 1.1035 (0.8805)	Prec@1 62.50000 (77.94118)	Prec@5 100.00000 (98.52941)
Epoch: [24][18/60]	Time 0.06180 (0.53716)	Data 0.00406 (0.38103)	Loss 2.4478 (0.9675)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (98.61111)
Epoch: [24][19/60]	Time 0.11078 (0.51472)	Data 0.00053 (0.36100)	Loss 0.1889 (0.9266)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (98.68421)
Epoch: [24][20/60]	Time 0.15468 (0.49672)	Data 0.03279 (0.34459)	Loss 2.2137 (0.9909)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (98.75000)
Epoch: [24][21/60]	Time 0.19227 (0.48222)	Data 0.00584 (0.32846)	Loss 1.8216 (1.0305)	Prec@1 50.00000 (75.59524)	Prec@5 100.00000 (98.80952)
Epoch: [24][22/60]	Time 0.18599 (0.46875)	Data 0.01761 (0.31433)	Loss 1.0050 (1.0293)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [24][23/60]	Time 0.20771 (0.45740)	Data 0.04207 (0.30249)	Loss 1.2807 (1.0402)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.91305)
Epoch: [24][24/60]	Time 0.16853 (0.44537)	Data 0.01697 (0.29060)	Loss 1.4160 (1.0559)	Prec@1 62.50000 (74.47917)	Prec@5 87.50000 (98.43750)
Epoch: [24][25/60]	Time 0.13061 (0.43278)	Data 0.00179 (0.27904)	Loss 0.8234 (1.0466)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (98.50000)
Epoch: [24][26/60]	Time 0.13636 (0.42138)	Data 0.00210 (0.26839)	Loss 0.2894 (1.0175)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.55769)
Epoch: [24][27/60]	Time 0.21252 (0.41364)	Data 0.05594 (0.26052)	Loss 0.5745 (1.0011)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [24][28/60]	Time 0.14442 (0.40403)	Data 0.02084 (0.25196)	Loss 0.8726 (0.9965)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.66072)
Epoch: [24][29/60]	Time 0.09394 (0.39333)	Data 0.01576 (0.24382)	Loss 0.7044 (0.9864)	Prec@1 62.50000 (74.56896)	Prec@5 100.00000 (98.70689)
Epoch: [24][30/60]	Time 0.08386 (0.38302)	Data 0.00045 (0.23571)	Loss 1.6981 (1.0101)	Prec@1 75.00000 (74.58334)	Prec@5 87.50000 (98.33334)
Epoch: [24][31/60]	Time 0.08115 (0.37328)	Data 0.00039 (0.22812)	Loss 2.5128 (1.0586)	Prec@1 50.00000 (73.79032)	Prec@5 87.50000 (97.98387)
Epoch: [24][32/60]	Time 0.06360 (0.36360)	Data 0.00039 (0.22100)	Loss 0.2049 (1.0319)	Prec@1 100.00000 (74.60938)	Prec@5 100.00000 (98.04688)
Epoch: [24][33/60]	Time 0.03390 (0.35361)	Data 0.00382 (0.21442)	Loss 0.0403 (1.0019)	Prec@1 100.00000 (75.37879)	Prec@5 100.00000 (98.10606)
Epoch: [24][34/60]	Time 0.03352 (0.34420)	Data 0.00181 (0.20817)	Loss 1.4312 (1.0145)	Prec@1 75.00000 (75.36765)	Prec@5 87.50000 (97.79412)
Epoch: [24][35/60]	Time 0.03585 (0.33539)	Data 0.00040 (0.20223)	Loss 2.1204 (1.0461)	Prec@1 75.00000 (75.35714)	Prec@5 87.50000 (97.50000)
Epoch: [24][36/60]	Time 0.03054 (0.32692)	Data 0.00083 (0.19663)	Loss 0.4129 (1.0285)	Prec@1 75.00000 (75.34722)	Prec@5 100.00000 (97.56944)
Epoch: [24][37/60]	Time 0.02934 (0.31888)	Data 0.00047 (0.19133)	Loss 1.6224 (1.0446)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (97.29730)
Epoch: [24][38/60]	Time 0.02797 (0.31122)	Data 0.00047 (0.18631)	Loss 1.9963 (1.0696)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (97.03947)
Epoch: [24][39/60]	Time 0.03040 (0.30402)	Data 0.00213 (0.18159)	Loss 0.0174 (1.0426)	Prec@1 100.00000 (75.64103)	Prec@5 100.00000 (97.11539)
Epoch: [24][40/60]	Time 0.03045 (0.29718)	Data 0.00251 (0.17711)	Loss 0.0293 (1.0173)	Prec@1 100.00000 (76.25000)	Prec@5 100.00000 (97.18750)
Epoch: [24][41/60]	Time 0.02875 (0.29063)	Data 0.00188 (0.17284)	Loss 0.2238 (0.9979)	Prec@1 100.00000 (76.82926)	Prec@5 100.00000 (97.25610)
Epoch: [24][42/60]	Time 0.02743 (0.28437)	Data 0.00097 (0.16874)	Loss 0.9459 (0.9967)	Prec@1 75.00000 (76.78571)	Prec@5 100.00000 (97.32143)
Epoch: [24][43/60]	Time 0.02767 (0.27840)	Data 0.00120 (0.16485)	Loss 0.4786 (0.9847)	Prec@1 87.50000 (77.03488)	Prec@5 100.00000 (97.38372)
Epoch: [24][44/60]	Time 0.02718 (0.27269)	Data 0.00086 (0.16112)	Loss 0.3684 (0.9707)	Prec@1 75.00000 (76.98864)	Prec@5 100.00000 (97.44318)
Epoch: [24][45/60]	Time 0.02785 (0.26725)	Data 0.00042 (0.15755)	Loss 1.1625 (0.9749)	Prec@1 87.50000 (77.22222)	Prec@5 87.50000 (97.22222)
Epoch: [24][46/60]	Time 0.02694 (0.26202)	Data 0.00050 (0.15414)	Loss 1.1499 (0.9787)	Prec@1 62.50000 (76.90218)	Prec@5 100.00000 (97.28261)
Epoch: [24][47/60]	Time 0.02620 (0.25701)	Data 0.00045 (0.15087)	Loss 1.8862 (0.9980)	Prec@1 75.00000 (76.86170)	Prec@5 87.50000 (97.07446)
Epoch: [24][48/60]	Time 0.02597 (0.25219)	Data 0.00041 (0.14773)	Loss 0.7406 (0.9927)	Prec@1 75.00000 (76.82292)	Prec@5 100.00000 (97.13542)
Epoch: [24][49/60]	Time 0.02688 (0.24759)	Data 0.00039 (0.14472)	Loss 0.6193 (0.9850)	Prec@1 62.50000 (76.53061)	Prec@5 100.00000 (97.19388)
Epoch: [24][50/60]	Time 0.02625 (0.24317)	Data 0.00045 (0.14184)	Loss 1.1773 (0.9889)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (97.25000)
Epoch: [24][51/60]	Time 0.02649 (0.23892)	Data 0.00040 (0.13907)	Loss 1.0178 (0.9895)	Prec@1 75.00000 (76.22549)	Prec@5 100.00000 (97.30392)
Epoch: [24][52/60]	Time 0.02702 (0.23484)	Data 0.00040 (0.13640)	Loss 2.4656 (1.0178)	Prec@1 37.50000 (75.48077)	Prec@5 100.00000 (97.35577)
Epoch: [24][53/60]	Time 0.02707 (0.23092)	Data 0.00039 (0.13383)	Loss 1.2528 (1.0223)	Prec@1 62.50000 (75.23585)	Prec@5 100.00000 (97.40566)
Epoch: [24][54/60]	Time 0.02714 (0.22715)	Data 0.00045 (0.13136)	Loss 1.5255 (1.0316)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (97.45370)
Epoch: [24][55/60]	Time 0.02678 (0.22351)	Data 0.00040 (0.12898)	Loss 2.1834 (1.0525)	Prec@1 62.50000 (74.77273)	Prec@5 87.50000 (97.27273)
Epoch: [24][56/60]	Time 0.02627 (0.21998)	Data 0.00050 (0.12669)	Loss 0.7458 (1.0471)	Prec@1 75.00000 (74.77679)	Prec@5 100.00000 (97.32143)
Epoch: [24][57/60]	Time 0.02635 (0.21659)	Data 0.00046 (0.12447)	Loss 1.8548 (1.0612)	Prec@1 50.00000 (74.34210)	Prec@5 100.00000 (97.36842)
Epoch: [24][58/60]	Time 0.02677 (0.21332)	Data 0.00044 (0.12233)	Loss 0.9735 (1.0597)	Prec@1 62.50000 (74.13793)	Prec@5 100.00000 (97.41380)
Epoch: [24][59/60]	Time 0.02609 (0.21014)	Data 0.00042 (0.12027)	Loss 1.4634 (1.0666)	Prec@1 50.00000 (73.72881)	Prec@5 100.00000 (97.45763)
Epoch: [24][60/60]	Time 0.02764 (0.20710)	Data 0.00051 (0.11827)	Loss 0.8358 (1.0627)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (97.50001)
train at epoch 25
train at epoch 25
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [25][0/272]	 lr: 0.04000	Time 10.034 (10.034)	Data 9.568 (9.568)	Loss 0.0772 (0.0772)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [25][10/272]	 lr: 0.04000	Time 0.392 (1.288)	Data 0.125 (0.988)	Loss 0.1270 (0.1031)	Prec@1 93.75000 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [25][20/272]	 lr: 0.04000	Time 0.524 (0.876)	Data 0.127 (0.579)	Loss 0.1817 (0.1370)	Prec@1 93.75000 (95.98215)	Prec@5 100.00000 (100.00000)
Epoch: [25][30/272]	 lr: 0.04000	Time 0.401 (0.734)	Data 0.127 (0.435)	Loss 0.0885 (0.1346)	Prec@1 96.87500 (95.76613)	Prec@5 100.00000 (100.00000)
Epoch: [25][40/272]	 lr: 0.04000	Time 0.449 (0.664)	Data 0.129 (0.360)	Loss 0.0781 (0.1281)	Prec@1 96.87500 (96.26524)	Prec@5 100.00000 (100.00000)
Epoch: [25][50/272]	 lr: 0.04000	Time 0.542 (0.621)	Data 0.141 (0.315)	Loss 0.0728 (0.1295)	Prec@1 96.87500 (96.07844)	Prec@5 100.00000 (99.87746)
Epoch: [25][60/272]	 lr: 0.04000	Time 0.337 (0.591)	Data 0.127 (0.283)	Loss 0.0384 (0.1299)	Prec@1 100.00000 (96.15778)	Prec@5 100.00000 (99.89754)
Epoch: [25][70/272]	 lr: 0.04000	Time 0.445 (0.568)	Data 0.156 (0.262)	Loss 0.1768 (0.1282)	Prec@1 93.75000 (96.21479)	Prec@5 96.87500 (99.86796)
Epoch: [25][80/272]	 lr: 0.04000	Time 0.413 (0.553)	Data 0.115 (0.245)	Loss 0.1372 (0.1330)	Prec@1 93.75000 (95.87192)	Prec@5 100.00000 (99.88426)
Epoch: [25][90/272]	 lr: 0.04000	Time 0.418 (0.542)	Data 0.126 (0.233)	Loss 0.1191 (0.1391)	Prec@1 93.75000 (95.63874)	Prec@5 100.00000 (99.89698)
Epoch: [25][100/272]	 lr: 0.04000	Time 0.417 (0.531)	Data 0.135 (0.222)	Loss 0.1060 (0.1409)	Prec@1 96.87500 (95.73019)	Prec@5 100.00000 (99.90717)
Epoch: [25][110/272]	 lr: 0.04000	Time 0.287 (0.522)	Data 0.119 (0.214)	Loss 0.1005 (0.1385)	Prec@1 96.87500 (95.83334)	Prec@5 100.00000 (99.91554)
Epoch: [25][120/272]	 lr: 0.04000	Time 0.377 (0.516)	Data 0.125 (0.207)	Loss 0.1802 (0.1365)	Prec@1 93.75000 (95.94524)	Prec@5 100.00000 (99.92252)
Epoch: [25][130/272]	 lr: 0.04000	Time 0.381 (0.511)	Data 0.126 (0.201)	Loss 0.1426 (0.1363)	Prec@1 96.87500 (95.92080)	Prec@5 100.00000 (99.92844)
Epoch: [25][140/272]	 lr: 0.04000	Time 0.478 (0.506)	Data 0.150 (0.196)	Loss 0.1411 (0.1363)	Prec@1 96.87500 (95.96631)	Prec@5 100.00000 (99.93351)
Epoch: [25][150/272]	 lr: 0.04000	Time 0.519 (0.501)	Data 0.128 (0.192)	Loss 0.2280 (0.1382)	Prec@1 93.75000 (95.92301)	Prec@5 100.00000 (99.93791)
Epoch: [25][160/272]	 lr: 0.04000	Time 0.463 (0.498)	Data 0.127 (0.187)	Loss 0.0974 (0.1363)	Prec@1 100.00000 (96.02097)	Prec@5 100.00000 (99.94177)
Epoch: [25][170/272]	 lr: 0.04000	Time 0.391 (0.495)	Data 0.128 (0.184)	Loss 0.1924 (0.1382)	Prec@1 93.75000 (95.94299)	Prec@5 100.00000 (99.94518)
Epoch: [25][180/272]	 lr: 0.04000	Time 0.449 (0.492)	Data 0.128 (0.181)	Loss 0.0657 (0.1379)	Prec@1 100.00000 (96.01174)	Prec@5 100.00000 (99.94821)
Epoch: [25][190/272]	 lr: 0.04000	Time 0.441 (0.489)	Data 0.129 (0.179)	Loss 0.1686 (0.1369)	Prec@1 90.62500 (96.04057)	Prec@5 100.00000 (99.95092)
Epoch: [25][200/272]	 lr: 0.04000	Time 0.383 (0.486)	Data 0.136 (0.176)	Loss 0.1022 (0.1378)	Prec@1 96.87500 (95.95771)	Prec@5 100.00000 (99.95335)
Epoch: [25][210/272]	 lr: 0.04000	Time 0.391 (0.483)	Data 0.129 (0.174)	Loss 0.1676 (0.1366)	Prec@1 96.87500 (96.03081)	Prec@5 100.00000 (99.95557)
Epoch: [25][220/272]	 lr: 0.04000	Time 0.391 (0.481)	Data 0.118 (0.172)	Loss 0.0909 (0.1380)	Prec@1 96.87500 (95.94175)	Prec@5 100.00000 (99.95758)
Epoch: [25][230/272]	 lr: 0.04000	Time 0.485 (0.480)	Data 0.140 (0.170)	Loss 0.0532 (0.1368)	Prec@1 100.00000 (95.99567)	Prec@5 100.00000 (99.95942)
Epoch: [25][240/272]	 lr: 0.04000	Time 0.286 (0.477)	Data 0.129 (0.169)	Loss 0.0958 (0.1353)	Prec@1 96.87500 (96.07106)	Prec@5 100.00000 (99.96111)
Epoch: [25][250/272]	 lr: 0.04000	Time 0.239 (0.468)	Data 0.129 (0.167)	Loss 0.0575 (0.1341)	Prec@1 100.00000 (96.10309)	Prec@5 100.00000 (99.96265)
Epoch: [25][260/272]	 lr: 0.04000	Time 0.241 (0.459)	Data 0.129 (0.166)	Loss 0.0372 (0.1359)	Prec@1 100.00000 (96.04885)	Prec@5 100.00000 (99.96408)
Epoch: [25][270/272]	 lr: 0.04000	Time 0.239 (0.451)	Data 0.129 (0.164)	Loss 0.1514 (0.1376)	Prec@1 100.00000 (95.95249)	Prec@5 100.00000 (99.96541)
validation at epoch 25
validation at epoch 25
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [25][1/60]	Time 6.62134 (6.62134)	Data 6.41480 (6.41480)	Loss 0.2810 (0.2810)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [25][2/60]	Time 0.38776 (3.50455)	Data 0.23502 (3.32491)	Loss 0.5986 (0.4398)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [25][3/60]	Time 0.12547 (2.37819)	Data 0.01629 (2.22204)	Loss 0.7919 (0.5572)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [25][4/60]	Time 0.27855 (1.85328)	Data 0.10586 (1.69299)	Loss 1.0538 (0.6813)	Prec@1 50.00000 (71.87500)	Prec@5 87.50000 (96.87500)
Epoch: [25][5/60]	Time 0.38222 (1.55907)	Data 0.34183 (1.42276)	Loss 0.2541 (0.5959)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [25][6/60]	Time 0.07231 (1.31128)	Data 0.00094 (1.18579)	Loss 0.4052 (0.5641)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [25][7/60]	Time 0.26259 (1.16146)	Data 0.20404 (1.04554)	Loss 2.3796 (0.8235)	Prec@1 50.00000 (73.21429)	Prec@5 75.00000 (94.64286)
Epoch: [25][8/60]	Time 0.04554 (1.02197)	Data 0.01050 (0.91616)	Loss 1.4185 (0.8978)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (95.31250)
Epoch: [25][9/60]	Time 0.03904 (0.91276)	Data 0.00064 (0.81444)	Loss 1.1359 (0.9243)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (95.83334)
Epoch: [25][10/60]	Time 0.14822 (0.83630)	Data 0.00058 (0.73305)	Loss 0.8888 (0.9207)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (96.25000)
Epoch: [25][11/60]	Time 0.09527 (0.76894)	Data 0.04923 (0.67088)	Loss 1.0021 (0.9281)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (96.59091)
Epoch: [25][12/60]	Time 0.09709 (0.71295)	Data 0.01816 (0.61649)	Loss 2.1880 (1.0331)	Prec@1 62.50000 (71.87500)	Prec@5 87.50000 (95.83334)
Epoch: [25][13/60]	Time 0.11308 (0.66681)	Data 0.01330 (0.57009)	Loss 1.7288 (1.0866)	Prec@1 50.00000 (70.19231)	Prec@5 87.50000 (95.19231)
Epoch: [25][14/60]	Time 0.26883 (0.63838)	Data 0.02113 (0.53088)	Loss 0.0603 (1.0133)	Prec@1 100.00000 (72.32143)	Prec@5 100.00000 (95.53572)
Epoch: [25][15/60]	Time 0.14850 (0.60572)	Data 0.00058 (0.49553)	Loss 1.9481 (1.0756)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (95.83334)
Epoch: [25][16/60]	Time 0.13809 (0.57649)	Data 0.00047 (0.46459)	Loss 1.5683 (1.1064)	Prec@1 50.00000 (69.53125)	Prec@5 100.00000 (96.09375)
Epoch: [25][17/60]	Time 0.13691 (0.55064)	Data 0.01504 (0.43814)	Loss 0.5333 (1.0727)	Prec@1 87.50000 (70.58823)	Prec@5 100.00000 (96.32353)
Epoch: [25][18/60]	Time 0.11935 (0.52667)	Data 0.00697 (0.41419)	Loss 2.9511 (1.1771)	Prec@1 50.00000 (69.44444)	Prec@5 100.00000 (96.52778)
Epoch: [25][19/60]	Time 0.16735 (0.50776)	Data 0.03879 (0.39443)	Loss 0.8543 (1.1601)	Prec@1 62.50000 (69.07895)	Prec@5 100.00000 (96.71053)
Epoch: [25][20/60]	Time 0.07872 (0.48631)	Data 0.01155 (0.37529)	Loss 3.5000 (1.2771)	Prec@1 25.00000 (66.87500)	Prec@5 100.00000 (96.87500)
Epoch: [25][21/60]	Time 0.12265 (0.46899)	Data 0.01365 (0.35807)	Loss 0.6289 (1.2462)	Prec@1 62.50000 (66.66666)	Prec@5 100.00000 (97.02381)
Epoch: [25][22/60]	Time 0.13704 (0.45391)	Data 0.06084 (0.34456)	Loss 0.3564 (1.2058)	Prec@1 87.50000 (67.61364)	Prec@5 100.00000 (97.15910)
Epoch: [25][23/60]	Time 0.14540 (0.44049)	Data 0.02966 (0.33086)	Loss 1.1865 (1.2049)	Prec@1 50.00000 (66.84782)	Prec@5 100.00000 (97.28261)
Epoch: [25][24/60]	Time 0.13388 (0.42772)	Data 0.00321 (0.31721)	Loss 0.7962 (1.1879)	Prec@1 62.50000 (66.66667)	Prec@5 100.00000 (97.39584)
Epoch: [25][25/60]	Time 0.08404 (0.41397)	Data 0.00648 (0.30478)	Loss 0.5650 (1.1630)	Prec@1 75.00000 (67.00000)	Prec@5 100.00000 (97.50000)
Epoch: [25][26/60]	Time 0.12104 (0.40270)	Data 0.00621 (0.29330)	Loss 0.2651 (1.1285)	Prec@1 75.00000 (67.30769)	Prec@5 100.00000 (97.59616)
Epoch: [25][27/60]	Time 0.29024 (0.39854)	Data 0.15119 (0.28804)	Loss 1.0901 (1.1270)	Prec@1 50.00000 (66.66666)	Prec@5 100.00000 (97.68519)
Epoch: [25][28/60]	Time 0.24485 (0.39305)	Data 0.00326 (0.27787)	Loss 0.5283 (1.1057)	Prec@1 75.00000 (66.96429)	Prec@5 100.00000 (97.76786)
Epoch: [25][29/60]	Time 0.07149 (0.38196)	Data 0.01670 (0.26886)	Loss 1.7337 (1.1273)	Prec@1 50.00000 (66.37931)	Prec@5 100.00000 (97.84483)
Epoch: [25][30/60]	Time 0.05844 (0.37118)	Data 0.00045 (0.25991)	Loss 2.5943 (1.1762)	Prec@1 50.00000 (65.83334)	Prec@5 100.00000 (97.91667)
Epoch: [25][31/60]	Time 0.05949 (0.36112)	Data 0.00286 (0.25162)	Loss 4.9356 (1.2975)	Prec@1 25.00000 (64.51613)	Prec@5 87.50000 (97.58064)
Epoch: [25][32/60]	Time 0.02773 (0.35070)	Data 0.00044 (0.24377)	Loss 3.1937 (1.3567)	Prec@1 37.50000 (63.67188)	Prec@5 100.00000 (97.65625)
Epoch: [25][33/60]	Time 0.02875 (0.34095)	Data 0.00055 (0.23640)	Loss 0.6500 (1.3353)	Prec@1 87.50000 (64.39394)	Prec@5 100.00000 (97.72727)
Epoch: [25][34/60]	Time 0.03016 (0.33181)	Data 0.00043 (0.22946)	Loss 1.6953 (1.3459)	Prec@1 62.50000 (64.33823)	Prec@5 100.00000 (97.79412)
Epoch: [25][35/60]	Time 0.02902 (0.32316)	Data 0.00036 (0.22292)	Loss 2.3963 (1.3759)	Prec@1 62.50000 (64.28571)	Prec@5 87.50000 (97.50000)
Epoch: [25][36/60]	Time 0.02659 (0.31492)	Data 0.00042 (0.21673)	Loss 2.6315 (1.4108)	Prec@1 62.50000 (64.23611)	Prec@5 100.00000 (97.56944)
Epoch: [25][37/60]	Time 0.03015 (0.30722)	Data 0.00093 (0.21090)	Loss 2.1147 (1.4298)	Prec@1 75.00000 (64.52703)	Prec@5 87.50000 (97.29730)
Epoch: [25][38/60]	Time 0.02846 (0.29989)	Data 0.00060 (0.20537)	Loss 1.9863 (1.4445)	Prec@1 62.50000 (64.47369)	Prec@5 100.00000 (97.36842)
Epoch: [25][39/60]	Time 0.02663 (0.29288)	Data 0.00048 (0.20011)	Loss 0.6508 (1.4241)	Prec@1 87.50000 (65.06410)	Prec@5 100.00000 (97.43590)
Epoch: [25][40/60]	Time 0.02667 (0.28622)	Data 0.00042 (0.19512)	Loss 0.7226 (1.4066)	Prec@1 87.50000 (65.62500)	Prec@5 100.00000 (97.50000)
Epoch: [25][41/60]	Time 0.02598 (0.27988)	Data 0.00044 (0.19037)	Loss 2.2578 (1.4273)	Prec@1 62.50000 (65.54877)	Prec@5 100.00000 (97.56097)
Epoch: [25][42/60]	Time 0.02838 (0.27389)	Data 0.00045 (0.18585)	Loss 0.7586 (1.4114)	Prec@1 75.00000 (65.77381)	Prec@5 100.00000 (97.61905)
Epoch: [25][43/60]	Time 0.02642 (0.26813)	Data 0.00051 (0.18154)	Loss 1.4699 (1.4128)	Prec@1 75.00000 (65.98837)	Prec@5 100.00000 (97.67442)
Epoch: [25][44/60]	Time 0.02674 (0.26265)	Data 0.00042 (0.17742)	Loss 3.1351 (1.4519)	Prec@1 50.00000 (65.62500)	Prec@5 100.00000 (97.72727)
Epoch: [25][45/60]	Time 0.02627 (0.25739)	Data 0.00043 (0.17349)	Loss 1.6300 (1.4559)	Prec@1 75.00000 (65.83334)	Prec@5 87.50000 (97.50000)
Epoch: [25][46/60]	Time 0.02847 (0.25242)	Data 0.00045 (0.16973)	Loss 2.6398 (1.4816)	Prec@1 75.00000 (66.03261)	Prec@5 75.00000 (97.01087)
Epoch: [25][47/60]	Time 0.02597 (0.24760)	Data 0.00040 (0.16613)	Loss 0.9076 (1.4694)	Prec@1 75.00000 (66.22340)	Prec@5 100.00000 (97.07446)
Epoch: [25][48/60]	Time 0.02621 (0.24299)	Data 0.00045 (0.16268)	Loss 0.5003 (1.4492)	Prec@1 62.50000 (66.14584)	Prec@5 100.00000 (97.13542)
Epoch: [25][49/60]	Time 0.02672 (0.23857)	Data 0.00045 (0.15936)	Loss 2.0021 (1.4605)	Prec@1 62.50000 (66.07143)	Prec@5 87.50000 (96.93877)
Epoch: [25][50/60]	Time 0.02657 (0.23433)	Data 0.00045 (0.15619)	Loss 0.2459 (1.4362)	Prec@1 87.50000 (66.50000)	Prec@5 100.00000 (97.00000)
Epoch: [25][51/60]	Time 0.02666 (0.23026)	Data 0.00095 (0.15314)	Loss 0.6704 (1.4212)	Prec@1 75.00000 (66.66667)	Prec@5 100.00000 (97.05883)
Epoch: [25][52/60]	Time 0.02614 (0.22634)	Data 0.00040 (0.15021)	Loss 0.9115 (1.4114)	Prec@1 75.00000 (66.82693)	Prec@5 100.00000 (97.11539)
Epoch: [25][53/60]	Time 0.02652 (0.22257)	Data 0.00043 (0.14738)	Loss 0.2655 (1.3898)	Prec@1 87.50000 (67.21698)	Prec@5 100.00000 (97.16982)
Epoch: [25][54/60]	Time 0.03147 (0.21903)	Data 0.00044 (0.14466)	Loss 1.8621 (1.3985)	Prec@1 62.50000 (67.12963)	Prec@5 100.00000 (97.22222)
Epoch: [25][55/60]	Time 0.02302 (0.21546)	Data 0.00071 (0.14204)	Loss 0.8593 (1.3887)	Prec@1 87.50000 (67.50000)	Prec@5 100.00000 (97.27273)
Epoch: [25][56/60]	Time 0.02249 (0.21202)	Data 0.00054 (0.13951)	Loss 1.3017 (1.3872)	Prec@1 87.50000 (67.85715)	Prec@5 87.50000 (97.09822)
Epoch: [25][57/60]	Time 0.02226 (0.20869)	Data 0.00044 (0.13707)	Loss 2.0598 (1.3990)	Prec@1 62.50000 (67.76316)	Prec@5 87.50000 (96.92982)
Epoch: [25][58/60]	Time 0.02250 (0.20548)	Data 0.00045 (0.13472)	Loss 2.4841 (1.4177)	Prec@1 75.00000 (67.88793)	Prec@5 75.00000 (96.55173)
Epoch: [25][59/60]	Time 0.02274 (0.20238)	Data 0.00047 (0.13244)	Loss 1.5271 (1.4195)	Prec@1 75.00000 (68.00848)	Prec@5 87.50000 (96.39831)
Epoch: [25][60/60]	Time 0.02329 (0.19940)	Data 0.00059 (0.13025)	Loss 0.3557 (1.4018)	Prec@1 75.00000 (68.12500)	Prec@5 100.00000 (96.45834)
train at epoch 26
train at epoch 26
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [26][0/272]	 lr: 0.04000	Time 7.775 (7.775)	Data 6.045 (6.045)	Loss 0.2246 (0.2246)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [26][10/272]	 lr: 0.04000	Time 0.436 (1.296)	Data 0.128 (0.833)	Loss 0.1771 (0.1841)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [26][20/272]	 lr: 0.04000	Time 0.369 (0.886)	Data 0.130 (0.498)	Loss 0.0691 (0.1502)	Prec@1 100.00000 (95.53571)	Prec@5 100.00000 (100.00000)
Epoch: [26][30/272]	 lr: 0.04000	Time 0.377 (0.739)	Data 0.119 (0.379)	Loss 0.1257 (0.1542)	Prec@1 100.00000 (95.46371)	Prec@5 100.00000 (100.00000)
Epoch: [26][40/272]	 lr: 0.04000	Time 0.432 (0.671)	Data 0.120 (0.320)	Loss 0.1100 (0.1392)	Prec@1 100.00000 (96.18902)	Prec@5 100.00000 (100.00000)
Epoch: [26][50/272]	 lr: 0.04000	Time 0.453 (0.631)	Data 0.128 (0.282)	Loss 0.0739 (0.1394)	Prec@1 100.00000 (96.13971)	Prec@5 100.00000 (100.00000)
Epoch: [26][60/272]	 lr: 0.04000	Time 0.351 (0.597)	Data 0.127 (0.257)	Loss 0.0577 (0.1374)	Prec@1 100.00000 (96.36270)	Prec@5 100.00000 (99.99999)
Epoch: [26][70/272]	 lr: 0.04000	Time 0.441 (0.576)	Data 0.127 (0.238)	Loss 0.1195 (0.1321)	Prec@1 96.87500 (96.52289)	Prec@5 100.00000 (100.00000)
Epoch: [26][80/272]	 lr: 0.04000	Time 0.471 (0.563)	Data 0.117 (0.224)	Loss 0.0215 (0.1283)	Prec@1 100.00000 (96.68210)	Prec@5 100.00000 (100.00000)
Epoch: [26][90/272]	 lr: 0.04000	Time 0.440 (0.548)	Data 0.123 (0.214)	Loss 0.2121 (0.1260)	Prec@1 93.75000 (96.80632)	Prec@5 100.00000 (100.00000)
Epoch: [26][100/272]	 lr: 0.04000	Time 0.445 (0.536)	Data 0.128 (0.206)	Loss 0.0850 (0.1231)	Prec@1 100.00000 (96.90594)	Prec@5 100.00000 (100.00000)
Epoch: [26][110/272]	 lr: 0.04000	Time 0.411 (0.526)	Data 0.131 (0.199)	Loss 0.0977 (0.1253)	Prec@1 96.87500 (96.81870)	Prec@5 100.00000 (100.00000)
Epoch: [26][120/272]	 lr: 0.04000	Time 0.345 (0.520)	Data 0.129 (0.193)	Loss 0.0481 (0.1271)	Prec@1 100.00000 (96.69421)	Prec@5 100.00000 (99.99999)
Epoch: [26][130/272]	 lr: 0.04000	Time 0.456 (0.515)	Data 0.127 (0.188)	Loss 0.1293 (0.1258)	Prec@1 96.87500 (96.73187)	Prec@5 100.00000 (100.00000)
Epoch: [26][140/272]	 lr: 0.04000	Time 0.438 (0.510)	Data 0.124 (0.184)	Loss 0.1531 (0.1278)	Prec@1 93.75000 (96.49822)	Prec@5 100.00000 (100.00000)
Epoch: [26][150/272]	 lr: 0.04000	Time 0.365 (0.505)	Data 0.116 (0.180)	Loss 0.2625 (0.1314)	Prec@1 90.62500 (96.37831)	Prec@5 100.00000 (100.00000)
Epoch: [26][160/272]	 lr: 0.04000	Time 0.492 (0.502)	Data 0.123 (0.176)	Loss 0.3865 (0.1379)	Prec@1 78.12500 (96.02097)	Prec@5 100.00000 (100.00000)
Epoch: [26][170/272]	 lr: 0.04000	Time 0.466 (0.499)	Data 0.129 (0.174)	Loss 0.0838 (0.1380)	Prec@1 96.87500 (96.01608)	Prec@5 100.00000 (100.00000)
Epoch: [26][180/272]	 lr: 0.04000	Time 0.372 (0.496)	Data 0.105 (0.171)	Loss 0.0440 (0.1410)	Prec@1 100.00000 (95.89088)	Prec@5 100.00000 (100.00001)
Epoch: [26][190/272]	 lr: 0.04000	Time 0.536 (0.494)	Data 0.128 (0.169)	Loss 0.0809 (0.1400)	Prec@1 100.00000 (95.92605)	Prec@5 100.00000 (100.00000)
Epoch: [26][200/272]	 lr: 0.04000	Time 0.428 (0.492)	Data 0.128 (0.167)	Loss 0.0579 (0.1399)	Prec@1 100.00000 (95.95771)	Prec@5 100.00000 (100.00000)
Epoch: [26][210/272]	 lr: 0.04000	Time 0.471 (0.490)	Data 0.142 (0.165)	Loss 0.0763 (0.1441)	Prec@1 96.87500 (95.77903)	Prec@5 100.00000 (100.00000)
Epoch: [26][220/272]	 lr: 0.04000	Time 0.385 (0.488)	Data 0.141 (0.164)	Loss 0.1716 (0.1445)	Prec@1 93.75000 (95.71550)	Prec@5 100.00000 (100.00001)
Epoch: [26][230/272]	 lr: 0.04000	Time 0.430 (0.487)	Data 0.139 (0.162)	Loss 0.2697 (0.1463)	Prec@1 87.50000 (95.63041)	Prec@5 100.00000 (100.00000)
Epoch: [26][240/272]	 lr: 0.04000	Time 0.374 (0.484)	Data 0.129 (0.161)	Loss 0.0413 (0.1444)	Prec@1 100.00000 (95.69502)	Prec@5 100.00000 (100.00001)
Epoch: [26][250/272]	 lr: 0.04000	Time 0.238 (0.475)	Data 0.129 (0.160)	Loss 0.0581 (0.1454)	Prec@1 100.00000 (95.66734)	Prec@5 100.00000 (100.00000)
Epoch: [26][260/272]	 lr: 0.04000	Time 0.238 (0.466)	Data 0.129 (0.159)	Loss 0.0440 (0.1473)	Prec@1 100.00000 (95.62978)	Prec@5 100.00000 (100.00000)
Epoch: [26][270/272]	 lr: 0.04000	Time 0.239 (0.457)	Data 0.129 (0.157)	Loss 0.1115 (0.1492)	Prec@1 100.00000 (95.64114)	Prec@5 100.00000 (100.00000)
validation at epoch 26
validation at epoch 26
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [26][1/60]	Time 6.32458 (6.32458)	Data 6.13384 (6.13384)	Loss 1.0994 (1.0994)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [26][2/60]	Time 0.24271 (3.28364)	Data 0.00124 (3.06754)	Loss 0.3731 (0.7362)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [26][3/60]	Time 0.24476 (2.27068)	Data 0.02554 (2.05354)	Loss 1.0494 (0.8406)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [26][4/60]	Time 0.24036 (1.76310)	Data 0.01900 (1.54490)	Loss 0.6490 (0.7927)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (96.87500)
Epoch: [26][5/60]	Time 0.28720 (1.46792)	Data 0.03996 (1.24391)	Loss 0.9472 (0.8236)	Prec@1 62.50000 (72.50000)	Prec@5 100.00000 (97.50000)
Epoch: [26][6/60]	Time 0.57843 (1.31967)	Data 0.52610 (1.12428)	Loss 0.0833 (0.7002)	Prec@1 100.00000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [26][7/60]	Time 0.06242 (1.14006)	Data 0.00274 (0.96406)	Loss 1.8505 (0.8646)	Prec@1 50.00000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [26][8/60]	Time 0.11749 (1.01224)	Data 0.02031 (0.84609)	Loss 1.2987 (0.9188)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.43750)
Epoch: [26][9/60]	Time 0.18216 (0.92001)	Data 0.01425 (0.75366)	Loss 0.9728 (0.9248)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [26][10/60]	Time 0.10217 (0.83823)	Data 0.00965 (0.67926)	Loss 1.2190 (0.9542)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [26][11/60]	Time 0.15923 (0.77650)	Data 0.01097 (0.61851)	Loss 0.6951 (0.9307)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [26][12/60]	Time 0.06132 (0.71690)	Data 0.01659 (0.56835)	Loss 0.6390 (0.9064)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [26][13/60]	Time 0.25412 (0.68130)	Data 0.07699 (0.53055)	Loss 1.4551 (0.9486)	Prec@1 50.00000 (71.15385)	Prec@5 87.50000 (98.07693)
Epoch: [26][14/60]	Time 0.10509 (0.64014)	Data 0.00968 (0.49335)	Loss 0.2073 (0.8956)	Prec@1 87.50000 (72.32143)	Prec@5 100.00000 (98.21429)
Epoch: [26][15/60]	Time 0.07960 (0.60277)	Data 0.01302 (0.46132)	Loss 0.9767 (0.9010)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.33334)
Epoch: [26][16/60]	Time 0.11503 (0.57229)	Data 0.02144 (0.43383)	Loss 2.0449 (0.9725)	Prec@1 75.00000 (72.65625)	Prec@5 87.50000 (97.65625)
Epoch: [26][17/60]	Time 0.10974 (0.54508)	Data 0.00075 (0.40836)	Loss 0.3486 (0.9358)	Prec@1 87.50000 (73.52941)	Prec@5 100.00000 (97.79412)
Epoch: [26][18/60]	Time 0.32913 (0.53309)	Data 0.11146 (0.39186)	Loss 3.6114 (1.0845)	Prec@1 75.00000 (73.61111)	Prec@5 87.50000 (97.22222)
Epoch: [26][19/60]	Time 0.09793 (0.51018)	Data 0.02196 (0.37239)	Loss 0.7287 (1.0657)	Prec@1 87.50000 (74.34210)	Prec@5 100.00000 (97.36842)
Epoch: [26][20/60]	Time 0.17337 (0.49334)	Data 0.05024 (0.35629)	Loss 4.1847 (1.2217)	Prec@1 62.50000 (73.75000)	Prec@5 75.00000 (96.25000)
Epoch: [26][21/60]	Time 0.04888 (0.47218)	Data 0.00376 (0.33950)	Loss 0.1911 (1.1726)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (96.42857)
Epoch: [26][22/60]	Time 0.10024 (0.45527)	Data 0.02178 (0.32506)	Loss 1.3406 (1.1802)	Prec@1 87.50000 (75.56818)	Prec@5 87.50000 (96.02273)
Epoch: [26][23/60]	Time 0.16617 (0.44270)	Data 0.05875 (0.31348)	Loss 3.1817 (1.2673)	Prec@1 37.50000 (73.91305)	Prec@5 87.50000 (95.65218)
Epoch: [26][24/60]	Time 0.14906 (0.43047)	Data 0.06724 (0.30322)	Loss 0.9235 (1.2529)	Prec@1 87.50000 (74.47917)	Prec@5 100.00000 (95.83334)
Epoch: [26][25/60]	Time 0.16791 (0.41996)	Data 0.01551 (0.29171)	Loss 1.0078 (1.2431)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (96.00000)
Epoch: [26][26/60]	Time 0.12417 (0.40859)	Data 0.01425 (0.28104)	Loss 0.5196 (1.2153)	Prec@1 75.00000 (74.51923)	Prec@5 100.00000 (96.15385)
Epoch: [26][27/60]	Time 0.10900 (0.39749)	Data 0.01079 (0.27103)	Loss 2.8157 (1.2746)	Prec@1 62.50000 (74.07407)	Prec@5 87.50000 (95.83334)
Epoch: [26][28/60]	Time 0.12997 (0.38794)	Data 0.00999 (0.26171)	Loss 0.3774 (1.2425)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (95.98215)
Epoch: [26][29/60]	Time 0.07978 (0.37731)	Data 0.00054 (0.25270)	Loss 2.4532 (1.2843)	Prec@1 62.50000 (74.13793)	Prec@5 100.00000 (96.12069)
Epoch: [26][30/60]	Time 0.08302 (0.36750)	Data 0.00048 (0.24429)	Loss 3.2943 (1.3513)	Prec@1 62.50000 (73.75001)	Prec@5 100.00000 (96.25001)
Epoch: [26][31/60]	Time 0.04004 (0.35694)	Data 0.00044 (0.23643)	Loss 4.0585 (1.4386)	Prec@1 50.00000 (72.98387)	Prec@5 75.00000 (95.56451)
Epoch: [26][32/60]	Time 0.05382 (0.34747)	Data 0.00044 (0.22905)	Loss 2.7948 (1.4810)	Prec@1 62.50000 (72.65625)	Prec@5 100.00000 (95.70312)
Epoch: [26][33/60]	Time 0.04625 (0.33834)	Data 0.00041 (0.22212)	Loss 0.1752 (1.4414)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (95.83334)
Epoch: [26][34/60]	Time 0.03107 (0.32930)	Data 0.00043 (0.21560)	Loss 2.2880 (1.4663)	Prec@1 50.00000 (72.42647)	Prec@5 100.00000 (95.95588)
Epoch: [26][35/60]	Time 0.03775 (0.32097)	Data 0.00043 (0.20946)	Loss 1.3448 (1.4629)	Prec@1 75.00000 (72.50000)	Prec@5 87.50000 (95.71429)
Epoch: [26][36/60]	Time 0.03780 (0.31310)	Data 0.00043 (0.20365)	Loss 2.6186 (1.4950)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (95.83334)
Epoch: [26][37/60]	Time 0.03525 (0.30560)	Data 0.00042 (0.19816)	Loss 2.3312 (1.5176)	Prec@1 62.50000 (71.95946)	Prec@5 100.00000 (95.94595)
Epoch: [26][38/60]	Time 0.04044 (0.29862)	Data 0.00420 (0.19305)	Loss 2.7600 (1.5503)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (96.05264)
Epoch: [26][39/60]	Time 0.03379 (0.29183)	Data 0.00067 (0.18812)	Loss 0.1602 (1.5146)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (96.15385)
Epoch: [26][40/60]	Time 0.02826 (0.28524)	Data 0.00069 (0.18343)	Loss 0.4705 (1.4885)	Prec@1 87.50000 (72.18750)	Prec@5 100.00000 (96.25000)
Epoch: [26][41/60]	Time 0.02304 (0.27884)	Data 0.00048 (0.17897)	Loss 2.6236 (1.5162)	Prec@1 75.00000 (72.25610)	Prec@5 100.00000 (96.34146)
Epoch: [26][42/60]	Time 0.02307 (0.27275)	Data 0.00077 (0.17473)	Loss 0.8122 (1.4994)	Prec@1 62.50000 (72.02381)	Prec@5 100.00000 (96.42857)
Epoch: [26][43/60]	Time 0.02277 (0.26694)	Data 0.00066 (0.17068)	Loss 1.9065 (1.5089)	Prec@1 75.00000 (72.09303)	Prec@5 100.00000 (96.51163)
Epoch: [26][44/60]	Time 0.02295 (0.26139)	Data 0.00103 (0.16682)	Loss 2.3428 (1.5279)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (96.59091)
Epoch: [26][45/60]	Time 0.02472 (0.25613)	Data 0.00089 (0.16314)	Loss 1.2426 (1.5215)	Prec@1 75.00000 (71.94444)	Prec@5 100.00000 (96.66667)
Epoch: [26][46/60]	Time 0.02235 (0.25105)	Data 0.00040 (0.15960)	Loss 0.9978 (1.5101)	Prec@1 62.50000 (71.73913)	Prec@5 100.00000 (96.73914)
Epoch: [26][47/60]	Time 0.02289 (0.24620)	Data 0.00088 (0.15622)	Loss 0.9395 (1.4980)	Prec@1 62.50000 (71.54255)	Prec@5 87.50000 (96.54255)
Epoch: [26][48/60]	Time 0.02259 (0.24154)	Data 0.00092 (0.15299)	Loss 1.6553 (1.5013)	Prec@1 62.50000 (71.35417)	Prec@5 100.00000 (96.61459)
Epoch: [26][49/60]	Time 0.02246 (0.23707)	Data 0.00039 (0.14987)	Loss 0.3371 (1.4775)	Prec@1 87.50000 (71.68367)	Prec@5 100.00000 (96.68367)
Epoch: [26][50/60]	Time 0.02347 (0.23280)	Data 0.00044 (0.14688)	Loss 1.0449 (1.4689)	Prec@1 62.50000 (71.50000)	Prec@5 100.00000 (96.75000)
Epoch: [26][51/60]	Time 0.02260 (0.22867)	Data 0.00045 (0.14401)	Loss 0.6359 (1.4525)	Prec@1 62.50000 (71.32353)	Prec@5 100.00000 (96.81373)
Epoch: [26][52/60]	Time 0.02231 (0.22471)	Data 0.00045 (0.14125)	Loss 2.6761 (1.4761)	Prec@1 25.00000 (70.43269)	Prec@5 87.50000 (96.63462)
Epoch: [26][53/60]	Time 0.02215 (0.22088)	Data 0.00043 (0.13860)	Loss 0.9736 (1.4666)	Prec@1 50.00000 (70.04717)	Prec@5 100.00000 (96.69811)
Epoch: [26][54/60]	Time 0.02472 (0.21725)	Data 0.00044 (0.13604)	Loss 1.5266 (1.4677)	Prec@1 75.00000 (70.13889)	Prec@5 87.50000 (96.52778)
Epoch: [26][55/60]	Time 0.02373 (0.21373)	Data 0.00066 (0.13358)	Loss 1.8862 (1.4753)	Prec@1 50.00000 (69.77273)	Prec@5 87.50000 (96.36363)
Epoch: [26][56/60]	Time 0.02285 (0.21032)	Data 0.00049 (0.13120)	Loss 1.2119 (1.4706)	Prec@1 62.50000 (69.64286)	Prec@5 100.00000 (96.42857)
Epoch: [26][57/60]	Time 0.02249 (0.20703)	Data 0.00049 (0.12891)	Loss 2.0464 (1.4807)	Prec@1 62.50000 (69.51755)	Prec@5 87.50000 (96.27193)
Epoch: [26][58/60]	Time 0.02247 (0.20385)	Data 0.00042 (0.12669)	Loss 1.1094 (1.4743)	Prec@1 75.00000 (69.61207)	Prec@5 100.00000 (96.33620)
Epoch: [26][59/60]	Time 0.02291 (0.20078)	Data 0.00049 (0.12455)	Loss 1.6144 (1.4767)	Prec@1 75.00000 (69.70339)	Prec@5 87.50000 (96.18644)
Epoch: [26][60/60]	Time 0.02235 (0.19781)	Data 0.00049 (0.12248)	Loss 1.2109 (1.4722)	Prec@1 87.50000 (70.00000)	Prec@5 100.00000 (96.25001)
train at epoch 27
train at epoch 27
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [27][0/272]	 lr: 0.04000	Time 9.072 (9.072)	Data 8.348 (8.348)	Loss 0.2066 (0.2066)	Prec@1 93.75000 (93.75000)	Prec@5 100.00000 (100.00000)
Epoch: [27][10/272]	 lr: 0.04000	Time 0.399 (1.252)	Data 0.129 (0.874)	Loss 0.1244 (0.1393)	Prec@1 96.87500 (96.02273)	Prec@5 100.00000 (100.00000)
Epoch: [27][20/272]	 lr: 0.04000	Time 0.412 (0.867)	Data 0.141 (0.520)	Loss 0.0463 (0.1544)	Prec@1 100.00000 (94.79167)	Prec@5 100.00000 (100.00000)
Epoch: [27][30/272]	 lr: 0.04000	Time 0.397 (0.734)	Data 0.127 (0.395)	Loss 0.1052 (0.1536)	Prec@1 96.87500 (95.06048)	Prec@5 100.00000 (100.00000)
Epoch: [27][40/272]	 lr: 0.04000	Time 0.445 (0.662)	Data 0.129 (0.330)	Loss 0.7682 (0.1646)	Prec@1 71.87500 (94.74085)	Prec@5 100.00000 (100.00000)
Epoch: [27][50/272]	 lr: 0.04000	Time 0.511 (0.621)	Data 0.128 (0.291)	Loss 0.4158 (0.1552)	Prec@1 84.37500 (95.22059)	Prec@5 100.00000 (100.00000)
Epoch: [27][60/272]	 lr: 0.04000	Time 0.505 (0.593)	Data 0.127 (0.264)	Loss 0.1470 (0.1541)	Prec@1 93.75000 (95.44057)	Prec@5 100.00000 (99.99999)
Epoch: [27][70/272]	 lr: 0.04000	Time 0.461 (0.570)	Data 0.139 (0.245)	Loss 0.0807 (0.1522)	Prec@1 96.87500 (95.42253)	Prec@5 100.00000 (100.00000)
Epoch: [27][80/272]	 lr: 0.04000	Time 0.455 (0.553)	Data 0.139 (0.230)	Loss 0.0715 (0.1426)	Prec@1 100.00000 (95.79475)	Prec@5 100.00000 (100.00000)
Epoch: [27][90/272]	 lr: 0.04000	Time 0.474 (0.539)	Data 0.120 (0.219)	Loss 0.1483 (0.1404)	Prec@1 93.75000 (96.01649)	Prec@5 100.00000 (100.00000)
Epoch: [27][100/272]	 lr: 0.04000	Time 0.323 (0.528)	Data 0.130 (0.210)	Loss 0.3267 (0.1409)	Prec@1 84.37500 (95.97772)	Prec@5 100.00000 (100.00000)
Epoch: [27][110/272]	 lr: 0.04000	Time 0.319 (0.522)	Data 0.101 (0.202)	Loss 0.0502 (0.1435)	Prec@1 100.00000 (95.91779)	Prec@5 100.00000 (100.00000)
Epoch: [27][120/272]	 lr: 0.04000	Time 0.364 (0.516)	Data 0.120 (0.196)	Loss 0.0605 (0.1417)	Prec@1 100.00000 (95.99689)	Prec@5 100.00000 (99.99999)
Epoch: [27][130/272]	 lr: 0.04000	Time 0.502 (0.512)	Data 0.129 (0.191)	Loss 0.2092 (0.1403)	Prec@1 93.75000 (96.01622)	Prec@5 100.00000 (100.00000)
Epoch: [27][140/272]	 lr: 0.04000	Time 0.524 (0.508)	Data 0.130 (0.186)	Loss 0.0860 (0.1425)	Prec@1 96.87500 (95.83333)	Prec@5 100.00000 (100.00000)
Epoch: [27][150/272]	 lr: 0.04000	Time 0.421 (0.504)	Data 0.128 (0.182)	Loss 0.0876 (0.1424)	Prec@1 100.00000 (95.84023)	Prec@5 100.00000 (100.00000)
Epoch: [27][160/272]	 lr: 0.04000	Time 0.474 (0.500)	Data 0.128 (0.179)	Loss 0.1008 (0.1439)	Prec@1 96.87500 (95.76864)	Prec@5 100.00000 (100.00000)
Epoch: [27][170/272]	 lr: 0.04000	Time 0.455 (0.497)	Data 0.128 (0.176)	Loss 0.2556 (0.1463)	Prec@1 90.62500 (95.66886)	Prec@5 100.00000 (100.00000)
Epoch: [27][180/272]	 lr: 0.04000	Time 0.426 (0.495)	Data 0.128 (0.173)	Loss 0.0849 (0.1483)	Prec@1 96.87500 (95.59738)	Prec@5 100.00000 (100.00001)
Epoch: [27][190/272]	 lr: 0.04000	Time 0.454 (0.491)	Data 0.112 (0.171)	Loss 0.2172 (0.1483)	Prec@1 93.75000 (95.59882)	Prec@5 100.00000 (100.00000)
Epoch: [27][200/272]	 lr: 0.04000	Time 0.400 (0.488)	Data 0.127 (0.169)	Loss 0.6517 (0.1507)	Prec@1 84.37500 (95.55348)	Prec@5 100.00000 (100.00000)
Epoch: [27][210/272]	 lr: 0.04000	Time 0.502 (0.486)	Data 0.141 (0.167)	Loss 0.0391 (0.1504)	Prec@1 100.00000 (95.49763)	Prec@5 100.00000 (100.00000)
Epoch: [27][220/272]	 lr: 0.04000	Time 0.441 (0.485)	Data 0.121 (0.165)	Loss 0.1255 (0.1549)	Prec@1 93.75000 (95.37614)	Prec@5 100.00000 (99.98586)
Epoch: [27][230/272]	 lr: 0.04000	Time 0.475 (0.484)	Data 0.125 (0.163)	Loss 0.2139 (0.1562)	Prec@1 90.62500 (95.33279)	Prec@5 100.00000 (99.98647)
Epoch: [27][240/272]	 lr: 0.04000	Time 0.372 (0.482)	Data 0.129 (0.162)	Loss 0.0671 (0.1562)	Prec@1 100.00000 (95.37086)	Prec@5 100.00000 (99.98704)
Epoch: [27][250/272]	 lr: 0.04000	Time 0.239 (0.472)	Data 0.129 (0.161)	Loss 0.2214 (0.1592)	Prec@1 93.75000 (95.23158)	Prec@5 100.00000 (99.98756)
Epoch: [27][260/272]	 lr: 0.04000	Time 0.238 (0.463)	Data 0.128 (0.159)	Loss 0.1380 (0.1583)	Prec@1 90.62500 (95.21072)	Prec@5 100.00000 (99.98802)
Epoch: [27][270/272]	 lr: 0.04000	Time 0.239 (0.455)	Data 0.130 (0.158)	Loss 0.2611 (0.1628)	Prec@1 90.62500 (95.12223)	Prec@5 100.00000 (99.98847)
validation at epoch 27
validation at epoch 27
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [27][1/60]	Time 6.80774 (6.80774)	Data 6.74831 (6.74831)	Loss 1.1323 (1.1323)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [27][2/60]	Time 0.05656 (3.43215)	Data 0.00389 (3.37610)	Loss 0.5065 (0.8194)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [27][3/60]	Time 0.10522 (2.32317)	Data 0.00084 (2.25101)	Loss 0.9310 (0.8566)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [27][4/60]	Time 0.08115 (1.76267)	Data 0.01286 (1.69147)	Loss 0.4129 (0.7457)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [27][5/60]	Time 0.20215 (1.45056)	Data 0.00442 (1.35406)	Loss 0.4193 (0.6804)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [27][6/60]	Time 0.20928 (1.24368)	Data 0.02734 (1.13294)	Loss 0.2652 (0.6112)	Prec@1 100.00000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [27][7/60]	Time 0.25871 (1.10297)	Data 0.02372 (0.97448)	Loss 0.4851 (0.5932)	Prec@1 87.50000 (85.71429)	Prec@5 100.00000 (100.00001)
Epoch: [27][8/60]	Time 0.18042 (0.98765)	Data 0.00057 (0.85274)	Loss 0.7379 (0.6113)	Prec@1 75.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [27][9/60]	Time 0.18054 (0.89797)	Data 0.01706 (0.75989)	Loss 0.5760 (0.6073)	Prec@1 87.50000 (84.72222)	Prec@5 100.00000 (100.00000)
Epoch: [27][10/60]	Time 0.12614 (0.82079)	Data 0.00128 (0.68403)	Loss 0.0332 (0.5499)	Prec@1 100.00000 (86.25000)	Prec@5 100.00000 (100.00000)
Epoch: [27][11/60]	Time 0.12931 (0.75793)	Data 0.00684 (0.62247)	Loss 0.2322 (0.5210)	Prec@1 87.50000 (86.36364)	Prec@5 100.00000 (100.00000)
Epoch: [27][12/60]	Time 0.18835 (0.71046)	Data 0.04019 (0.57394)	Loss 0.2095 (0.4951)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [27][13/60]	Time 0.23343 (0.67377)	Data 0.00781 (0.53039)	Loss 2.2591 (0.6308)	Prec@1 50.00000 (84.61539)	Prec@5 100.00000 (100.00000)
Epoch: [27][14/60]	Time 0.21173 (0.64077)	Data 0.01907 (0.49387)	Loss 0.1759 (0.5983)	Prec@1 100.00000 (85.71429)	Prec@5 100.00000 (100.00001)
Epoch: [27][15/60]	Time 0.12479 (0.60637)	Data 0.04790 (0.46414)	Loss 0.5993 (0.5983)	Prec@1 75.00000 (85.00001)	Prec@5 100.00000 (100.00001)
Epoch: [27][16/60]	Time 0.05236 (0.57174)	Data 0.00327 (0.43533)	Loss 1.1580 (0.6333)	Prec@1 75.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [27][17/60]	Time 0.11855 (0.54508)	Data 0.03712 (0.41191)	Loss 0.8580 (0.6465)	Prec@1 75.00000 (83.82353)	Prec@5 100.00000 (100.00000)
Epoch: [27][18/60]	Time 0.09090 (0.51985)	Data 0.01147 (0.38966)	Loss 1.7475 (0.7077)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [27][19/60]	Time 0.28658 (0.50757)	Data 0.08818 (0.37380)	Loss 0.0406 (0.6726)	Prec@1 100.00000 (84.21053)	Prec@5 100.00000 (100.00000)
Epoch: [27][20/60]	Time 0.08559 (0.48648)	Data 0.00807 (0.35551)	Loss 2.4185 (0.7599)	Prec@1 62.50000 (83.12500)	Prec@5 100.00000 (100.00000)
Epoch: [27][21/60]	Time 0.18358 (0.47205)	Data 0.05919 (0.34140)	Loss 1.6661 (0.8030)	Prec@1 50.00000 (81.54762)	Prec@5 100.00000 (100.00000)
Epoch: [27][22/60]	Time 0.10661 (0.45544)	Data 0.00287 (0.32601)	Loss 1.1551 (0.8190)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [27][23/60]	Time 0.09591 (0.43981)	Data 0.00256 (0.31195)	Loss 1.2205 (0.8365)	Prec@1 62.50000 (80.43478)	Prec@5 100.00000 (100.00000)
Epoch: [27][24/60]	Time 0.10220 (0.42574)	Data 0.02113 (0.29983)	Loss 1.5196 (0.8650)	Prec@1 75.00000 (80.20834)	Prec@5 87.50000 (99.47917)
Epoch: [27][25/60]	Time 0.06772 (0.41142)	Data 0.02378 (0.28879)	Loss 0.6254 (0.8554)	Prec@1 87.50000 (80.50000)	Prec@5 100.00000 (99.50000)
Epoch: [27][26/60]	Time 0.09883 (0.39940)	Data 0.01905 (0.27841)	Loss 0.0466 (0.8243)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (99.51923)
Epoch: [27][27/60]	Time 0.17524 (0.39110)	Data 0.05002 (0.26996)	Loss 0.8258 (0.8243)	Prec@1 75.00000 (81.01852)	Prec@5 100.00000 (99.53704)
Epoch: [27][28/60]	Time 0.10149 (0.38075)	Data 0.00594 (0.26053)	Loss 0.1770 (0.8012)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (99.55357)
Epoch: [27][29/60]	Time 0.10719 (0.37132)	Data 0.03337 (0.25269)	Loss 0.1963 (0.7803)	Prec@1 87.50000 (81.46552)	Prec@5 100.00000 (99.56896)
Epoch: [27][30/60]	Time 0.10655 (0.36249)	Data 0.00042 (0.24428)	Loss 1.5679 (0.8066)	Prec@1 75.00000 (81.25001)	Prec@5 87.50000 (99.16667)
Epoch: [27][31/60]	Time 0.10571 (0.35421)	Data 0.01738 (0.23697)	Loss 2.2713 (0.8538)	Prec@1 37.50000 (79.83871)	Prec@5 100.00000 (99.19354)
Epoch: [27][32/60]	Time 0.07665 (0.34554)	Data 0.00036 (0.22957)	Loss 1.0273 (0.8593)	Prec@1 75.00000 (79.68750)	Prec@5 100.00000 (99.21875)
Epoch: [27][33/60]	Time 0.07241 (0.33726)	Data 0.00040 (0.22263)	Loss 0.0168 (0.8337)	Prec@1 100.00000 (80.30303)	Prec@5 100.00000 (99.24242)
Epoch: [27][34/60]	Time 0.05526 (0.32897)	Data 0.00049 (0.21609)	Loss 1.2209 (0.8451)	Prec@1 62.50000 (79.77941)	Prec@5 100.00000 (99.26471)
Epoch: [27][35/60]	Time 0.04159 (0.32076)	Data 0.00053 (0.20993)	Loss 1.5195 (0.8644)	Prec@1 75.00000 (79.64286)	Prec@5 100.00000 (99.28571)
Epoch: [27][36/60]	Time 0.04136 (0.31300)	Data 0.00044 (0.20411)	Loss 0.8195 (0.8631)	Prec@1 75.00000 (79.51389)	Prec@5 100.00000 (99.30556)
Epoch: [27][37/60]	Time 0.03428 (0.30546)	Data 0.00040 (0.19861)	Loss 1.1109 (0.8698)	Prec@1 75.00000 (79.39189)	Prec@5 100.00000 (99.32433)
Epoch: [27][38/60]	Time 0.02927 (0.29819)	Data 0.00425 (0.19349)	Loss 1.6188 (0.8895)	Prec@1 62.50000 (78.94737)	Prec@5 100.00000 (99.34211)
Epoch: [27][39/60]	Time 0.02345 (0.29115)	Data 0.00044 (0.18854)	Loss 0.1327 (0.8701)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (99.35898)
Epoch: [27][40/60]	Time 0.02363 (0.28446)	Data 0.00062 (0.18385)	Loss 0.0096 (0.8486)	Prec@1 100.00000 (79.68750)	Prec@5 100.00000 (99.37500)
Epoch: [27][41/60]	Time 0.02290 (0.27808)	Data 0.00082 (0.17938)	Loss 0.3472 (0.8364)	Prec@1 75.00000 (79.57317)	Prec@5 100.00000 (99.39024)
Epoch: [27][42/60]	Time 0.02348 (0.27202)	Data 0.00108 (0.17514)	Loss 0.8118 (0.8358)	Prec@1 75.00000 (79.46429)	Prec@5 100.00000 (99.40476)
Epoch: [27][43/60]	Time 0.02243 (0.26622)	Data 0.00058 (0.17108)	Loss 0.9940 (0.8395)	Prec@1 62.50000 (79.06977)	Prec@5 100.00000 (99.41860)
Epoch: [27][44/60]	Time 0.02307 (0.26069)	Data 0.00101 (0.16721)	Loss 0.3407 (0.8282)	Prec@1 87.50000 (79.26137)	Prec@5 100.00000 (99.43182)
Epoch: [27][45/60]	Time 0.02288 (0.25540)	Data 0.00087 (0.16352)	Loss 0.8438 (0.8285)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (99.44445)
Epoch: [27][46/60]	Time 0.02256 (0.25034)	Data 0.00053 (0.15997)	Loss 2.2575 (0.8596)	Prec@1 62.50000 (78.80435)	Prec@5 100.00000 (99.45652)
Epoch: [27][47/60]	Time 0.02298 (0.24551)	Data 0.00047 (0.15658)	Loss 0.8987 (0.8604)	Prec@1 87.50000 (78.98936)	Prec@5 87.50000 (99.20213)
Epoch: [27][48/60]	Time 0.02272 (0.24086)	Data 0.00046 (0.15333)	Loss 0.6643 (0.8563)	Prec@1 87.50000 (79.16667)	Prec@5 100.00000 (99.21875)
Epoch: [27][49/60]	Time 0.02218 (0.23640)	Data 0.00043 (0.15021)	Loss 1.5037 (0.8695)	Prec@1 50.00000 (78.57143)	Prec@5 100.00000 (99.23470)
Epoch: [27][50/60]	Time 0.02284 (0.23213)	Data 0.00041 (0.14721)	Loss 0.3756 (0.8596)	Prec@1 75.00000 (78.50000)	Prec@5 100.00000 (99.25000)
Epoch: [27][51/60]	Time 0.02327 (0.22803)	Data 0.00047 (0.14433)	Loss 0.3625 (0.8499)	Prec@1 75.00000 (78.43137)	Prec@5 100.00000 (99.26471)
Epoch: [27][52/60]	Time 0.02242 (0.22408)	Data 0.00045 (0.14157)	Loss 0.8839 (0.8506)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (99.27885)
Epoch: [27][53/60]	Time 0.02262 (0.22028)	Data 0.00045 (0.13890)	Loss 1.6871 (0.8663)	Prec@1 25.00000 (77.12264)	Prec@5 100.00000 (99.29246)
Epoch: [27][54/60]	Time 0.02234 (0.21661)	Data 0.00057 (0.13634)	Loss 1.7697 (0.8831)	Prec@1 37.50000 (76.38889)	Prec@5 100.00000 (99.30556)
Epoch: [27][55/60]	Time 0.02249 (0.21308)	Data 0.00040 (0.13387)	Loss 0.8305 (0.8821)	Prec@1 87.50000 (76.59090)	Prec@5 87.50000 (99.09090)
Epoch: [27][56/60]	Time 0.02364 (0.20970)	Data 0.00050 (0.13149)	Loss 0.9931 (0.8841)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (99.10715)
Epoch: [27][57/60]	Time 0.02314 (0.20643)	Data 0.00040 (0.12919)	Loss 1.9514 (0.9028)	Prec@1 50.00000 (76.31579)	Prec@5 100.00000 (99.12281)
Epoch: [27][58/60]	Time 0.02249 (0.20326)	Data 0.00046 (0.12697)	Loss 1.2103 (0.9081)	Prec@1 62.50000 (76.07758)	Prec@5 100.00000 (99.13793)
Epoch: [27][59/60]	Time 0.02249 (0.20019)	Data 0.00052 (0.12483)	Loss 1.4358 (0.9171)	Prec@1 50.00000 (75.63559)	Prec@5 100.00000 (99.15254)
Epoch: [27][60/60]	Time 0.02254 (0.19723)	Data 0.00043 (0.12275)	Loss 0.5118 (0.9103)	Prec@1 75.00000 (75.62501)	Prec@5 100.00000 (99.16667)
train at epoch 28
train at epoch 28
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [28][0/272]	 lr: 0.04000	Time 6.794 (6.794)	Data 5.220 (5.220)	Loss 0.0621 (0.0621)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [28][10/272]	 lr: 0.04000	Time 0.476 (1.303)	Data 0.129 (0.842)	Loss 0.1009 (0.1094)	Prec@1 100.00000 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [28][20/272]	 lr: 0.04000	Time 0.445 (0.881)	Data 0.143 (0.504)	Loss 0.1252 (0.1029)	Prec@1 96.87500 (97.32143)	Prec@5 100.00000 (100.00000)
Epoch: [28][30/272]	 lr: 0.04000	Time 0.374 (0.738)	Data 0.119 (0.385)	Loss 0.1025 (0.1038)	Prec@1 96.87500 (97.47984)	Prec@5 100.00000 (100.00000)
Epoch: [28][40/272]	 lr: 0.04000	Time 0.458 (0.663)	Data 0.128 (0.323)	Loss 0.0806 (0.1124)	Prec@1 100.00000 (96.95122)	Prec@5 100.00000 (100.00000)
Epoch: [28][50/272]	 lr: 0.04000	Time 0.431 (0.619)	Data 0.140 (0.286)	Loss 0.1016 (0.1152)	Prec@1 100.00000 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [28][60/272]	 lr: 0.04000	Time 0.418 (0.588)	Data 0.134 (0.261)	Loss 0.2109 (0.1173)	Prec@1 90.62500 (96.72131)	Prec@5 100.00000 (99.99999)
Epoch: [28][70/272]	 lr: 0.04000	Time 0.423 (0.567)	Data 0.143 (0.242)	Loss 0.0749 (0.1150)	Prec@1 100.00000 (96.91901)	Prec@5 100.00000 (100.00000)
Epoch: [28][80/272]	 lr: 0.04000	Time 0.412 (0.551)	Data 0.123 (0.228)	Loss 0.0948 (0.1178)	Prec@1 96.87500 (96.72068)	Prec@5 100.00000 (100.00000)
Epoch: [28][90/272]	 lr: 0.04000	Time 0.453 (0.541)	Data 0.115 (0.216)	Loss 0.6643 (0.1222)	Prec@1 71.87500 (96.56593)	Prec@5 100.00000 (100.00000)
Epoch: [28][100/272]	 lr: 0.04000	Time 0.385 (0.530)	Data 0.125 (0.207)	Loss 0.0666 (0.1234)	Prec@1 96.87500 (96.53465)	Prec@5 100.00000 (100.00000)
Epoch: [28][110/272]	 lr: 0.04000	Time 0.533 (0.522)	Data 0.129 (0.200)	Loss 0.0948 (0.1240)	Prec@1 96.87500 (96.53716)	Prec@5 100.00000 (100.00000)
Epoch: [28][120/272]	 lr: 0.04000	Time 0.364 (0.515)	Data 0.122 (0.194)	Loss 0.1324 (0.1220)	Prec@1 90.62500 (96.64256)	Prec@5 100.00000 (99.99999)
Epoch: [28][130/272]	 lr: 0.04000	Time 0.463 (0.510)	Data 0.125 (0.189)	Loss 0.1867 (0.1234)	Prec@1 90.62500 (96.46947)	Prec@5 100.00000 (100.00000)
Epoch: [28][140/272]	 lr: 0.04000	Time 0.413 (0.506)	Data 0.131 (0.184)	Loss 0.1317 (0.1270)	Prec@1 96.87500 (96.29876)	Prec@5 100.00000 (100.00000)
Epoch: [28][150/272]	 lr: 0.04000	Time 0.470 (0.501)	Data 0.124 (0.180)	Loss 0.1370 (0.1300)	Prec@1 93.75000 (96.17136)	Prec@5 100.00000 (100.00000)
Epoch: [28][160/272]	 lr: 0.04000	Time 0.379 (0.497)	Data 0.129 (0.177)	Loss 0.2083 (0.1412)	Prec@1 93.75000 (95.82687)	Prec@5 100.00000 (99.98059)
Epoch: [28][170/272]	 lr: 0.04000	Time 0.446 (0.492)	Data 0.136 (0.174)	Loss 0.1790 (0.1458)	Prec@1 90.62500 (95.54094)	Prec@5 100.00000 (99.98173)
Epoch: [28][180/272]	 lr: 0.04000	Time 0.468 (0.492)	Data 0.110 (0.172)	Loss 0.1965 (0.1493)	Prec@1 90.62500 (95.35567)	Prec@5 100.00000 (99.98274)
Epoch: [28][190/272]	 lr: 0.04000	Time 0.503 (0.489)	Data 0.134 (0.169)	Loss 0.1483 (0.1490)	Prec@1 96.87500 (95.38612)	Prec@5 100.00000 (99.98364)
Epoch: [28][200/272]	 lr: 0.04000	Time 0.424 (0.487)	Data 0.135 (0.167)	Loss 0.0945 (0.1502)	Prec@1 100.00000 (95.46020)	Prec@5 100.00000 (99.96890)
Epoch: [28][210/272]	 lr: 0.04000	Time 0.482 (0.485)	Data 0.127 (0.165)	Loss 0.1683 (0.1508)	Prec@1 93.75000 (95.43839)	Prec@5 100.00000 (99.97038)
Epoch: [28][220/272]	 lr: 0.04000	Time 0.407 (0.482)	Data 0.113 (0.164)	Loss 0.0734 (0.1518)	Prec@1 100.00000 (95.41856)	Prec@5 100.00000 (99.97173)
Epoch: [28][230/272]	 lr: 0.04000	Time 0.403 (0.480)	Data 0.129 (0.162)	Loss 0.0695 (0.1512)	Prec@1 96.87500 (95.42749)	Prec@5 100.00000 (99.97295)
Epoch: [28][240/272]	 lr: 0.04000	Time 0.257 (0.478)	Data 0.127 (0.161)	Loss 0.1011 (0.1493)	Prec@1 100.00000 (95.52646)	Prec@5 100.00000 (99.97408)
Epoch: [28][250/272]	 lr: 0.04000	Time 0.239 (0.468)	Data 0.129 (0.160)	Loss 0.1902 (0.1483)	Prec@1 93.75000 (95.55528)	Prec@5 100.00000 (99.97511)
Epoch: [28][260/272]	 lr: 0.04000	Time 0.238 (0.460)	Data 0.128 (0.158)	Loss 0.2453 (0.1488)	Prec@1 96.87500 (95.59386)	Prec@5 100.00000 (99.97605)
Epoch: [28][270/272]	 lr: 0.04000	Time 0.238 (0.452)	Data 0.128 (0.157)	Loss 0.1013 (0.1490)	Prec@1 96.87500 (95.57196)	Prec@5 100.00000 (99.97694)
validation at epoch 28
validation at epoch 28
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [28][1/60]	Time 5.88928 (5.88928)	Data 5.68898 (5.68898)	Loss 0.5483 (0.5483)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [28][2/60]	Time 1.58859 (3.73893)	Data 1.48166 (3.58532)	Loss 0.8473 (0.6978)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [28][3/60]	Time 0.22638 (2.56808)	Data 0.00443 (2.39169)	Loss 1.1866 (0.8607)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [28][4/60]	Time 0.16553 (1.96745)	Data 0.01427 (1.79733)	Loss 0.4757 (0.7645)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [28][5/60]	Time 0.23167 (1.62029)	Data 0.12463 (1.46279)	Loss 0.4528 (0.7021)	Prec@1 62.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [28][6/60]	Time 0.14890 (1.37506)	Data 0.08354 (1.23292)	Loss 0.5855 (0.6827)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (97.91667)
Epoch: [28][7/60]	Time 0.13807 (1.19835)	Data 0.01807 (1.05937)	Loss 0.8379 (0.7049)	Prec@1 75.00000 (78.57143)	Prec@5 100.00000 (98.21429)
Epoch: [28][8/60]	Time 0.13150 (1.06499)	Data 0.06287 (0.93480)	Loss 0.6944 (0.7036)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (98.43750)
Epoch: [28][9/60]	Time 0.22924 (0.97213)	Data 0.00049 (0.83099)	Loss 0.2728 (0.6557)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (98.61111)
Epoch: [28][10/60]	Time 0.10111 (0.88503)	Data 0.00054 (0.74795)	Loss 1.1704 (0.7072)	Prec@1 62.50000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [28][11/60]	Time 0.12150 (0.81562)	Data 0.02295 (0.68204)	Loss 0.6145 (0.6987)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [28][12/60]	Time 0.12882 (0.75838)	Data 0.01336 (0.62631)	Loss 1.1780 (0.7387)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (98.95834)
Epoch: [28][13/60]	Time 0.13533 (0.71046)	Data 0.02426 (0.58000)	Loss 2.7092 (0.8903)	Prec@1 37.50000 (73.07693)	Prec@5 87.50000 (98.07693)
Epoch: [28][14/60]	Time 0.14205 (0.66986)	Data 0.00051 (0.53861)	Loss 0.3526 (0.8519)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [28][15/60]	Time 0.19214 (0.63801)	Data 0.06314 (0.50691)	Loss 0.5126 (0.8292)	Prec@1 62.50000 (72.50000)	Prec@5 100.00000 (98.33334)
Epoch: [28][16/60]	Time 0.10642 (0.60478)	Data 0.00571 (0.47559)	Loss 2.1382 (0.9110)	Prec@1 62.50000 (71.87500)	Prec@5 87.50000 (97.65625)
Epoch: [28][17/60]	Time 0.19021 (0.58040)	Data 0.00058 (0.44765)	Loss 0.5251 (0.8883)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (97.79412)
Epoch: [28][18/60]	Time 0.22402 (0.56060)	Data 0.00392 (0.42299)	Loss 2.7528 (0.9919)	Prec@1 62.50000 (72.22222)	Prec@5 87.50000 (97.22222)
Epoch: [28][19/60]	Time 0.07027 (0.53479)	Data 0.01033 (0.40128)	Loss 0.2552 (0.9532)	Prec@1 87.50000 (73.02631)	Prec@5 100.00000 (97.36842)
Epoch: [28][20/60]	Time 0.13245 (0.51467)	Data 0.00696 (0.38156)	Loss 3.6467 (1.0878)	Prec@1 62.50000 (72.50000)	Prec@5 62.50000 (95.62500)
Epoch: [28][21/60]	Time 0.12591 (0.49616)	Data 0.00562 (0.36366)	Loss 1.0290 (1.0850)	Prec@1 62.50000 (72.02381)	Prec@5 100.00000 (95.83334)
Epoch: [28][22/60]	Time 0.08938 (0.47767)	Data 0.01869 (0.34798)	Loss 1.2453 (1.0923)	Prec@1 75.00000 (72.15910)	Prec@5 87.50000 (95.45455)
Epoch: [28][23/60]	Time 0.09956 (0.46123)	Data 0.02992 (0.33415)	Loss 2.5611 (1.1562)	Prec@1 50.00000 (71.19566)	Prec@5 87.50000 (95.10870)
Epoch: [28][24/60]	Time 0.12594 (0.44726)	Data 0.04576 (0.32213)	Loss 1.6908 (1.1785)	Prec@1 50.00000 (70.31250)	Prec@5 100.00000 (95.31250)
Epoch: [28][25/60]	Time 0.17086 (0.43621)	Data 0.01590 (0.30988)	Loss 0.7553 (1.1615)	Prec@1 75.00000 (70.50000)	Prec@5 100.00000 (95.50000)
Epoch: [28][26/60]	Time 0.22104 (0.42793)	Data 0.01104 (0.29839)	Loss 0.2232 (1.1254)	Prec@1 87.50000 (71.15385)	Prec@5 100.00000 (95.67308)
Epoch: [28][27/60]	Time 0.13435 (0.41706)	Data 0.00412 (0.28749)	Loss 2.1906 (1.1649)	Prec@1 50.00000 (70.37037)	Prec@5 87.50000 (95.37037)
Epoch: [28][28/60]	Time 0.10499 (0.40591)	Data 0.01087 (0.27761)	Loss 0.4750 (1.1402)	Prec@1 87.50000 (70.98215)	Prec@5 100.00000 (95.53572)
Epoch: [28][29/60]	Time 0.09179 (0.39508)	Data 0.01345 (0.26850)	Loss 1.0057 (1.1356)	Prec@1 75.00000 (71.12069)	Prec@5 100.00000 (95.68965)
Epoch: [28][30/60]	Time 0.05680 (0.38380)	Data 0.00276 (0.25964)	Loss 2.5704 (1.1834)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (95.83334)
Epoch: [28][31/60]	Time 0.04205 (0.37278)	Data 0.01310 (0.25169)	Loss 3.2072 (1.2487)	Prec@1 50.00000 (70.16129)	Prec@5 87.50000 (95.56451)
Epoch: [28][32/60]	Time 0.04176 (0.36243)	Data 0.00049 (0.24384)	Loss 1.5352 (1.2577)	Prec@1 50.00000 (69.53125)	Prec@5 100.00000 (95.70312)
Epoch: [28][33/60]	Time 0.04146 (0.35271)	Data 0.00189 (0.23651)	Loss 0.7194 (1.2414)	Prec@1 87.50000 (70.07576)	Prec@5 100.00000 (95.83334)
Epoch: [28][34/60]	Time 0.03443 (0.34335)	Data 0.00044 (0.22957)	Loss 2.5954 (1.2812)	Prec@1 37.50000 (69.11765)	Prec@5 100.00000 (95.95588)
Epoch: [28][35/60]	Time 0.02450 (0.33424)	Data 0.00056 (0.22302)	Loss 1.8933 (1.2987)	Prec@1 62.50000 (68.92857)	Prec@5 87.50000 (95.71429)
Epoch: [28][36/60]	Time 0.03893 (0.32603)	Data 0.00395 (0.21694)	Loss 2.0465 (1.3194)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (95.83334)
Epoch: [28][37/60]	Time 0.02525 (0.31790)	Data 0.00042 (0.21109)	Loss 2.4501 (1.3500)	Prec@1 62.50000 (68.58109)	Prec@5 87.50000 (95.60811)
Epoch: [28][38/60]	Time 0.03062 (0.31034)	Data 0.00374 (0.20563)	Loss 3.7291 (1.4126)	Prec@1 50.00000 (68.09210)	Prec@5 100.00000 (95.72369)
Epoch: [28][39/60]	Time 0.02250 (0.30296)	Data 0.00057 (0.20037)	Loss 0.5900 (1.3915)	Prec@1 87.50000 (68.58974)	Prec@5 100.00000 (95.83334)
Epoch: [28][40/60]	Time 0.02260 (0.29596)	Data 0.00070 (0.19538)	Loss 0.7563 (1.3756)	Prec@1 87.50000 (69.06250)	Prec@5 100.00000 (95.93750)
Epoch: [28][41/60]	Time 0.02378 (0.28932)	Data 0.00079 (0.19063)	Loss 0.7389 (1.3601)	Prec@1 75.00000 (69.20731)	Prec@5 100.00000 (96.03658)
Epoch: [28][42/60]	Time 0.02381 (0.28299)	Data 0.00097 (0.18612)	Loss 2.4691 (1.3865)	Prec@1 50.00000 (68.75000)	Prec@5 100.00000 (96.13095)
Epoch: [28][43/60]	Time 0.02287 (0.27695)	Data 0.00076 (0.18181)	Loss 0.7801 (1.3724)	Prec@1 75.00000 (68.89535)	Prec@5 100.00000 (96.22093)
Epoch: [28][44/60]	Time 0.02301 (0.27117)	Data 0.00076 (0.17769)	Loss 1.6730 (1.3792)	Prec@1 50.00000 (68.46591)	Prec@5 100.00000 (96.30682)
Epoch: [28][45/60]	Time 0.02424 (0.26569)	Data 0.00048 (0.17375)	Loss 1.4916 (1.3817)	Prec@1 75.00000 (68.61111)	Prec@5 87.50000 (96.11111)
Epoch: [28][46/60]	Time 0.02361 (0.26042)	Data 0.00056 (0.16999)	Loss 2.1535 (1.3985)	Prec@1 50.00000 (68.20652)	Prec@5 100.00000 (96.19566)
Epoch: [28][47/60]	Time 0.02248 (0.25536)	Data 0.00062 (0.16639)	Loss 1.5752 (1.4023)	Prec@1 75.00000 (68.35106)	Prec@5 87.50000 (96.01064)
Epoch: [28][48/60]	Time 0.02263 (0.25051)	Data 0.00046 (0.16293)	Loss 2.1713 (1.4183)	Prec@1 25.00000 (67.44792)	Prec@5 100.00000 (96.09375)
Epoch: [28][49/60]	Time 0.02253 (0.24586)	Data 0.00047 (0.15961)	Loss 1.1756 (1.4133)	Prec@1 62.50000 (67.34694)	Prec@5 100.00000 (96.17347)
Epoch: [28][50/60]	Time 0.02271 (0.24140)	Data 0.00044 (0.15643)	Loss 1.1067 (1.4072)	Prec@1 62.50000 (67.25000)	Prec@5 100.00000 (96.25000)
Epoch: [28][51/60]	Time 0.02304 (0.23712)	Data 0.00047 (0.15337)	Loss 1.1090 (1.4014)	Prec@1 75.00000 (67.40196)	Prec@5 100.00000 (96.32353)
Epoch: [28][52/60]	Time 0.02248 (0.23299)	Data 0.00044 (0.15043)	Loss 3.0894 (1.4338)	Prec@1 25.00000 (66.58654)	Prec@5 87.50000 (96.15385)
Epoch: [28][53/60]	Time 0.02246 (0.22902)	Data 0.00044 (0.14760)	Loss 1.9158 (1.4429)	Prec@1 37.50000 (66.03773)	Prec@5 100.00000 (96.22642)
Epoch: [28][54/60]	Time 0.02509 (0.22524)	Data 0.00041 (0.14487)	Loss 2.5780 (1.4639)	Prec@1 62.50000 (65.97222)	Prec@5 87.50000 (96.06482)
Epoch: [28][55/60]	Time 0.02363 (0.22157)	Data 0.00054 (0.14225)	Loss 2.4334 (1.4816)	Prec@1 50.00000 (65.68182)	Prec@5 87.50000 (95.90909)
Epoch: [28][56/60]	Time 0.02267 (0.21802)	Data 0.00065 (0.13972)	Loss 0.7163 (1.4679)	Prec@1 87.50000 (66.07143)	Prec@5 100.00000 (95.98215)
Epoch: [28][57/60]	Time 0.02247 (0.21459)	Data 0.00048 (0.13728)	Loss 1.6729 (1.4715)	Prec@1 62.50000 (66.00877)	Prec@5 87.50000 (95.83334)
Epoch: [28][58/60]	Time 0.02255 (0.21128)	Data 0.00047 (0.13492)	Loss 0.4830 (1.4545)	Prec@1 75.00000 (66.16380)	Prec@5 100.00000 (95.90517)
Epoch: [28][59/60]	Time 0.02329 (0.20809)	Data 0.00044 (0.13264)	Loss 1.8076 (1.4604)	Prec@1 62.50000 (66.10169)	Prec@5 87.50000 (95.76271)
Epoch: [28][60/60]	Time 0.02326 (0.20501)	Data 0.00057 (0.13044)	Loss 0.5842 (1.4458)	Prec@1 75.00000 (66.25000)	Prec@5 100.00000 (95.83334)
train at epoch 29
train at epoch 29
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [29][0/272]	 lr: 0.04000	Time 9.275 (9.275)	Data 7.963 (7.963)	Loss 0.0986 (0.0986)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [29][10/272]	 lr: 0.04000	Time 0.510 (1.309)	Data 0.143 (0.846)	Loss 0.0398 (0.1992)	Prec@1 100.00000 (94.03410)	Prec@5 100.00000 (100.00000)
Epoch: [29][20/272]	 lr: 0.04000	Time 0.560 (0.892)	Data 0.127 (0.504)	Loss 0.0455 (0.1775)	Prec@1 100.00000 (94.79167)	Prec@5 100.00000 (100.00000)
Epoch: [29][30/272]	 lr: 0.04000	Time 0.471 (0.743)	Data 0.120 (0.383)	Loss 0.1040 (0.1767)	Prec@1 96.87500 (94.95967)	Prec@5 100.00000 (100.00000)
Epoch: [29][40/272]	 lr: 0.04000	Time 0.456 (0.669)	Data 0.118 (0.322)	Loss 0.0758 (0.1563)	Prec@1 100.00000 (95.80792)	Prec@5 100.00000 (100.00000)
Epoch: [29][50/272]	 lr: 0.04000	Time 0.491 (0.627)	Data 0.140 (0.284)	Loss 0.0836 (0.1451)	Prec@1 100.00000 (96.26226)	Prec@5 100.00000 (100.00000)
Epoch: [29][60/272]	 lr: 0.04000	Time 0.551 (0.597)	Data 0.124 (0.258)	Loss 0.5398 (0.1467)	Prec@1 78.12500 (96.00409)	Prec@5 100.00000 (99.99999)
Epoch: [29][70/272]	 lr: 0.04000	Time 0.442 (0.575)	Data 0.120 (0.240)	Loss 0.0998 (0.1384)	Prec@1 100.00000 (96.30282)	Prec@5 100.00000 (100.00000)
Epoch: [29][80/272]	 lr: 0.04000	Time 0.591 (0.560)	Data 0.132 (0.226)	Loss 0.0300 (0.1380)	Prec@1 100.00000 (96.21914)	Prec@5 100.00000 (100.00000)
Epoch: [29][90/272]	 lr: 0.04000	Time 0.465 (0.547)	Data 0.126 (0.216)	Loss 0.1564 (0.1406)	Prec@1 96.87500 (96.01649)	Prec@5 100.00000 (100.00000)
Epoch: [29][100/272]	 lr: 0.04000	Time 0.404 (0.538)	Data 0.126 (0.206)	Loss 0.1624 (0.1379)	Prec@1 96.87500 (96.13242)	Prec@5 100.00000 (100.00000)
Epoch: [29][110/272]	 lr: 0.04000	Time 0.441 (0.531)	Data 0.128 (0.199)	Loss 0.1668 (0.1456)	Prec@1 100.00000 (95.80518)	Prec@5 100.00000 (100.00000)
Epoch: [29][120/272]	 lr: 0.04000	Time 0.455 (0.524)	Data 0.149 (0.194)	Loss 0.1281 (0.1477)	Prec@1 96.87500 (95.66116)	Prec@5 100.00000 (99.97417)
Epoch: [29][130/272]	 lr: 0.04000	Time 0.277 (0.529)	Data 0.052 (0.189)	Loss 0.0901 (0.1504)	Prec@1 93.75000 (95.56298)	Prec@5 100.00000 (99.97614)
Epoch: [29][140/272]	 lr: 0.04000	Time 0.409 (0.523)	Data 0.125 (0.184)	Loss 0.0321 (0.1495)	Prec@1 100.00000 (95.54521)	Prec@5 100.00000 (99.97784)
Epoch: [29][150/272]	 lr: 0.04000	Time 0.445 (0.518)	Data 0.138 (0.181)	Loss 0.1005 (0.1483)	Prec@1 96.87500 (95.65398)	Prec@5 100.00000 (99.97930)
Epoch: [29][160/272]	 lr: 0.04000	Time 0.457 (0.513)	Data 0.121 (0.177)	Loss 0.1857 (0.1496)	Prec@1 90.62500 (95.49689)	Prec@5 100.00000 (99.98059)
Epoch: [29][170/272]	 lr: 0.04000	Time 0.473 (0.509)	Data 0.141 (0.175)	Loss 0.1759 (0.1497)	Prec@1 96.87500 (95.48611)	Prec@5 100.00000 (99.98173)
Epoch: [29][180/272]	 lr: 0.04000	Time 0.455 (0.504)	Data 0.128 (0.172)	Loss 0.1697 (0.1460)	Prec@1 93.75000 (95.59738)	Prec@5 100.00000 (99.98274)
Epoch: [29][190/272]	 lr: 0.04000	Time 0.471 (0.501)	Data 0.136 (0.170)	Loss 0.0405 (0.1468)	Prec@1 100.00000 (95.51701)	Prec@5 100.00000 (99.98364)
Epoch: [29][200/272]	 lr: 0.04000	Time 0.509 (0.500)	Data 0.143 (0.168)	Loss 0.2624 (0.1478)	Prec@1 90.62500 (95.42910)	Prec@5 100.00000 (99.96890)
Epoch: [29][210/272]	 lr: 0.04000	Time 0.406 (0.497)	Data 0.126 (0.166)	Loss 0.1811 (0.1484)	Prec@1 96.87500 (95.42358)	Prec@5 100.00000 (99.95557)
Epoch: [29][220/272]	 lr: 0.04000	Time 0.421 (0.494)	Data 0.130 (0.165)	Loss 0.1526 (0.1495)	Prec@1 93.75000 (95.33372)	Prec@5 100.00000 (99.95758)
Epoch: [29][230/272]	 lr: 0.04000	Time 0.418 (0.491)	Data 0.128 (0.163)	Loss 0.0920 (0.1488)	Prec@1 100.00000 (95.38690)	Prec@5 100.00000 (99.95942)
Epoch: [29][240/272]	 lr: 0.04000	Time 0.239 (0.488)	Data 0.127 (0.162)	Loss 0.0708 (0.1502)	Prec@1 100.00000 (95.38382)	Prec@5 100.00000 (99.96111)
Epoch: [29][250/272]	 lr: 0.04000	Time 0.246 (0.478)	Data 0.128 (0.161)	Loss 0.1322 (0.1498)	Prec@1 96.87500 (95.38098)	Prec@5 100.00000 (99.96265)
Epoch: [29][260/272]	 lr: 0.04000	Time 0.239 (0.469)	Data 0.128 (0.159)	Loss 0.1401 (0.1506)	Prec@1 96.87500 (95.40230)	Prec@5 100.00000 (99.96408)
Epoch: [29][270/272]	 lr: 0.04000	Time 0.238 (0.460)	Data 0.129 (0.158)	Loss 0.0697 (0.1489)	Prec@1 100.00000 (95.46818)	Prec@5 100.00000 (99.96541)
validation at epoch 29
validation at epoch 29
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [29][1/60]	Time 4.22255 (4.22255)	Data 4.09487 (4.09487)	Loss 0.6236 (0.6236)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [29][2/60]	Time 3.67098 (3.94676)	Data 3.62019 (3.85753)	Loss 0.0938 (0.3587)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [29][3/60]	Time 0.15762 (2.68372)	Data 0.00160 (2.57222)	Loss 1.3333 (0.6836)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [29][4/60]	Time 0.07954 (2.03267)	Data 0.00530 (1.93049)	Loss 0.6169 (0.6669)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [29][5/60]	Time 0.14708 (1.65555)	Data 0.07052 (1.55849)	Loss 1.9448 (0.9225)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [29][6/60]	Time 0.20408 (1.41364)	Data 0.00328 (1.29929)	Loss 0.7861 (0.8998)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [29][7/60]	Time 0.16916 (1.23586)	Data 0.01965 (1.11649)	Loss 1.7265 (1.0179)	Prec@1 50.00000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [29][8/60]	Time 0.15332 (1.10054)	Data 0.00934 (0.97809)	Loss 1.3000 (1.0531)	Prec@1 50.00000 (70.31250)	Prec@5 100.00000 (98.43750)
Epoch: [29][9/60]	Time 0.14962 (0.99488)	Data 0.03044 (0.87280)	Loss 1.3678 (1.0881)	Prec@1 62.50000 (69.44444)	Prec@5 100.00000 (98.61111)
Epoch: [29][10/60]	Time 0.07463 (0.90286)	Data 0.02432 (0.78795)	Loss 0.5677 (1.0360)	Prec@1 75.00000 (70.00000)	Prec@5 100.00000 (98.75000)
Epoch: [29][11/60]	Time 0.04776 (0.82512)	Data 0.00060 (0.71637)	Loss 0.5878 (0.9953)	Prec@1 87.50000 (71.59091)	Prec@5 100.00000 (98.86364)
Epoch: [29][12/60]	Time 0.05486 (0.76093)	Data 0.00518 (0.65711)	Loss 1.0612 (1.0008)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (98.95834)
Epoch: [29][13/60]	Time 0.13003 (0.71240)	Data 0.00614 (0.60703)	Loss 1.6079 (1.0475)	Prec@1 62.50000 (70.19231)	Prec@5 87.50000 (98.07693)
Epoch: [29][14/60]	Time 0.12965 (0.67078)	Data 0.00704 (0.56418)	Loss 0.8414 (1.0328)	Prec@1 87.50000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [29][15/60]	Time 0.25058 (0.64276)	Data 0.08504 (0.53223)	Loss 1.3428 (1.0534)	Prec@1 75.00000 (71.66667)	Prec@5 100.00000 (98.33334)
Epoch: [29][16/60]	Time 0.17738 (0.61368)	Data 0.00055 (0.49900)	Loss 1.5160 (1.0823)	Prec@1 75.00000 (71.87500)	Prec@5 87.50000 (97.65625)
Epoch: [29][17/60]	Time 0.17146 (0.58766)	Data 0.01991 (0.47082)	Loss 0.1241 (1.0260)	Prec@1 100.00000 (73.52941)	Prec@5 100.00000 (97.79412)
Epoch: [29][18/60]	Time 0.12108 (0.56174)	Data 0.00767 (0.44509)	Loss 3.2951 (1.1520)	Prec@1 75.00000 (73.61111)	Prec@5 87.50000 (97.22222)
Epoch: [29][19/60]	Time 0.12501 (0.53876)	Data 0.01316 (0.42236)	Loss 0.0554 (1.0943)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (97.36842)
Epoch: [29][20/60]	Time 0.17301 (0.52047)	Data 0.02682 (0.40258)	Loss 3.9369 (1.2365)	Prec@1 62.50000 (74.37500)	Prec@5 62.50000 (95.62500)
Epoch: [29][21/60]	Time 0.16436 (0.50351)	Data 0.01199 (0.38398)	Loss 0.2903 (1.1914)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (95.83334)
Epoch: [29][22/60]	Time 0.14140 (0.48705)	Data 0.01063 (0.36701)	Loss 1.2430 (1.1937)	Prec@1 87.50000 (75.56818)	Prec@5 87.50000 (95.45455)
Epoch: [29][23/60]	Time 0.09424 (0.46997)	Data 0.00713 (0.35136)	Loss 2.2987 (1.2418)	Prec@1 50.00000 (74.45652)	Prec@5 87.50000 (95.10870)
Epoch: [29][24/60]	Time 0.16106 (0.45710)	Data 0.00066 (0.33675)	Loss 0.6774 (1.2183)	Prec@1 75.00000 (74.47917)	Prec@5 100.00000 (95.31250)
Epoch: [29][25/60]	Time 0.15865 (0.44516)	Data 0.06064 (0.32571)	Loss 0.2023 (1.1776)	Prec@1 100.00000 (75.50000)	Prec@5 100.00000 (95.50000)
Epoch: [29][26/60]	Time 0.13635 (0.43329)	Data 0.00202 (0.31326)	Loss 0.0472 (1.1342)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (95.67308)
Epoch: [29][27/60]	Time 0.09095 (0.42061)	Data 0.03899 (0.30310)	Loss 2.6104 (1.1888)	Prec@1 62.50000 (75.92593)	Prec@5 87.50000 (95.37037)
Epoch: [29][28/60]	Time 0.05157 (0.40743)	Data 0.00052 (0.29229)	Loss 0.3482 (1.1588)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (95.53572)
Epoch: [29][29/60]	Time 0.06342 (0.39557)	Data 0.00058 (0.28223)	Loss 1.4053 (1.1673)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (95.68965)
Epoch: [29][30/60]	Time 0.08958 (0.38537)	Data 0.00055 (0.27284)	Loss 1.9275 (1.1926)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (95.83334)
Epoch: [29][31/60]	Time 0.09928 (0.37614)	Data 0.00041 (0.26406)	Loss 3.1079 (1.2544)	Prec@1 50.00000 (75.00000)	Prec@5 87.50000 (95.56451)
Epoch: [29][32/60]	Time 0.03715 (0.36554)	Data 0.00048 (0.25582)	Loss 1.5291 (1.2630)	Prec@1 62.50000 (74.60938)	Prec@5 100.00000 (95.70312)
Epoch: [29][33/60]	Time 0.03411 (0.35550)	Data 0.00043 (0.24808)	Loss 0.5748 (1.2422)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (95.83334)
Epoch: [29][34/60]	Time 0.02717 (0.34584)	Data 0.00046 (0.24080)	Loss 1.8731 (1.2607)	Prec@1 50.00000 (74.26471)	Prec@5 100.00000 (95.95588)
Epoch: [29][35/60]	Time 0.02765 (0.33675)	Data 0.00064 (0.23393)	Loss 1.5030 (1.2676)	Prec@1 75.00000 (74.28571)	Prec@5 87.50000 (95.71429)
Epoch: [29][36/60]	Time 0.02689 (0.32815)	Data 0.00068 (0.22746)	Loss 1.5934 (1.2767)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (95.83334)
Epoch: [29][37/60]	Time 0.02674 (0.32000)	Data 0.00071 (0.22133)	Loss 2.0097 (1.2965)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (95.94595)
Epoch: [29][38/60]	Time 0.02620 (0.31227)	Data 0.00086 (0.21553)	Loss 2.3737 (1.3248)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (96.05264)
Epoch: [29][39/60]	Time 0.02266 (0.30484)	Data 0.00042 (0.21001)	Loss 0.3474 (1.2998)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (96.15385)
Epoch: [29][40/60]	Time 0.02369 (0.29781)	Data 0.00082 (0.20478)	Loss 0.1804 (1.2718)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (96.25000)
Epoch: [29][41/60]	Time 0.02286 (0.29111)	Data 0.00072 (0.19980)	Loss 0.9421 (1.2638)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (96.34146)
Epoch: [29][42/60]	Time 0.02324 (0.28473)	Data 0.00079 (0.19506)	Loss 1.0517 (1.2587)	Prec@1 62.50000 (73.51191)	Prec@5 100.00000 (96.42857)
Epoch: [29][43/60]	Time 0.02296 (0.27864)	Data 0.00075 (0.19055)	Loss 1.2755 (1.2591)	Prec@1 75.00000 (73.54651)	Prec@5 100.00000 (96.51163)
Epoch: [29][44/60]	Time 0.02304 (0.27283)	Data 0.00042 (0.18622)	Loss 1.1213 (1.2560)	Prec@1 50.00000 (73.01137)	Prec@5 100.00000 (96.59091)
Epoch: [29][45/60]	Time 0.02311 (0.26728)	Data 0.00067 (0.18210)	Loss 1.2226 (1.2552)	Prec@1 75.00000 (73.05556)	Prec@5 100.00000 (96.66667)
Epoch: [29][46/60]	Time 0.02278 (0.26197)	Data 0.00044 (0.17815)	Loss 0.5854 (1.2407)	Prec@1 62.50000 (72.82609)	Prec@5 100.00000 (96.73914)
Epoch: [29][47/60]	Time 0.02266 (0.25688)	Data 0.00044 (0.17437)	Loss 0.9407 (1.2343)	Prec@1 75.00000 (72.87234)	Prec@5 100.00000 (96.80851)
Epoch: [29][48/60]	Time 0.02533 (0.25205)	Data 0.00046 (0.17075)	Loss 0.6085 (1.2212)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (96.87500)
Epoch: [29][49/60]	Time 0.02375 (0.24739)	Data 0.00069 (0.16728)	Loss 0.3045 (1.2025)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (96.93877)
Epoch: [29][50/60]	Time 0.02326 (0.24291)	Data 0.00057 (0.16394)	Loss 0.7951 (1.1944)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (97.00000)
Epoch: [29][51/60]	Time 0.02273 (0.23859)	Data 0.00050 (0.16074)	Loss 0.2694 (1.1763)	Prec@1 87.50000 (73.52941)	Prec@5 100.00000 (97.05883)
Epoch: [29][52/60]	Time 0.02244 (0.23444)	Data 0.00044 (0.15766)	Loss 1.0190 (1.1732)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (97.11539)
Epoch: [29][53/60]	Time 0.02267 (0.23044)	Data 0.00047 (0.15469)	Loss 0.8200 (1.1666)	Prec@1 62.50000 (72.87736)	Prec@5 100.00000 (97.16982)
Epoch: [29][54/60]	Time 0.02316 (0.22660)	Data 0.00053 (0.15184)	Loss 1.0057 (1.1636)	Prec@1 62.50000 (72.68519)	Prec@5 100.00000 (97.22222)
Epoch: [29][55/60]	Time 0.02269 (0.22289)	Data 0.00043 (0.14908)	Loss 1.0639 (1.1618)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (97.04545)
Epoch: [29][56/60]	Time 0.02238 (0.21931)	Data 0.00053 (0.14643)	Loss 0.2837 (1.1461)	Prec@1 87.50000 (72.76786)	Prec@5 100.00000 (97.09822)
Epoch: [29][57/60]	Time 0.02269 (0.21586)	Data 0.00047 (0.14387)	Loss 1.0203 (1.1439)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (97.14912)
Epoch: [29][58/60]	Time 0.02262 (0.21253)	Data 0.00041 (0.14140)	Loss 0.5087 (1.1329)	Prec@1 75.00000 (72.41380)	Prec@5 100.00000 (97.19827)
Epoch: [29][59/60]	Time 0.02332 (0.20933)	Data 0.00044 (0.13901)	Loss 1.0879 (1.1322)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (97.24577)
Epoch: [29][60/60]	Time 0.02555 (0.20626)	Data 0.00054 (0.13670)	Loss 0.3248 (1.1187)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (97.29167)
train at epoch 30
train at epoch 30
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [30][0/272]	 lr: 0.04000	Time 8.790 (8.790)	Data 7.582 (7.582)	Loss 0.0660 (0.0660)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [30][10/272]	 lr: 0.04000	Time 0.326 (1.271)	Data 0.130 (0.806)	Loss 0.0681 (0.1705)	Prec@1 100.00000 (94.31818)	Prec@5 100.00000 (100.00000)
Epoch: [30][20/272]	 lr: 0.04000	Time 0.398 (0.860)	Data 0.141 (0.484)	Loss 0.1232 (0.1875)	Prec@1 93.75000 (93.45238)	Prec@5 100.00000 (100.00000)
Epoch: [30][30/272]	 lr: 0.04000	Time 0.378 (0.724)	Data 0.126 (0.372)	Loss 0.0833 (0.1797)	Prec@1 100.00000 (94.05241)	Prec@5 100.00000 (100.00000)
Epoch: [30][40/272]	 lr: 0.04000	Time 0.396 (0.653)	Data 0.127 (0.313)	Loss 0.0616 (0.1647)	Prec@1 96.87500 (94.43597)	Prec@5 100.00000 (100.00000)
Epoch: [30][50/272]	 lr: 0.04000	Time 0.432 (0.612)	Data 0.129 (0.276)	Loss 0.5176 (0.1646)	Prec@1 84.37500 (94.54657)	Prec@5 100.00000 (100.00000)
Epoch: [30][60/272]	 lr: 0.04000	Time 0.434 (0.586)	Data 0.136 (0.253)	Loss 0.1209 (0.1612)	Prec@1 100.00000 (94.62090)	Prec@5 100.00000 (99.99999)
Epoch: [30][70/272]	 lr: 0.04000	Time 0.360 (0.566)	Data 0.128 (0.235)	Loss 0.1530 (0.1713)	Prec@1 93.75000 (94.32218)	Prec@5 100.00000 (100.00000)
Epoch: [30][80/272]	 lr: 0.04000	Time 0.459 (0.550)	Data 0.126 (0.223)	Loss 0.1131 (0.1651)	Prec@1 100.00000 (94.56019)	Prec@5 100.00000 (100.00000)
Epoch: [30][90/272]	 lr: 0.04000	Time 0.468 (0.538)	Data 0.126 (0.213)	Loss 0.0503 (0.1650)	Prec@1 100.00000 (94.60852)	Prec@5 100.00000 (100.00000)
Epoch: [30][100/272]	 lr: 0.04000	Time 0.446 (0.527)	Data 0.129 (0.205)	Loss 0.0631 (0.1603)	Prec@1 100.00000 (94.74010)	Prec@5 100.00000 (100.00000)
Epoch: [30][110/272]	 lr: 0.04000	Time 0.380 (0.519)	Data 0.129 (0.198)	Loss 0.0432 (0.1591)	Prec@1 100.00000 (94.79167)	Prec@5 100.00000 (100.00000)
Epoch: [30][120/272]	 lr: 0.04000	Time 0.361 (0.513)	Data 0.113 (0.193)	Loss 0.0839 (0.1554)	Prec@1 96.87500 (94.91219)	Prec@5 100.00000 (99.99999)
Epoch: [30][130/272]	 lr: 0.04000	Time 0.425 (0.506)	Data 0.130 (0.188)	Loss 0.0938 (0.1540)	Prec@1 100.00000 (94.96661)	Prec@5 100.00000 (100.00000)
Epoch: [30][140/272]	 lr: 0.04000	Time 0.381 (0.501)	Data 0.129 (0.184)	Loss 0.1938 (0.1542)	Prec@1 93.75000 (95.01330)	Prec@5 100.00000 (100.00000)
Epoch: [30][150/272]	 lr: 0.04000	Time 0.439 (0.497)	Data 0.143 (0.181)	Loss 0.0703 (0.1501)	Prec@1 100.00000 (95.28146)	Prec@5 100.00000 (100.00000)
Epoch: [30][160/272]	 lr: 0.04000	Time 0.336 (0.494)	Data 0.128 (0.178)	Loss 0.0333 (0.1508)	Prec@1 100.00000 (95.28339)	Prec@5 100.00000 (100.00000)
Epoch: [30][170/272]	 lr: 0.04000	Time 0.505 (0.492)	Data 0.142 (0.175)	Loss 0.1156 (0.1487)	Prec@1 96.87500 (95.39474)	Prec@5 100.00000 (100.00000)
Epoch: [30][180/272]	 lr: 0.04000	Time 0.391 (0.490)	Data 0.128 (0.172)	Loss 0.2101 (0.1480)	Prec@1 96.87500 (95.47652)	Prec@5 100.00000 (100.00001)
Epoch: [30][190/272]	 lr: 0.04000	Time 0.421 (0.487)	Data 0.129 (0.170)	Loss 0.0837 (0.1466)	Prec@1 96.87500 (95.56610)	Prec@5 100.00000 (100.00000)
Epoch: [30][200/272]	 lr: 0.04000	Time 0.391 (0.484)	Data 0.127 (0.168)	Loss 0.0427 (0.1451)	Prec@1 100.00000 (95.58457)	Prec@5 100.00000 (100.00000)
Epoch: [30][210/272]	 lr: 0.04000	Time 0.377 (0.483)	Data 0.127 (0.165)	Loss 0.0865 (0.1453)	Prec@1 96.87500 (95.55688)	Prec@5 100.00000 (100.00000)
Epoch: [30][220/272]	 lr: 0.04000	Time 0.488 (0.481)	Data 0.143 (0.164)	Loss 0.1872 (0.1439)	Prec@1 93.75000 (95.63066)	Prec@5 100.00000 (100.00001)
Epoch: [30][230/272]	 lr: 0.04000	Time 0.460 (0.478)	Data 0.156 (0.162)	Loss 0.1708 (0.1449)	Prec@1 93.75000 (95.60336)	Prec@5 100.00000 (100.00000)
Epoch: [30][240/272]	 lr: 0.04000	Time 0.234 (0.476)	Data 0.109 (0.161)	Loss 0.0965 (0.1482)	Prec@1 100.00000 (95.44865)	Prec@5 100.00000 (100.00001)
Epoch: [30][250/272]	 lr: 0.04000	Time 0.245 (0.467)	Data 0.129 (0.160)	Loss 0.1314 (0.1472)	Prec@1 96.87500 (95.50548)	Prec@5 100.00000 (100.00000)
Epoch: [30][260/272]	 lr: 0.04000	Time 0.239 (0.458)	Data 0.128 (0.159)	Loss 0.2413 (0.1492)	Prec@1 93.75000 (95.40230)	Prec@5 100.00000 (100.00000)
Epoch: [30][270/272]	 lr: 0.04000	Time 0.239 (0.450)	Data 0.129 (0.157)	Loss 0.2137 (0.1476)	Prec@1 87.50000 (95.46818)	Prec@5 100.00000 (100.00000)
validation at epoch 30
validation at epoch 30
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [30][1/60]	Time 5.86271 (5.86271)	Data 5.66667 (5.66667)	Loss 0.4921 (0.4921)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [30][2/60]	Time 0.77910 (3.32091)	Data 0.63689 (3.15178)	Loss 0.1476 (0.3199)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [30][3/60]	Time 0.35202 (2.33128)	Data 0.07153 (2.12503)	Loss 1.2498 (0.6298)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [30][4/60]	Time 1.10080 (2.02366)	Data 1.05856 (1.85841)	Loss 0.7359 (0.6564)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [30][5/60]	Time 0.13735 (1.64640)	Data 0.04448 (1.49562)	Loss 1.2077 (0.7666)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [30][6/60]	Time 0.03597 (1.37799)	Data 0.00085 (1.24650)	Loss 0.6127 (0.7410)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (97.91667)
Epoch: [30][7/60]	Time 0.09281 (1.19440)	Data 0.01545 (1.07063)	Loss 0.7614 (0.7439)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [30][8/60]	Time 0.15068 (1.06393)	Data 0.04164 (0.94201)	Loss 0.8069 (0.7518)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.43750)
Epoch: [30][9/60]	Time 0.11177 (0.95814)	Data 0.01021 (0.83848)	Loss 0.7536 (0.7520)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [30][10/60]	Time 0.23560 (0.88588)	Data 0.00905 (0.75553)	Loss 0.0865 (0.6854)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [30][11/60]	Time 0.05581 (0.81042)	Data 0.00165 (0.68700)	Loss 0.6495 (0.6822)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [30][12/60]	Time 0.17673 (0.75761)	Data 0.05108 (0.63400)	Loss 0.2424 (0.6455)	Prec@1 87.50000 (76.04167)	Prec@5 100.00000 (98.95834)
Epoch: [30][13/60]	Time 0.14053 (0.71015)	Data 0.01912 (0.58671)	Loss 1.6540 (0.7231)	Prec@1 37.50000 (73.07693)	Prec@5 87.50000 (98.07693)
Epoch: [30][14/60]	Time 0.14758 (0.66996)	Data 0.04318 (0.54788)	Loss 0.5370 (0.7098)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (98.21429)
Epoch: [30][15/60]	Time 0.14491 (0.63496)	Data 0.03903 (0.51396)	Loss 0.2191 (0.6771)	Prec@1 87.50000 (75.00001)	Prec@5 100.00000 (98.33334)
Epoch: [30][16/60]	Time 0.21729 (0.60885)	Data 0.05414 (0.48522)	Loss 2.1737 (0.7706)	Prec@1 37.50000 (72.65625)	Prec@5 100.00000 (98.43750)
Epoch: [30][17/60]	Time 0.10871 (0.57943)	Data 0.03953 (0.45900)	Loss 0.5986 (0.7605)	Prec@1 87.50000 (73.52941)	Prec@5 100.00000 (98.52941)
Epoch: [30][18/60]	Time 0.12280 (0.55407)	Data 0.05204 (0.43639)	Loss 3.2712 (0.9000)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (98.61111)
Epoch: [30][19/60]	Time 0.09166 (0.52973)	Data 0.00760 (0.41383)	Loss 0.0635 (0.8560)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (98.68421)
Epoch: [30][20/60]	Time 0.12286 (0.50939)	Data 0.01085 (0.39368)	Loss 3.4095 (0.9836)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (98.75000)
Epoch: [30][21/60]	Time 0.24454 (0.49677)	Data 0.07346 (0.37843)	Loss 1.8510 (1.0249)	Prec@1 62.50000 (73.80952)	Prec@5 100.00000 (98.80952)
Epoch: [30][22/60]	Time 0.16852 (0.48185)	Data 0.05169 (0.36358)	Loss 1.2454 (1.0350)	Prec@1 62.50000 (73.29546)	Prec@5 100.00000 (98.86364)
Epoch: [30][23/60]	Time 0.14234 (0.46709)	Data 0.00462 (0.34797)	Loss 2.3094 (1.0904)	Prec@1 37.50000 (71.73913)	Prec@5 100.00000 (98.91305)
Epoch: [30][24/60]	Time 0.11424 (0.45239)	Data 0.00254 (0.33358)	Loss 1.5782 (1.1107)	Prec@1 37.50000 (70.31250)	Prec@5 100.00000 (98.95834)
Epoch: [30][25/60]	Time 0.13061 (0.43952)	Data 0.00132 (0.32029)	Loss 0.7689 (1.0970)	Prec@1 75.00000 (70.50000)	Prec@5 100.00000 (99.00000)
Epoch: [30][26/60]	Time 0.09885 (0.42642)	Data 0.00945 (0.30833)	Loss 0.1167 (1.0593)	Prec@1 100.00000 (71.63462)	Prec@5 100.00000 (99.03847)
Epoch: [30][27/60]	Time 0.18031 (0.41730)	Data 0.00177 (0.29698)	Loss 1.9978 (1.0941)	Prec@1 62.50000 (71.29630)	Prec@5 100.00000 (99.07407)
Epoch: [30][28/60]	Time 0.10359 (0.40610)	Data 0.00336 (0.28649)	Loss 0.5718 (1.0754)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (99.10715)
Epoch: [30][29/60]	Time 0.09279 (0.39529)	Data 0.00055 (0.27663)	Loss 1.4458 (1.0882)	Prec@1 62.50000 (71.55173)	Prec@5 100.00000 (99.13793)
Epoch: [30][30/60]	Time 0.07605 (0.38465)	Data 0.00049 (0.26743)	Loss 2.4160 (1.1325)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (99.16667)
Epoch: [30][31/60]	Time 0.04044 (0.37355)	Data 0.00044 (0.25881)	Loss 2.7574 (1.1849)	Prec@1 50.00000 (70.16129)	Prec@5 100.00000 (99.19354)
Epoch: [30][32/60]	Time 0.06209 (0.36382)	Data 0.00064 (0.25075)	Loss 2.2955 (1.2196)	Prec@1 50.00000 (69.53125)	Prec@5 100.00000 (99.21875)
Epoch: [30][33/60]	Time 0.04344 (0.35411)	Data 0.00047 (0.24316)	Loss 0.2378 (1.1898)	Prec@1 87.50000 (70.07576)	Prec@5 100.00000 (99.24242)
Epoch: [30][34/60]	Time 0.02949 (0.34456)	Data 0.00051 (0.23603)	Loss 1.9137 (1.2111)	Prec@1 37.50000 (69.11765)	Prec@5 100.00000 (99.26471)
Epoch: [30][35/60]	Time 0.02907 (0.33555)	Data 0.00041 (0.22929)	Loss 1.7697 (1.2271)	Prec@1 62.50000 (68.92857)	Prec@5 100.00000 (99.28571)
Epoch: [30][36/60]	Time 0.02856 (0.32702)	Data 0.00046 (0.22294)	Loss 1.4814 (1.2342)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (99.30556)
Epoch: [30][37/60]	Time 0.02768 (0.31893)	Data 0.00038 (0.21692)	Loss 1.4794 (1.2408)	Prec@1 75.00000 (68.91892)	Prec@5 100.00000 (99.32433)
Epoch: [30][38/60]	Time 0.02678 (0.31124)	Data 0.00044 (0.21123)	Loss 2.1902 (1.2658)	Prec@1 37.50000 (68.09210)	Prec@5 100.00000 (99.34211)
Epoch: [30][39/60]	Time 0.02727 (0.30396)	Data 0.00089 (0.20583)	Loss 0.3084 (1.2412)	Prec@1 75.00000 (68.26923)	Prec@5 100.00000 (99.35898)
Epoch: [30][40/60]	Time 0.02675 (0.29703)	Data 0.00090 (0.20071)	Loss 1.2125 (1.2405)	Prec@1 50.00000 (67.81250)	Prec@5 100.00000 (99.37500)
Epoch: [30][41/60]	Time 0.02759 (0.29046)	Data 0.00061 (0.19583)	Loss 1.4207 (1.2449)	Prec@1 75.00000 (67.98780)	Prec@5 100.00000 (99.39024)
Epoch: [30][42/60]	Time 0.02266 (0.28408)	Data 0.00043 (0.19118)	Loss 1.6014 (1.2534)	Prec@1 50.00000 (67.55952)	Prec@5 100.00000 (99.40476)
Epoch: [30][43/60]	Time 0.02288 (0.27801)	Data 0.00040 (0.18674)	Loss 1.7920 (1.2659)	Prec@1 75.00000 (67.73256)	Prec@5 100.00000 (99.41860)
Epoch: [30][44/60]	Time 0.02265 (0.27220)	Data 0.00045 (0.18251)	Loss 2.0204 (1.2831)	Prec@1 62.50000 (67.61364)	Prec@5 100.00000 (99.43182)
Epoch: [30][45/60]	Time 0.02319 (0.26667)	Data 0.00045 (0.17846)	Loss 1.4528 (1.2868)	Prec@1 37.50000 (66.94444)	Prec@5 100.00000 (99.44445)
Epoch: [30][46/60]	Time 0.02383 (0.26139)	Data 0.00049 (0.17459)	Loss 0.3981 (1.2675)	Prec@1 87.50000 (67.39130)	Prec@5 100.00000 (99.45652)
Epoch: [30][47/60]	Time 0.02302 (0.25632)	Data 0.00043 (0.17089)	Loss 1.5190 (1.2729)	Prec@1 75.00000 (67.55319)	Prec@5 87.50000 (99.20213)
Epoch: [30][48/60]	Time 0.02284 (0.25145)	Data 0.00046 (0.16734)	Loss 1.9065 (1.2861)	Prec@1 62.50000 (67.44792)	Prec@5 87.50000 (98.95834)
Epoch: [30][49/60]	Time 0.02276 (0.24679)	Data 0.00044 (0.16393)	Loss 0.2898 (1.2657)	Prec@1 87.50000 (67.85714)	Prec@5 100.00000 (98.97959)
Epoch: [30][50/60]	Time 0.02478 (0.24235)	Data 0.00048 (0.16066)	Loss 2.2306 (1.2850)	Prec@1 50.00000 (67.50000)	Prec@5 87.50000 (98.75000)
Epoch: [30][51/60]	Time 0.02296 (0.23804)	Data 0.00050 (0.15752)	Loss 0.2499 (1.2647)	Prec@1 87.50000 (67.89216)	Prec@5 100.00000 (98.77451)
Epoch: [30][52/60]	Time 0.02388 (0.23393)	Data 0.00050 (0.15450)	Loss 2.3811 (1.2862)	Prec@1 37.50000 (67.30769)	Prec@5 100.00000 (98.79808)
Epoch: [30][53/60]	Time 0.02288 (0.22994)	Data 0.00052 (0.15159)	Loss 2.1421 (1.3023)	Prec@1 50.00000 (66.98113)	Prec@5 100.00000 (98.82076)
Epoch: [30][54/60]	Time 0.02304 (0.22611)	Data 0.00049 (0.14880)	Loss 1.0207 (1.2971)	Prec@1 75.00000 (67.12963)	Prec@5 100.00000 (98.84259)
Epoch: [30][55/60]	Time 0.02247 (0.22241)	Data 0.00050 (0.14610)	Loss 1.8408 (1.3070)	Prec@1 62.50000 (67.04546)	Prec@5 87.50000 (98.63636)
Epoch: [30][56/60]	Time 0.02309 (0.21885)	Data 0.00053 (0.14350)	Loss 0.1843 (1.2870)	Prec@1 87.50000 (67.41072)	Prec@5 100.00000 (98.66072)
Epoch: [30][57/60]	Time 0.02342 (0.21542)	Data 0.00054 (0.14099)	Loss 0.8293 (1.2789)	Prec@1 75.00000 (67.54386)	Prec@5 87.50000 (98.46491)
Epoch: [30][58/60]	Time 0.02278 (0.21210)	Data 0.00049 (0.13857)	Loss 0.2970 (1.2620)	Prec@1 87.50000 (67.88793)	Prec@5 100.00000 (98.49138)
Epoch: [30][59/60]	Time 0.02264 (0.20889)	Data 0.00046 (0.13623)	Loss 1.3599 (1.2637)	Prec@1 75.00000 (68.00848)	Prec@5 100.00000 (98.51695)
Epoch: [30][60/60]	Time 0.02407 (0.20581)	Data 0.00058 (0.13397)	Loss 0.2833 (1.2473)	Prec@1 87.50000 (68.33334)	Prec@5 100.00000 (98.54167)
train at epoch 31
train at epoch 31
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [31][0/272]	 lr: 0.04000	Time 8.901 (8.901)	Data 7.810 (7.810)	Loss 0.0383 (0.0383)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [31][10/272]	 lr: 0.04000	Time 0.407 (1.281)	Data 0.131 (0.832)	Loss 0.0372 (0.1288)	Prec@1 100.00000 (96.59091)	Prec@5 100.00000 (100.00000)
Epoch: [31][20/272]	 lr: 0.04000	Time 0.446 (0.874)	Data 0.150 (0.499)	Loss 0.1199 (0.1221)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [31][30/272]	 lr: 0.04000	Time 0.283 (0.731)	Data 0.109 (0.377)	Loss 0.0144 (0.1182)	Prec@1 100.00000 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [31][40/272]	 lr: 0.04000	Time 0.426 (0.656)	Data 0.121 (0.317)	Loss 0.0560 (0.1134)	Prec@1 100.00000 (97.02744)	Prec@5 100.00000 (100.00000)
Epoch: [31][50/272]	 lr: 0.04000	Time 0.449 (0.614)	Data 0.129 (0.280)	Loss 0.0490 (0.1195)	Prec@1 100.00000 (96.56863)	Prec@5 100.00000 (100.00000)
Epoch: [31][60/272]	 lr: 0.04000	Time 0.504 (0.585)	Data 0.136 (0.256)	Loss 0.2194 (0.1122)	Prec@1 90.62500 (96.87499)	Prec@5 100.00000 (99.99999)
Epoch: [31][70/272]	 lr: 0.04000	Time 0.440 (0.566)	Data 0.131 (0.238)	Loss 0.2547 (0.1153)	Prec@1 90.62500 (96.74296)	Prec@5 100.00000 (100.00000)
Epoch: [31][80/272]	 lr: 0.04000	Time 0.460 (0.550)	Data 0.127 (0.224)	Loss 0.0516 (0.1182)	Prec@1 96.87500 (96.64352)	Prec@5 100.00000 (100.00000)
Epoch: [31][90/272]	 lr: 0.04000	Time 0.413 (0.536)	Data 0.133 (0.214)	Loss 0.3028 (0.1199)	Prec@1 93.75000 (96.60028)	Prec@5 100.00000 (100.00000)
Epoch: [31][100/272]	 lr: 0.04000	Time 0.359 (0.528)	Data 0.125 (0.205)	Loss 0.1442 (0.1193)	Prec@1 96.87500 (96.72030)	Prec@5 100.00000 (100.00000)
Epoch: [31][110/272]	 lr: 0.04000	Time 0.476 (0.523)	Data 0.126 (0.198)	Loss 0.2123 (0.1180)	Prec@1 96.87500 (96.76239)	Prec@5 100.00000 (100.00000)
Epoch: [31][120/272]	 lr: 0.04000	Time 0.471 (0.516)	Data 0.131 (0.192)	Loss 0.1874 (0.1178)	Prec@1 100.00000 (96.79752)	Prec@5 100.00000 (99.99999)
Epoch: [31][130/272]	 lr: 0.04000	Time 0.494 (0.512)	Data 0.127 (0.187)	Loss 0.1586 (0.1152)	Prec@1 93.75000 (96.89886)	Prec@5 100.00000 (100.00000)
Epoch: [31][140/272]	 lr: 0.04000	Time 0.441 (0.507)	Data 0.136 (0.184)	Loss 0.0230 (0.1118)	Prec@1 100.00000 (97.00797)	Prec@5 100.00000 (100.00000)
Epoch: [31][150/272]	 lr: 0.04000	Time 0.336 (0.502)	Data 0.108 (0.179)	Loss 0.1275 (0.1106)	Prec@1 96.87500 (97.08195)	Prec@5 100.00000 (100.00000)
Epoch: [31][160/272]	 lr: 0.04000	Time 0.473 (0.498)	Data 0.127 (0.176)	Loss 0.0989 (0.1096)	Prec@1 100.00000 (97.08851)	Prec@5 100.00000 (100.00000)
Epoch: [31][170/272]	 lr: 0.04000	Time 0.472 (0.496)	Data 0.142 (0.174)	Loss 0.1967 (0.1100)	Prec@1 93.75000 (97.07603)	Prec@5 100.00000 (99.98173)
Epoch: [31][180/272]	 lr: 0.04000	Time 0.456 (0.492)	Data 0.142 (0.171)	Loss 0.0411 (0.1096)	Prec@1 100.00000 (97.08218)	Prec@5 100.00000 (99.98274)
Epoch: [31][190/272]	 lr: 0.04000	Time 0.452 (0.489)	Data 0.129 (0.169)	Loss 0.0295 (0.1084)	Prec@1 100.00000 (97.07133)	Prec@5 100.00000 (99.98364)
Epoch: [31][200/272]	 lr: 0.04000	Time 0.574 (0.487)	Data 0.129 (0.167)	Loss 0.1820 (0.1075)	Prec@1 93.75000 (97.10821)	Prec@5 100.00000 (99.98445)
Epoch: [31][210/272]	 lr: 0.04000	Time 0.377 (0.484)	Data 0.127 (0.165)	Loss 0.0846 (0.1057)	Prec@1 100.00000 (97.23045)	Prec@5 100.00000 (99.98519)
Epoch: [31][220/272]	 lr: 0.04000	Time 0.500 (0.482)	Data 0.127 (0.163)	Loss 0.0990 (0.1041)	Prec@1 96.87500 (97.32749)	Prec@5 100.00000 (99.98586)
Epoch: [31][230/272]	 lr: 0.04000	Time 0.562 (0.479)	Data 0.132 (0.162)	Loss 0.0985 (0.1045)	Prec@1 96.87500 (97.29437)	Prec@5 100.00000 (99.98647)
Epoch: [31][240/272]	 lr: 0.04000	Time 0.313 (0.478)	Data 0.126 (0.160)	Loss 0.1915 (0.1039)	Prec@1 90.62500 (97.27698)	Prec@5 100.00000 (99.98704)
Epoch: [31][250/272]	 lr: 0.04000	Time 0.240 (0.469)	Data 0.128 (0.159)	Loss 0.1088 (0.1030)	Prec@1 93.75000 (97.28586)	Prec@5 100.00000 (99.98756)
Epoch: [31][260/272]	 lr: 0.04000	Time 0.237 (0.460)	Data 0.128 (0.158)	Loss 0.0773 (0.1038)	Prec@1 96.87500 (97.24617)	Prec@5 100.00000 (99.98802)
Epoch: [31][270/272]	 lr: 0.04000	Time 0.241 (0.452)	Data 0.128 (0.157)	Loss 0.0848 (0.1029)	Prec@1 100.00000 (97.30166)	Prec@5 100.00000 (99.98847)
validation at epoch 31
validation at epoch 31
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [31][1/60]	Time 8.07796 (8.07796)	Data 7.91908 (7.91908)	Loss 0.8671 (0.8671)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [31][2/60]	Time 0.05909 (4.06853)	Data 0.00453 (3.96180)	Loss 0.7679 (0.8175)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [31][3/60]	Time 0.10022 (2.74576)	Data 0.00786 (2.64382)	Loss 1.6195 (1.0848)	Prec@1 62.50000 (70.83334)	Prec@5 87.50000 (95.83334)
Epoch: [31][4/60]	Time 0.17359 (2.10272)	Data 0.03633 (1.99195)	Loss 1.0433 (1.0744)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (96.87500)
Epoch: [31][5/60]	Time 0.22103 (1.72638)	Data 0.02400 (1.59836)	Loss 0.8002 (1.0196)	Prec@1 62.50000 (67.50000)	Prec@5 100.00000 (97.50000)
Epoch: [31][6/60]	Time 0.10474 (1.45610)	Data 0.01711 (1.33482)	Loss 1.1717 (1.0449)	Prec@1 62.50000 (66.66667)	Prec@5 100.00000 (97.91667)
Epoch: [31][7/60]	Time 0.07113 (1.25825)	Data 0.00714 (1.14515)	Loss 1.7550 (1.1464)	Prec@1 50.00000 (64.28572)	Prec@5 87.50000 (96.42857)
Epoch: [31][8/60]	Time 0.09854 (1.11329)	Data 0.02878 (1.00560)	Loss 1.5657 (1.1988)	Prec@1 62.50000 (64.06250)	Prec@5 100.00000 (96.87500)
Epoch: [31][9/60]	Time 0.16150 (1.00753)	Data 0.03334 (0.89757)	Loss 1.7139 (1.2560)	Prec@1 50.00000 (62.50000)	Prec@5 100.00000 (97.22222)
Epoch: [31][10/60]	Time 0.16826 (0.92361)	Data 0.00668 (0.80848)	Loss 1.0182 (1.2322)	Prec@1 75.00000 (63.75000)	Prec@5 100.00000 (97.50000)
Epoch: [31][11/60]	Time 0.08811 (0.84765)	Data 0.01553 (0.73640)	Loss 0.8834 (1.2005)	Prec@1 75.00000 (64.77273)	Prec@5 100.00000 (97.72727)
Epoch: [31][12/60]	Time 0.09332 (0.78479)	Data 0.01883 (0.67660)	Loss 1.5109 (1.2264)	Prec@1 62.50000 (64.58334)	Prec@5 62.50000 (94.79167)
Epoch: [31][13/60]	Time 0.08905 (0.73127)	Data 0.01381 (0.62562)	Loss 2.4318 (1.3191)	Prec@1 37.50000 (62.50000)	Prec@5 87.50000 (94.23077)
Epoch: [31][14/60]	Time 0.22348 (0.69500)	Data 0.08003 (0.58665)	Loss 0.5450 (1.2638)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (94.64286)
Epoch: [31][15/60]	Time 0.08486 (0.65433)	Data 0.00063 (0.54758)	Loss 1.6336 (1.2885)	Prec@1 50.00000 (61.66667)	Prec@5 100.00000 (95.00001)
Epoch: [31][16/60]	Time 0.27821 (0.63082)	Data 0.00183 (0.51347)	Loss 1.4558 (1.2989)	Prec@1 75.00000 (62.50000)	Prec@5 100.00000 (95.31250)
Epoch: [31][17/60]	Time 0.18613 (0.60466)	Data 0.00055 (0.48330)	Loss 0.5699 (1.2560)	Prec@1 75.00000 (63.23529)	Prec@5 100.00000 (95.58823)
Epoch: [31][18/60]	Time 0.23281 (0.58400)	Data 0.05246 (0.45936)	Loss 3.2963 (1.3694)	Prec@1 75.00000 (63.88889)	Prec@5 100.00000 (95.83334)
Epoch: [31][19/60]	Time 0.14167 (0.56072)	Data 0.02207 (0.43635)	Loss 0.0489 (1.2999)	Prec@1 100.00000 (65.78947)	Prec@5 100.00000 (96.05264)
Epoch: [31][20/60]	Time 0.11119 (0.53824)	Data 0.03442 (0.41625)	Loss 3.6573 (1.4178)	Prec@1 62.50000 (65.62500)	Prec@5 100.00000 (96.25000)
Epoch: [31][21/60]	Time 0.17350 (0.52088)	Data 0.03211 (0.39796)	Loss 0.9467 (1.3953)	Prec@1 50.00000 (64.88095)	Prec@5 100.00000 (96.42857)
Epoch: [31][22/60]	Time 0.15033 (0.50403)	Data 0.01612 (0.38060)	Loss 1.0827 (1.3811)	Prec@1 87.50000 (65.90910)	Prec@5 87.50000 (96.02273)
Epoch: [31][23/60]	Time 0.13710 (0.48808)	Data 0.06167 (0.36673)	Loss 2.5685 (1.4327)	Prec@1 62.50000 (65.76087)	Prec@5 87.50000 (95.65218)
Epoch: [31][24/60]	Time 0.05498 (0.47003)	Data 0.00195 (0.35153)	Loss 0.8137 (1.4069)	Prec@1 87.50000 (66.66667)	Prec@5 100.00000 (95.83334)
Epoch: [31][25/60]	Time 0.06367 (0.45378)	Data 0.00235 (0.33757)	Loss 0.2814 (1.3619)	Prec@1 87.50000 (67.50000)	Prec@5 100.00000 (96.00000)
Epoch: [31][26/60]	Time 0.28036 (0.44711)	Data 0.10452 (0.32860)	Loss 0.1449 (1.3151)	Prec@1 87.50000 (68.26923)	Prec@5 100.00000 (96.15385)
Epoch: [31][27/60]	Time 0.08891 (0.43384)	Data 0.00763 (0.31672)	Loss 2.2170 (1.3485)	Prec@1 62.50000 (68.05556)	Prec@5 87.50000 (95.83334)
Epoch: [31][28/60]	Time 0.11524 (0.42246)	Data 0.01275 (0.30586)	Loss 1.0509 (1.3379)	Prec@1 87.50000 (68.75000)	Prec@5 87.50000 (95.53572)
Epoch: [31][29/60]	Time 0.07787 (0.41058)	Data 0.00057 (0.29533)	Loss 0.8628 (1.3215)	Prec@1 50.00000 (68.10345)	Prec@5 100.00000 (95.68965)
Epoch: [31][30/60]	Time 0.09126 (0.39994)	Data 0.00053 (0.28551)	Loss 2.0829 (1.3469)	Prec@1 62.50000 (67.91667)	Prec@5 100.00000 (95.83334)
Epoch: [31][31/60]	Time 0.07441 (0.38944)	Data 0.00051 (0.27631)	Loss 3.4414 (1.4145)	Prec@1 25.00000 (66.53226)	Prec@5 100.00000 (95.96774)
Epoch: [31][32/60]	Time 0.05066 (0.37885)	Data 0.00286 (0.26777)	Loss 2.1672 (1.4380)	Prec@1 50.00000 (66.01562)	Prec@5 100.00000 (96.09375)
Epoch: [31][33/60]	Time 0.06104 (0.36922)	Data 0.00231 (0.25972)	Loss 0.2503 (1.4020)	Prec@1 87.50000 (66.66667)	Prec@5 100.00000 (96.21213)
Epoch: [31][34/60]	Time 0.05930 (0.36010)	Data 0.00043 (0.25210)	Loss 1.6202 (1.4084)	Prec@1 50.00000 (66.17647)	Prec@5 100.00000 (96.32353)
Epoch: [31][35/60]	Time 0.04663 (0.35115)	Data 0.00066 (0.24491)	Loss 1.4979 (1.4110)	Prec@1 62.50000 (66.07143)	Prec@5 100.00000 (96.42857)
Epoch: [31][36/60]	Time 0.06175 (0.34311)	Data 0.00065 (0.23813)	Loss 2.2554 (1.4344)	Prec@1 62.50000 (65.97222)	Prec@5 100.00000 (96.52778)
Epoch: [31][37/60]	Time 0.04298 (0.33500)	Data 0.00047 (0.23171)	Loss 2.3688 (1.4597)	Prec@1 62.50000 (65.87838)	Prec@5 100.00000 (96.62162)
Epoch: [31][38/60]	Time 0.03364 (0.32707)	Data 0.00051 (0.22562)	Loss 2.5378 (1.4880)	Prec@1 50.00000 (65.46053)	Prec@5 100.00000 (96.71053)
Epoch: [31][39/60]	Time 0.04225 (0.31976)	Data 0.00398 (0.21994)	Loss 0.3568 (1.4590)	Prec@1 87.50000 (66.02564)	Prec@5 100.00000 (96.79488)
Epoch: [31][40/60]	Time 0.04177 (0.31281)	Data 0.00075 (0.21446)	Loss 0.4922 (1.4349)	Prec@1 87.50000 (66.56250)	Prec@5 100.00000 (96.87500)
Epoch: [31][41/60]	Time 0.02436 (0.30578)	Data 0.00073 (0.20925)	Loss 1.2872 (1.4313)	Prec@1 75.00000 (66.76829)	Prec@5 100.00000 (96.95122)
Epoch: [31][42/60]	Time 0.03208 (0.29926)	Data 0.00329 (0.20434)	Loss 1.2962 (1.4280)	Prec@1 75.00000 (66.96429)	Prec@5 100.00000 (97.02381)
Epoch: [31][43/60]	Time 0.03504 (0.29312)	Data 0.00200 (0.19964)	Loss 1.4171 (1.4278)	Prec@1 75.00000 (67.15116)	Prec@5 100.00000 (97.09303)
Epoch: [31][44/60]	Time 0.03307 (0.28721)	Data 0.00068 (0.19511)	Loss 2.1584 (1.4444)	Prec@1 37.50000 (66.47727)	Prec@5 100.00000 (97.15910)
Epoch: [31][45/60]	Time 0.02823 (0.28145)	Data 0.00083 (0.19080)	Loss 1.2196 (1.4394)	Prec@1 75.00000 (66.66667)	Prec@5 100.00000 (97.22222)
Epoch: [31][46/60]	Time 0.02825 (0.27595)	Data 0.00056 (0.18666)	Loss 2.8290 (1.4696)	Prec@1 50.00000 (66.30435)	Prec@5 100.00000 (97.28261)
Epoch: [31][47/60]	Time 0.02722 (0.27066)	Data 0.00079 (0.18271)	Loss 1.0304 (1.4603)	Prec@1 75.00000 (66.48936)	Prec@5 100.00000 (97.34042)
Epoch: [31][48/60]	Time 0.03603 (0.26577)	Data 0.00094 (0.17892)	Loss 0.7101 (1.4446)	Prec@1 87.50000 (66.92709)	Prec@5 100.00000 (97.39584)
Epoch: [31][49/60]	Time 0.02911 (0.26094)	Data 0.00113 (0.17529)	Loss 1.2347 (1.4404)	Prec@1 75.00000 (67.09184)	Prec@5 100.00000 (97.44897)
Epoch: [31][50/60]	Time 0.02766 (0.25627)	Data 0.00104 (0.17181)	Loss 0.4594 (1.4207)	Prec@1 87.50000 (67.50000)	Prec@5 100.00000 (97.50000)
Epoch: [31][51/60]	Time 0.02754 (0.25179)	Data 0.00071 (0.16845)	Loss 0.7060 (1.4067)	Prec@1 75.00000 (67.64706)	Prec@5 100.00000 (97.54903)
Epoch: [31][52/60]	Time 0.02991 (0.24752)	Data 0.00048 (0.16522)	Loss 1.2522 (1.4037)	Prec@1 50.00000 (67.30769)	Prec@5 100.00000 (97.59616)
Epoch: [31][53/60]	Time 0.02799 (0.24338)	Data 0.00054 (0.16211)	Loss 0.4922 (1.3865)	Prec@1 87.50000 (67.68868)	Prec@5 100.00000 (97.64151)
Epoch: [31][54/60]	Time 0.02729 (0.23938)	Data 0.00054 (0.15912)	Loss 1.7591 (1.3934)	Prec@1 62.50000 (67.59259)	Prec@5 100.00000 (97.68519)
Epoch: [31][55/60]	Time 0.02239 (0.23543)	Data 0.00045 (0.15624)	Loss 1.1542 (1.3891)	Prec@1 62.50000 (67.50000)	Prec@5 100.00000 (97.72727)
Epoch: [31][56/60]	Time 0.02715 (0.23171)	Data 0.00055 (0.15346)	Loss 1.0317 (1.3827)	Prec@1 87.50000 (67.85715)	Prec@5 100.00000 (97.76786)
Epoch: [31][57/60]	Time 0.02893 (0.22815)	Data 0.00046 (0.15077)	Loss 1.6846 (1.3880)	Prec@1 62.50000 (67.76316)	Prec@5 100.00000 (97.80701)
Epoch: [31][58/60]	Time 0.02324 (0.22462)	Data 0.00077 (0.14819)	Loss 1.3499 (1.3874)	Prec@1 75.00000 (67.88793)	Prec@5 100.00000 (97.84483)
Epoch: [31][59/60]	Time 0.02220 (0.22119)	Data 0.00048 (0.14568)	Loss 1.7817 (1.3940)	Prec@1 62.50000 (67.79661)	Prec@5 100.00000 (97.88136)
Epoch: [31][60/60]	Time 0.02239 (0.21788)	Data 0.00053 (0.14326)	Loss 0.3898 (1.3773)	Prec@1 87.50000 (68.12500)	Prec@5 100.00000 (97.91667)
train at epoch 32
train at epoch 32
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [32][0/272]	 lr: 0.04000	Time 9.678 (9.678)	Data 8.449 (8.449)	Loss 0.0588 (0.0588)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [32][10/272]	 lr: 0.04000	Time 0.345 (1.290)	Data 0.127 (0.885)	Loss 0.1464 (0.0931)	Prec@1 96.87500 (97.72727)	Prec@5 100.00000 (100.00000)
Epoch: [32][20/272]	 lr: 0.04000	Time 0.427 (0.871)	Data 0.141 (0.528)	Loss 0.0179 (0.0969)	Prec@1 100.00000 (97.91667)	Prec@5 100.00000 (100.00000)
Epoch: [32][30/272]	 lr: 0.04000	Time 0.459 (0.727)	Data 0.127 (0.400)	Loss 0.0204 (0.0956)	Prec@1 100.00000 (97.88306)	Prec@5 100.00000 (100.00000)
Epoch: [32][40/272]	 lr: 0.04000	Time 0.492 (0.652)	Data 0.142 (0.333)	Loss 0.0461 (0.0896)	Prec@1 100.00000 (98.01829)	Prec@5 100.00000 (100.00000)
Epoch: [32][50/272]	 lr: 0.04000	Time 0.398 (0.613)	Data 0.129 (0.293)	Loss 0.0463 (0.0905)	Prec@1 100.00000 (98.10049)	Prec@5 100.00000 (100.00000)
Epoch: [32][60/272]	 lr: 0.04000	Time 0.406 (0.587)	Data 0.111 (0.265)	Loss 0.0767 (0.0872)	Prec@1 100.00000 (98.30942)	Prec@5 100.00000 (99.99999)
Epoch: [32][70/272]	 lr: 0.04000	Time 0.459 (0.566)	Data 0.141 (0.246)	Loss 0.0331 (0.0840)	Prec@1 100.00000 (98.37148)	Prec@5 100.00000 (100.00000)
Epoch: [32][80/272]	 lr: 0.04000	Time 0.434 (0.554)	Data 0.136 (0.231)	Loss 0.0655 (0.0873)	Prec@1 100.00000 (98.30247)	Prec@5 100.00000 (100.00000)
Epoch: [32][90/272]	 lr: 0.04000	Time 0.402 (0.543)	Data 0.148 (0.220)	Loss 0.0829 (0.0839)	Prec@1 96.87500 (98.45467)	Prec@5 100.00000 (100.00000)
Epoch: [32][100/272]	 lr: 0.04000	Time 0.427 (0.533)	Data 0.140 (0.212)	Loss 0.0817 (0.0841)	Prec@1 100.00000 (98.39109)	Prec@5 100.00000 (100.00000)
Epoch: [32][110/272]	 lr: 0.04000	Time 0.467 (0.524)	Data 0.114 (0.204)	Loss 0.4778 (0.0909)	Prec@1 84.37500 (98.22636)	Prec@5 100.00000 (100.00000)
Epoch: [32][120/272]	 lr: 0.04000	Time 0.503 (0.516)	Data 0.150 (0.199)	Loss 0.2258 (0.1012)	Prec@1 87.50000 (97.72727)	Prec@5 100.00000 (99.99999)
Epoch: [32][130/272]	 lr: 0.04000	Time 0.426 (0.510)	Data 0.121 (0.193)	Loss 0.1113 (0.1025)	Prec@1 93.75000 (97.66222)	Prec@5 100.00000 (100.00000)
Epoch: [32][140/272]	 lr: 0.04000	Time 0.490 (0.505)	Data 0.151 (0.189)	Loss 0.1271 (0.1044)	Prec@1 96.87500 (97.65070)	Prec@5 100.00000 (100.00000)
Epoch: [32][150/272]	 lr: 0.04000	Time 0.432 (0.500)	Data 0.131 (0.185)	Loss 0.0921 (0.1038)	Prec@1 100.00000 (97.70281)	Prec@5 100.00000 (100.00000)
Epoch: [32][160/272]	 lr: 0.04000	Time 0.398 (0.497)	Data 0.118 (0.181)	Loss 0.0785 (0.1035)	Prec@1 96.87500 (97.70963)	Prec@5 100.00000 (100.00000)
Epoch: [32][170/272]	 lr: 0.04000	Time 0.436 (0.495)	Data 0.135 (0.178)	Loss 0.0933 (0.1021)	Prec@1 96.87500 (97.66082)	Prec@5 100.00000 (100.00000)
Epoch: [32][180/272]	 lr: 0.04000	Time 0.468 (0.494)	Data 0.158 (0.175)	Loss 0.0943 (0.1058)	Prec@1 93.75000 (97.47929)	Prec@5 100.00000 (100.00001)
Epoch: [32][190/272]	 lr: 0.04000	Time 0.413 (0.491)	Data 0.122 (0.173)	Loss 0.1500 (0.1093)	Prec@1 100.00000 (97.26767)	Prec@5 100.00000 (100.00000)
Epoch: [32][200/272]	 lr: 0.04000	Time 0.499 (0.487)	Data 0.141 (0.171)	Loss 0.0494 (0.1147)	Prec@1 100.00000 (97.01492)	Prec@5 100.00000 (100.00000)
Epoch: [32][210/272]	 lr: 0.04000	Time 0.403 (0.485)	Data 0.134 (0.169)	Loss 0.2354 (0.1214)	Prec@1 90.62500 (96.66766)	Prec@5 100.00000 (100.00000)
Epoch: [32][220/272]	 lr: 0.04000	Time 0.462 (0.483)	Data 0.135 (0.167)	Loss 0.0861 (0.1224)	Prec@1 100.00000 (96.66290)	Prec@5 100.00000 (100.00001)
Epoch: [32][230/272]	 lr: 0.04000	Time 0.546 (0.482)	Data 0.129 (0.166)	Loss 0.0656 (0.1265)	Prec@1 100.00000 (96.45563)	Prec@5 100.00000 (100.00000)
Epoch: [32][240/272]	 lr: 0.04000	Time 0.262 (0.479)	Data 0.114 (0.164)	Loss 0.1411 (0.1284)	Prec@1 93.75000 (96.34337)	Prec@5 100.00000 (100.00001)
Epoch: [32][250/272]	 lr: 0.04000	Time 0.239 (0.470)	Data 0.129 (0.163)	Loss 0.1113 (0.1288)	Prec@1 100.00000 (96.32719)	Prec@5 100.00000 (99.98756)
Epoch: [32][260/272]	 lr: 0.04000	Time 0.241 (0.461)	Data 0.129 (0.161)	Loss 0.4616 (0.1379)	Prec@1 78.12500 (96.02490)	Prec@5 100.00000 (99.95210)
Epoch: [32][270/272]	 lr: 0.04000	Time 0.240 (0.453)	Data 0.129 (0.160)	Loss 0.0834 (0.1405)	Prec@1 100.00000 (95.87177)	Prec@5 100.00000 (99.95387)
validation at epoch 32
validation at epoch 32
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [32][1/60]	Time 3.89684 (3.89684)	Data 3.75673 (3.75673)	Loss 0.7246 (0.7246)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [32][2/60]	Time 2.67791 (3.28737)	Data 2.57736 (3.16704)	Loss 0.3561 (0.5403)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [32][3/60]	Time 0.85215 (2.47563)	Data 0.78866 (2.37425)	Loss 0.7799 (0.6202)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [32][4/60]	Time 0.09665 (1.88089)	Data 0.02821 (1.78774)	Loss 0.4514 (0.5780)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [32][5/60]	Time 0.08518 (1.52175)	Data 0.00050 (1.43029)	Loss 0.6859 (0.5996)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [32][6/60]	Time 0.32871 (1.32291)	Data 0.24898 (1.23341)	Loss 0.2912 (0.5482)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [32][7/60]	Time 0.06323 (1.14295)	Data 0.00230 (1.05753)	Loss 0.4799 (0.5384)	Prec@1 87.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [32][8/60]	Time 0.05065 (1.00641)	Data 0.00061 (0.92542)	Loss 0.4030 (0.5215)	Prec@1 87.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [32][9/60]	Time 0.15560 (0.91188)	Data 0.03533 (0.82652)	Loss 0.9386 (0.5678)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [32][10/60]	Time 0.10564 (0.83126)	Data 0.00638 (0.74451)	Loss 0.0438 (0.5154)	Prec@1 100.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [32][11/60]	Time 0.11513 (0.76615)	Data 0.00980 (0.67772)	Loss 0.3580 (0.5011)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [32][12/60]	Time 0.31513 (0.72857)	Data 0.09171 (0.62888)	Loss 0.3735 (0.4905)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [32][13/60]	Time 0.28504 (0.69445)	Data 0.00067 (0.58056)	Loss 0.7569 (0.5110)	Prec@1 75.00000 (80.76923)	Prec@5 100.00000 (100.00000)
Epoch: [32][14/60]	Time 0.21895 (0.66049)	Data 0.07675 (0.54457)	Loss 0.2242 (0.4905)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00001)
Epoch: [32][15/60]	Time 0.10375 (0.62337)	Data 0.00071 (0.50831)	Loss 0.1707 (0.4692)	Prec@1 87.50000 (81.66667)	Prec@5 100.00000 (100.00001)
Epoch: [32][16/60]	Time 0.19964 (0.59689)	Data 0.02199 (0.47792)	Loss 1.5632 (0.5375)	Prec@1 62.50000 (80.46875)	Prec@5 100.00000 (100.00000)
Epoch: [32][17/60]	Time 0.12538 (0.56915)	Data 0.01877 (0.45091)	Loss 1.0116 (0.5654)	Prec@1 62.50000 (79.41177)	Prec@5 100.00000 (100.00000)
Epoch: [32][18/60]	Time 0.08149 (0.54206)	Data 0.01276 (0.42657)	Loss 3.2579 (0.7150)	Prec@1 62.50000 (78.47222)	Prec@5 87.50000 (99.30556)
Epoch: [32][19/60]	Time 0.05728 (0.51654)	Data 0.00603 (0.40443)	Loss 0.5333 (0.7055)	Prec@1 87.50000 (78.94737)	Prec@5 87.50000 (98.68421)
Epoch: [32][20/60]	Time 0.12235 (0.49683)	Data 0.00074 (0.38425)	Loss 3.1887 (0.8296)	Prec@1 50.00000 (77.50000)	Prec@5 87.50000 (98.12500)
Epoch: [32][21/60]	Time 0.12685 (0.47922)	Data 0.00305 (0.36610)	Loss 1.6321 (0.8678)	Prec@1 50.00000 (76.19048)	Prec@5 100.00000 (98.21429)
Epoch: [32][22/60]	Time 0.15357 (0.46441)	Data 0.03725 (0.35115)	Loss 1.9527 (0.9171)	Prec@1 62.50000 (75.56818)	Prec@5 87.50000 (97.72727)
Epoch: [32][23/60]	Time 0.11283 (0.44913)	Data 0.02202 (0.33684)	Loss 1.8705 (0.9586)	Prec@1 50.00000 (74.45652)	Prec@5 87.50000 (97.28261)
Epoch: [32][24/60]	Time 0.09816 (0.43450)	Data 0.00918 (0.32319)	Loss 1.0267 (0.9614)	Prec@1 75.00000 (74.47917)	Prec@5 87.50000 (96.87500)
Epoch: [32][25/60]	Time 0.18572 (0.42455)	Data 0.05669 (0.31253)	Loss 1.5004 (0.9830)	Prec@1 62.50000 (74.00000)	Prec@5 87.50000 (96.50000)
Epoch: [32][26/60]	Time 0.22957 (0.41705)	Data 0.04571 (0.30227)	Loss 0.7557 (0.9742)	Prec@1 75.00000 (74.03847)	Prec@5 100.00000 (96.63462)
Epoch: [32][27/60]	Time 0.07184 (0.40427)	Data 0.01612 (0.29167)	Loss 1.6686 (1.0000)	Prec@1 62.50000 (73.61111)	Prec@5 87.50000 (96.29630)
Epoch: [32][28/60]	Time 0.16143 (0.39560)	Data 0.07992 (0.28410)	Loss 0.5328 (0.9833)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (96.42857)
Epoch: [32][29/60]	Time 0.10384 (0.38553)	Data 0.00051 (0.27433)	Loss 1.5232 (1.0019)	Prec@1 50.00000 (73.27586)	Prec@5 100.00000 (96.55173)
Epoch: [32][30/60]	Time 0.07239 (0.37510)	Data 0.00056 (0.26520)	Loss 2.2468 (1.0434)	Prec@1 50.00000 (72.50000)	Prec@5 87.50000 (96.25001)
Epoch: [32][31/60]	Time 0.04785 (0.36454)	Data 0.00048 (0.25666)	Loss 5.0402 (1.1723)	Prec@1 37.50000 (71.37096)	Prec@5 62.50000 (95.16129)
Epoch: [32][32/60]	Time 0.03541 (0.35425)	Data 0.00042 (0.24865)	Loss 3.8741 (1.2567)	Prec@1 62.50000 (71.09375)	Prec@5 75.00000 (94.53125)
Epoch: [32][33/60]	Time 0.05530 (0.34520)	Data 0.00085 (0.24114)	Loss 0.0199 (1.2193)	Prec@1 100.00000 (71.96970)	Prec@5 100.00000 (94.69698)
Epoch: [32][34/60]	Time 0.03536 (0.33608)	Data 0.00075 (0.23407)	Loss 1.9017 (1.2393)	Prec@1 75.00000 (72.05882)	Prec@5 100.00000 (94.85294)
Epoch: [32][35/60]	Time 0.03493 (0.32748)	Data 0.00062 (0.22740)	Loss 2.3162 (1.2701)	Prec@1 75.00000 (72.14286)	Prec@5 87.50000 (94.64286)
Epoch: [32][36/60]	Time 0.04608 (0.31966)	Data 0.00043 (0.22110)	Loss 2.9017 (1.3154)	Prec@1 62.50000 (71.87500)	Prec@5 75.00000 (94.09722)
Epoch: [32][37/60]	Time 0.05117 (0.31241)	Data 0.00048 (0.21514)	Loss 3.3176 (1.3695)	Prec@1 62.50000 (71.62162)	Prec@5 75.00000 (93.58109)
Epoch: [32][38/60]	Time 0.05323 (0.30558)	Data 0.00048 (0.20949)	Loss 2.2340 (1.3923)	Prec@1 62.50000 (71.38158)	Prec@5 87.50000 (93.42105)
Epoch: [32][39/60]	Time 0.02772 (0.29846)	Data 0.00083 (0.20414)	Loss 0.0759 (1.3585)	Prec@1 100.00000 (72.11539)	Prec@5 100.00000 (93.58974)
Epoch: [32][40/60]	Time 0.02755 (0.29169)	Data 0.00074 (0.19905)	Loss 0.0121 (1.3249)	Prec@1 100.00000 (72.81250)	Prec@5 100.00000 (93.75000)
Epoch: [32][41/60]	Time 0.02956 (0.28529)	Data 0.00059 (0.19421)	Loss 2.8968 (1.3632)	Prec@1 62.50000 (72.56097)	Prec@5 100.00000 (93.90244)
Epoch: [32][42/60]	Time 0.02279 (0.27904)	Data 0.00058 (0.18960)	Loss 0.4557 (1.3416)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (94.04762)
Epoch: [32][43/60]	Time 0.02237 (0.27307)	Data 0.00077 (0.18521)	Loss 2.8427 (1.3765)	Prec@1 62.50000 (72.67442)	Prec@5 87.50000 (93.89535)
Epoch: [32][44/60]	Time 0.02275 (0.26739)	Data 0.00095 (0.18102)	Loss 3.3916 (1.4223)	Prec@1 50.00000 (72.15910)	Prec@5 87.50000 (93.75000)
Epoch: [32][45/60]	Time 0.02338 (0.26196)	Data 0.00093 (0.17702)	Loss 1.6840 (1.4281)	Prec@1 75.00000 (72.22222)	Prec@5 87.50000 (93.61111)
Epoch: [32][46/60]	Time 0.02327 (0.25677)	Data 0.00073 (0.17319)	Loss 0.4708 (1.4073)	Prec@1 75.00000 (72.28261)	Prec@5 100.00000 (93.75000)
Epoch: [32][47/60]	Time 0.02292 (0.25180)	Data 0.00100 (0.16952)	Loss 1.0155 (1.3990)	Prec@1 87.50000 (72.60638)	Prec@5 87.50000 (93.61702)
Epoch: [32][48/60]	Time 0.02263 (0.24702)	Data 0.00089 (0.16601)	Loss 1.1574 (1.3940)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (93.75000)
Epoch: [32][49/60]	Time 0.02265 (0.24245)	Data 0.00098 (0.16264)	Loss 0.1486 (1.3685)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (93.87755)
Epoch: [32][50/60]	Time 0.02268 (0.23805)	Data 0.00046 (0.15940)	Loss 0.6865 (1.3549)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (94.00000)
Epoch: [32][51/60]	Time 0.02397 (0.23385)	Data 0.00049 (0.15628)	Loss 0.0316 (1.3289)	Prec@1 100.00000 (73.77451)	Prec@5 100.00000 (94.11765)
Epoch: [32][52/60]	Time 0.02254 (0.22979)	Data 0.00047 (0.15329)	Loss 2.4566 (1.3506)	Prec@1 62.50000 (73.55769)	Prec@5 87.50000 (93.99039)
Epoch: [32][53/60]	Time 0.02224 (0.22587)	Data 0.00048 (0.15040)	Loss 0.2796 (1.3304)	Prec@1 87.50000 (73.82076)	Prec@5 100.00000 (94.10378)
Epoch: [32][54/60]	Time 0.02225 (0.22210)	Data 0.00046 (0.14763)	Loss 1.4758 (1.3331)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (94.21297)
Epoch: [32][55/60]	Time 0.02262 (0.21847)	Data 0.00047 (0.14495)	Loss 2.1240 (1.3475)	Prec@1 75.00000 (73.86363)	Prec@5 87.50000 (94.09090)
Epoch: [32][56/60]	Time 0.02312 (0.21499)	Data 0.00051 (0.14237)	Loss 1.5231 (1.3506)	Prec@1 62.50000 (73.66072)	Prec@5 100.00000 (94.19643)
Epoch: [32][57/60]	Time 0.02211 (0.21160)	Data 0.00047 (0.13988)	Loss 1.8022 (1.3586)	Prec@1 75.00000 (73.68421)	Prec@5 87.50000 (94.07895)
Epoch: [32][58/60]	Time 0.02223 (0.20834)	Data 0.00046 (0.13748)	Loss 1.3125 (1.3578)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (94.18104)
Epoch: [32][59/60]	Time 0.02231 (0.20518)	Data 0.00041 (0.13516)	Loss 1.4032 (1.3585)	Prec@1 75.00000 (73.72881)	Prec@5 100.00000 (94.27966)
Epoch: [32][60/60]	Time 0.02267 (0.20214)	Data 0.00052 (0.13291)	Loss 1.0660 (1.3537)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (94.37501)
train at epoch 33
train at epoch 33
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [33][0/272]	 lr: 0.04000	Time 9.333 (9.333)	Data 8.441 (8.441)	Loss 0.0424 (0.0424)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [33][10/272]	 lr: 0.04000	Time 0.451 (1.299)	Data 0.140 (0.886)	Loss 0.0674 (0.1600)	Prec@1 96.87500 (95.17046)	Prec@5 100.00000 (99.43182)
Epoch: [33][20/272]	 lr: 0.04000	Time 0.424 (0.887)	Data 0.128 (0.526)	Loss 0.0194 (0.1626)	Prec@1 100.00000 (95.38691)	Prec@5 100.00000 (99.70238)
Epoch: [33][30/272]	 lr: 0.04000	Time 0.385 (0.739)	Data 0.128 (0.398)	Loss 0.6312 (0.1736)	Prec@1 75.00000 (95.06048)	Prec@5 100.00000 (99.79839)
Epoch: [33][40/272]	 lr: 0.04000	Time 0.360 (0.667)	Data 0.127 (0.334)	Loss 0.0782 (0.1752)	Prec@1 100.00000 (94.96951)	Prec@5 100.00000 (99.84756)
Epoch: [33][50/272]	 lr: 0.04000	Time 0.423 (0.625)	Data 0.128 (0.293)	Loss 0.1333 (0.1802)	Prec@1 96.87500 (94.30148)	Prec@5 100.00000 (99.87746)
Epoch: [33][60/272]	 lr: 0.04000	Time 0.576 (0.598)	Data 0.128 (0.266)	Loss 0.4578 (0.1773)	Prec@1 87.50000 (94.41598)	Prec@5 100.00000 (99.89754)
Epoch: [33][70/272]	 lr: 0.04000	Time 0.377 (0.575)	Data 0.126 (0.247)	Loss 0.0707 (0.1654)	Prec@1 100.00000 (94.93838)	Prec@5 100.00000 (99.91197)
Epoch: [33][80/272]	 lr: 0.04000	Time 0.490 (0.558)	Data 0.136 (0.233)	Loss 0.1334 (0.1673)	Prec@1 93.75000 (95.02315)	Prec@5 100.00000 (99.92284)
Epoch: [33][90/272]	 lr: 0.04000	Time 0.447 (0.545)	Data 0.143 (0.222)	Loss 0.0691 (0.1597)	Prec@1 96.87500 (95.29533)	Prec@5 100.00000 (99.93132)
Epoch: [33][100/272]	 lr: 0.04000	Time 0.456 (0.536)	Data 0.143 (0.213)	Loss 0.0400 (0.1527)	Prec@1 100.00000 (95.57549)	Prec@5 100.00000 (99.93812)
Epoch: [33][110/272]	 lr: 0.04000	Time 0.439 (0.526)	Data 0.119 (0.206)	Loss 0.1683 (0.1481)	Prec@1 90.62500 (95.66441)	Prec@5 100.00000 (99.94370)
Epoch: [33][120/272]	 lr: 0.04000	Time 0.454 (0.520)	Data 0.129 (0.199)	Loss 0.1280 (0.1461)	Prec@1 96.87500 (95.71281)	Prec@5 100.00000 (99.94834)
Epoch: [33][130/272]	 lr: 0.04000	Time 0.301 (0.513)	Data 0.125 (0.194)	Loss 0.0940 (0.1419)	Prec@1 100.00000 (95.92080)	Prec@5 100.00000 (99.95229)
Epoch: [33][140/272]	 lr: 0.04000	Time 0.495 (0.509)	Data 0.126 (0.190)	Loss 0.1023 (0.1377)	Prec@1 96.87500 (96.07713)	Prec@5 100.00000 (99.95567)
Epoch: [33][150/272]	 lr: 0.04000	Time 0.513 (0.504)	Data 0.129 (0.186)	Loss 0.0629 (0.1351)	Prec@1 100.00000 (96.17136)	Prec@5 100.00000 (99.95861)
Epoch: [33][160/272]	 lr: 0.04000	Time 0.371 (0.499)	Data 0.130 (0.182)	Loss 0.0522 (0.1304)	Prec@1 100.00000 (96.35094)	Prec@5 100.00000 (99.96118)
Epoch: [33][170/272]	 lr: 0.04000	Time 0.468 (0.496)	Data 0.131 (0.179)	Loss 0.1739 (0.1268)	Prec@1 93.75000 (96.45468)	Prec@5 100.00000 (99.96345)
Epoch: [33][180/272]	 lr: 0.04000	Time 0.385 (0.492)	Data 0.128 (0.176)	Loss 0.0357 (0.1260)	Prec@1 100.00000 (96.47791)	Prec@5 100.00000 (99.96548)
Epoch: [33][190/272]	 lr: 0.04000	Time 0.424 (0.489)	Data 0.128 (0.174)	Loss 0.1480 (0.1248)	Prec@1 96.87500 (96.53142)	Prec@5 100.00000 (99.96728)
Epoch: [33][200/272]	 lr: 0.04000	Time 0.412 (0.488)	Data 0.131 (0.172)	Loss 0.0986 (0.1255)	Prec@1 100.00000 (96.53296)	Prec@5 100.00000 (99.96890)
Epoch: [33][210/272]	 lr: 0.04000	Time 0.426 (0.486)	Data 0.141 (0.170)	Loss 0.1540 (0.1244)	Prec@1 93.75000 (96.56399)	Prec@5 100.00000 (99.97038)
Epoch: [33][220/272]	 lr: 0.04000	Time 0.438 (0.484)	Data 0.129 (0.168)	Loss 0.6879 (0.1260)	Prec@1 78.12500 (96.50735)	Prec@5 100.00000 (99.97173)
Epoch: [33][230/272]	 lr: 0.04000	Time 0.367 (0.483)	Data 0.121 (0.166)	Loss 0.3554 (0.1273)	Prec@1 81.25000 (96.41505)	Prec@5 100.00000 (99.97295)
Epoch: [33][240/272]	 lr: 0.04000	Time 0.427 (0.481)	Data 0.127 (0.165)	Loss 0.1481 (0.1291)	Prec@1 96.87500 (96.36930)	Prec@5 100.00000 (99.97408)
Epoch: [33][250/272]	 lr: 0.04000	Time 0.243 (0.472)	Data 0.129 (0.163)	Loss 0.2754 (0.1291)	Prec@1 87.50000 (96.36455)	Prec@5 100.00000 (99.97511)
Epoch: [33][260/272]	 lr: 0.04000	Time 0.239 (0.463)	Data 0.128 (0.162)	Loss 0.2228 (0.1299)	Prec@1 84.37500 (96.28831)	Prec@5 100.00000 (99.97605)
Epoch: [33][270/272]	 lr: 0.04000	Time 0.239 (0.455)	Data 0.128 (0.161)	Loss 0.0848 (0.1322)	Prec@1 96.87500 (96.20618)	Prec@5 100.00000 (99.97694)
validation at epoch 33
validation at epoch 33
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [33][1/60]	Time 5.79658 (5.79658)	Data 5.64608 (5.64608)	Loss 2.0585 (2.0585)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (100.00000)
Epoch: [33][2/60]	Time 1.46434 (3.63046)	Data 1.39033 (3.51821)	Loss 1.1412 (1.5998)	Prec@1 75.00000 (68.75000)	Prec@5 100.00000 (100.00000)
Epoch: [33][3/60]	Time 0.09098 (2.45063)	Data 0.00704 (2.34782)	Loss 1.8217 (1.6738)	Prec@1 75.00000 (70.83334)	Prec@5 87.50000 (95.83334)
Epoch: [33][4/60]	Time 0.28337 (1.90882)	Data 0.21112 (1.81364)	Loss 2.0440 (1.7663)	Prec@1 62.50000 (68.75000)	Prec@5 100.00000 (96.87500)
Epoch: [33][5/60]	Time 0.17925 (1.56290)	Data 0.11126 (1.47317)	Loss 2.6182 (1.9367)	Prec@1 37.50000 (62.50000)	Prec@5 100.00000 (97.50000)
Epoch: [33][6/60]	Time 0.17490 (1.33157)	Data 0.00199 (1.22797)	Loss 0.9309 (1.7691)	Prec@1 87.50000 (66.66667)	Prec@5 100.00000 (97.91667)
Epoch: [33][7/60]	Time 0.17914 (1.16694)	Data 0.01830 (1.05516)	Loss 4.0086 (2.0890)	Prec@1 37.50000 (62.50000)	Prec@5 100.00000 (98.21429)
Epoch: [33][8/60]	Time 0.22770 (1.04953)	Data 0.06764 (0.93172)	Loss 2.5670 (2.1488)	Prec@1 37.50000 (59.37500)	Prec@5 100.00000 (98.43750)
Epoch: [33][9/60]	Time 0.14099 (0.94858)	Data 0.06384 (0.83529)	Loss 4.0125 (2.3558)	Prec@1 37.50000 (56.94445)	Prec@5 100.00000 (98.61111)
Epoch: [33][10/60]	Time 0.08598 (0.86232)	Data 0.00059 (0.75182)	Loss 2.1843 (2.3387)	Prec@1 50.00000 (56.25000)	Prec@5 75.00000 (96.25000)
Epoch: [33][11/60]	Time 0.04210 (0.78776)	Data 0.00134 (0.68359)	Loss 0.4196 (2.1642)	Prec@1 87.50000 (59.09091)	Prec@5 100.00000 (96.59091)
Epoch: [33][12/60]	Time 0.10367 (0.73075)	Data 0.00752 (0.62725)	Loss 4.2571 (2.3386)	Prec@1 62.50000 (59.37500)	Prec@5 75.00000 (94.79167)
Epoch: [33][13/60]	Time 0.11743 (0.68357)	Data 0.01638 (0.58026)	Loss 3.4814 (2.4265)	Prec@1 37.50000 (57.69231)	Prec@5 87.50000 (94.23077)
Epoch: [33][14/60]	Time 0.11255 (0.64278)	Data 0.01100 (0.53960)	Loss 1.1863 (2.3379)	Prec@1 75.00000 (58.92857)	Prec@5 100.00000 (94.64286)
Epoch: [33][15/60]	Time 0.21486 (0.61426)	Data 0.04497 (0.50663)	Loss 2.7703 (2.3668)	Prec@1 50.00000 (58.33334)	Prec@5 87.50000 (94.16667)
Epoch: [33][16/60]	Time 0.09027 (0.58151)	Data 0.00053 (0.47500)	Loss 1.9789 (2.3425)	Prec@1 62.50000 (58.59375)	Prec@5 100.00000 (94.53125)
Epoch: [33][17/60]	Time 0.11721 (0.55420)	Data 0.00883 (0.44757)	Loss 0.5026 (2.2343)	Prec@1 62.50000 (58.82353)	Prec@5 100.00000 (94.85294)
Epoch: [33][18/60]	Time 0.17575 (0.53317)	Data 0.04243 (0.42507)	Loss 2.1230 (2.2281)	Prec@1 75.00000 (59.72222)	Prec@5 100.00000 (95.13889)
Epoch: [33][19/60]	Time 0.16208 (0.51364)	Data 0.02156 (0.40383)	Loss 0.9495 (2.1608)	Prec@1 87.50000 (61.18421)	Prec@5 100.00000 (95.39474)
Epoch: [33][20/60]	Time 0.12508 (0.49421)	Data 0.00596 (0.38394)	Loss 3.9410 (2.2498)	Prec@1 37.50000 (60.00000)	Prec@5 87.50000 (95.00000)
Epoch: [33][21/60]	Time 0.14706 (0.47768)	Data 0.07196 (0.36908)	Loss 0.4895 (2.1660)	Prec@1 62.50000 (60.11905)	Prec@5 100.00000 (95.23810)
Epoch: [33][22/60]	Time 0.10982 (0.46096)	Data 0.00750 (0.35264)	Loss 0.9825 (2.1122)	Prec@1 87.50000 (61.36364)	Prec@5 100.00000 (95.45455)
Epoch: [33][23/60]	Time 0.19427 (0.44936)	Data 0.00787 (0.33765)	Loss 2.9599 (2.1491)	Prec@1 50.00000 (60.86957)	Prec@5 87.50000 (95.10870)
Epoch: [33][24/60]	Time 0.07635 (0.43382)	Data 0.00260 (0.32369)	Loss 0.2582 (2.0703)	Prec@1 87.50000 (61.97917)	Prec@5 100.00000 (95.31250)
Epoch: [33][25/60]	Time 0.19650 (0.42433)	Data 0.05339 (0.31288)	Loss 0.8698 (2.0223)	Prec@1 87.50000 (63.00000)	Prec@5 100.00000 (95.50000)
Epoch: [33][26/60]	Time 0.11411 (0.41240)	Data 0.01067 (0.30126)	Loss 0.6072 (1.9678)	Prec@1 62.50000 (62.98077)	Prec@5 100.00000 (95.67308)
Epoch: [33][27/60]	Time 0.06565 (0.39956)	Data 0.00151 (0.29016)	Loss 1.2948 (1.9429)	Prec@1 62.50000 (62.96296)	Prec@5 100.00000 (95.83334)
Epoch: [33][28/60]	Time 0.08696 (0.38839)	Data 0.00061 (0.27981)	Loss 1.0768 (1.9120)	Prec@1 75.00000 (63.39286)	Prec@5 100.00000 (95.98215)
Epoch: [33][29/60]	Time 0.09175 (0.37816)	Data 0.00632 (0.27038)	Loss 2.0177 (1.9156)	Prec@1 37.50000 (62.50000)	Prec@5 100.00000 (96.12069)
Epoch: [33][30/60]	Time 0.09608 (0.36876)	Data 0.00065 (0.26139)	Loss 2.6271 (1.9393)	Prec@1 62.50000 (62.50000)	Prec@5 100.00000 (96.25001)
Epoch: [33][31/60]	Time 0.09889 (0.36005)	Data 0.00068 (0.25298)	Loss 4.1266 (2.0099)	Prec@1 12.50000 (60.88710)	Prec@5 100.00000 (96.37096)
Epoch: [33][32/60]	Time 0.10018 (0.35193)	Data 0.00066 (0.24510)	Loss 3.8385 (2.0670)	Prec@1 37.50000 (60.15625)	Prec@5 100.00000 (96.48438)
Epoch: [33][33/60]	Time 0.08653 (0.34389)	Data 0.00071 (0.23769)	Loss 1.3220 (2.0445)	Prec@1 75.00000 (60.60606)	Prec@5 100.00000 (96.59091)
Epoch: [33][34/60]	Time 0.04937 (0.33523)	Data 0.00054 (0.23072)	Loss 1.5772 (2.0307)	Prec@1 62.50000 (60.66177)	Prec@5 100.00000 (96.69118)
Epoch: [33][35/60]	Time 0.03179 (0.32656)	Data 0.00040 (0.22414)	Loss 1.0994 (2.0041)	Prec@1 62.50000 (60.71429)	Prec@5 100.00000 (96.78571)
Epoch: [33][36/60]	Time 0.02415 (0.31816)	Data 0.00042 (0.21792)	Loss 1.9509 (2.0026)	Prec@1 62.50000 (60.76389)	Prec@5 100.00000 (96.87500)
Epoch: [33][37/60]	Time 0.03105 (0.31040)	Data 0.00353 (0.21213)	Loss 1.2355 (1.9819)	Prec@1 62.50000 (60.81081)	Prec@5 100.00000 (96.95947)
Epoch: [33][38/60]	Time 0.02918 (0.30300)	Data 0.00302 (0.20662)	Loss 2.3341 (1.9912)	Prec@1 50.00000 (60.52632)	Prec@5 100.00000 (97.03947)
Epoch: [33][39/60]	Time 0.02691 (0.29592)	Data 0.00098 (0.20135)	Loss 0.9234 (1.9638)	Prec@1 87.50000 (61.21795)	Prec@5 100.00000 (97.11539)
Epoch: [33][40/60]	Time 0.02747 (0.28921)	Data 0.00100 (0.19634)	Loss 0.6327 (1.9305)	Prec@1 87.50000 (61.87500)	Prec@5 100.00000 (97.18750)
Epoch: [33][41/60]	Time 0.02733 (0.28282)	Data 0.00111 (0.19158)	Loss 2.2436 (1.9381)	Prec@1 62.50000 (61.89024)	Prec@5 100.00000 (97.25610)
Epoch: [33][42/60]	Time 0.02648 (0.27672)	Data 0.00043 (0.18703)	Loss 1.2079 (1.9208)	Prec@1 75.00000 (62.20238)	Prec@5 100.00000 (97.32143)
Epoch: [33][43/60]	Time 0.02938 (0.27097)	Data 0.00043 (0.18269)	Loss 1.8943 (1.9201)	Prec@1 62.50000 (62.20930)	Prec@5 100.00000 (97.38372)
Epoch: [33][44/60]	Time 0.02746 (0.26543)	Data 0.00044 (0.17855)	Loss 3.2972 (1.9514)	Prec@1 50.00000 (61.93182)	Prec@5 100.00000 (97.44318)
Epoch: [33][45/60]	Time 0.02659 (0.26012)	Data 0.00046 (0.17459)	Loss 0.8744 (1.9275)	Prec@1 75.00000 (62.22223)	Prec@5 100.00000 (97.50000)
Epoch: [33][46/60]	Time 0.02601 (0.25503)	Data 0.00040 (0.17080)	Loss 2.6145 (1.9424)	Prec@1 50.00000 (61.95652)	Prec@5 75.00000 (97.01087)
Epoch: [33][47/60]	Time 0.02609 (0.25016)	Data 0.00044 (0.16718)	Loss 1.2836 (1.9284)	Prec@1 75.00000 (62.23404)	Prec@5 87.50000 (96.80851)
Epoch: [33][48/60]	Time 0.02617 (0.24550)	Data 0.00044 (0.16371)	Loss 0.7948 (1.9048)	Prec@1 75.00000 (62.50000)	Prec@5 87.50000 (96.61459)
Epoch: [33][49/60]	Time 0.02307 (0.24096)	Data 0.00045 (0.16037)	Loss 1.1628 (1.8897)	Prec@1 75.00000 (62.75510)	Prec@5 87.50000 (96.42857)
Epoch: [33][50/60]	Time 0.02591 (0.23666)	Data 0.00047 (0.15718)	Loss 0.7339 (1.8665)	Prec@1 87.50000 (63.25000)	Prec@5 87.50000 (96.25000)
Epoch: [33][51/60]	Time 0.02248 (0.23246)	Data 0.00045 (0.15410)	Loss 0.8399 (1.8464)	Prec@1 87.50000 (63.72549)	Prec@5 100.00000 (96.32353)
Epoch: [33][52/60]	Time 0.02416 (0.22845)	Data 0.00043 (0.15115)	Loss 1.5462 (1.8406)	Prec@1 62.50000 (63.70193)	Prec@5 100.00000 (96.39423)
Epoch: [33][53/60]	Time 0.02364 (0.22459)	Data 0.00058 (0.14831)	Loss 0.8194 (1.8214)	Prec@1 87.50000 (64.15095)	Prec@5 100.00000 (96.46227)
Epoch: [33][54/60]	Time 0.02321 (0.22086)	Data 0.00049 (0.14557)	Loss 0.8630 (1.8036)	Prec@1 75.00000 (64.35185)	Prec@5 100.00000 (96.52778)
Epoch: [33][55/60]	Time 0.02271 (0.21725)	Data 0.00046 (0.14293)	Loss 1.5375 (1.7988)	Prec@1 62.50000 (64.31818)	Prec@5 87.50000 (96.36363)
Epoch: [33][56/60]	Time 0.02243 (0.21378)	Data 0.00054 (0.14039)	Loss 1.8302 (1.7993)	Prec@1 75.00000 (64.50893)	Prec@5 87.50000 (96.20536)
Epoch: [33][57/60]	Time 0.02275 (0.21042)	Data 0.00047 (0.13793)	Loss 1.5798 (1.7955)	Prec@1 62.50000 (64.47369)	Prec@5 100.00000 (96.27193)
Epoch: [33][58/60]	Time 0.02318 (0.20720)	Data 0.00047 (0.13556)	Loss 2.1972 (1.8024)	Prec@1 62.50000 (64.43965)	Prec@5 100.00000 (96.33620)
Epoch: [33][59/60]	Time 0.02313 (0.20408)	Data 0.00050 (0.13327)	Loss 1.2691 (1.7934)	Prec@1 75.00000 (64.61864)	Prec@5 100.00000 (96.39831)
Epoch: [33][60/60]	Time 0.02264 (0.20105)	Data 0.00054 (0.13106)	Loss 0.5375 (1.7724)	Prec@1 62.50000 (64.58334)	Prec@5 100.00000 (96.45834)
train at epoch 34
train at epoch 34
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [34][0/272]	 lr: 0.04000	Time 4.356 (4.356)	Data 3.552 (3.552)	Loss 0.1725 (0.1725)	Prec@1 90.62500 (90.62500)	Prec@5 100.00000 (100.00000)
Epoch: [34][10/272]	 lr: 0.04000	Time 0.371 (1.259)	Data 0.128 (0.812)	Loss 0.1457 (0.1275)	Prec@1 96.87500 (94.31818)	Prec@5 100.00000 (100.00000)
Epoch: [34][20/272]	 lr: 0.04000	Time 0.373 (0.848)	Data 0.130 (0.488)	Loss 0.0547 (0.1151)	Prec@1 100.00000 (95.98215)	Prec@5 100.00000 (100.00000)
Epoch: [34][30/272]	 lr: 0.04000	Time 0.455 (0.722)	Data 0.126 (0.373)	Loss 0.1167 (0.1064)	Prec@1 93.75000 (96.27016)	Prec@5 100.00000 (100.00000)
Epoch: [34][40/272]	 lr: 0.04000	Time 0.490 (0.654)	Data 0.143 (0.314)	Loss 0.0964 (0.1079)	Prec@1 96.87500 (96.34146)	Prec@5 100.00000 (100.00000)
Epoch: [34][50/272]	 lr: 0.04000	Time 0.479 (0.608)	Data 0.129 (0.278)	Loss 0.1216 (0.1039)	Prec@1 96.87500 (96.75246)	Prec@5 100.00000 (100.00000)
Epoch: [34][60/272]	 lr: 0.04000	Time 0.409 (0.581)	Data 0.113 (0.253)	Loss 0.0553 (0.1127)	Prec@1 100.00000 (96.72131)	Prec@5 100.00000 (99.99999)
Epoch: [34][70/272]	 lr: 0.04000	Time 0.378 (0.563)	Data 0.116 (0.236)	Loss 0.0418 (0.1107)	Prec@1 100.00000 (96.83099)	Prec@5 100.00000 (100.00000)
Epoch: [34][80/272]	 lr: 0.04000	Time 0.452 (0.548)	Data 0.140 (0.223)	Loss 0.1169 (0.1092)	Prec@1 96.87500 (96.83642)	Prec@5 100.00000 (100.00000)
Epoch: [34][90/272]	 lr: 0.04000	Time 0.428 (0.538)	Data 0.129 (0.213)	Loss 0.0725 (0.1106)	Prec@1 100.00000 (96.80632)	Prec@5 100.00000 (100.00000)
Epoch: [34][100/272]	 lr: 0.04000	Time 0.420 (0.528)	Data 0.132 (0.204)	Loss 0.0651 (0.1077)	Prec@1 100.00000 (96.99876)	Prec@5 100.00000 (100.00000)
Epoch: [34][110/272]	 lr: 0.04000	Time 0.487 (0.520)	Data 0.138 (0.198)	Loss 0.0168 (0.1067)	Prec@1 100.00000 (97.07207)	Prec@5 100.00000 (100.00000)
Epoch: [34][120/272]	 lr: 0.04000	Time 0.462 (0.515)	Data 0.138 (0.192)	Loss 0.2089 (0.1089)	Prec@1 90.62500 (97.02995)	Prec@5 100.00000 (99.99999)
Epoch: [34][130/272]	 lr: 0.04000	Time 0.468 (0.511)	Data 0.140 (0.187)	Loss 0.1528 (0.1206)	Prec@1 96.87500 (96.77958)	Prec@5 100.00000 (99.95229)
Epoch: [34][140/272]	 lr: 0.04000	Time 0.418 (0.506)	Data 0.143 (0.183)	Loss 0.1071 (0.1217)	Prec@1 93.75000 (96.69769)	Prec@5 100.00000 (99.95567)
Epoch: [34][150/272]	 lr: 0.04000	Time 0.455 (0.502)	Data 0.127 (0.180)	Loss 0.0965 (0.1202)	Prec@1 100.00000 (96.79222)	Prec@5 100.00000 (99.95861)
Epoch: [34][160/272]	 lr: 0.04000	Time 0.463 (0.498)	Data 0.141 (0.177)	Loss 0.1209 (0.1180)	Prec@1 96.87500 (96.83618)	Prec@5 100.00000 (99.96118)
Epoch: [34][170/272]	 lr: 0.04000	Time 0.458 (0.496)	Data 0.118 (0.174)	Loss 0.1732 (0.1163)	Prec@1 93.75000 (96.89327)	Prec@5 100.00000 (99.96345)
Epoch: [34][180/272]	 lr: 0.04000	Time 0.520 (0.492)	Data 0.130 (0.171)	Loss 0.1022 (0.1213)	Prec@1 100.00000 (96.68509)	Prec@5 100.00000 (99.96548)
Epoch: [34][190/272]	 lr: 0.04000	Time 0.567 (0.491)	Data 0.125 (0.169)	Loss 0.1014 (0.1187)	Prec@1 96.87500 (96.79320)	Prec@5 100.00000 (99.96728)
Epoch: [34][200/272]	 lr: 0.04000	Time 0.384 (0.489)	Data 0.142 (0.167)	Loss 0.1876 (0.1183)	Prec@1 93.75000 (96.78172)	Prec@5 100.00000 (99.96890)
Epoch: [34][210/272]	 lr: 0.04000	Time 0.499 (0.487)	Data 0.131 (0.166)	Loss 0.2768 (0.1187)	Prec@1 87.50000 (96.78614)	Prec@5 100.00000 (99.97038)
Epoch: [34][220/272]	 lr: 0.04000	Time 0.283 (0.484)	Data 0.128 (0.164)	Loss 0.0624 (0.1191)	Prec@1 100.00000 (96.79016)	Prec@5 100.00000 (99.97173)
Epoch: [34][230/272]	 lr: 0.04000	Time 0.411 (0.482)	Data 0.129 (0.163)	Loss 0.0557 (0.1167)	Prec@1 100.00000 (96.86147)	Prec@5 100.00000 (99.97295)
Epoch: [34][240/272]	 lr: 0.04000	Time 0.345 (0.480)	Data 0.129 (0.161)	Loss 0.0373 (0.1162)	Prec@1 100.00000 (96.92687)	Prec@5 100.00000 (99.97408)
Epoch: [34][250/272]	 lr: 0.04000	Time 0.239 (0.470)	Data 0.128 (0.160)	Loss 0.1152 (0.1151)	Prec@1 100.00000 (97.01196)	Prec@5 100.00000 (99.97511)
Epoch: [34][260/272]	 lr: 0.04000	Time 0.241 (0.461)	Data 0.127 (0.159)	Loss 0.2938 (0.1150)	Prec@1 90.62500 (96.99473)	Prec@5 100.00000 (99.97605)
Epoch: [34][270/272]	 lr: 0.04000	Time 0.238 (0.453)	Data 0.128 (0.158)	Loss 0.0289 (0.1129)	Prec@1 100.00000 (97.03644)	Prec@5 100.00000 (99.97694)
validation at epoch 34
validation at epoch 34
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [34][1/60]	Time 3.63416 (3.63416)	Data 3.52611 (3.52611)	Loss 0.4923 (0.4923)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [34][2/60]	Time 4.07372 (3.85394)	Data 4.01660 (3.77135)	Loss 0.3706 (0.4314)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [34][3/60]	Time 0.07673 (2.59487)	Data 0.01059 (2.51777)	Loss 1.1310 (0.6646)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [34][4/60]	Time 0.05439 (1.95975)	Data 0.00061 (1.88848)	Loss 0.5481 (0.6355)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (96.87500)
Epoch: [34][5/60]	Time 0.08236 (1.58427)	Data 0.01285 (1.51335)	Loss 0.3014 (0.5687)	Prec@1 87.50000 (77.50000)	Prec@5 100.00000 (97.50000)
Epoch: [34][6/60]	Time 0.07509 (1.33274)	Data 0.01517 (1.26365)	Loss 0.2376 (0.5135)	Prec@1 87.50000 (79.16667)	Prec@5 100.00000 (97.91667)
Epoch: [34][7/60]	Time 0.08386 (1.15433)	Data 0.02057 (1.08607)	Loss 0.7236 (0.5435)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [34][8/60]	Time 0.09399 (1.02179)	Data 0.00162 (0.95051)	Loss 0.5004 (0.5381)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [34][9/60]	Time 0.05858 (0.91476)	Data 0.00060 (0.84497)	Loss 1.0237 (0.5921)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [34][10/60]	Time 0.23459 (0.84675)	Data 0.00820 (0.76129)	Loss 0.0757 (0.5404)	Prec@1 100.00000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [34][11/60]	Time 0.20200 (0.78813)	Data 0.00551 (0.69258)	Loss 0.1060 (0.5010)	Prec@1 100.00000 (79.54546)	Prec@5 100.00000 (98.86364)
Epoch: [34][12/60]	Time 0.17677 (0.73719)	Data 0.00217 (0.63505)	Loss 1.2276 (0.5615)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.95834)
Epoch: [34][13/60]	Time 0.11213 (0.68911)	Data 0.00071 (0.58625)	Loss 1.8298 (0.6591)	Prec@1 37.50000 (75.00000)	Prec@5 87.50000 (98.07693)
Epoch: [34][14/60]	Time 0.08232 (0.64576)	Data 0.00058 (0.54442)	Loss 0.0490 (0.6155)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [34][15/60]	Time 0.21138 (0.61680)	Data 0.08425 (0.51374)	Loss 0.8185 (0.6290)	Prec@1 75.00000 (76.66667)	Prec@5 100.00000 (98.33334)
Epoch: [34][16/60]	Time 0.25167 (0.59398)	Data 0.03162 (0.48361)	Loss 0.6372 (0.6295)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [34][17/60]	Time 0.09934 (0.56489)	Data 0.03243 (0.45707)	Loss 0.1089 (0.5989)	Prec@1 100.00000 (77.94118)	Prec@5 100.00000 (98.52941)
Epoch: [34][18/60]	Time 0.13207 (0.54084)	Data 0.00942 (0.43220)	Loss 1.7379 (0.6622)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [34][19/60]	Time 0.24175 (0.52510)	Data 0.05675 (0.41244)	Loss 0.0275 (0.6288)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (98.68421)
Epoch: [34][20/60]	Time 0.14521 (0.50611)	Data 0.03344 (0.39349)	Loss 1.9653 (0.6956)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.75000)
Epoch: [34][21/60]	Time 0.14026 (0.48868)	Data 0.00870 (0.37517)	Loss 0.3079 (0.6771)	Prec@1 87.50000 (78.57143)	Prec@5 100.00000 (98.80952)
Epoch: [34][22/60]	Time 0.25510 (0.47807)	Data 0.05380 (0.36056)	Loss 0.1786 (0.6545)	Prec@1 87.50000 (78.97727)	Prec@5 100.00000 (98.86364)
Epoch: [34][23/60]	Time 0.10828 (0.46199)	Data 0.01139 (0.34538)	Loss 0.7737 (0.6597)	Prec@1 75.00000 (78.80435)	Prec@5 100.00000 (98.91305)
Epoch: [34][24/60]	Time 0.08568 (0.44631)	Data 0.00171 (0.33106)	Loss 0.4956 (0.6528)	Prec@1 75.00000 (78.64584)	Prec@5 100.00000 (98.95834)
Epoch: [34][25/60]	Time 0.13951 (0.43404)	Data 0.01024 (0.31823)	Loss 0.0891 (0.6303)	Prec@1 100.00000 (79.50000)	Prec@5 100.00000 (99.00000)
Epoch: [34][26/60]	Time 0.23369 (0.42633)	Data 0.02094 (0.30679)	Loss 0.2519 (0.6157)	Prec@1 75.00000 (79.32693)	Prec@5 100.00000 (99.03847)
Epoch: [34][27/60]	Time 0.12068 (0.41501)	Data 0.05833 (0.29759)	Loss 0.0972 (0.5965)	Prec@1 100.00000 (80.09259)	Prec@5 100.00000 (99.07407)
Epoch: [34][28/60]	Time 0.11272 (0.40422)	Data 0.00649 (0.28719)	Loss 0.3931 (0.5893)	Prec@1 87.50000 (80.35715)	Prec@5 100.00000 (99.10715)
Epoch: [34][29/60]	Time 0.12269 (0.39451)	Data 0.00051 (0.27731)	Loss 0.0612 (0.5710)	Prec@1 100.00000 (81.03448)	Prec@5 100.00000 (99.13793)
Epoch: [34][30/60]	Time 0.07600 (0.38389)	Data 0.00180 (0.26812)	Loss 1.0347 (0.5865)	Prec@1 75.00000 (80.83334)	Prec@5 100.00000 (99.16667)
Epoch: [34][31/60]	Time 0.07536 (0.37394)	Data 0.00719 (0.25971)	Loss 2.9124 (0.6615)	Prec@1 25.00000 (79.03226)	Prec@5 87.50000 (98.79032)
Epoch: [34][32/60]	Time 0.06932 (0.36442)	Data 0.00773 (0.25183)	Loss 0.7360 (0.6639)	Prec@1 75.00000 (78.90625)	Prec@5 100.00000 (98.82812)
Epoch: [34][33/60]	Time 0.04171 (0.35464)	Data 0.00061 (0.24422)	Loss 0.1177 (0.6473)	Prec@1 87.50000 (79.16667)	Prec@5 100.00000 (98.86364)
Epoch: [34][34/60]	Time 0.02609 (0.34498)	Data 0.00050 (0.23705)	Loss 0.7936 (0.6516)	Prec@1 75.00000 (79.04412)	Prec@5 100.00000 (98.89706)
Epoch: [34][35/60]	Time 0.03502 (0.33612)	Data 0.00435 (0.23040)	Loss 1.3014 (0.6702)	Prec@1 62.50000 (78.57143)	Prec@5 87.50000 (98.57143)
Epoch: [34][36/60]	Time 0.02733 (0.32754)	Data 0.00050 (0.22402)	Loss 0.6371 (0.6693)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.61111)
Epoch: [34][37/60]	Time 0.02288 (0.31931)	Data 0.00078 (0.21798)	Loss 1.0812 (0.6804)	Prec@1 75.00000 (78.04054)	Prec@5 100.00000 (98.64865)
Epoch: [34][38/60]	Time 0.02998 (0.31169)	Data 0.00091 (0.21227)	Loss 1.6582 (0.7061)	Prec@1 50.00000 (77.30264)	Prec@5 100.00000 (98.68421)
Epoch: [34][39/60]	Time 0.02361 (0.30431)	Data 0.00084 (0.20685)	Loss 0.1746 (0.6925)	Prec@1 87.50000 (77.56410)	Prec@5 100.00000 (98.71795)
Epoch: [34][40/60]	Time 0.02302 (0.29728)	Data 0.00086 (0.20170)	Loss 0.2889 (0.6824)	Prec@1 87.50000 (77.81250)	Prec@5 100.00000 (98.75000)
Epoch: [34][41/60]	Time 0.02315 (0.29059)	Data 0.00088 (0.19680)	Loss 0.2385 (0.6716)	Prec@1 100.00000 (78.35365)	Prec@5 100.00000 (98.78049)
Epoch: [34][42/60]	Time 0.02497 (0.28427)	Data 0.00119 (0.19214)	Loss 0.6633 (0.6714)	Prec@1 75.00000 (78.27381)	Prec@5 100.00000 (98.80952)
Epoch: [34][43/60]	Time 0.02307 (0.27819)	Data 0.00046 (0.18769)	Loss 0.4646 (0.6666)	Prec@1 75.00000 (78.19768)	Prec@5 100.00000 (98.83721)
Epoch: [34][44/60]	Time 0.02339 (0.27240)	Data 0.00072 (0.18344)	Loss 0.8899 (0.6716)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (98.86364)
Epoch: [34][45/60]	Time 0.02372 (0.26687)	Data 0.00074 (0.17938)	Loss 0.8769 (0.6762)	Prec@1 87.50000 (78.33334)	Prec@5 100.00000 (98.88889)
Epoch: [34][46/60]	Time 0.02289 (0.26157)	Data 0.00056 (0.17549)	Loss 2.7220 (0.7207)	Prec@1 50.00000 (77.71739)	Prec@5 100.00000 (98.91305)
Epoch: [34][47/60]	Time 0.02701 (0.25658)	Data 0.00045 (0.17177)	Loss 1.5076 (0.7374)	Prec@1 75.00000 (77.65957)	Prec@5 87.50000 (98.67021)
Epoch: [34][48/60]	Time 0.02277 (0.25171)	Data 0.00046 (0.16820)	Loss 0.5996 (0.7346)	Prec@1 75.00000 (77.60417)	Prec@5 100.00000 (98.69792)
Epoch: [34][49/60]	Time 0.02262 (0.24703)	Data 0.00048 (0.16477)	Loss 1.7269 (0.7548)	Prec@1 62.50000 (77.29591)	Prec@5 100.00000 (98.72449)
Epoch: [34][50/60]	Time 0.02266 (0.24255)	Data 0.00045 (0.16149)	Loss 0.2982 (0.7457)	Prec@1 87.50000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [34][51/60]	Time 0.02344 (0.23825)	Data 0.00048 (0.15833)	Loss 1.1414 (0.7534)	Prec@1 75.00000 (77.45098)	Prec@5 100.00000 (98.77451)
Epoch: [34][52/60]	Time 0.02343 (0.23412)	Data 0.00049 (0.15529)	Loss 1.2800 (0.7636)	Prec@1 62.50000 (77.16347)	Prec@5 100.00000 (98.79808)
Epoch: [34][53/60]	Time 0.02271 (0.23013)	Data 0.00053 (0.15237)	Loss 0.5027 (0.7586)	Prec@1 75.00000 (77.12264)	Prec@5 100.00000 (98.82076)
Epoch: [34][54/60]	Time 0.02282 (0.22629)	Data 0.00044 (0.14956)	Loss 1.1219 (0.7654)	Prec@1 50.00000 (76.62037)	Prec@5 100.00000 (98.84259)
Epoch: [34][55/60]	Time 0.02263 (0.22259)	Data 0.00049 (0.14685)	Loss 1.4413 (0.7777)	Prec@1 75.00000 (76.59090)	Prec@5 87.50000 (98.63636)
Epoch: [34][56/60]	Time 0.02332 (0.21903)	Data 0.00052 (0.14424)	Loss 1.1359 (0.7840)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (98.66072)
Epoch: [34][57/60]	Time 0.02304 (0.21559)	Data 0.00046 (0.14172)	Loss 2.1269 (0.8076)	Prec@1 50.00000 (76.31579)	Prec@5 100.00000 (98.68421)
Epoch: [34][58/60]	Time 0.02267 (0.21226)	Data 0.00047 (0.13928)	Loss 2.0628 (0.8292)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (98.70689)
Epoch: [34][59/60]	Time 0.02266 (0.20905)	Data 0.00050 (0.13693)	Loss 1.5138 (0.8409)	Prec@1 62.50000 (76.05932)	Prec@5 100.00000 (98.72881)
Epoch: [34][60/60]	Time 0.02262 (0.20594)	Data 0.00062 (0.13466)	Loss 0.2795 (0.8315)	Prec@1 87.50000 (76.25001)	Prec@5 100.00000 (98.75001)
train at epoch 35
train at epoch 35
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [35][0/272]	 lr: 0.04000	Time 5.034 (5.034)	Data 3.846 (3.846)	Loss 0.0569 (0.0569)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [35][10/272]	 lr: 0.04000	Time 0.477 (1.291)	Data 0.129 (0.585)	Loss 0.0310 (0.0923)	Prec@1 100.00000 (97.44318)	Prec@5 100.00000 (100.00000)
Epoch: [35][20/272]	 lr: 0.04000	Time 0.508 (0.877)	Data 0.134 (0.368)	Loss 0.0289 (0.0993)	Prec@1 100.00000 (97.32143)	Prec@5 100.00000 (100.00000)
Epoch: [35][30/272]	 lr: 0.04000	Time 0.401 (0.738)	Data 0.126 (0.292)	Loss 0.0505 (0.0929)	Prec@1 100.00000 (97.78226)	Prec@5 100.00000 (100.00000)
Epoch: [35][40/272]	 lr: 0.04000	Time 0.590 (0.664)	Data 0.159 (0.253)	Loss 0.0475 (0.0831)	Prec@1 100.00000 (98.24695)	Prec@5 100.00000 (100.00000)
Epoch: [35][50/272]	 lr: 0.04000	Time 0.586 (0.621)	Data 0.146 (0.228)	Loss 0.2084 (0.0906)	Prec@1 90.62500 (97.79412)	Prec@5 100.00000 (100.00000)
Epoch: [35][60/272]	 lr: 0.04000	Time 0.539 (0.597)	Data 0.119 (0.212)	Loss 0.0684 (0.0899)	Prec@1 96.87500 (97.84836)	Prec@5 100.00000 (99.99999)
Epoch: [35][70/272]	 lr: 0.04000	Time 0.557 (0.575)	Data 0.126 (0.200)	Loss 0.0347 (0.0907)	Prec@1 100.00000 (97.66725)	Prec@5 100.00000 (100.00000)
Epoch: [35][80/272]	 lr: 0.04000	Time 0.430 (0.558)	Data 0.119 (0.191)	Loss 0.2844 (0.0941)	Prec@1 87.50000 (97.45370)	Prec@5 100.00000 (100.00000)
Epoch: [35][90/272]	 lr: 0.04000	Time 0.465 (0.545)	Data 0.125 (0.184)	Loss 0.2509 (0.0961)	Prec@1 87.50000 (97.32143)	Prec@5 100.00000 (100.00000)
Epoch: [35][100/272]	 lr: 0.04000	Time 0.401 (0.533)	Data 0.124 (0.178)	Loss 0.3955 (0.0987)	Prec@1 84.37500 (97.18440)	Prec@5 100.00000 (100.00000)
Epoch: [35][110/272]	 lr: 0.04000	Time 0.387 (0.527)	Data 0.129 (0.174)	Loss 0.0551 (0.1038)	Prec@1 100.00000 (97.01577)	Prec@5 100.00000 (100.00000)
Epoch: [35][120/272]	 lr: 0.04000	Time 0.482 (0.521)	Data 0.127 (0.170)	Loss 0.1020 (0.1095)	Prec@1 100.00000 (96.84917)	Prec@5 100.00000 (99.99999)
Epoch: [35][130/272]	 lr: 0.04000	Time 0.492 (0.515)	Data 0.132 (0.167)	Loss 0.2629 (0.1107)	Prec@1 90.62500 (96.85114)	Prec@5 100.00000 (100.00000)
Epoch: [35][140/272]	 lr: 0.04000	Time 0.523 (0.509)	Data 0.122 (0.164)	Loss 0.0589 (0.1091)	Prec@1 100.00000 (96.91933)	Prec@5 100.00000 (100.00000)
Epoch: [35][150/272]	 lr: 0.04000	Time 0.506 (0.504)	Data 0.134 (0.162)	Loss 0.0668 (0.1076)	Prec@1 100.00000 (96.99917)	Prec@5 100.00000 (100.00000)
Epoch: [35][160/272]	 lr: 0.04000	Time 0.401 (0.501)	Data 0.127 (0.160)	Loss 0.1193 (0.1097)	Prec@1 96.87500 (96.89441)	Prec@5 100.00000 (100.00000)
Epoch: [35][170/272]	 lr: 0.04000	Time 0.471 (0.498)	Data 0.133 (0.158)	Loss 0.0809 (0.1078)	Prec@1 100.00000 (97.02120)	Prec@5 100.00000 (100.00000)
Epoch: [35][180/272]	 lr: 0.04000	Time 0.481 (0.496)	Data 0.142 (0.156)	Loss 0.0586 (0.1069)	Prec@1 100.00000 (97.08218)	Prec@5 100.00000 (100.00001)
Epoch: [35][190/272]	 lr: 0.04000	Time 0.429 (0.493)	Data 0.115 (0.155)	Loss 0.0156 (0.1058)	Prec@1 100.00000 (97.12042)	Prec@5 100.00000 (99.98364)
Epoch: [35][200/272]	 lr: 0.04000	Time 0.436 (0.491)	Data 0.128 (0.153)	Loss 0.1355 (0.1053)	Prec@1 96.87500 (97.12376)	Prec@5 100.00000 (99.98445)
Epoch: [35][210/272]	 lr: 0.04000	Time 0.477 (0.488)	Data 0.129 (0.152)	Loss 0.0599 (0.1045)	Prec@1 96.87500 (97.14159)	Prec@5 100.00000 (99.98519)
Epoch: [35][220/272]	 lr: 0.04000	Time 0.530 (0.487)	Data 0.128 (0.151)	Loss 0.0771 (0.1041)	Prec@1 100.00000 (97.17195)	Prec@5 100.00000 (99.98586)
Epoch: [35][230/272]	 lr: 0.04000	Time 0.457 (0.485)	Data 0.128 (0.150)	Loss 0.0904 (0.1046)	Prec@1 93.75000 (97.09145)	Prec@5 100.00000 (99.98647)
Epoch: [35][240/272]	 lr: 0.04000	Time 0.287 (0.483)	Data 0.127 (0.150)	Loss 0.1051 (0.1063)	Prec@1 96.87500 (97.00468)	Prec@5 100.00000 (99.98704)
Epoch: [35][250/272]	 lr: 0.04000	Time 0.238 (0.473)	Data 0.129 (0.149)	Loss 0.1406 (0.1053)	Prec@1 96.87500 (97.06175)	Prec@5 100.00000 (99.98756)
Epoch: [35][260/272]	 lr: 0.04000	Time 0.238 (0.464)	Data 0.129 (0.148)	Loss 0.0353 (0.1064)	Prec@1 100.00000 (97.03065)	Prec@5 100.00000 (99.98802)
Epoch: [35][270/272]	 lr: 0.04000	Time 0.237 (0.456)	Data 0.128 (0.147)	Loss 0.0864 (0.1071)	Prec@1 96.87500 (97.02491)	Prec@5 100.00000 (99.98847)
validation at epoch 35
validation at epoch 35
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [35][1/60]	Time 5.54122 (5.54122)	Data 5.28144 (5.28144)	Loss 0.5312 (0.5312)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [35][2/60]	Time 1.65094 (3.59608)	Data 1.57454 (3.42799)	Loss 0.1203 (0.3258)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [35][3/60]	Time 0.04725 (2.41313)	Data 0.01165 (2.28921)	Loss 1.7699 (0.8072)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [35][4/60]	Time 0.05697 (1.82409)	Data 0.00065 (1.71707)	Loss 0.6212 (0.7607)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [35][5/60]	Time 0.07262 (1.47380)	Data 0.00072 (1.37380)	Loss 0.9334 (0.7952)	Prec@1 62.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [35][6/60]	Time 0.26747 (1.27274)	Data 0.07586 (1.15748)	Loss 0.3178 (0.7157)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (97.91667)
Epoch: [35][7/60]	Time 0.18937 (1.11798)	Data 0.00662 (0.99307)	Loss 1.1810 (0.7821)	Prec@1 50.00000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [35][8/60]	Time 0.22352 (1.00617)	Data 0.05885 (0.87629)	Loss 0.9187 (0.7992)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.43750)
Epoch: [35][9/60]	Time 0.24374 (0.92146)	Data 0.09821 (0.78984)	Loss 0.6938 (0.7875)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [35][10/60]	Time 0.10411 (0.83972)	Data 0.00088 (0.71094)	Loss 0.4724 (0.7560)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [35][11/60]	Time 0.15629 (0.77759)	Data 0.00778 (0.64702)	Loss 0.3182 (0.7162)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (98.86364)
Epoch: [35][12/60]	Time 0.16539 (0.72657)	Data 0.02665 (0.59532)	Loss 0.4005 (0.6899)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (98.95834)
Epoch: [35][13/60]	Time 0.13253 (0.68088)	Data 0.02409 (0.55138)	Loss 1.4588 (0.7490)	Prec@1 62.50000 (75.96154)	Prec@5 87.50000 (98.07693)
Epoch: [35][14/60]	Time 0.33589 (0.65624)	Data 0.11009 (0.51986)	Loss 0.3032 (0.7172)	Prec@1 75.00000 (75.89286)	Prec@5 100.00000 (98.21429)
Epoch: [35][15/60]	Time 0.04299 (0.61535)	Data 0.00154 (0.48530)	Loss 0.1763 (0.6811)	Prec@1 87.50000 (76.66667)	Prec@5 100.00000 (98.33334)
Epoch: [35][16/60]	Time 0.08179 (0.58201)	Data 0.00061 (0.45501)	Loss 0.7244 (0.6838)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [35][17/60]	Time 0.12052 (0.55486)	Data 0.03183 (0.43012)	Loss 0.3031 (0.6614)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (98.52941)
Epoch: [35][18/60]	Time 0.07470 (0.52818)	Data 0.03452 (0.40814)	Loss 0.6057 (0.6583)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (98.61111)
Epoch: [35][19/60]	Time 0.17999 (0.50986)	Data 0.05681 (0.38965)	Loss 0.0173 (0.6246)	Prec@1 100.00000 (78.28947)	Prec@5 100.00000 (98.68421)
Epoch: [35][20/60]	Time 0.18700 (0.49371)	Data 0.01146 (0.37074)	Loss 0.9863 (0.6427)	Prec@1 62.50000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [35][21/60]	Time 0.18999 (0.47925)	Data 0.00265 (0.35321)	Loss 0.7669 (0.6486)	Prec@1 62.50000 (76.78571)	Prec@5 100.00000 (98.80952)
Epoch: [35][22/60]	Time 0.21470 (0.46723)	Data 0.07327 (0.34049)	Loss 0.1759 (0.6271)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [35][23/60]	Time 0.14526 (0.45323)	Data 0.01656 (0.32640)	Loss 0.6547 (0.6283)	Prec@1 75.00000 (77.17391)	Prec@5 100.00000 (98.91305)
Epoch: [35][24/60]	Time 0.11669 (0.43921)	Data 0.01419 (0.31340)	Loss 0.4494 (0.6209)	Prec@1 87.50000 (77.60417)	Prec@5 100.00000 (98.95834)
Epoch: [35][25/60]	Time 0.09751 (0.42554)	Data 0.01383 (0.30141)	Loss 0.2960 (0.6079)	Prec@1 87.50000 (78.00000)	Prec@5 100.00000 (99.00000)
Epoch: [35][26/60]	Time 0.12971 (0.41416)	Data 0.00805 (0.29013)	Loss 0.0618 (0.5869)	Prec@1 100.00000 (78.84615)	Prec@5 100.00000 (99.03847)
Epoch: [35][27/60]	Time 0.11923 (0.40324)	Data 0.00740 (0.27966)	Loss 0.2475 (0.5743)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (99.07407)
Epoch: [35][28/60]	Time 0.15210 (0.39427)	Data 0.01168 (0.27009)	Loss 0.4581 (0.5701)	Prec@1 87.50000 (79.46429)	Prec@5 100.00000 (99.10715)
Epoch: [35][29/60]	Time 0.15167 (0.38590)	Data 0.00725 (0.26102)	Loss 0.3746 (0.5634)	Prec@1 87.50000 (79.74138)	Prec@5 100.00000 (99.13793)
Epoch: [35][30/60]	Time 0.10107 (0.37641)	Data 0.00054 (0.25234)	Loss 0.8761 (0.5738)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (99.16667)
Epoch: [35][31/60]	Time 0.08526 (0.36702)	Data 0.00038 (0.24421)	Loss 3.3028 (0.6619)	Prec@1 37.50000 (77.82258)	Prec@5 100.00000 (99.19354)
Epoch: [35][32/60]	Time 0.07254 (0.35781)	Data 0.00039 (0.23659)	Loss 1.4218 (0.6856)	Prec@1 62.50000 (77.34375)	Prec@5 100.00000 (99.21875)
Epoch: [35][33/60]	Time 0.03885 (0.34815)	Data 0.00070 (0.22945)	Loss 0.0682 (0.6669)	Prec@1 100.00000 (78.03030)	Prec@5 100.00000 (99.24242)
Epoch: [35][34/60]	Time 0.03921 (0.33906)	Data 0.00282 (0.22278)	Loss 1.3452 (0.6868)	Prec@1 75.00000 (77.94118)	Prec@5 100.00000 (99.26471)
Epoch: [35][35/60]	Time 0.03373 (0.33034)	Data 0.00041 (0.21643)	Loss 1.6161 (0.7134)	Prec@1 75.00000 (77.85714)	Prec@5 100.00000 (99.28571)
Epoch: [35][36/60]	Time 0.02776 (0.32193)	Data 0.00052 (0.21043)	Loss 1.3636 (0.7315)	Prec@1 62.50000 (77.43056)	Prec@5 100.00000 (99.30556)
Epoch: [35][37/60]	Time 0.02378 (0.31387)	Data 0.00063 (0.20476)	Loss 1.2352 (0.7451)	Prec@1 75.00000 (77.36487)	Prec@5 100.00000 (99.32433)
Epoch: [35][38/60]	Time 0.02277 (0.30621)	Data 0.00062 (0.19939)	Loss 3.2886 (0.8120)	Prec@1 50.00000 (76.64474)	Prec@5 100.00000 (99.34211)
Epoch: [35][39/60]	Time 0.02243 (0.29894)	Data 0.00076 (0.19429)	Loss 0.0743 (0.7931)	Prec@1 100.00000 (77.24359)	Prec@5 100.00000 (99.35898)
Epoch: [35][40/60]	Time 0.02288 (0.29204)	Data 0.00090 (0.18946)	Loss 0.2414 (0.7793)	Prec@1 87.50000 (77.50000)	Prec@5 100.00000 (99.37500)
Epoch: [35][41/60]	Time 0.02571 (0.28554)	Data 0.00082 (0.18486)	Loss 0.8989 (0.7822)	Prec@1 75.00000 (77.43902)	Prec@5 100.00000 (99.39024)
Epoch: [35][42/60]	Time 0.02300 (0.27929)	Data 0.00056 (0.18047)	Loss 1.1859 (0.7918)	Prec@1 87.50000 (77.67857)	Prec@5 100.00000 (99.40476)
Epoch: [35][43/60]	Time 0.02268 (0.27332)	Data 0.00083 (0.17629)	Loss 1.1089 (0.7992)	Prec@1 75.00000 (77.61628)	Prec@5 100.00000 (99.41860)
Epoch: [35][44/60]	Time 0.02252 (0.26762)	Data 0.00092 (0.17231)	Loss 1.1232 (0.8066)	Prec@1 75.00000 (77.55682)	Prec@5 100.00000 (99.43182)
Epoch: [35][45/60]	Time 0.02217 (0.26217)	Data 0.00042 (0.16849)	Loss 0.6661 (0.8034)	Prec@1 87.50000 (77.77778)	Prec@5 100.00000 (99.44445)
Epoch: [35][46/60]	Time 0.02332 (0.25697)	Data 0.00046 (0.16483)	Loss 1.0868 (0.8096)	Prec@1 62.50000 (77.44566)	Prec@5 100.00000 (99.45652)
Epoch: [35][47/60]	Time 0.02230 (0.25198)	Data 0.00048 (0.16134)	Loss 1.4873 (0.8240)	Prec@1 75.00000 (77.39362)	Prec@5 87.50000 (99.20213)
Epoch: [35][48/60]	Time 0.02272 (0.24721)	Data 0.00042 (0.15799)	Loss 0.7201 (0.8219)	Prec@1 87.50000 (77.60417)	Prec@5 100.00000 (99.21875)
Epoch: [35][49/60]	Time 0.02187 (0.24261)	Data 0.00042 (0.15477)	Loss 0.6587 (0.8185)	Prec@1 75.00000 (77.55102)	Prec@5 100.00000 (99.23470)
Epoch: [35][50/60]	Time 0.02221 (0.23820)	Data 0.00042 (0.15168)	Loss 1.2700 (0.8276)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (99.25000)
Epoch: [35][51/60]	Time 0.02317 (0.23398)	Data 0.00044 (0.14872)	Loss 0.6510 (0.8241)	Prec@1 87.50000 (77.69608)	Prec@5 100.00000 (99.26471)
Epoch: [35][52/60]	Time 0.02465 (0.22996)	Data 0.00045 (0.14587)	Loss 1.3281 (0.8338)	Prec@1 50.00000 (77.16347)	Prec@5 87.50000 (99.03847)
Epoch: [35][53/60]	Time 0.03464 (0.22627)	Data 0.00046 (0.14312)	Loss 1.1754 (0.8402)	Prec@1 75.00000 (77.12264)	Prec@5 100.00000 (99.05660)
Epoch: [35][54/60]	Time 0.02519 (0.22255)	Data 0.00091 (0.14049)	Loss 1.6714 (0.8556)	Prec@1 62.50000 (76.85185)	Prec@5 100.00000 (99.07407)
Epoch: [35][55/60]	Time 0.02282 (0.21892)	Data 0.00050 (0.13794)	Loss 1.4906 (0.8672)	Prec@1 62.50000 (76.59090)	Prec@5 87.50000 (98.86363)
Epoch: [35][56/60]	Time 0.02249 (0.21541)	Data 0.00055 (0.13549)	Loss 0.1040 (0.8535)	Prec@1 100.00000 (77.00893)	Prec@5 100.00000 (98.88393)
Epoch: [35][57/60]	Time 0.02213 (0.21202)	Data 0.00044 (0.13312)	Loss 1.1303 (0.8584)	Prec@1 62.50000 (76.75439)	Prec@5 87.50000 (98.68421)
Epoch: [35][58/60]	Time 0.02212 (0.20874)	Data 0.00042 (0.13083)	Loss 0.1997 (0.8470)	Prec@1 100.00000 (77.15517)	Prec@5 100.00000 (98.70689)
Epoch: [35][59/60]	Time 0.02209 (0.20558)	Data 0.00044 (0.12862)	Loss 1.1583 (0.8523)	Prec@1 62.50000 (76.90678)	Prec@5 100.00000 (98.72881)
Epoch: [35][60/60]	Time 0.02259 (0.20253)	Data 0.00051 (0.12649)	Loss 0.3391 (0.8438)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (98.75001)
train at epoch 36
train at epoch 36
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [36][0/272]	 lr: 0.04000	Time 4.699 (4.699)	Data 3.696 (3.696)	Loss 0.0691 (0.0691)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [36][10/272]	 lr: 0.04000	Time 0.438 (1.297)	Data 0.128 (0.806)	Loss 0.1632 (0.1586)	Prec@1 90.62500 (95.45455)	Prec@5 100.00000 (100.00000)
Epoch: [36][20/272]	 lr: 0.04000	Time 0.509 (0.881)	Data 0.122 (0.485)	Loss 0.2243 (0.1831)	Prec@1 93.75000 (94.49405)	Prec@5 100.00000 (100.00000)
Epoch: [36][30/272]	 lr: 0.04000	Time 0.555 (0.743)	Data 0.129 (0.369)	Loss 0.3828 (0.1890)	Prec@1 87.50000 (94.05241)	Prec@5 100.00000 (100.00000)
Epoch: [36][40/272]	 lr: 0.04000	Time 0.465 (0.669)	Data 0.128 (0.310)	Loss 0.3134 (0.1765)	Prec@1 87.50000 (94.66463)	Prec@5 100.00000 (100.00000)
Epoch: [36][50/272]	 lr: 0.04000	Time 0.332 (0.624)	Data 0.131 (0.274)	Loss 0.3623 (0.1786)	Prec@1 84.37500 (94.36275)	Prec@5 100.00000 (100.00000)
Epoch: [36][60/272]	 lr: 0.04000	Time 0.559 (0.598)	Data 0.129 (0.250)	Loss 0.0961 (0.1673)	Prec@1 96.87500 (94.77458)	Prec@5 100.00000 (99.99999)
Epoch: [36][70/272]	 lr: 0.04000	Time 0.556 (0.574)	Data 0.122 (0.233)	Loss 0.1766 (0.1669)	Prec@1 93.75000 (94.85035)	Prec@5 100.00000 (100.00000)
Epoch: [36][80/272]	 lr: 0.04000	Time 0.451 (0.560)	Data 0.125 (0.219)	Loss 0.0454 (0.1635)	Prec@1 100.00000 (94.94599)	Prec@5 100.00000 (100.00000)
Epoch: [36][90/272]	 lr: 0.04000	Time 0.462 (0.548)	Data 0.128 (0.209)	Loss 0.1412 (0.1576)	Prec@1 93.75000 (95.19231)	Prec@5 100.00000 (100.00000)
Epoch: [36][100/272]	 lr: 0.04000	Time 0.456 (0.537)	Data 0.122 (0.201)	Loss 0.0460 (0.1506)	Prec@1 100.00000 (95.51361)	Prec@5 100.00000 (100.00000)
Epoch: [36][110/272]	 lr: 0.04000	Time 0.424 (0.530)	Data 0.126 (0.195)	Loss 0.2824 (0.1473)	Prec@1 90.62500 (95.63626)	Prec@5 100.00000 (100.00000)
Epoch: [36][120/272]	 lr: 0.04000	Time 0.521 (0.523)	Data 0.129 (0.189)	Loss 0.1882 (0.1449)	Prec@1 90.62500 (95.71281)	Prec@5 100.00000 (99.99999)
Epoch: [36][130/272]	 lr: 0.04000	Time 0.435 (0.517)	Data 0.129 (0.185)	Loss 0.0119 (0.1399)	Prec@1 100.00000 (95.87309)	Prec@5 100.00000 (100.00000)
Epoch: [36][140/272]	 lr: 0.04000	Time 0.404 (0.513)	Data 0.126 (0.180)	Loss 0.0245 (0.1364)	Prec@1 100.00000 (96.09929)	Prec@5 100.00000 (100.00000)
Epoch: [36][150/272]	 lr: 0.04000	Time 0.447 (0.507)	Data 0.130 (0.177)	Loss 0.1246 (0.1342)	Prec@1 96.87500 (96.21275)	Prec@5 100.00000 (100.00000)
Epoch: [36][160/272]	 lr: 0.04000	Time 0.444 (0.503)	Data 0.131 (0.174)	Loss 0.1320 (0.1313)	Prec@1 96.87500 (96.35094)	Prec@5 100.00000 (100.00000)
Epoch: [36][170/272]	 lr: 0.04000	Time 0.512 (0.500)	Data 0.128 (0.171)	Loss 0.1075 (0.1314)	Prec@1 96.87500 (96.41813)	Prec@5 100.00000 (100.00000)
Epoch: [36][180/272]	 lr: 0.04000	Time 0.492 (0.496)	Data 0.129 (0.168)	Loss 0.3045 (0.1315)	Prec@1 81.25000 (96.42611)	Prec@5 100.00000 (100.00001)
Epoch: [36][190/272]	 lr: 0.04000	Time 0.494 (0.493)	Data 0.141 (0.166)	Loss 0.1476 (0.1290)	Prec@1 96.87500 (96.51505)	Prec@5 100.00000 (100.00000)
Epoch: [36][200/272]	 lr: 0.04000	Time 0.533 (0.490)	Data 0.127 (0.165)	Loss 0.2002 (0.1273)	Prec@1 90.62500 (96.54851)	Prec@5 100.00000 (100.00000)
Epoch: [36][210/272]	 lr: 0.04000	Time 0.488 (0.488)	Data 0.128 (0.163)	Loss 0.1306 (0.1279)	Prec@1 96.87500 (96.57880)	Prec@5 100.00000 (100.00000)
Epoch: [36][220/272]	 lr: 0.04000	Time 0.520 (0.485)	Data 0.118 (0.161)	Loss 0.1577 (0.1253)	Prec@1 93.75000 (96.69118)	Prec@5 100.00000 (100.00001)
Epoch: [36][230/272]	 lr: 0.04000	Time 0.423 (0.483)	Data 0.112 (0.159)	Loss 0.0578 (0.1228)	Prec@1 100.00000 (96.78030)	Prec@5 100.00000 (100.00000)
Epoch: [36][240/272]	 lr: 0.04000	Time 0.280 (0.480)	Data 0.127 (0.158)	Loss 0.2387 (0.1221)	Prec@1 90.62500 (96.78424)	Prec@5 100.00000 (100.00001)
Epoch: [36][250/272]	 lr: 0.04000	Time 0.241 (0.471)	Data 0.129 (0.157)	Loss 0.1431 (0.1209)	Prec@1 96.87500 (96.81275)	Prec@5 100.00000 (100.00000)
Epoch: [36][260/272]	 lr: 0.04000	Time 0.241 (0.462)	Data 0.129 (0.156)	Loss 0.0865 (0.1193)	Prec@1 100.00000 (96.86302)	Prec@5 100.00000 (100.00000)
Epoch: [36][270/272]	 lr: 0.04000	Time 0.244 (0.454)	Data 0.128 (0.155)	Loss 0.0190 (0.1187)	Prec@1 100.00000 (96.86347)	Prec@5 100.00000 (100.00000)
validation at epoch 36
validation at epoch 36
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [36][1/60]	Time 6.22311 (6.22311)	Data 6.02339 (6.02339)	Loss 0.5300 (0.5300)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [36][2/60]	Time 0.31603 (3.26957)	Data 0.00865 (3.01602)	Loss 0.5674 (0.5487)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [36][3/60]	Time 0.20661 (2.24858)	Data 0.01860 (2.01688)	Loss 1.3282 (0.8085)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [36][4/60]	Time 0.16245 (1.72705)	Data 0.02196 (1.51815)	Loss 0.2870 (0.6782)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [36][5/60]	Time 0.24855 (1.43135)	Data 0.13477 (1.24147)	Loss 0.9780 (0.7381)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (97.50000)
Epoch: [36][6/60]	Time 0.46604 (1.27047)	Data 0.29187 (1.08321)	Loss 0.7213 (0.7353)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [36][7/60]	Time 0.15207 (1.11069)	Data 0.03456 (0.93340)	Loss 1.7773 (0.8842)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [36][8/60]	Time 0.30672 (1.01020)	Data 0.09127 (0.82813)	Loss 1.7631 (0.9940)	Prec@1 50.00000 (71.87500)	Prec@5 100.00000 (98.43750)
Epoch: [36][9/60]	Time 0.07365 (0.90614)	Data 0.04245 (0.74083)	Loss 0.9753 (0.9920)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (98.61111)
Epoch: [36][10/60]	Time 0.24823 (0.84035)	Data 0.07494 (0.67425)	Loss 1.2466 (1.0174)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (98.75000)
Epoch: [36][11/60]	Time 0.04422 (0.76797)	Data 0.00099 (0.61304)	Loss 0.9831 (1.0143)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [36][12/60]	Time 0.17611 (0.71865)	Data 0.08746 (0.56924)	Loss 1.1658 (1.0269)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (98.95834)
Epoch: [36][13/60]	Time 0.13884 (0.67405)	Data 0.08846 (0.53226)	Loss 2.2030 (1.1174)	Prec@1 37.50000 (71.15385)	Prec@5 87.50000 (98.07693)
Epoch: [36][14/60]	Time 0.07650 (0.63137)	Data 0.03674 (0.49686)	Loss 0.6371 (1.0831)	Prec@1 75.00000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [36][15/60]	Time 0.14596 (0.59901)	Data 0.00234 (0.46390)	Loss 1.5971 (1.1173)	Prec@1 50.00000 (70.00000)	Prec@5 100.00000 (98.33334)
Epoch: [36][16/60]	Time 0.17672 (0.57261)	Data 0.03946 (0.43737)	Loss 1.2700 (1.1269)	Prec@1 75.00000 (70.31250)	Prec@5 100.00000 (98.43750)
Epoch: [36][17/60]	Time 0.06256 (0.54261)	Data 0.00300 (0.41182)	Loss 0.5536 (1.0932)	Prec@1 87.50000 (71.32353)	Prec@5 100.00000 (98.52941)
Epoch: [36][18/60]	Time 0.05846 (0.51571)	Data 0.00252 (0.38908)	Loss 2.3437 (1.1626)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (98.61111)
Epoch: [36][19/60]	Time 0.19265 (0.49871)	Data 0.05915 (0.37171)	Loss 0.0441 (1.1038)	Prec@1 100.00000 (72.36842)	Prec@5 100.00000 (98.68421)
Epoch: [36][20/60]	Time 0.11742 (0.47965)	Data 0.00212 (0.35324)	Loss 2.7172 (1.1844)	Prec@1 62.50000 (71.87500)	Prec@5 87.50000 (98.12500)
Epoch: [36][21/60]	Time 0.17736 (0.46525)	Data 0.01181 (0.33698)	Loss 1.1041 (1.1806)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [36][22/60]	Time 0.14511 (0.45070)	Data 0.01611 (0.32239)	Loss 0.9308 (1.1693)	Prec@1 75.00000 (71.59091)	Prec@5 100.00000 (98.29546)
Epoch: [36][23/60]	Time 0.11300 (0.43602)	Data 0.02662 (0.30953)	Loss 1.3687 (1.1779)	Prec@1 62.50000 (71.19566)	Prec@5 87.50000 (97.82609)
Epoch: [36][24/60]	Time 0.11714 (0.42273)	Data 0.01849 (0.29741)	Loss 0.5870 (1.1533)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (97.91667)
Epoch: [36][25/60]	Time 0.27279 (0.41673)	Data 0.09480 (0.28930)	Loss 0.4737 (1.1261)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (98.00000)
Epoch: [36][26/60]	Time 0.07367 (0.40354)	Data 0.01993 (0.27894)	Loss 0.0177 (1.0835)	Prec@1 100.00000 (73.55769)	Prec@5 100.00000 (98.07693)
Epoch: [36][27/60]	Time 0.09567 (0.39214)	Data 0.01617 (0.26921)	Loss 0.9190 (1.0774)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (98.14815)
Epoch: [36][28/60]	Time 0.13896 (0.38309)	Data 0.00299 (0.25970)	Loss 0.3334 (1.0508)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (98.21429)
Epoch: [36][29/60]	Time 0.12357 (0.37414)	Data 0.00046 (0.25076)	Loss 0.4061 (1.0286)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (98.27586)
Epoch: [36][30/60]	Time 0.08248 (0.36442)	Data 0.00056 (0.24242)	Loss 1.4985 (1.0443)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (98.33334)
Epoch: [36][31/60]	Time 0.06232 (0.35468)	Data 0.00713 (0.23483)	Loss 3.1666 (1.1127)	Prec@1 50.00000 (72.58064)	Prec@5 87.50000 (97.98387)
Epoch: [36][32/60]	Time 0.05841 (0.34542)	Data 0.00045 (0.22751)	Loss 1.8967 (1.1372)	Prec@1 62.50000 (72.26562)	Prec@5 100.00000 (98.04688)
Epoch: [36][33/60]	Time 0.06253 (0.33685)	Data 0.00505 (0.22077)	Loss 0.1999 (1.1088)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (98.10606)
Epoch: [36][34/60]	Time 0.05009 (0.32841)	Data 0.00044 (0.21429)	Loss 2.3378 (1.1450)	Prec@1 37.50000 (71.69118)	Prec@5 100.00000 (98.16177)
Epoch: [36][35/60]	Time 0.03831 (0.32012)	Data 0.00462 (0.20830)	Loss 1.8838 (1.1661)	Prec@1 62.50000 (71.42857)	Prec@5 87.50000 (97.85715)
Epoch: [36][36/60]	Time 0.03424 (0.31218)	Data 0.00064 (0.20253)	Loss 1.5625 (1.1771)	Prec@1 75.00000 (71.52778)	Prec@5 100.00000 (97.91666)
Epoch: [36][37/60]	Time 0.03039 (0.30457)	Data 0.00049 (0.19707)	Loss 2.3400 (1.2085)	Prec@1 62.50000 (71.28378)	Prec@5 100.00000 (97.97298)
Epoch: [36][38/60]	Time 0.02399 (0.29718)	Data 0.00044 (0.19189)	Loss 2.7702 (1.2496)	Prec@1 50.00000 (70.72369)	Prec@5 100.00000 (98.02631)
Epoch: [36][39/60]	Time 0.03181 (0.29038)	Data 0.00048 (0.18698)	Loss 0.0514 (1.2189)	Prec@1 100.00000 (71.47436)	Prec@5 100.00000 (98.07693)
Epoch: [36][40/60]	Time 0.02456 (0.28373)	Data 0.00056 (0.18232)	Loss 0.3856 (1.1981)	Prec@1 75.00000 (71.56250)	Prec@5 100.00000 (98.12500)
Epoch: [36][41/60]	Time 0.03691 (0.27771)	Data 0.00421 (0.17798)	Loss 1.6017 (1.2079)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (98.17073)
Epoch: [36][42/60]	Time 0.02901 (0.27179)	Data 0.00053 (0.17375)	Loss 1.5470 (1.2160)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (98.21429)
Epoch: [36][43/60]	Time 0.03493 (0.26628)	Data 0.00177 (0.16975)	Loss 1.2796 (1.2175)	Prec@1 75.00000 (71.51163)	Prec@5 100.00000 (98.25581)
Epoch: [36][44/60]	Time 0.02833 (0.26087)	Data 0.00062 (0.16591)	Loss 1.9211 (1.2335)	Prec@1 62.50000 (71.30682)	Prec@5 100.00000 (98.29546)
Epoch: [36][45/60]	Time 0.02301 (0.25559)	Data 0.00047 (0.16223)	Loss 1.0710 (1.2298)	Prec@1 87.50000 (71.66667)	Prec@5 100.00000 (98.33334)
Epoch: [36][46/60]	Time 0.02231 (0.25052)	Data 0.00042 (0.15872)	Loss 2.8118 (1.2642)	Prec@1 50.00000 (71.19566)	Prec@5 100.00000 (98.36957)
Epoch: [36][47/60]	Time 0.02343 (0.24569)	Data 0.00039 (0.15535)	Loss 2.0575 (1.2811)	Prec@1 75.00000 (71.27660)	Prec@5 87.50000 (98.13830)
Epoch: [36][48/60]	Time 0.02304 (0.24105)	Data 0.00043 (0.15212)	Loss 1.6372 (1.2885)	Prec@1 75.00000 (71.35417)	Prec@5 100.00000 (98.17709)
Epoch: [36][49/60]	Time 0.02252 (0.23659)	Data 0.00041 (0.14902)	Loss 1.3965 (1.2907)	Prec@1 62.50000 (71.17347)	Prec@5 100.00000 (98.21429)
Epoch: [36][50/60]	Time 0.02237 (0.23230)	Data 0.00040 (0.14605)	Loss 1.4141 (1.2932)	Prec@1 62.50000 (71.00000)	Prec@5 100.00000 (98.25000)
Epoch: [36][51/60]	Time 0.02246 (0.22819)	Data 0.00038 (0.14320)	Loss 1.0473 (1.2884)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (98.28432)
Epoch: [36][52/60]	Time 0.02264 (0.22424)	Data 0.00041 (0.14045)	Loss 3.7359 (1.3354)	Prec@1 25.00000 (69.95193)	Prec@5 87.50000 (98.07693)
Epoch: [36][53/60]	Time 0.02317 (0.22044)	Data 0.00041 (0.13781)	Loss 1.9173 (1.3464)	Prec@1 50.00000 (69.57547)	Prec@5 100.00000 (98.11321)
Epoch: [36][54/60]	Time 0.02229 (0.21677)	Data 0.00043 (0.13526)	Loss 2.3669 (1.3653)	Prec@1 50.00000 (69.21297)	Prec@5 100.00000 (98.14815)
Epoch: [36][55/60]	Time 0.02239 (0.21324)	Data 0.00039 (0.13281)	Loss 2.4938 (1.3858)	Prec@1 62.50000 (69.09090)	Prec@5 87.50000 (97.95454)
Epoch: [36][56/60]	Time 0.02247 (0.20983)	Data 0.00053 (0.13045)	Loss 0.9710 (1.3784)	Prec@1 62.50000 (68.97322)	Prec@5 100.00000 (97.99107)
Epoch: [36][57/60]	Time 0.02257 (0.20655)	Data 0.00038 (0.12817)	Loss 2.6677 (1.4011)	Prec@1 50.00000 (68.64035)	Prec@5 87.50000 (97.80701)
Epoch: [36][58/60]	Time 0.02286 (0.20338)	Data 0.00047 (0.12597)	Loss 1.4734 (1.4023)	Prec@1 62.50000 (68.53448)	Prec@5 100.00000 (97.84483)
Epoch: [36][59/60]	Time 0.02231 (0.20031)	Data 0.00041 (0.12384)	Loss 2.6578 (1.4236)	Prec@1 37.50000 (68.00848)	Prec@5 87.50000 (97.66949)
Epoch: [36][60/60]	Time 0.02228 (0.19734)	Data 0.00048 (0.12178)	Loss 0.6611 (1.4109)	Prec@1 87.50000 (68.33334)	Prec@5 100.00000 (97.70834)
train at epoch 37
train at epoch 37
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [37][0/272]	 lr: 0.04000	Time 9.150 (9.150)	Data 8.589 (8.589)	Loss 0.0317 (0.0317)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [37][10/272]	 lr: 0.04000	Time 0.424 (1.317)	Data 0.128 (0.901)	Loss 0.0798 (0.1026)	Prec@1 96.87500 (98.01137)	Prec@5 100.00000 (100.00000)
Epoch: [37][20/272]	 lr: 0.04000	Time 0.445 (0.895)	Data 0.119 (0.532)	Loss 0.0529 (0.0932)	Prec@1 100.00000 (97.91667)	Prec@5 100.00000 (100.00000)
Epoch: [37][30/272]	 lr: 0.04000	Time 0.342 (0.752)	Data 0.127 (0.402)	Loss 0.0507 (0.0855)	Prec@1 100.00000 (98.08467)	Prec@5 100.00000 (100.00000)
Epoch: [37][40/272]	 lr: 0.04000	Time 0.444 (0.680)	Data 0.129 (0.336)	Loss 0.0621 (0.0853)	Prec@1 96.87500 (98.09451)	Prec@5 100.00000 (100.00000)
Epoch: [37][50/272]	 lr: 0.04000	Time 0.532 (0.632)	Data 0.142 (0.296)	Loss 0.0211 (0.0836)	Prec@1 100.00000 (98.22305)	Prec@5 100.00000 (100.00000)
Epoch: [37][60/272]	 lr: 0.04000	Time 0.526 (0.599)	Data 0.130 (0.268)	Loss 0.0233 (0.0848)	Prec@1 100.00000 (98.15573)	Prec@5 100.00000 (99.99999)
Epoch: [37][70/272]	 lr: 0.04000	Time 0.442 (0.576)	Data 0.129 (0.248)	Loss 0.1613 (0.0860)	Prec@1 93.75000 (98.06338)	Prec@5 100.00000 (100.00000)
Epoch: [37][80/272]	 lr: 0.04000	Time 0.404 (0.558)	Data 0.125 (0.233)	Loss 0.0875 (0.0873)	Prec@1 96.87500 (97.95525)	Prec@5 100.00000 (100.00000)
Epoch: [37][90/272]	 lr: 0.04000	Time 0.554 (0.546)	Data 0.137 (0.222)	Loss 0.3255 (0.0897)	Prec@1 87.50000 (97.76786)	Prec@5 100.00000 (100.00000)
Epoch: [37][100/272]	 lr: 0.04000	Time 0.497 (0.537)	Data 0.123 (0.213)	Loss 0.0444 (0.0849)	Prec@1 100.00000 (97.95792)	Prec@5 100.00000 (100.00000)
Epoch: [37][110/272]	 lr: 0.04000	Time 0.340 (0.527)	Data 0.129 (0.205)	Loss 0.0959 (0.0844)	Prec@1 96.87500 (97.91667)	Prec@5 100.00000 (100.00000)
Epoch: [37][120/272]	 lr: 0.04000	Time 0.354 (0.520)	Data 0.128 (0.199)	Loss 0.0503 (0.0846)	Prec@1 100.00000 (97.85640)	Prec@5 100.00000 (99.99999)
Epoch: [37][130/272]	 lr: 0.04000	Time 0.529 (0.516)	Data 0.128 (0.193)	Loss 0.0592 (0.0840)	Prec@1 100.00000 (97.85305)	Prec@5 100.00000 (100.00000)
Epoch: [37][140/272]	 lr: 0.04000	Time 0.473 (0.510)	Data 0.137 (0.188)	Loss 0.0448 (0.0876)	Prec@1 100.00000 (97.73936)	Prec@5 100.00000 (100.00000)
Epoch: [37][150/272]	 lr: 0.04000	Time 0.427 (0.505)	Data 0.130 (0.184)	Loss 0.1178 (0.0878)	Prec@1 90.62500 (97.70281)	Prec@5 100.00000 (100.00000)
Epoch: [37][160/272]	 lr: 0.04000	Time 0.464 (0.501)	Data 0.120 (0.180)	Loss 0.2013 (0.0901)	Prec@1 90.62500 (97.53494)	Prec@5 100.00000 (100.00000)
Epoch: [37][170/272]	 lr: 0.04000	Time 0.449 (0.498)	Data 0.109 (0.177)	Loss 0.0752 (0.0913)	Prec@1 100.00000 (97.45979)	Prec@5 100.00000 (100.00000)
Epoch: [37][180/272]	 lr: 0.04000	Time 0.430 (0.494)	Data 0.128 (0.174)	Loss 0.1031 (0.0952)	Prec@1 96.87500 (97.39296)	Prec@5 100.00000 (100.00001)
Epoch: [37][190/272]	 lr: 0.04000	Time 0.525 (0.493)	Data 0.124 (0.172)	Loss 0.0478 (0.0941)	Prec@1 100.00000 (97.48037)	Prec@5 100.00000 (100.00000)
Epoch: [37][200/272]	 lr: 0.04000	Time 0.545 (0.490)	Data 0.124 (0.170)	Loss 0.1123 (0.0943)	Prec@1 96.87500 (97.43470)	Prec@5 100.00000 (100.00000)
Epoch: [37][210/272]	 lr: 0.04000	Time 0.332 (0.488)	Data 0.126 (0.168)	Loss 0.1597 (0.0951)	Prec@1 93.75000 (97.34894)	Prec@5 100.00000 (100.00000)
Epoch: [37][220/272]	 lr: 0.04000	Time 0.463 (0.487)	Data 0.100 (0.166)	Loss 0.0927 (0.0942)	Prec@1 96.87500 (97.41234)	Prec@5 100.00000 (100.00001)
Epoch: [37][230/272]	 lr: 0.04000	Time 0.462 (0.486)	Data 0.137 (0.164)	Loss 0.0738 (0.0928)	Prec@1 96.87500 (97.48376)	Prec@5 100.00000 (100.00000)
Epoch: [37][240/272]	 lr: 0.04000	Time 0.287 (0.483)	Data 0.127 (0.162)	Loss 0.1367 (0.0920)	Prec@1 93.75000 (97.48444)	Prec@5 100.00000 (100.00001)
Epoch: [37][250/272]	 lr: 0.04000	Time 0.241 (0.474)	Data 0.129 (0.161)	Loss 0.0550 (0.0915)	Prec@1 100.00000 (97.49751)	Prec@5 100.00000 (100.00000)
Epoch: [37][260/272]	 lr: 0.04000	Time 0.240 (0.465)	Data 0.127 (0.160)	Loss 0.0942 (0.0909)	Prec@1 96.87500 (97.54549)	Prec@5 100.00000 (100.00000)
Epoch: [37][270/272]	 lr: 0.04000	Time 0.241 (0.456)	Data 0.128 (0.159)	Loss 0.0644 (0.0894)	Prec@1 100.00000 (97.62454)	Prec@5 100.00000 (100.00000)
validation at epoch 37
validation at epoch 37
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [37][1/60]	Time 6.89553 (6.89553)	Data 6.79405 (6.79405)	Loss 0.3510 (0.3510)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [37][2/60]	Time 0.28312 (3.58932)	Data 0.10792 (3.45098)	Loss 0.2875 (0.3193)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [37][3/60]	Time 0.08176 (2.42014)	Data 0.00062 (2.30086)	Loss 1.1780 (0.6055)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [37][4/60]	Time 0.20025 (1.86517)	Data 0.15681 (1.76485)	Loss 0.3812 (0.5494)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [37][5/60]	Time 0.04073 (1.50028)	Data 0.00184 (1.41225)	Loss 0.7390 (0.5874)	Prec@1 62.50000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [37][6/60]	Time 0.06081 (1.26037)	Data 0.00071 (1.17699)	Loss 0.4319 (0.5614)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [37][7/60]	Time 0.11707 (1.09704)	Data 0.00045 (1.00891)	Loss 1.0445 (0.6305)	Prec@1 75.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [37][8/60]	Time 0.33704 (1.00204)	Data 0.11099 (0.89667)	Loss 0.6200 (0.6291)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [37][9/60]	Time 0.28779 (0.92268)	Data 0.05348 (0.80298)	Loss 0.9450 (0.6642)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [37][10/60]	Time 0.16162 (0.84657)	Data 0.00423 (0.72311)	Loss 0.4618 (0.6440)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [37][11/60]	Time 0.17874 (0.78586)	Data 0.01156 (0.65842)	Loss 0.4187 (0.6235)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [37][12/60]	Time 0.21527 (0.73831)	Data 0.00316 (0.60382)	Loss 1.7252 (0.7153)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [37][13/60]	Time 0.13433 (0.69185)	Data 0.04365 (0.56073)	Loss 1.7319 (0.7935)	Prec@1 37.50000 (73.07693)	Prec@5 87.50000 (99.03847)
Epoch: [37][14/60]	Time 0.05664 (0.64648)	Data 0.01022 (0.52141)	Loss 0.3539 (0.7621)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [37][15/60]	Time 0.11143 (0.61081)	Data 0.05427 (0.49026)	Loss 0.6938 (0.7576)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (99.16667)
Epoch: [37][16/60]	Time 0.03789 (0.57500)	Data 0.00342 (0.45984)	Loss 1.1713 (0.7834)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.21875)
Epoch: [37][17/60]	Time 0.13615 (0.54919)	Data 0.03096 (0.43461)	Loss 0.4569 (0.7642)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [37][18/60]	Time 0.13803 (0.52635)	Data 0.01214 (0.41114)	Loss 2.3961 (0.8549)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [37][19/60]	Time 0.27055 (0.51288)	Data 0.18588 (0.39928)	Loss 0.0656 (0.8133)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.34211)
Epoch: [37][20/60]	Time 0.12203 (0.49334)	Data 0.00933 (0.37978)	Loss 2.6668 (0.9060)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (99.37500)
Epoch: [37][21/60]	Time 0.13923 (0.47648)	Data 0.01549 (0.36244)	Loss 1.2803 (0.9238)	Prec@1 62.50000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [37][22/60]	Time 0.17035 (0.46256)	Data 0.04508 (0.34801)	Loss 0.7956 (0.9180)	Prec@1 87.50000 (74.43182)	Prec@5 100.00000 (99.43182)
Epoch: [37][23/60]	Time 0.13350 (0.44826)	Data 0.02223 (0.33385)	Loss 1.8551 (0.9587)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (99.45652)
Epoch: [37][24/60]	Time 0.08390 (0.43307)	Data 0.01101 (0.32040)	Loss 0.7666 (0.9507)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [37][25/60]	Time 0.08847 (0.41929)	Data 0.00479 (0.30777)	Loss 0.3962 (0.9286)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (99.50000)
Epoch: [37][26/60]	Time 0.11622 (0.40763)	Data 0.01074 (0.29635)	Loss 0.1124 (0.8972)	Prec@1 87.50000 (74.51923)	Prec@5 100.00000 (99.51923)
Epoch: [37][27/60]	Time 0.14187 (0.39779)	Data 0.04743 (0.28713)	Loss 1.5544 (0.9215)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (99.53704)
Epoch: [37][28/60]	Time 0.13021 (0.38823)	Data 0.00738 (0.27714)	Loss 0.6652 (0.9124)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (99.55357)
Epoch: [37][29/60]	Time 0.13180 (0.37939)	Data 0.02244 (0.26835)	Loss 0.9247 (0.9128)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (99.56896)
Epoch: [37][30/60]	Time 0.11128 (0.37045)	Data 0.01756 (0.25999)	Loss 1.6742 (0.9382)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (99.58334)
Epoch: [37][31/60]	Time 0.09797 (0.36166)	Data 0.00049 (0.25162)	Loss 2.7025 (0.9951)	Prec@1 50.00000 (73.38709)	Prec@5 100.00000 (99.59677)
Epoch: [37][32/60]	Time 0.03669 (0.35151)	Data 0.00073 (0.24378)	Loss 1.6331 (1.0150)	Prec@1 50.00000 (72.65625)	Prec@5 100.00000 (99.60938)
Epoch: [37][33/60]	Time 0.02833 (0.34172)	Data 0.00062 (0.23641)	Loss 0.3476 (0.9948)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (99.62122)
Epoch: [37][34/60]	Time 0.02777 (0.33248)	Data 0.00052 (0.22948)	Loss 1.4508 (1.0082)	Prec@1 62.50000 (72.79412)	Prec@5 100.00000 (99.63235)
Epoch: [37][35/60]	Time 0.02818 (0.32379)	Data 0.00046 (0.22293)	Loss 1.3324 (1.0175)	Prec@1 75.00000 (72.85714)	Prec@5 100.00000 (99.64286)
Epoch: [37][36/60]	Time 0.02982 (0.31562)	Data 0.00079 (0.21676)	Loss 1.7008 (1.0364)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (99.65278)
Epoch: [37][37/60]	Time 0.02838 (0.30786)	Data 0.00046 (0.21092)	Loss 1.6767 (1.0538)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (99.66216)
Epoch: [37][38/60]	Time 0.02964 (0.30054)	Data 0.00050 (0.20538)	Loss 2.3429 (1.0877)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.67105)
Epoch: [37][39/60]	Time 0.02954 (0.29359)	Data 0.00056 (0.20013)	Loss 0.2292 (1.0657)	Prec@1 87.50000 (72.11539)	Prec@5 100.00000 (99.67949)
Epoch: [37][40/60]	Time 0.02557 (0.28689)	Data 0.00043 (0.19513)	Loss 0.3311 (1.0473)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.68750)
Epoch: [37][41/60]	Time 0.02658 (0.28054)	Data 0.00348 (0.19046)	Loss 1.0617 (1.0477)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (99.69512)
Epoch: [37][42/60]	Time 0.02959 (0.27456)	Data 0.00047 (0.18594)	Loss 0.9877 (1.0462)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (99.70238)
Epoch: [37][43/60]	Time 0.03636 (0.26902)	Data 0.00047 (0.18162)	Loss 1.0610 (1.0466)	Prec@1 75.00000 (72.67442)	Prec@5 100.00000 (99.70930)
Epoch: [37][44/60]	Time 0.03021 (0.26360)	Data 0.00077 (0.17751)	Loss 1.3673 (1.0539)	Prec@1 50.00000 (72.15910)	Prec@5 100.00000 (99.71591)
Epoch: [37][45/60]	Time 0.02375 (0.25827)	Data 0.00056 (0.17358)	Loss 0.8250 (1.0488)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (99.72222)
Epoch: [37][46/60]	Time 0.03118 (0.25333)	Data 0.00294 (0.16987)	Loss 0.7738 (1.0428)	Prec@1 62.50000 (72.01087)	Prec@5 100.00000 (99.72826)
Epoch: [37][47/60]	Time 0.02998 (0.24858)	Data 0.00433 (0.16635)	Loss 1.0795 (1.0436)	Prec@1 75.00000 (72.07446)	Prec@5 87.50000 (99.46808)
Epoch: [37][48/60]	Time 0.02350 (0.24389)	Data 0.00050 (0.16289)	Loss 0.8232 (1.0390)	Prec@1 75.00000 (72.13542)	Prec@5 100.00000 (99.47917)
Epoch: [37][49/60]	Time 0.02442 (0.23941)	Data 0.00043 (0.15958)	Loss 0.4046 (1.0260)	Prec@1 75.00000 (72.19388)	Prec@5 100.00000 (99.48979)
Epoch: [37][50/60]	Time 0.02355 (0.23509)	Data 0.00056 (0.15640)	Loss 0.7330 (1.0202)	Prec@1 75.00000 (72.25000)	Prec@5 100.00000 (99.50000)
Epoch: [37][51/60]	Time 0.03248 (0.23112)	Data 0.00046 (0.15334)	Loss 0.6557 (1.0130)	Prec@1 75.00000 (72.30392)	Prec@5 100.00000 (99.50980)
Epoch: [37][52/60]	Time 0.02659 (0.22719)	Data 0.00047 (0.15040)	Loss 1.1154 (1.0150)	Prec@1 50.00000 (71.87500)	Prec@5 100.00000 (99.51923)
Epoch: [37][53/60]	Time 0.02332 (0.22334)	Data 0.00044 (0.14757)	Loss 0.5029 (1.0053)	Prec@1 75.00000 (71.93396)	Prec@5 100.00000 (99.52831)
Epoch: [37][54/60]	Time 0.02313 (0.21963)	Data 0.00043 (0.14485)	Loss 1.3061 (1.0109)	Prec@1 62.50000 (71.75926)	Prec@5 100.00000 (99.53704)
Epoch: [37][55/60]	Time 0.02298 (0.21606)	Data 0.00045 (0.14222)	Loss 1.2397 (1.0151)	Prec@1 62.50000 (71.59090)	Prec@5 87.50000 (99.31818)
Epoch: [37][56/60]	Time 0.02265 (0.21260)	Data 0.00054 (0.13969)	Loss 0.2135 (1.0008)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (99.33036)
Epoch: [37][57/60]	Time 0.02278 (0.20927)	Data 0.00051 (0.13725)	Loss 0.7835 (0.9969)	Prec@1 87.50000 (72.14912)	Prec@5 100.00000 (99.34211)
Epoch: [37][58/60]	Time 0.02270 (0.20606)	Data 0.00042 (0.13489)	Loss 0.3392 (0.9856)	Prec@1 75.00000 (72.19827)	Prec@5 100.00000 (99.35345)
Epoch: [37][59/60]	Time 0.02322 (0.20296)	Data 0.00051 (0.13261)	Loss 0.8783 (0.9838)	Prec@1 87.50000 (72.45763)	Prec@5 100.00000 (99.36441)
Epoch: [37][60/60]	Time 0.02268 (0.19995)	Data 0.00055 (0.13041)	Loss 0.4988 (0.9757)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (99.37501)
train at epoch 38
train at epoch 38
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [38][0/272]	 lr: 0.04000	Time 8.166 (8.166)	Data 6.783 (6.783)	Loss 0.0521 (0.0521)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [38][10/272]	 lr: 0.04000	Time 0.460 (1.263)	Data 0.120 (0.808)	Loss 0.0344 (0.0657)	Prec@1 100.00000 (98.57955)	Prec@5 100.00000 (100.00000)
Epoch: [38][20/272]	 lr: 0.04000	Time 0.429 (0.860)	Data 0.143 (0.483)	Loss 0.0370 (0.0534)	Prec@1 100.00000 (98.80952)	Prec@5 100.00000 (100.00000)
Epoch: [38][30/272]	 lr: 0.04000	Time 0.333 (0.717)	Data 0.128 (0.367)	Loss 0.0402 (0.0564)	Prec@1 100.00000 (98.89113)	Prec@5 100.00000 (100.00000)
Epoch: [38][40/272]	 lr: 0.04000	Time 0.414 (0.650)	Data 0.127 (0.309)	Loss 0.0521 (0.0581)	Prec@1 100.00000 (98.85670)	Prec@5 100.00000 (100.00000)
Epoch: [38][50/272]	 lr: 0.04000	Time 0.468 (0.613)	Data 0.129 (0.274)	Loss 0.2167 (0.0629)	Prec@1 93.75000 (98.65196)	Prec@5 100.00000 (100.00000)
Epoch: [38][60/272]	 lr: 0.04000	Time 0.427 (0.588)	Data 0.125 (0.251)	Loss 0.0759 (0.0652)	Prec@1 96.87500 (98.41188)	Prec@5 100.00000 (99.99999)
Epoch: [38][70/272]	 lr: 0.04000	Time 0.450 (0.567)	Data 0.133 (0.234)	Loss 0.0189 (0.0632)	Prec@1 100.00000 (98.50352)	Prec@5 100.00000 (100.00000)
Epoch: [38][80/272]	 lr: 0.04000	Time 0.434 (0.554)	Data 0.119 (0.220)	Loss 0.0242 (0.0661)	Prec@1 100.00000 (98.41821)	Prec@5 100.00000 (100.00000)
Epoch: [38][90/272]	 lr: 0.04000	Time 0.441 (0.539)	Data 0.134 (0.210)	Loss 0.0767 (0.0631)	Prec@1 96.87500 (98.55769)	Prec@5 100.00000 (100.00000)
Epoch: [38][100/272]	 lr: 0.04000	Time 0.434 (0.529)	Data 0.127 (0.202)	Loss 0.0231 (0.0638)	Prec@1 100.00000 (98.51485)	Prec@5 100.00000 (100.00000)
Epoch: [38][110/272]	 lr: 0.04000	Time 0.451 (0.519)	Data 0.130 (0.196)	Loss 0.0284 (0.0642)	Prec@1 100.00000 (98.50789)	Prec@5 100.00000 (100.00000)
Epoch: [38][120/272]	 lr: 0.04000	Time 0.405 (0.513)	Data 0.129 (0.190)	Loss 0.1254 (0.0680)	Prec@1 93.75000 (98.37293)	Prec@5 100.00000 (99.99999)
Epoch: [38][130/272]	 lr: 0.04000	Time 0.362 (0.507)	Data 0.129 (0.186)	Loss 0.0394 (0.0703)	Prec@1 100.00000 (98.33015)	Prec@5 100.00000 (100.00000)
Epoch: [38][140/272]	 lr: 0.04000	Time 0.490 (0.503)	Data 0.142 (0.182)	Loss 0.0647 (0.0717)	Prec@1 100.00000 (98.31560)	Prec@5 100.00000 (100.00000)
Epoch: [38][150/272]	 lr: 0.04000	Time 0.462 (0.499)	Data 0.125 (0.178)	Loss 0.1503 (0.0727)	Prec@1 93.75000 (98.26159)	Prec@5 100.00000 (100.00000)
Epoch: [38][160/272]	 lr: 0.04000	Time 0.450 (0.494)	Data 0.129 (0.175)	Loss 0.1728 (0.0745)	Prec@1 90.62500 (98.17547)	Prec@5 100.00000 (100.00000)
Epoch: [38][170/272]	 lr: 0.04000	Time 0.496 (0.492)	Data 0.137 (0.173)	Loss 0.0256 (0.0744)	Prec@1 100.00000 (98.15424)	Prec@5 100.00000 (100.00000)
Epoch: [38][180/272]	 lr: 0.04000	Time 0.485 (0.490)	Data 0.126 (0.170)	Loss 0.1790 (0.0766)	Prec@1 93.75000 (98.03177)	Prec@5 100.00000 (99.98274)
Epoch: [38][190/272]	 lr: 0.04000	Time 0.449 (0.487)	Data 0.141 (0.168)	Loss 0.1822 (0.0795)	Prec@1 93.75000 (98.02029)	Prec@5 100.00000 (99.98364)
Epoch: [38][200/272]	 lr: 0.04000	Time 0.328 (0.484)	Data 0.126 (0.166)	Loss 0.1286 (0.0796)	Prec@1 96.87500 (98.00995)	Prec@5 100.00000 (99.98445)
Epoch: [38][210/272]	 lr: 0.04000	Time 0.510 (0.483)	Data 0.131 (0.165)	Loss 0.0480 (0.0795)	Prec@1 100.00000 (98.01540)	Prec@5 100.00000 (99.98519)
Epoch: [38][220/272]	 lr: 0.04000	Time 0.465 (0.481)	Data 0.129 (0.163)	Loss 0.0271 (0.0792)	Prec@1 100.00000 (98.03451)	Prec@5 100.00000 (99.98586)
Epoch: [38][230/272]	 lr: 0.04000	Time 0.457 (0.480)	Data 0.128 (0.162)	Loss 0.0542 (0.0786)	Prec@1 100.00000 (98.07900)	Prec@5 100.00000 (99.98647)
Epoch: [38][240/272]	 lr: 0.04000	Time 0.369 (0.478)	Data 0.126 (0.161)	Loss 0.0395 (0.0775)	Prec@1 100.00000 (98.13278)	Prec@5 100.00000 (99.98704)
Epoch: [38][250/272]	 lr: 0.04000	Time 0.240 (0.468)	Data 0.128 (0.159)	Loss 0.0579 (0.0760)	Prec@1 100.00000 (98.19473)	Prec@5 100.00000 (99.98756)
Epoch: [38][260/272]	 lr: 0.04000	Time 0.237 (0.460)	Data 0.129 (0.158)	Loss 0.0084 (0.0762)	Prec@1 100.00000 (98.22797)	Prec@5 100.00000 (99.98802)
Epoch: [38][270/272]	 lr: 0.04000	Time 0.240 (0.452)	Data 0.129 (0.157)	Loss 0.0081 (0.0750)	Prec@1 100.00000 (98.25877)	Prec@5 100.00000 (99.98847)
validation at epoch 38
validation at epoch 38
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [38][1/60]	Time 7.05169 (7.05169)	Data 6.83715 (6.83715)	Loss 0.6998 (0.6998)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [38][2/60]	Time 0.21721 (3.63445)	Data 0.01539 (3.42627)	Loss 0.6892 (0.6945)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [38][3/60]	Time 0.14993 (2.47294)	Data 0.00058 (2.28437)	Loss 1.3282 (0.9057)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [38][4/60]	Time 0.13706 (1.88897)	Data 0.03131 (1.72111)	Loss 0.1869 (0.7260)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [38][5/60]	Time 0.10672 (1.53252)	Data 0.00060 (1.37701)	Loss 0.2339 (0.6276)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (97.50000)
Epoch: [38][6/60]	Time 0.10916 (1.29530)	Data 0.02417 (1.15153)	Loss 0.4051 (0.5905)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (97.91667)
Epoch: [38][7/60]	Time 0.08008 (1.12169)	Data 0.00751 (0.98810)	Loss 1.3824 (0.7036)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (98.21429)
Epoch: [38][8/60]	Time 0.16874 (1.00257)	Data 0.06639 (0.87289)	Loss 1.5295 (0.8069)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.43750)
Epoch: [38][9/60]	Time 0.04292 (0.89595)	Data 0.00588 (0.77655)	Loss 0.3378 (0.7548)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (98.61111)
Epoch: [38][10/60]	Time 0.18261 (0.82461)	Data 0.06251 (0.70515)	Loss 0.2875 (0.7080)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (98.75000)
Epoch: [38][11/60]	Time 0.10815 (0.75948)	Data 0.00373 (0.64138)	Loss 0.4784 (0.6872)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (98.86364)
Epoch: [38][12/60]	Time 0.12703 (0.70677)	Data 0.01452 (0.58915)	Loss 0.4652 (0.6687)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (98.95834)
Epoch: [38][13/60]	Time 0.20983 (0.66855)	Data 0.03393 (0.54644)	Loss 2.9469 (0.8439)	Prec@1 50.00000 (78.84615)	Prec@5 87.50000 (98.07693)
Epoch: [38][14/60]	Time 0.13869 (0.63070)	Data 0.00054 (0.50744)	Loss 0.1140 (0.7918)	Prec@1 100.00000 (80.35715)	Prec@5 100.00000 (98.21429)
Epoch: [38][15/60]	Time 0.12366 (0.59690)	Data 0.01531 (0.47464)	Loss 0.4672 (0.7701)	Prec@1 87.50000 (80.83334)	Prec@5 100.00000 (98.33334)
Epoch: [38][16/60]	Time 0.08709 (0.56504)	Data 0.00655 (0.44538)	Loss 0.9092 (0.7788)	Prec@1 75.00000 (80.46875)	Prec@5 87.50000 (97.65625)
Epoch: [38][17/60]	Time 0.17213 (0.54192)	Data 0.01547 (0.42009)	Loss 0.6150 (0.7692)	Prec@1 87.50000 (80.88235)	Prec@5 87.50000 (97.05882)
Epoch: [38][18/60]	Time 0.16950 (0.52123)	Data 0.00904 (0.39726)	Loss 1.5169 (0.8107)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (97.22222)
Epoch: [38][19/60]	Time 0.12127 (0.50018)	Data 0.03538 (0.37821)	Loss 0.3188 (0.7848)	Prec@1 87.50000 (80.92105)	Prec@5 100.00000 (97.36842)
Epoch: [38][20/60]	Time 0.04185 (0.47727)	Data 0.00078 (0.35934)	Loss 1.7642 (0.8338)	Prec@1 62.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [38][21/60]	Time 0.21056 (0.46457)	Data 0.09292 (0.34665)	Loss 0.9893 (0.8412)	Prec@1 62.50000 (79.16667)	Prec@5 87.50000 (97.02381)
Epoch: [38][22/60]	Time 0.09479 (0.44776)	Data 0.00285 (0.33102)	Loss 0.9162 (0.8446)	Prec@1 75.00000 (78.97727)	Prec@5 100.00000 (97.15910)
Epoch: [38][23/60]	Time 0.12543 (0.43374)	Data 0.01431 (0.31725)	Loss 1.1929 (0.8598)	Prec@1 62.50000 (78.26087)	Prec@5 100.00000 (97.28261)
Epoch: [38][24/60]	Time 0.09563 (0.41965)	Data 0.00151 (0.30410)	Loss 1.1168 (0.8705)	Prec@1 62.50000 (77.60417)	Prec@5 100.00000 (97.39584)
Epoch: [38][25/60]	Time 0.21626 (0.41152)	Data 0.00302 (0.29206)	Loss 0.8037 (0.8678)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (97.50000)
Epoch: [38][26/60]	Time 0.16997 (0.40223)	Data 0.05610 (0.28298)	Loss 0.1131 (0.8388)	Prec@1 100.00000 (78.36539)	Prec@5 100.00000 (97.59616)
Epoch: [38][27/60]	Time 0.11188 (0.39147)	Data 0.01089 (0.27290)	Loss 0.6086 (0.8303)	Prec@1 50.00000 (77.31481)	Prec@5 100.00000 (97.68519)
Epoch: [38][28/60]	Time 0.16123 (0.38325)	Data 0.00861 (0.26346)	Loss 0.6911 (0.8253)	Prec@1 87.50000 (77.67857)	Prec@5 100.00000 (97.76786)
Epoch: [38][29/60]	Time 0.07953 (0.37278)	Data 0.00063 (0.25440)	Loss 0.6838 (0.8204)	Prec@1 75.00000 (77.58620)	Prec@5 100.00000 (97.84483)
Epoch: [38][30/60]	Time 0.06207 (0.36242)	Data 0.01258 (0.24634)	Loss 1.4652 (0.8419)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [38][31/60]	Time 0.09029 (0.35364)	Data 0.01347 (0.23883)	Loss 1.9976 (0.8792)	Prec@1 25.00000 (75.40322)	Prec@5 87.50000 (97.58064)
Epoch: [38][32/60]	Time 0.02885 (0.34349)	Data 0.00052 (0.23138)	Loss 0.3808 (0.8636)	Prec@1 87.50000 (75.78125)	Prec@5 100.00000 (97.65625)
Epoch: [38][33/60]	Time 0.02832 (0.33394)	Data 0.00462 (0.22451)	Loss 0.1560 (0.8422)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (97.72727)
Epoch: [38][34/60]	Time 0.02366 (0.32482)	Data 0.00045 (0.21792)	Loss 0.9040 (0.8440)	Prec@1 62.50000 (75.73530)	Prec@5 100.00000 (97.79412)
Epoch: [38][35/60]	Time 0.02751 (0.31632)	Data 0.00039 (0.21170)	Loss 1.4336 (0.8608)	Prec@1 75.00000 (75.71429)	Prec@5 87.50000 (97.50000)
Epoch: [38][36/60]	Time 0.03177 (0.30842)	Data 0.00349 (0.20592)	Loss 0.6828 (0.8559)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (97.56944)
Epoch: [38][37/60]	Time 0.03162 (0.30094)	Data 0.00295 (0.20043)	Loss 0.7932 (0.8542)	Prec@1 87.50000 (76.01351)	Prec@5 100.00000 (97.63514)
Epoch: [38][38/60]	Time 0.03060 (0.29382)	Data 0.00253 (0.19523)	Loss 1.4738 (0.8705)	Prec@1 62.50000 (75.65790)	Prec@5 100.00000 (97.69737)
Epoch: [38][39/60]	Time 0.02978 (0.28705)	Data 0.00179 (0.19027)	Loss 0.2647 (0.8550)	Prec@1 87.50000 (75.96154)	Prec@5 100.00000 (97.75641)
Epoch: [38][40/60]	Time 0.03064 (0.28064)	Data 0.00235 (0.18557)	Loss 0.5001 (0.8461)	Prec@1 87.50000 (76.25000)	Prec@5 100.00000 (97.81250)
Epoch: [38][41/60]	Time 0.03126 (0.27456)	Data 0.00212 (0.18109)	Loss 0.2181 (0.8308)	Prec@1 87.50000 (76.52439)	Prec@5 100.00000 (97.86585)
Epoch: [38][42/60]	Time 0.03126 (0.26877)	Data 0.00304 (0.17685)	Loss 0.8298 (0.8307)	Prec@1 75.00000 (76.48810)	Prec@5 100.00000 (97.91667)
Epoch: [38][43/60]	Time 0.03029 (0.26322)	Data 0.00282 (0.17281)	Loss 0.4602 (0.8221)	Prec@1 75.00000 (76.45349)	Prec@5 100.00000 (97.96512)
Epoch: [38][44/60]	Time 0.03093 (0.25794)	Data 0.00300 (0.16895)	Loss 0.4950 (0.8147)	Prec@1 75.00000 (76.42046)	Prec@5 100.00000 (98.01137)
Epoch: [38][45/60]	Time 0.03058 (0.25289)	Data 0.00383 (0.16528)	Loss 0.7260 (0.8127)	Prec@1 87.50000 (76.66667)	Prec@5 100.00000 (98.05556)
Epoch: [38][46/60]	Time 0.02656 (0.24797)	Data 0.00042 (0.16170)	Loss 0.9396 (0.8155)	Prec@1 62.50000 (76.35870)	Prec@5 100.00000 (98.09783)
Epoch: [38][47/60]	Time 0.02626 (0.24325)	Data 0.00043 (0.15826)	Loss 1.1551 (0.8227)	Prec@1 75.00000 (76.32979)	Prec@5 87.50000 (97.87234)
Epoch: [38][48/60]	Time 0.02669 (0.23874)	Data 0.00039 (0.15498)	Loss 0.8714 (0.8237)	Prec@1 75.00000 (76.30209)	Prec@5 100.00000 (97.91667)
Epoch: [38][49/60]	Time 0.02314 (0.23434)	Data 0.00047 (0.15182)	Loss 0.1239 (0.8094)	Prec@1 100.00000 (76.78571)	Prec@5 100.00000 (97.95918)
Epoch: [38][50/60]	Time 0.02684 (0.23019)	Data 0.00043 (0.14879)	Loss 1.0324 (0.8139)	Prec@1 75.00000 (76.75000)	Prec@5 100.00000 (98.00000)
Epoch: [38][51/60]	Time 0.02273 (0.22612)	Data 0.00054 (0.14589)	Loss 0.3395 (0.8046)	Prec@1 75.00000 (76.71569)	Prec@5 100.00000 (98.03922)
Epoch: [38][52/60]	Time 0.02316 (0.22222)	Data 0.00047 (0.14309)	Loss 0.9721 (0.8078)	Prec@1 62.50000 (76.44231)	Prec@5 100.00000 (98.07693)
Epoch: [38][53/60]	Time 0.02253 (0.21845)	Data 0.00047 (0.14040)	Loss 0.9432 (0.8104)	Prec@1 75.00000 (76.41509)	Prec@5 100.00000 (98.11321)
Epoch: [38][54/60]	Time 0.02266 (0.21483)	Data 0.00043 (0.13781)	Loss 0.6776 (0.8079)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (98.14815)
Epoch: [38][55/60]	Time 0.02256 (0.21133)	Data 0.00044 (0.13531)	Loss 1.1381 (0.8139)	Prec@1 75.00000 (76.36363)	Prec@5 87.50000 (97.95454)
Epoch: [38][56/60]	Time 0.02259 (0.20796)	Data 0.00047 (0.13290)	Loss 0.1954 (0.8029)	Prec@1 87.50000 (76.56250)	Prec@5 100.00000 (97.99107)
Epoch: [38][57/60]	Time 0.02220 (0.20470)	Data 0.00041 (0.13058)	Loss 1.3487 (0.8124)	Prec@1 50.00000 (76.09649)	Prec@5 87.50000 (97.80701)
Epoch: [38][58/60]	Time 0.02237 (0.20156)	Data 0.00044 (0.12833)	Loss 0.5148 (0.8073)	Prec@1 75.00000 (76.07758)	Prec@5 100.00000 (97.84483)
Epoch: [38][59/60]	Time 0.02255 (0.19852)	Data 0.00044 (0.12617)	Loss 0.8002 (0.8072)	Prec@1 75.00000 (76.05932)	Prec@5 100.00000 (97.88136)
Epoch: [38][60/60]	Time 0.02414 (0.19562)	Data 0.00054 (0.12407)	Loss 0.3223 (0.7991)	Prec@1 87.50000 (76.25001)	Prec@5 100.00000 (97.91667)
train at epoch 39
train at epoch 39
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [39][0/272]	 lr: 0.04000	Time 6.653 (6.653)	Data 5.037 (5.037)	Loss 0.0358 (0.0358)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [39][10/272]	 lr: 0.04000	Time 0.551 (1.293)	Data 0.129 (0.808)	Loss 0.0243 (0.0678)	Prec@1 100.00000 (98.01137)	Prec@5 100.00000 (100.00000)
Epoch: [39][20/272]	 lr: 0.04000	Time 0.486 (0.879)	Data 0.130 (0.487)	Loss 0.0778 (0.0551)	Prec@1 96.87500 (98.80952)	Prec@5 100.00000 (100.00000)
Epoch: [39][30/272]	 lr: 0.04000	Time 0.590 (0.740)	Data 0.128 (0.372)	Loss 0.0200 (0.0670)	Prec@1 100.00000 (98.08467)	Prec@5 100.00000 (100.00000)
Epoch: [39][40/272]	 lr: 0.04000	Time 0.435 (0.664)	Data 0.123 (0.313)	Loss 0.0234 (0.0698)	Prec@1 100.00000 (98.17073)	Prec@5 100.00000 (100.00000)
Epoch: [39][50/272]	 lr: 0.04000	Time 0.324 (0.618)	Data 0.129 (0.277)	Loss 0.0319 (0.0801)	Prec@1 100.00000 (98.10049)	Prec@5 100.00000 (100.00000)
Epoch: [39][60/272]	 lr: 0.04000	Time 0.419 (0.590)	Data 0.133 (0.253)	Loss 0.0372 (0.0848)	Prec@1 100.00000 (97.84836)	Prec@5 100.00000 (99.99999)
Epoch: [39][70/272]	 lr: 0.04000	Time 0.432 (0.569)	Data 0.099 (0.235)	Loss 0.0521 (0.0869)	Prec@1 100.00000 (97.71127)	Prec@5 100.00000 (100.00000)
Epoch: [39][80/272]	 lr: 0.04000	Time 0.493 (0.552)	Data 0.128 (0.222)	Loss 0.0574 (0.0900)	Prec@1 100.00000 (97.60802)	Prec@5 100.00000 (100.00000)
Epoch: [39][90/272]	 lr: 0.04000	Time 0.454 (0.542)	Data 0.127 (0.212)	Loss 0.0347 (0.0951)	Prec@1 100.00000 (97.45879)	Prec@5 100.00000 (100.00000)
Epoch: [39][100/272]	 lr: 0.04000	Time 0.451 (0.533)	Data 0.121 (0.204)	Loss 0.0424 (0.0923)	Prec@1 100.00000 (97.58663)	Prec@5 100.00000 (100.00000)
Epoch: [39][110/272]	 lr: 0.04000	Time 0.427 (0.524)	Data 0.128 (0.197)	Loss 0.0270 (0.0906)	Prec@1 100.00000 (97.66329)	Prec@5 100.00000 (100.00000)
Epoch: [39][120/272]	 lr: 0.04000	Time 0.427 (0.518)	Data 0.128 (0.192)	Loss 0.0377 (0.0874)	Prec@1 100.00000 (97.77892)	Prec@5 100.00000 (99.99999)
Epoch: [39][130/272]	 lr: 0.04000	Time 0.465 (0.511)	Data 0.129 (0.187)	Loss 0.0641 (0.0870)	Prec@1 100.00000 (97.78149)	Prec@5 100.00000 (100.00000)
Epoch: [39][140/272]	 lr: 0.04000	Time 0.409 (0.506)	Data 0.128 (0.183)	Loss 0.0931 (0.0839)	Prec@1 100.00000 (97.93883)	Prec@5 100.00000 (100.00000)
Epoch: [39][150/272]	 lr: 0.04000	Time 0.475 (0.501)	Data 0.129 (0.179)	Loss 0.3292 (0.0834)	Prec@1 84.37500 (97.90977)	Prec@5 100.00000 (100.00000)
Epoch: [39][160/272]	 lr: 0.04000	Time 0.469 (0.499)	Data 0.156 (0.176)	Loss 0.0847 (0.0860)	Prec@1 96.87500 (97.78727)	Prec@5 100.00000 (100.00000)
Epoch: [39][170/272]	 lr: 0.04000	Time 0.449 (0.497)	Data 0.129 (0.174)	Loss 0.1380 (0.0851)	Prec@1 93.75000 (97.82529)	Prec@5 100.00000 (100.00000)
Epoch: [39][180/272]	 lr: 0.04000	Time 0.606 (0.495)	Data 0.130 (0.171)	Loss 0.1128 (0.0932)	Prec@1 100.00000 (97.61741)	Prec@5 100.00000 (99.98274)
Epoch: [39][190/272]	 lr: 0.04000	Time 0.524 (0.492)	Data 0.129 (0.169)	Loss 0.0274 (0.0918)	Prec@1 100.00000 (97.67670)	Prec@5 100.00000 (99.98364)
Epoch: [39][200/272]	 lr: 0.04000	Time 0.594 (0.491)	Data 0.143 (0.166)	Loss 0.0378 (0.0932)	Prec@1 100.00000 (97.55907)	Prec@5 100.00000 (99.98445)
Epoch: [39][210/272]	 lr: 0.04000	Time 0.558 (0.488)	Data 0.140 (0.165)	Loss 0.0695 (0.0915)	Prec@1 96.87500 (97.64515)	Prec@5 100.00000 (99.98519)
Epoch: [39][220/272]	 lr: 0.04000	Time 0.412 (0.486)	Data 0.137 (0.163)	Loss 0.0414 (0.0913)	Prec@1 100.00000 (97.69514)	Prec@5 100.00000 (99.98586)
Epoch: [39][230/272]	 lr: 0.04000	Time 0.488 (0.485)	Data 0.127 (0.162)	Loss 0.0317 (0.0900)	Prec@1 100.00000 (97.75433)	Prec@5 100.00000 (99.98647)
Epoch: [39][240/272]	 lr: 0.04000	Time 0.238 (0.482)	Data 0.123 (0.160)	Loss 0.0269 (0.0883)	Prec@1 100.00000 (97.80862)	Prec@5 100.00000 (99.98704)
Epoch: [39][250/272]	 lr: 0.04000	Time 0.234 (0.472)	Data 0.125 (0.159)	Loss 0.0287 (0.0877)	Prec@1 100.00000 (97.83367)	Prec@5 100.00000 (99.98756)
Epoch: [39][260/272]	 lr: 0.04000	Time 0.235 (0.463)	Data 0.126 (0.157)	Loss 0.0208 (0.0865)	Prec@1 100.00000 (97.89272)	Prec@5 100.00000 (99.98802)
Epoch: [39][270/272]	 lr: 0.04000	Time 0.237 (0.455)	Data 0.128 (0.156)	Loss 0.0300 (0.0856)	Prec@1 100.00000 (97.93589)	Prec@5 100.00000 (99.98847)
validation at epoch 39
validation at epoch 39
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [39][1/60]	Time 7.13409 (7.13409)	Data 6.91097 (6.91097)	Loss 0.2250 (0.2250)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [39][2/60]	Time 0.16678 (3.65044)	Data 0.07026 (3.49062)	Loss 0.1493 (0.1872)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [39][3/60]	Time 0.09967 (2.46685)	Data 0.00703 (2.32942)	Loss 1.4102 (0.5949)	Prec@1 75.00000 (91.66667)	Prec@5 87.50000 (95.83334)
Epoch: [39][4/60]	Time 0.10849 (1.87726)	Data 0.00156 (1.74746)	Loss 0.2120 (0.4991)	Prec@1 87.50000 (90.62500)	Prec@5 100.00000 (96.87500)
Epoch: [39][5/60]	Time 0.20505 (1.54282)	Data 0.14071 (1.42611)	Loss 0.7120 (0.5417)	Prec@1 75.00000 (87.50000)	Prec@5 100.00000 (97.50000)
Epoch: [39][6/60]	Time 0.17669 (1.31513)	Data 0.00579 (1.18939)	Loss 0.1497 (0.4764)	Prec@1 100.00000 (89.58334)	Prec@5 100.00000 (97.91667)
Epoch: [39][7/60]	Time 0.08129 (1.13887)	Data 0.00267 (1.01985)	Loss 1.6928 (0.6502)	Prec@1 50.00000 (83.92857)	Prec@5 100.00000 (98.21429)
Epoch: [39][8/60]	Time 0.12585 (1.01224)	Data 0.03335 (0.89654)	Loss 1.9796 (0.8163)	Prec@1 62.50000 (81.25000)	Prec@5 87.50000 (96.87500)
Epoch: [39][9/60]	Time 0.14709 (0.91611)	Data 0.02698 (0.79992)	Loss 0.3706 (0.7668)	Prec@1 87.50000 (81.94444)	Prec@5 100.00000 (97.22222)
Epoch: [39][10/60]	Time 0.07806 (0.83231)	Data 0.00899 (0.72083)	Loss 1.1169 (0.8018)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (97.50000)
Epoch: [39][11/60]	Time 0.11957 (0.76751)	Data 0.03154 (0.65817)	Loss 0.9982 (0.8197)	Prec@1 87.50000 (81.81818)	Prec@5 87.50000 (96.59091)
Epoch: [39][12/60]	Time 0.07977 (0.71020)	Data 0.00059 (0.60337)	Loss 0.7813 (0.8165)	Prec@1 62.50000 (80.20834)	Prec@5 100.00000 (96.87500)
Epoch: [39][13/60]	Time 0.07940 (0.66168)	Data 0.00654 (0.55746)	Loss 1.4335 (0.8639)	Prec@1 75.00000 (79.80769)	Prec@5 87.50000 (96.15385)
Epoch: [39][14/60]	Time 0.19469 (0.62832)	Data 0.00477 (0.51798)	Loss 0.2143 (0.8175)	Prec@1 87.50000 (80.35715)	Prec@5 100.00000 (96.42857)
Epoch: [39][15/60]	Time 0.12399 (0.59470)	Data 0.01785 (0.48464)	Loss 1.8995 (0.8897)	Prec@1 50.00000 (78.33334)	Prec@5 100.00000 (96.66667)
Epoch: [39][16/60]	Time 0.14246 (0.56643)	Data 0.01054 (0.45501)	Loss 1.1193 (0.9040)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [39][17/60]	Time 0.38207 (0.55559)	Data 0.09807 (0.43401)	Loss 0.3862 (0.8736)	Prec@1 87.50000 (78.67647)	Prec@5 100.00000 (97.05882)
Epoch: [39][18/60]	Time 0.20979 (0.53638)	Data 0.00057 (0.40993)	Loss 2.2498 (0.9500)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (97.22222)
Epoch: [39][19/60]	Time 0.09001 (0.51288)	Data 0.02699 (0.38978)	Loss 0.0326 (0.9017)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (97.36842)
Epoch: [39][20/60]	Time 0.06694 (0.49059)	Data 0.00056 (0.37032)	Loss 2.1966 (0.9665)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (97.50000)
Epoch: [39][21/60]	Time 0.09097 (0.47156)	Data 0.00108 (0.35273)	Loss 1.0513 (0.9705)	Prec@1 62.50000 (77.38095)	Prec@5 100.00000 (97.61905)
Epoch: [39][22/60]	Time 0.10392 (0.45485)	Data 0.01204 (0.33725)	Loss 1.0263 (0.9731)	Prec@1 62.50000 (76.70454)	Prec@5 100.00000 (97.72727)
Epoch: [39][23/60]	Time 0.12139 (0.44035)	Data 0.03295 (0.32402)	Loss 0.9988 (0.9742)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (97.82609)
Epoch: [39][24/60]	Time 0.21055 (0.43077)	Data 0.06532 (0.31324)	Loss 0.8724 (0.9699)	Prec@1 75.00000 (76.04167)	Prec@5 100.00000 (97.91667)
Epoch: [39][25/60]	Time 0.08632 (0.41700)	Data 0.00779 (0.30102)	Loss 0.3914 (0.9468)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (98.00000)
Epoch: [39][26/60]	Time 0.08426 (0.40420)	Data 0.00082 (0.28947)	Loss 0.0502 (0.9123)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (98.07693)
Epoch: [39][27/60]	Time 0.08388 (0.39233)	Data 0.00569 (0.27896)	Loss 0.8861 (0.9113)	Prec@1 62.50000 (76.85185)	Prec@5 100.00000 (98.14815)
Epoch: [39][28/60]	Time 0.16402 (0.38418)	Data 0.01141 (0.26941)	Loss 0.2780 (0.8887)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (98.21429)
Epoch: [39][29/60]	Time 0.06831 (0.37329)	Data 0.00043 (0.26013)	Loss 0.3936 (0.8716)	Prec@1 75.00000 (77.15517)	Prec@5 100.00000 (98.27586)
Epoch: [39][30/60]	Time 0.08725 (0.36375)	Data 0.01299 (0.25189)	Loss 1.5916 (0.8956)	Prec@1 62.50000 (76.66667)	Prec@5 87.50000 (97.91667)
Epoch: [39][31/60]	Time 0.13675 (0.35643)	Data 0.01274 (0.24418)	Loss 3.0261 (0.9644)	Prec@1 25.00000 (75.00000)	Prec@5 87.50000 (97.58064)
Epoch: [39][32/60]	Time 0.09169 (0.34816)	Data 0.01147 (0.23691)	Loss 0.9487 (0.9639)	Prec@1 62.50000 (74.60938)	Prec@5 100.00000 (97.65625)
Epoch: [39][33/60]	Time 0.12959 (0.34153)	Data 0.02169 (0.23039)	Loss 0.2310 (0.9417)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (97.72727)
Epoch: [39][34/60]	Time 0.11124 (0.33476)	Data 0.00048 (0.22362)	Loss 1.5467 (0.9595)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (97.79412)
Epoch: [39][35/60]	Time 0.08559 (0.32764)	Data 0.00980 (0.21752)	Loss 1.5267 (0.9757)	Prec@1 62.50000 (74.28571)	Prec@5 87.50000 (97.50000)
Epoch: [39][36/60]	Time 0.03492 (0.31951)	Data 0.00082 (0.21150)	Loss 1.6023 (0.9931)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (97.56944)
Epoch: [39][37/60]	Time 0.02440 (0.31153)	Data 0.00052 (0.20579)	Loss 2.0419 (1.0214)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (97.63514)
Epoch: [39][38/60]	Time 0.02925 (0.30411)	Data 0.00399 (0.20048)	Loss 2.6453 (1.0642)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (97.69737)
Epoch: [39][39/60]	Time 0.02323 (0.29690)	Data 0.00066 (0.19536)	Loss 0.2117 (1.0423)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (97.75641)
Epoch: [39][40/60]	Time 0.02298 (0.29006)	Data 0.00067 (0.19049)	Loss 0.1998 (1.0212)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (97.81250)
Epoch: [39][41/60]	Time 0.02921 (0.28369)	Data 0.00046 (0.18586)	Loss 0.7351 (1.0143)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (97.86585)
Epoch: [39][42/60]	Time 0.03012 (0.27766)	Data 0.00041 (0.18144)	Loss 0.9243 (1.0121)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (97.91667)
Epoch: [39][43/60]	Time 0.03008 (0.27190)	Data 0.00048 (0.17723)	Loss 0.9299 (1.0102)	Prec@1 62.50000 (73.54651)	Prec@5 100.00000 (97.96512)
Epoch: [39][44/60]	Time 0.02997 (0.26640)	Data 0.00042 (0.17321)	Loss 0.9496 (1.0088)	Prec@1 62.50000 (73.29546)	Prec@5 100.00000 (98.01137)
Epoch: [39][45/60]	Time 0.02928 (0.26113)	Data 0.00047 (0.16938)	Loss 0.9262 (1.0070)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (98.05556)
Epoch: [39][46/60]	Time 0.03555 (0.25623)	Data 0.00042 (0.16570)	Loss 0.5690 (0.9975)	Prec@1 75.00000 (73.36957)	Prec@5 100.00000 (98.09783)
Epoch: [39][47/60]	Time 0.02478 (0.25130)	Data 0.00077 (0.16219)	Loss 1.5179 (1.0085)	Prec@1 75.00000 (73.40425)	Prec@5 87.50000 (97.87234)
Epoch: [39][48/60]	Time 0.02308 (0.24655)	Data 0.00139 (0.15884)	Loss 0.6858 (1.0018)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (97.91667)
Epoch: [39][49/60]	Time 0.02164 (0.24196)	Data 0.00042 (0.15561)	Loss 0.1521 (0.9845)	Prec@1 100.00000 (73.97959)	Prec@5 100.00000 (97.95918)
Epoch: [39][50/60]	Time 0.02239 (0.23757)	Data 0.00040 (0.15251)	Loss 0.9491 (0.9838)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (98.00000)
Epoch: [39][51/60]	Time 0.02277 (0.23335)	Data 0.00044 (0.14952)	Loss 0.5712 (0.9757)	Prec@1 75.00000 (74.01961)	Prec@5 100.00000 (98.03922)
Epoch: [39][52/60]	Time 0.02258 (0.22930)	Data 0.00050 (0.14666)	Loss 1.6141 (0.9880)	Prec@1 25.00000 (73.07693)	Prec@5 87.50000 (97.83654)
Epoch: [39][53/60]	Time 0.02237 (0.22540)	Data 0.00043 (0.14390)	Loss 0.9122 (0.9865)	Prec@1 62.50000 (72.87736)	Prec@5 100.00000 (97.87736)
Epoch: [39][54/60]	Time 0.02195 (0.22163)	Data 0.00046 (0.14124)	Loss 1.3004 (0.9923)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (97.91666)
Epoch: [39][55/60]	Time 0.02188 (0.21800)	Data 0.00049 (0.13868)	Loss 1.8454 (1.0078)	Prec@1 62.50000 (72.72727)	Prec@5 87.50000 (97.72727)
Epoch: [39][56/60]	Time 0.02967 (0.21463)	Data 0.00054 (0.13622)	Loss 0.4355 (0.9976)	Prec@1 75.00000 (72.76786)	Prec@5 100.00000 (97.76786)
Epoch: [39][57/60]	Time 0.02338 (0.21128)	Data 0.00075 (0.13384)	Loss 1.3547 (1.0039)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (97.58772)
Epoch: [39][58/60]	Time 0.02233 (0.20802)	Data 0.00051 (0.13154)	Loss 0.5750 (0.9965)	Prec@1 75.00000 (72.62931)	Prec@5 100.00000 (97.62931)
Epoch: [39][59/60]	Time 0.02223 (0.20487)	Data 0.00044 (0.12932)	Loss 1.1231 (0.9986)	Prec@1 62.50000 (72.45763)	Prec@5 100.00000 (97.66949)
Epoch: [39][60/60]	Time 0.02151 (0.20182)	Data 0.00055 (0.12717)	Loss 0.6656 (0.9931)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (97.70834)
train at epoch 40
train at epoch 40
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [40][0/272]	 lr: 0.00400	Time 10.158 (10.158)	Data 9.547 (9.547)	Loss 0.0308 (0.0308)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [40][10/272]	 lr: 0.00400	Time 0.365 (1.313)	Data 0.129 (0.983)	Loss 0.0331 (0.0482)	Prec@1 100.00000 (99.14773)	Prec@5 100.00000 (100.00000)
Epoch: [40][20/272]	 lr: 0.00400	Time 0.321 (0.890)	Data 0.118 (0.576)	Loss 0.0209 (0.0549)	Prec@1 100.00000 (98.66071)	Prec@5 100.00000 (100.00000)
Epoch: [40][30/272]	 lr: 0.00400	Time 0.407 (0.747)	Data 0.151 (0.434)	Loss 0.0338 (0.0598)	Prec@1 100.00000 (98.48790)	Prec@5 100.00000 (100.00000)
Epoch: [40][40/272]	 lr: 0.00400	Time 0.500 (0.673)	Data 0.142 (0.359)	Loss 0.0469 (0.0566)	Prec@1 100.00000 (98.70426)	Prec@5 100.00000 (100.00000)
Epoch: [40][50/272]	 lr: 0.00400	Time 0.448 (0.628)	Data 0.119 (0.314)	Loss 0.4108 (0.0685)	Prec@1 84.37500 (98.28432)	Prec@5 100.00000 (100.00000)
Epoch: [40][60/272]	 lr: 0.00400	Time 0.421 (0.597)	Data 0.131 (0.284)	Loss 0.0091 (0.0607)	Prec@1 100.00000 (98.56557)	Prec@5 100.00000 (99.99999)
Epoch: [40][70/272]	 lr: 0.00400	Time 0.460 (0.575)	Data 0.125 (0.262)	Loss 0.0183 (0.0572)	Prec@1 100.00000 (98.72359)	Prec@5 100.00000 (100.00000)
Epoch: [40][80/272]	 lr: 0.00400	Time 0.449 (0.560)	Data 0.121 (0.245)	Loss 0.1039 (0.0549)	Prec@1 100.00000 (98.84259)	Prec@5 100.00000 (100.00000)
Epoch: [40][90/272]	 lr: 0.00400	Time 0.454 (0.546)	Data 0.112 (0.232)	Loss 0.1554 (0.0548)	Prec@1 93.75000 (98.86676)	Prec@5 100.00000 (100.00000)
Epoch: [40][100/272]	 lr: 0.00400	Time 0.466 (0.536)	Data 0.141 (0.222)	Loss 0.0151 (0.0557)	Prec@1 100.00000 (98.76237)	Prec@5 100.00000 (100.00000)
Epoch: [40][110/272]	 lr: 0.00400	Time 0.413 (0.526)	Data 0.128 (0.213)	Loss 0.0162 (0.0528)	Prec@1 100.00000 (98.87388)	Prec@5 100.00000 (100.00000)
Epoch: [40][120/272]	 lr: 0.00400	Time 0.410 (0.519)	Data 0.114 (0.207)	Loss 0.2593 (0.0528)	Prec@1 90.62500 (98.88946)	Prec@5 100.00000 (99.99999)
Epoch: [40][130/272]	 lr: 0.00400	Time 0.423 (0.515)	Data 0.129 (0.201)	Loss 0.1863 (0.0529)	Prec@1 90.62500 (98.85497)	Prec@5 100.00000 (100.00000)
Epoch: [40][140/272]	 lr: 0.00400	Time 0.461 (0.510)	Data 0.122 (0.196)	Loss 0.0137 (0.0517)	Prec@1 100.00000 (98.91400)	Prec@5 100.00000 (100.00000)
Epoch: [40][150/272]	 lr: 0.00400	Time 0.464 (0.505)	Data 0.125 (0.191)	Loss 0.0374 (0.0517)	Prec@1 100.00000 (98.90314)	Prec@5 100.00000 (100.00000)
Epoch: [40][160/272]	 lr: 0.00400	Time 0.347 (0.501)	Data 0.142 (0.187)	Loss 0.0289 (0.0505)	Prec@1 100.00000 (98.97128)	Prec@5 100.00000 (100.00000)
Epoch: [40][170/272]	 lr: 0.00400	Time 0.391 (0.497)	Data 0.136 (0.184)	Loss 0.0750 (0.0510)	Prec@1 96.87500 (98.95834)	Prec@5 100.00000 (100.00000)
Epoch: [40][180/272]	 lr: 0.00400	Time 0.479 (0.494)	Data 0.141 (0.182)	Loss 0.0947 (0.0508)	Prec@1 96.87500 (98.96409)	Prec@5 100.00000 (100.00001)
Epoch: [40][190/272]	 lr: 0.00400	Time 0.322 (0.491)	Data 0.122 (0.179)	Loss 0.0403 (0.0494)	Prec@1 100.00000 (99.01833)	Prec@5 100.00000 (100.00000)
Epoch: [40][200/272]	 lr: 0.00400	Time 0.308 (0.488)	Data 0.126 (0.176)	Loss 0.0280 (0.0479)	Prec@1 100.00000 (99.06716)	Prec@5 100.00000 (100.00000)
Epoch: [40][210/272]	 lr: 0.00400	Time 0.499 (0.487)	Data 0.137 (0.174)	Loss 0.0246 (0.0475)	Prec@1 100.00000 (99.09657)	Prec@5 100.00000 (100.00000)
Epoch: [40][220/272]	 lr: 0.00400	Time 0.518 (0.485)	Data 0.130 (0.172)	Loss 0.0201 (0.0468)	Prec@1 100.00000 (99.12331)	Prec@5 100.00000 (100.00001)
Epoch: [40][230/272]	 lr: 0.00400	Time 0.415 (0.483)	Data 0.130 (0.170)	Loss 0.0337 (0.0459)	Prec@1 100.00000 (99.14773)	Prec@5 100.00000 (100.00000)
Epoch: [40][240/272]	 lr: 0.00400	Time 0.366 (0.482)	Data 0.108 (0.168)	Loss 0.0154 (0.0448)	Prec@1 100.00000 (99.18310)	Prec@5 100.00000 (100.00001)
Epoch: [40][250/272]	 lr: 0.00400	Time 0.238 (0.472)	Data 0.129 (0.167)	Loss 0.0163 (0.0461)	Prec@1 100.00000 (99.14094)	Prec@5 100.00000 (100.00000)
Epoch: [40][260/272]	 lr: 0.00400	Time 0.240 (0.463)	Data 0.129 (0.165)	Loss 0.0619 (0.0453)	Prec@1 100.00000 (99.17385)	Prec@5 100.00000 (100.00000)
Epoch: [40][270/272]	 lr: 0.00400	Time 0.244 (0.455)	Data 0.129 (0.164)	Loss 0.0716 (0.0454)	Prec@1 100.00000 (99.16975)	Prec@5 100.00000 (100.00000)
validation at epoch 40
validation at epoch 40
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [40][1/60]	Time 4.14268 (4.14268)	Data 3.99967 (3.99967)	Loss 0.2757 (0.2757)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [40][2/60]	Time 0.24906 (2.19587)	Data 0.03700 (2.01833)	Loss 0.1531 (0.2144)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [40][3/60]	Time 0.26451 (1.55208)	Data 0.01762 (1.35143)	Loss 1.1905 (0.5398)	Prec@1 75.00000 (83.33334)	Prec@5 87.50000 (95.83334)
Epoch: [40][4/60]	Time 3.00339 (1.91491)	Data 2.95873 (1.75325)	Loss 0.1198 (0.4348)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (96.87500)
Epoch: [40][5/60]	Time 0.09228 (1.55038)	Data 0.00890 (1.40438)	Loss 0.4383 (0.4355)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (97.50000)
Epoch: [40][6/60]	Time 0.07607 (1.30466)	Data 0.00487 (1.17113)	Loss 0.3185 (0.4160)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (97.91667)
Epoch: [40][7/60]	Time 0.07431 (1.12890)	Data 0.00126 (1.00401)	Loss 1.3596 (0.5508)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (98.21429)
Epoch: [40][8/60]	Time 0.24069 (1.01787)	Data 0.00903 (0.87963)	Loss 1.3133 (0.6461)	Prec@1 75.00000 (82.81250)	Prec@5 100.00000 (98.43750)
Epoch: [40][9/60]	Time 0.13000 (0.91922)	Data 0.01255 (0.78329)	Loss 0.6310 (0.6444)	Prec@1 62.50000 (80.55556)	Prec@5 100.00000 (98.61111)
Epoch: [40][10/60]	Time 0.07152 (0.83445)	Data 0.01335 (0.70630)	Loss 0.8713 (0.6671)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (98.75000)
Epoch: [40][11/60]	Time 0.14804 (0.77205)	Data 0.08541 (0.64985)	Loss 0.8712 (0.6857)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (98.86364)
Epoch: [40][12/60]	Time 0.18880 (0.72344)	Data 0.01075 (0.59659)	Loss 0.8284 (0.6976)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (98.95834)
Epoch: [40][13/60]	Time 0.05464 (0.67200)	Data 0.00067 (0.55075)	Loss 1.2483 (0.7399)	Prec@1 62.50000 (77.88462)	Prec@5 87.50000 (98.07693)
Epoch: [40][14/60]	Time 0.07510 (0.62936)	Data 0.00057 (0.51146)	Loss 0.1639 (0.6988)	Prec@1 87.50000 (78.57143)	Prec@5 100.00000 (98.21429)
Epoch: [40][15/60]	Time 0.05299 (0.59094)	Data 0.00559 (0.47773)	Loss 1.1495 (0.7288)	Prec@1 62.50000 (77.50001)	Prec@5 100.00000 (98.33334)
Epoch: [40][16/60]	Time 0.13317 (0.56233)	Data 0.04722 (0.45082)	Loss 1.2310 (0.7602)	Prec@1 75.00000 (77.34375)	Prec@5 100.00000 (98.43750)
Epoch: [40][17/60]	Time 0.14190 (0.53760)	Data 0.06265 (0.42799)	Loss 0.4922 (0.7445)	Prec@1 87.50000 (77.94118)	Prec@5 100.00000 (98.52941)
Epoch: [40][18/60]	Time 0.04136 (0.51003)	Data 0.00905 (0.40472)	Loss 2.5915 (0.8471)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [40][19/60]	Time 0.04158 (0.48537)	Data 0.00217 (0.38353)	Loss 0.0679 (0.8061)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (98.68421)
Epoch: [40][20/60]	Time 0.21135 (0.47167)	Data 0.07539 (0.36812)	Loss 2.8178 (0.9066)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.75000)
Epoch: [40][21/60]	Time 0.16216 (0.45693)	Data 0.03927 (0.35246)	Loss 1.0784 (0.9148)	Prec@1 62.50000 (77.38095)	Prec@5 100.00000 (98.80952)
Epoch: [40][22/60]	Time 0.30763 (0.45015)	Data 0.13936 (0.34278)	Loss 0.9452 (0.9162)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [40][23/60]	Time 0.05052 (0.43277)	Data 0.00058 (0.32790)	Loss 1.3273 (0.9341)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (98.91305)
Epoch: [40][24/60]	Time 0.13621 (0.42041)	Data 0.03297 (0.31561)	Loss 0.8127 (0.9290)	Prec@1 62.50000 (76.04167)	Prec@5 87.50000 (98.43750)
Epoch: [40][25/60]	Time 0.27143 (0.41445)	Data 0.01675 (0.30365)	Loss 0.5175 (0.9126)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (98.50000)
Epoch: [40][26/60]	Time 0.15896 (0.40463)	Data 0.10043 (0.29584)	Loss 0.0234 (0.8784)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (98.55769)
Epoch: [40][27/60]	Time 0.13782 (0.39475)	Data 0.02969 (0.28598)	Loss 1.4060 (0.8979)	Prec@1 62.50000 (76.85185)	Prec@5 100.00000 (98.61111)
Epoch: [40][28/60]	Time 0.20290 (0.38789)	Data 0.01945 (0.27646)	Loss 0.2754 (0.8757)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (98.66072)
Epoch: [40][29/60]	Time 0.15942 (0.38002)	Data 0.00053 (0.26695)	Loss 0.7062 (0.8698)	Prec@1 75.00000 (77.15517)	Prec@5 100.00000 (98.70689)
Epoch: [40][30/60]	Time 0.11007 (0.37102)	Data 0.00044 (0.25806)	Loss 1.8619 (0.9029)	Prec@1 62.50000 (76.66667)	Prec@5 87.50000 (98.33334)
Epoch: [40][31/60]	Time 0.07760 (0.36155)	Data 0.00042 (0.24975)	Loss 2.8651 (0.9662)	Prec@1 25.00000 (75.00000)	Prec@5 87.50000 (97.98387)
Epoch: [40][32/60]	Time 0.04700 (0.35172)	Data 0.00049 (0.24196)	Loss 0.9793 (0.9666)	Prec@1 62.50000 (74.60938)	Prec@5 100.00000 (98.04688)
Epoch: [40][33/60]	Time 0.05121 (0.34262)	Data 0.00050 (0.23465)	Loss 0.2281 (0.9442)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.10606)
Epoch: [40][34/60]	Time 0.03876 (0.33368)	Data 0.00252 (0.22782)	Loss 1.3878 (0.9573)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (98.16177)
Epoch: [40][35/60]	Time 0.02917 (0.32498)	Data 0.00059 (0.22133)	Loss 1.4411 (0.9711)	Prec@1 75.00000 (74.64286)	Prec@5 87.50000 (97.85715)
Epoch: [40][36/60]	Time 0.02910 (0.31676)	Data 0.00047 (0.21519)	Loss 1.4480 (0.9843)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (97.91666)
Epoch: [40][37/60]	Time 0.02853 (0.30897)	Data 0.00060 (0.20939)	Loss 1.6884 (1.0034)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (97.97298)
Epoch: [40][38/60]	Time 0.03212 (0.30168)	Data 0.00044 (0.20389)	Loss 2.5613 (1.0444)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (98.02631)
Epoch: [40][39/60]	Time 0.03576 (0.29487)	Data 0.00046 (0.19868)	Loss 0.2367 (1.0236)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (98.07693)
Epoch: [40][40/60]	Time 0.02805 (0.28820)	Data 0.00064 (0.19373)	Loss 0.4078 (1.0083)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (98.12500)
Epoch: [40][41/60]	Time 0.02963 (0.28189)	Data 0.00071 (0.18902)	Loss 0.6559 (0.9997)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (98.17073)
Epoch: [40][42/60]	Time 0.02914 (0.27587)	Data 0.00180 (0.18456)	Loss 1.0824 (1.0016)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (98.21429)
Epoch: [40][43/60]	Time 0.03152 (0.27019)	Data 0.00285 (0.18033)	Loss 0.7787 (0.9964)	Prec@1 75.00000 (74.12791)	Prec@5 100.00000 (98.25581)
Epoch: [40][44/60]	Time 0.02672 (0.26466)	Data 0.00098 (0.17626)	Loss 0.9019 (0.9943)	Prec@1 50.00000 (73.57954)	Prec@5 100.00000 (98.29546)
Epoch: [40][45/60]	Time 0.02335 (0.25929)	Data 0.00041 (0.17235)	Loss 0.8321 (0.9907)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (98.33334)
Epoch: [40][46/60]	Time 0.02257 (0.25415)	Data 0.00063 (0.16862)	Loss 0.4346 (0.9786)	Prec@1 75.00000 (73.64130)	Prec@5 100.00000 (98.36957)
Epoch: [40][47/60]	Time 0.02218 (0.24921)	Data 0.00039 (0.16504)	Loss 1.2332 (0.9840)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (98.13830)
Epoch: [40][48/60]	Time 0.02328 (0.24450)	Data 0.00043 (0.16161)	Loss 0.8838 (0.9819)	Prec@1 75.00000 (73.69792)	Prec@5 100.00000 (98.17709)
Epoch: [40][49/60]	Time 0.02219 (0.23997)	Data 0.00041 (0.15832)	Loss 0.0787 (0.9635)	Prec@1 100.00000 (74.23470)	Prec@5 100.00000 (98.21429)
Epoch: [40][50/60]	Time 0.02305 (0.23563)	Data 0.00039 (0.15516)	Loss 1.0406 (0.9650)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (98.25000)
Epoch: [40][51/60]	Time 0.02267 (0.23145)	Data 0.00042 (0.15213)	Loss 0.1675 (0.9494)	Prec@1 87.50000 (74.50980)	Prec@5 100.00000 (98.28432)
Epoch: [40][52/60]	Time 0.02272 (0.22744)	Data 0.00042 (0.14921)	Loss 1.4034 (0.9581)	Prec@1 50.00000 (74.03847)	Prec@5 87.50000 (98.07693)
Epoch: [40][53/60]	Time 0.02242 (0.22357)	Data 0.00042 (0.14640)	Loss 0.7137 (0.9535)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (98.11321)
Epoch: [40][54/60]	Time 0.02228 (0.21984)	Data 0.00043 (0.14370)	Loss 1.0820 (0.9559)	Prec@1 87.50000 (74.30556)	Prec@5 100.00000 (98.14815)
Epoch: [40][55/60]	Time 0.02286 (0.21626)	Data 0.00042 (0.14109)	Loss 1.5176 (0.9661)	Prec@1 75.00000 (74.31818)	Prec@5 87.50000 (97.95454)
Epoch: [40][56/60]	Time 0.02317 (0.21281)	Data 0.00048 (0.13858)	Loss 0.5782 (0.9592)	Prec@1 62.50000 (74.10715)	Prec@5 100.00000 (97.99107)
Epoch: [40][57/60]	Time 0.02246 (0.20947)	Data 0.00040 (0.13616)	Loss 1.3999 (0.9669)	Prec@1 62.50000 (73.90351)	Prec@5 87.50000 (97.80701)
Epoch: [40][58/60]	Time 0.02271 (0.20625)	Data 0.00040 (0.13382)	Loss 0.6399 (0.9613)	Prec@1 62.50000 (73.70689)	Prec@5 100.00000 (97.84483)
Epoch: [40][59/60]	Time 0.02422 (0.20317)	Data 0.00043 (0.13156)	Loss 1.0717 (0.9632)	Prec@1 75.00000 (73.72881)	Prec@5 100.00000 (97.88136)
Epoch: [40][60/60]	Time 0.02358 (0.20018)	Data 0.00059 (0.12937)	Loss 0.6252 (0.9575)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (97.91667)
train at epoch 41
train at epoch 41
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [41][0/272]	 lr: 0.00400	Time 8.846 (8.846)	Data 7.454 (7.454)	Loss 0.0095 (0.0095)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [41][10/272]	 lr: 0.00400	Time 0.444 (1.253)	Data 0.135 (0.806)	Loss 0.0222 (0.0256)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [41][20/272]	 lr: 0.00400	Time 0.305 (0.855)	Data 0.120 (0.484)	Loss 0.0385 (0.0270)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [41][30/272]	 lr: 0.00400	Time 0.368 (0.721)	Data 0.124 (0.369)	Loss 0.0179 (0.0289)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [41][40/272]	 lr: 0.00400	Time 0.501 (0.657)	Data 0.143 (0.312)	Loss 0.0275 (0.0296)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [41][50/272]	 lr: 0.00400	Time 0.498 (0.621)	Data 0.126 (0.277)	Loss 0.0152 (0.0325)	Prec@1 100.00000 (99.63235)	Prec@5 100.00000 (100.00000)
Epoch: [41][60/272]	 lr: 0.00400	Time 0.501 (0.591)	Data 0.115 (0.253)	Loss 0.0323 (0.0319)	Prec@1 100.00000 (99.69262)	Prec@5 100.00000 (99.99999)
Epoch: [41][70/272]	 lr: 0.00400	Time 0.453 (0.572)	Data 0.127 (0.235)	Loss 0.0048 (0.0310)	Prec@1 100.00000 (99.69190)	Prec@5 100.00000 (100.00000)
Epoch: [41][80/272]	 lr: 0.00400	Time 0.426 (0.556)	Data 0.127 (0.222)	Loss 0.0192 (0.0305)	Prec@1 100.00000 (99.69136)	Prec@5 100.00000 (100.00000)
Epoch: [41][90/272]	 lr: 0.00400	Time 0.343 (0.543)	Data 0.126 (0.212)	Loss 0.0166 (0.0315)	Prec@1 100.00000 (99.65659)	Prec@5 100.00000 (100.00000)
Epoch: [41][100/272]	 lr: 0.00400	Time 0.545 (0.533)	Data 0.135 (0.204)	Loss 0.0203 (0.0314)	Prec@1 100.00000 (99.69059)	Prec@5 100.00000 (100.00000)
Epoch: [41][110/272]	 lr: 0.00400	Time 0.419 (0.525)	Data 0.119 (0.197)	Loss 0.0138 (0.0307)	Prec@1 100.00000 (99.71847)	Prec@5 100.00000 (100.00000)
Epoch: [41][120/272]	 lr: 0.00400	Time 0.472 (0.518)	Data 0.128 (0.191)	Loss 0.0310 (0.0304)	Prec@1 100.00000 (99.74173)	Prec@5 100.00000 (99.99999)
Epoch: [41][130/272]	 lr: 0.00400	Time 0.494 (0.511)	Data 0.125 (0.186)	Loss 0.0156 (0.0312)	Prec@1 100.00000 (99.68989)	Prec@5 100.00000 (100.00000)
Epoch: [41][140/272]	 lr: 0.00400	Time 0.446 (0.506)	Data 0.113 (0.182)	Loss 0.0232 (0.0314)	Prec@1 100.00000 (99.64539)	Prec@5 100.00000 (100.00000)
Epoch: [41][150/272]	 lr: 0.00400	Time 0.590 (0.503)	Data 0.129 (0.178)	Loss 0.0116 (0.0310)	Prec@1 100.00000 (99.66888)	Prec@5 100.00000 (100.00000)
Epoch: [41][160/272]	 lr: 0.00400	Time 0.524 (0.499)	Data 0.124 (0.175)	Loss 0.0152 (0.0319)	Prec@1 100.00000 (99.59239)	Prec@5 100.00000 (100.00000)
Epoch: [41][170/272]	 lr: 0.00400	Time 0.370 (0.496)	Data 0.124 (0.172)	Loss 0.0328 (0.0318)	Prec@1 100.00000 (99.59795)	Prec@5 100.00000 (100.00000)
Epoch: [41][180/272]	 lr: 0.00400	Time 0.352 (0.493)	Data 0.129 (0.170)	Loss 0.0232 (0.0316)	Prec@1 100.00000 (99.62017)	Prec@5 100.00000 (100.00001)
Epoch: [41][190/272]	 lr: 0.00400	Time 0.412 (0.489)	Data 0.121 (0.168)	Loss 0.0797 (0.0316)	Prec@1 100.00000 (99.62370)	Prec@5 100.00000 (100.00000)
Epoch: [41][200/272]	 lr: 0.00400	Time 0.454 (0.487)	Data 0.128 (0.166)	Loss 0.0248 (0.0328)	Prec@1 100.00000 (99.61131)	Prec@5 100.00000 (100.00000)
Epoch: [41][210/272]	 lr: 0.00400	Time 0.366 (0.484)	Data 0.127 (0.164)	Loss 0.0272 (0.0323)	Prec@1 100.00000 (99.62975)	Prec@5 100.00000 (100.00000)
Epoch: [41][220/272]	 lr: 0.00400	Time 0.474 (0.483)	Data 0.126 (0.162)	Loss 0.0226 (0.0321)	Prec@1 100.00000 (99.64650)	Prec@5 100.00000 (100.00001)
Epoch: [41][230/272]	 lr: 0.00400	Time 0.491 (0.482)	Data 0.129 (0.161)	Loss 0.0140 (0.0320)	Prec@1 100.00000 (99.66180)	Prec@5 100.00000 (100.00000)
Epoch: [41][240/272]	 lr: 0.00400	Time 0.288 (0.479)	Data 0.128 (0.160)	Loss 0.0498 (0.0315)	Prec@1 100.00000 (99.67583)	Prec@5 100.00000 (100.00001)
Epoch: [41][250/272]	 lr: 0.00400	Time 0.239 (0.470)	Data 0.128 (0.158)	Loss 0.0416 (0.0311)	Prec@1 96.87500 (99.67630)	Prec@5 100.00000 (100.00000)
Epoch: [41][260/272]	 lr: 0.00400	Time 0.240 (0.461)	Data 0.129 (0.157)	Loss 0.0127 (0.0309)	Prec@1 100.00000 (99.67672)	Prec@5 100.00000 (100.00000)
Epoch: [41][270/272]	 lr: 0.00400	Time 0.239 (0.453)	Data 0.129 (0.156)	Loss 0.0061 (0.0307)	Prec@1 100.00000 (99.68865)	Prec@5 100.00000 (100.00000)
validation at epoch 41
validation at epoch 41
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [41][1/60]	Time 3.16595 (3.16595)	Data 3.07200 (3.07200)	Loss 0.3078 (0.3078)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [41][2/60]	Time 4.21504 (3.69050)	Data 4.08285 (3.57742)	Loss 0.2986 (0.3032)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [41][3/60]	Time 0.16664 (2.51588)	Data 0.00184 (2.38556)	Loss 1.2653 (0.6239)	Prec@1 62.50000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [41][4/60]	Time 0.20564 (1.93832)	Data 0.01082 (1.79188)	Loss 0.1789 (0.5126)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [41][5/60]	Time 0.17464 (1.58558)	Data 0.00057 (1.43362)	Loss 0.3564 (0.4814)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (97.50000)
Epoch: [41][6/60]	Time 0.20689 (1.35580)	Data 0.06827 (1.20606)	Loss 0.4422 (0.4749)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (97.91667)
Epoch: [41][7/60]	Time 0.12310 (1.17970)	Data 0.00058 (1.03385)	Loss 1.6083 (0.6368)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (98.21429)
Epoch: [41][8/60]	Time 0.17638 (1.05428)	Data 0.04098 (0.90974)	Loss 1.4956 (0.7441)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [41][9/60]	Time 0.26282 (0.96634)	Data 0.07703 (0.81722)	Loss 0.4735 (0.7141)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (98.61111)
Epoch: [41][10/60]	Time 0.22449 (0.89216)	Data 0.03223 (0.73872)	Loss 0.9665 (0.7393)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (98.75000)
Epoch: [41][11/60]	Time 0.18853 (0.82819)	Data 0.01766 (0.67317)	Loss 0.9059 (0.7545)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [41][12/60]	Time 0.13029 (0.77003)	Data 0.00664 (0.61762)	Loss 1.0635 (0.7802)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (98.95834)
Epoch: [41][13/60]	Time 0.10890 (0.71918)	Data 0.00076 (0.57017)	Loss 1.7548 (0.8552)	Prec@1 50.00000 (74.03847)	Prec@5 87.50000 (98.07693)
Epoch: [41][14/60]	Time 0.07313 (0.67303)	Data 0.00046 (0.52948)	Loss 0.1506 (0.8049)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (98.21429)
Epoch: [41][15/60]	Time 0.10063 (0.63487)	Data 0.02128 (0.49560)	Loss 1.3812 (0.8433)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (98.33334)
Epoch: [41][16/60]	Time 0.21781 (0.60881)	Data 0.06330 (0.46858)	Loss 1.1842 (0.8646)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (98.43750)
Epoch: [41][17/60]	Time 0.19698 (0.58458)	Data 0.01028 (0.44162)	Loss 0.5314 (0.8450)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.52941)
Epoch: [41][18/60]	Time 0.17850 (0.56202)	Data 0.00717 (0.41748)	Loss 2.4929 (0.9365)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (98.61111)
Epoch: [41][19/60]	Time 0.15843 (0.54078)	Data 0.01681 (0.39640)	Loss 0.0836 (0.8917)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (98.68421)
Epoch: [41][20/60]	Time 0.14097 (0.52079)	Data 0.00046 (0.37660)	Loss 2.4984 (0.9720)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [41][21/60]	Time 0.05076 (0.49841)	Data 0.01977 (0.35961)	Loss 1.1297 (0.9795)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (98.80952)
Epoch: [41][22/60]	Time 0.09162 (0.47992)	Data 0.02682 (0.34448)	Loss 0.8856 (0.9752)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (98.86364)
Epoch: [41][23/60]	Time 0.17646 (0.46672)	Data 0.02725 (0.33069)	Loss 1.1201 (0.9815)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (98.91305)
Epoch: [41][24/60]	Time 0.11544 (0.45209)	Data 0.02486 (0.31795)	Loss 0.9095 (0.9785)	Prec@1 62.50000 (73.43750)	Prec@5 87.50000 (98.43750)
Epoch: [41][25/60]	Time 0.22571 (0.44303)	Data 0.05806 (0.30755)	Loss 0.5498 (0.9614)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (98.50000)
Epoch: [41][26/60]	Time 0.19646 (0.43355)	Data 0.01641 (0.29635)	Loss 0.0340 (0.9257)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (98.55769)
Epoch: [41][27/60]	Time 0.14544 (0.42288)	Data 0.00448 (0.28554)	Loss 1.1337 (0.9334)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (98.61111)
Epoch: [41][28/60]	Time 0.10550 (0.41154)	Data 0.00829 (0.27564)	Loss 0.3664 (0.9132)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (98.66072)
Epoch: [41][29/60]	Time 0.05705 (0.39932)	Data 0.00075 (0.26616)	Loss 0.5614 (0.9010)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (98.70689)
Epoch: [41][30/60]	Time 0.08103 (0.38871)	Data 0.00038 (0.25730)	Loss 1.7160 (0.9282)	Prec@1 62.50000 (74.16667)	Prec@5 87.50000 (98.33334)
Epoch: [41][31/60]	Time 0.09465 (0.37922)	Data 0.00046 (0.24902)	Loss 2.6256 (0.9830)	Prec@1 25.00000 (72.58064)	Prec@5 87.50000 (97.98387)
Epoch: [41][32/60]	Time 0.07487 (0.36971)	Data 0.00046 (0.24125)	Loss 0.7431 (0.9755)	Prec@1 62.50000 (72.26562)	Prec@5 100.00000 (98.04688)
Epoch: [41][33/60]	Time 0.04476 (0.35986)	Data 0.00062 (0.23396)	Loss 0.1913 (0.9517)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (98.10606)
Epoch: [41][34/60]	Time 0.05169 (0.35080)	Data 0.00053 (0.22709)	Loss 1.3512 (0.9634)	Prec@1 50.00000 (72.05882)	Prec@5 100.00000 (98.16177)
Epoch: [41][35/60]	Time 0.04697 (0.34212)	Data 0.00049 (0.22062)	Loss 1.5820 (0.9811)	Prec@1 75.00000 (72.14286)	Prec@5 87.50000 (97.85715)
Epoch: [41][36/60]	Time 0.03129 (0.33349)	Data 0.00042 (0.21450)	Loss 1.1433 (0.9856)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (97.91666)
Epoch: [41][37/60]	Time 0.02929 (0.32526)	Data 0.00071 (0.20872)	Loss 1.6452 (1.0035)	Prec@1 62.50000 (71.62162)	Prec@5 100.00000 (97.97298)
Epoch: [41][38/60]	Time 0.02775 (0.31743)	Data 0.00109 (0.20326)	Loss 2.3883 (1.0399)	Prec@1 50.00000 (71.05264)	Prec@5 100.00000 (98.02631)
Epoch: [41][39/60]	Time 0.02764 (0.31000)	Data 0.00075 (0.19807)	Loss 0.2104 (1.0186)	Prec@1 87.50000 (71.47436)	Prec@5 100.00000 (98.07693)
Epoch: [41][40/60]	Time 0.02713 (0.30293)	Data 0.00076 (0.19313)	Loss 0.3642 (1.0023)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (98.12500)
Epoch: [41][41/60]	Time 0.02720 (0.29621)	Data 0.00088 (0.18844)	Loss 0.5001 (0.9900)	Prec@1 75.00000 (71.95122)	Prec@5 100.00000 (98.17073)
Epoch: [41][42/60]	Time 0.02707 (0.28980)	Data 0.00081 (0.18398)	Loss 1.1811 (0.9946)	Prec@1 62.50000 (71.72619)	Prec@5 100.00000 (98.21429)
Epoch: [41][43/60]	Time 0.02709 (0.28369)	Data 0.00061 (0.17971)	Loss 0.6299 (0.9861)	Prec@1 62.50000 (71.51163)	Prec@5 100.00000 (98.25581)
Epoch: [41][44/60]	Time 0.02716 (0.27786)	Data 0.00047 (0.17564)	Loss 0.8340 (0.9826)	Prec@1 75.00000 (71.59091)	Prec@5 100.00000 (98.29546)
Epoch: [41][45/60]	Time 0.02846 (0.27232)	Data 0.00048 (0.17175)	Loss 0.8872 (0.9805)	Prec@1 75.00000 (71.66667)	Prec@5 100.00000 (98.33334)
Epoch: [41][46/60]	Time 0.02770 (0.26700)	Data 0.00047 (0.16802)	Loss 0.9553 (0.9800)	Prec@1 50.00000 (71.19566)	Prec@5 100.00000 (98.36957)
Epoch: [41][47/60]	Time 0.02803 (0.26191)	Data 0.00045 (0.16446)	Loss 1.1449 (0.9835)	Prec@1 87.50000 (71.54255)	Prec@5 87.50000 (98.13830)
Epoch: [41][48/60]	Time 0.02727 (0.25703)	Data 0.00050 (0.16104)	Loss 0.6192 (0.9759)	Prec@1 75.00000 (71.61459)	Prec@5 100.00000 (98.17709)
Epoch: [41][49/60]	Time 0.02228 (0.25224)	Data 0.00047 (0.15777)	Loss 0.2452 (0.9610)	Prec@1 87.50000 (71.93877)	Prec@5 100.00000 (98.21429)
Epoch: [41][50/60]	Time 0.02346 (0.24766)	Data 0.00045 (0.15462)	Loss 0.8280 (0.9583)	Prec@1 75.00000 (72.00000)	Prec@5 100.00000 (98.25000)
Epoch: [41][51/60]	Time 0.02273 (0.24325)	Data 0.00042 (0.15160)	Loss 0.1730 (0.9429)	Prec@1 87.50000 (72.30392)	Prec@5 100.00000 (98.28432)
Epoch: [41][52/60]	Time 0.02254 (0.23901)	Data 0.00053 (0.14869)	Loss 0.9912 (0.9438)	Prec@1 50.00000 (71.87500)	Prec@5 87.50000 (98.07693)
Epoch: [41][53/60]	Time 0.02275 (0.23493)	Data 0.00045 (0.14589)	Loss 0.5641 (0.9367)	Prec@1 75.00000 (71.93396)	Prec@5 100.00000 (98.11321)
Epoch: [41][54/60]	Time 0.02319 (0.23100)	Data 0.00044 (0.14320)	Loss 0.9427 (0.9368)	Prec@1 75.00000 (71.99074)	Prec@5 100.00000 (98.14815)
Epoch: [41][55/60]	Time 0.02304 (0.22722)	Data 0.00049 (0.14061)	Loss 1.3019 (0.9434)	Prec@1 62.50000 (71.81818)	Prec@5 87.50000 (97.95454)
Epoch: [41][56/60]	Time 0.02261 (0.22357)	Data 0.00053 (0.13810)	Loss 0.6728 (0.9386)	Prec@1 87.50000 (72.09822)	Prec@5 100.00000 (97.99107)
Epoch: [41][57/60]	Time 0.02258 (0.22004)	Data 0.00045 (0.13569)	Loss 1.3865 (0.9465)	Prec@1 62.50000 (71.92982)	Prec@5 87.50000 (97.80701)
Epoch: [41][58/60]	Time 0.02264 (0.21664)	Data 0.00045 (0.13336)	Loss 0.6115 (0.9407)	Prec@1 75.00000 (71.98276)	Prec@5 100.00000 (97.84483)
Epoch: [41][59/60]	Time 0.02408 (0.21338)	Data 0.00043 (0.13110)	Loss 0.8753 (0.9396)	Prec@1 87.50000 (72.24577)	Prec@5 100.00000 (97.88136)
Epoch: [41][60/60]	Time 0.02289 (0.21020)	Data 0.00074 (0.12893)	Loss 0.4353 (0.9312)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (97.91667)
train at epoch 42
train at epoch 42
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [42][0/272]	 lr: 0.00400	Time 6.046 (6.046)	Data 4.721 (4.721)	Loss 0.0465 (0.0465)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [42][10/272]	 lr: 0.00400	Time 0.419 (1.283)	Data 0.131 (0.819)	Loss 0.0285 (0.0262)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [42][20/272]	 lr: 0.00400	Time 0.486 (0.869)	Data 0.112 (0.492)	Loss 0.0127 (0.0374)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [42][30/272]	 lr: 0.00400	Time 0.385 (0.726)	Data 0.129 (0.374)	Loss 0.0268 (0.0330)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [42][40/272]	 lr: 0.00400	Time 0.313 (0.655)	Data 0.139 (0.313)	Loss 0.0761 (0.0340)	Prec@1 93.75000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [42][50/272]	 lr: 0.00400	Time 0.374 (0.610)	Data 0.142 (0.277)	Loss 0.0200 (0.0339)	Prec@1 100.00000 (99.75491)	Prec@5 100.00000 (100.00000)
Epoch: [42][60/272]	 lr: 0.00400	Time 0.375 (0.585)	Data 0.129 (0.253)	Loss 0.0733 (0.0340)	Prec@1 93.75000 (99.69262)	Prec@5 100.00000 (99.99999)
Epoch: [42][70/272]	 lr: 0.00400	Time 0.513 (0.566)	Data 0.127 (0.235)	Loss 0.0135 (0.0332)	Prec@1 100.00000 (99.73592)	Prec@5 100.00000 (100.00000)
Epoch: [42][80/272]	 lr: 0.00400	Time 0.336 (0.551)	Data 0.123 (0.222)	Loss 0.0195 (0.0338)	Prec@1 100.00000 (99.72994)	Prec@5 100.00000 (100.00000)
Epoch: [42][90/272]	 lr: 0.00400	Time 0.458 (0.540)	Data 0.126 (0.212)	Loss 0.0201 (0.0328)	Prec@1 100.00000 (99.75962)	Prec@5 100.00000 (100.00000)
Epoch: [42][100/272]	 lr: 0.00400	Time 0.515 (0.530)	Data 0.143 (0.204)	Loss 0.0124 (0.0353)	Prec@1 100.00000 (99.62871)	Prec@5 100.00000 (100.00000)
Epoch: [42][110/272]	 lr: 0.00400	Time 0.480 (0.521)	Data 0.128 (0.197)	Loss 0.0167 (0.0374)	Prec@1 100.00000 (99.52140)	Prec@5 100.00000 (100.00000)
Epoch: [42][120/272]	 lr: 0.00400	Time 0.373 (0.515)	Data 0.128 (0.191)	Loss 0.0072 (0.0364)	Prec@1 100.00000 (99.56094)	Prec@5 100.00000 (99.99999)
Epoch: [42][130/272]	 lr: 0.00400	Time 0.493 (0.511)	Data 0.129 (0.187)	Loss 0.0593 (0.0356)	Prec@1 100.00000 (99.57061)	Prec@5 100.00000 (100.00000)
Epoch: [42][140/272]	 lr: 0.00400	Time 0.491 (0.507)	Data 0.125 (0.182)	Loss 0.1224 (0.0352)	Prec@1 96.87500 (99.57890)	Prec@5 100.00000 (100.00000)
Epoch: [42][150/272]	 lr: 0.00400	Time 0.420 (0.502)	Data 0.125 (0.178)	Loss 0.0858 (0.0345)	Prec@1 96.87500 (99.58609)	Prec@5 100.00000 (100.00000)
Epoch: [42][160/272]	 lr: 0.00400	Time 0.454 (0.497)	Data 0.122 (0.175)	Loss 0.0182 (0.0339)	Prec@1 100.00000 (99.59239)	Prec@5 100.00000 (100.00000)
Epoch: [42][170/272]	 lr: 0.00400	Time 0.476 (0.494)	Data 0.128 (0.172)	Loss 0.0245 (0.0330)	Prec@1 100.00000 (99.61623)	Prec@5 100.00000 (100.00000)
Epoch: [42][180/272]	 lr: 0.00400	Time 0.462 (0.491)	Data 0.129 (0.170)	Loss 0.0289 (0.0331)	Prec@1 100.00000 (99.62017)	Prec@5 100.00000 (100.00001)
Epoch: [42][190/272]	 lr: 0.00400	Time 0.463 (0.488)	Data 0.115 (0.168)	Loss 0.0113 (0.0325)	Prec@1 100.00000 (99.64005)	Prec@5 100.00000 (100.00000)
Epoch: [42][200/272]	 lr: 0.00400	Time 0.458 (0.486)	Data 0.095 (0.166)	Loss 0.0163 (0.0321)	Prec@1 100.00000 (99.65796)	Prec@5 100.00000 (100.00000)
Epoch: [42][210/272]	 lr: 0.00400	Time 0.403 (0.483)	Data 0.128 (0.164)	Loss 0.0168 (0.0320)	Prec@1 100.00000 (99.65936)	Prec@5 100.00000 (100.00000)
Epoch: [42][220/272]	 lr: 0.00400	Time 0.401 (0.481)	Data 0.124 (0.162)	Loss 0.0129 (0.0320)	Prec@1 100.00000 (99.67478)	Prec@5 100.00000 (100.00001)
Epoch: [42][230/272]	 lr: 0.00400	Time 0.411 (0.480)	Data 0.142 (0.161)	Loss 0.0161 (0.0321)	Prec@1 100.00000 (99.68885)	Prec@5 100.00000 (100.00000)
Epoch: [42][240/272]	 lr: 0.00400	Time 0.373 (0.479)	Data 0.128 (0.159)	Loss 0.0083 (0.0317)	Prec@1 100.00000 (99.68880)	Prec@5 100.00000 (100.00001)
Epoch: [42][250/272]	 lr: 0.00400	Time 0.239 (0.469)	Data 0.129 (0.158)	Loss 0.0189 (0.0314)	Prec@1 100.00000 (99.68875)	Prec@5 100.00000 (100.00000)
Epoch: [42][260/272]	 lr: 0.00400	Time 0.239 (0.461)	Data 0.128 (0.157)	Loss 0.0401 (0.0312)	Prec@1 100.00000 (99.70067)	Prec@5 100.00000 (100.00000)
Epoch: [42][270/272]	 lr: 0.00400	Time 0.240 (0.452)	Data 0.129 (0.156)	Loss 0.0191 (0.0310)	Prec@1 100.00000 (99.70019)	Prec@5 100.00000 (100.00000)
validation at epoch 42
validation at epoch 42
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [42][1/60]	Time 3.77769 (3.77769)	Data 3.67607 (3.67607)	Loss 0.3357 (0.3357)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [42][2/60]	Time 3.73786 (3.75778)	Data 3.69640 (3.68624)	Loss 0.2383 (0.2870)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [42][3/60]	Time 0.07685 (2.53080)	Data 0.01088 (2.46112)	Loss 1.2820 (0.6187)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [42][4/60]	Time 0.06937 (1.91544)	Data 0.00063 (1.84600)	Loss 0.1796 (0.5089)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (96.87500)
Epoch: [42][5/60]	Time 0.06945 (1.54624)	Data 0.00207 (1.47721)	Loss 0.4710 (0.5013)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (97.50000)
Epoch: [42][6/60]	Time 0.07379 (1.30083)	Data 0.02008 (1.23436)	Loss 0.4277 (0.4891)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (97.91667)
Epoch: [42][7/60]	Time 0.09891 (1.12913)	Data 0.03299 (1.06273)	Loss 1.5209 (0.6365)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (98.21429)
Epoch: [42][8/60]	Time 0.14803 (1.00649)	Data 0.01353 (0.93158)	Loss 1.4171 (0.7340)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.43750)
Epoch: [42][9/60]	Time 0.26505 (0.92411)	Data 0.07074 (0.83593)	Loss 0.6697 (0.7269)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (98.61111)
Epoch: [42][10/60]	Time 0.10788 (0.84249)	Data 0.01866 (0.75421)	Loss 0.9085 (0.7451)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (98.75000)
Epoch: [42][11/60]	Time 0.15284 (0.77979)	Data 0.09063 (0.69388)	Loss 0.8189 (0.7518)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (98.86364)
Epoch: [42][12/60]	Time 0.26305 (0.73673)	Data 0.17310 (0.65048)	Loss 1.0490 (0.7765)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (98.95834)
Epoch: [42][13/60]	Time 0.11103 (0.68860)	Data 0.01078 (0.60127)	Loss 1.5395 (0.8352)	Prec@1 50.00000 (74.03847)	Prec@5 87.50000 (98.07693)
Epoch: [42][14/60]	Time 0.15911 (0.65078)	Data 0.00951 (0.55901)	Loss 0.1722 (0.7879)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [42][15/60]	Time 0.18202 (0.61953)	Data 0.05319 (0.52528)	Loss 1.3158 (0.8231)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (98.33334)
Epoch: [42][16/60]	Time 0.12498 (0.58862)	Data 0.04829 (0.49547)	Loss 1.3087 (0.8534)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (98.43750)
Epoch: [42][17/60]	Time 0.14637 (0.56260)	Data 0.00631 (0.46670)	Loss 0.4567 (0.8301)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (98.52941)
Epoch: [42][18/60]	Time 0.12588 (0.53834)	Data 0.00074 (0.44081)	Loss 2.7137 (0.9347)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (98.61111)
Epoch: [42][19/60]	Time 0.11673 (0.51615)	Data 0.00937 (0.41810)	Loss 0.0912 (0.8903)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (98.68421)
Epoch: [42][20/60]	Time 0.12324 (0.49651)	Data 0.00190 (0.39729)	Loss 2.9727 (0.9944)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [42][21/60]	Time 0.07803 (0.47658)	Data 0.00071 (0.37841)	Loss 0.9457 (0.9921)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (98.80952)
Epoch: [42][22/60]	Time 0.07974 (0.45854)	Data 0.01749 (0.36200)	Loss 1.0051 (0.9927)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (98.86364)
Epoch: [42][23/60]	Time 0.11323 (0.44353)	Data 0.00851 (0.34663)	Loss 1.4462 (1.0124)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (98.91305)
Epoch: [42][24/60]	Time 0.16763 (0.43203)	Data 0.00125 (0.33224)	Loss 0.7673 (1.0022)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [42][25/60]	Time 0.26360 (0.42529)	Data 0.05659 (0.32122)	Loss 0.5039 (0.9823)	Prec@1 87.50000 (73.50000)	Prec@5 100.00000 (99.00000)
Epoch: [42][26/60]	Time 0.19127 (0.41629)	Data 0.00065 (0.30889)	Loss 0.0302 (0.9457)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (99.03847)
Epoch: [42][27/60]	Time 0.12857 (0.40564)	Data 0.00491 (0.29763)	Loss 1.5015 (0.9663)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (99.07407)
Epoch: [42][28/60]	Time 0.18612 (0.39780)	Data 0.00102 (0.28704)	Loss 0.2895 (0.9421)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (99.10715)
Epoch: [42][29/60]	Time 0.08439 (0.38699)	Data 0.00043 (0.27715)	Loss 0.7485 (0.9354)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (99.13793)
Epoch: [42][30/60]	Time 0.08245 (0.37684)	Data 0.00053 (0.26793)	Loss 1.8416 (0.9656)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (99.16667)
Epoch: [42][31/60]	Time 0.06828 (0.36688)	Data 0.00062 (0.25931)	Loss 2.7350 (1.0227)	Prec@1 25.00000 (72.58064)	Prec@5 87.50000 (98.79032)
Epoch: [42][32/60]	Time 0.03724 (0.35658)	Data 0.00041 (0.25122)	Loss 0.9475 (1.0203)	Prec@1 62.50000 (72.26562)	Prec@5 100.00000 (98.82812)
Epoch: [42][33/60]	Time 0.02876 (0.34665)	Data 0.00041 (0.24362)	Loss 0.1996 (0.9955)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [42][34/60]	Time 0.03525 (0.33749)	Data 0.00493 (0.23660)	Loss 1.3313 (1.0054)	Prec@1 62.50000 (72.42647)	Prec@5 100.00000 (98.89706)
Epoch: [42][35/60]	Time 0.02749 (0.32863)	Data 0.00051 (0.22985)	Loss 1.4255 (1.0174)	Prec@1 75.00000 (72.50000)	Prec@5 87.50000 (98.57143)
Epoch: [42][36/60]	Time 0.03094 (0.32036)	Data 0.00297 (0.22355)	Loss 1.3007 (1.0252)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [42][37/60]	Time 0.02943 (0.31250)	Data 0.00053 (0.21752)	Loss 1.5998 (1.0408)	Prec@1 62.50000 (71.95946)	Prec@5 100.00000 (98.64865)
Epoch: [42][38/60]	Time 0.02784 (0.30501)	Data 0.00041 (0.21181)	Loss 2.4370 (1.0775)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (98.68421)
Epoch: [42][39/60]	Time 0.03237 (0.29802)	Data 0.00363 (0.20647)	Loss 0.2184 (1.0555)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (98.71795)
Epoch: [42][40/60]	Time 0.03113 (0.29135)	Data 0.00232 (0.20137)	Loss 0.3718 (1.0384)	Prec@1 87.50000 (72.18750)	Prec@5 100.00000 (98.75000)
Epoch: [42][41/60]	Time 0.02930 (0.28496)	Data 0.00181 (0.19650)	Loss 0.6401 (1.0287)	Prec@1 75.00000 (72.25610)	Prec@5 100.00000 (98.78049)
Epoch: [42][42/60]	Time 0.02882 (0.27886)	Data 0.00043 (0.19183)	Loss 1.0857 (1.0300)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (98.80952)
Epoch: [42][43/60]	Time 0.02740 (0.27301)	Data 0.00062 (0.18739)	Loss 0.7745 (1.0241)	Prec@1 75.00000 (72.38372)	Prec@5 100.00000 (98.83721)
Epoch: [42][44/60]	Time 0.02707 (0.26742)	Data 0.00041 (0.18314)	Loss 0.8879 (1.0210)	Prec@1 62.50000 (72.15910)	Prec@5 100.00000 (98.86364)
Epoch: [42][45/60]	Time 0.02740 (0.26209)	Data 0.00044 (0.17908)	Loss 0.8015 (1.0161)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.88889)
Epoch: [42][46/60]	Time 0.02781 (0.25699)	Data 0.00051 (0.17519)	Loss 0.8533 (1.0126)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (98.91305)
Epoch: [42][47/60]	Time 0.02739 (0.25211)	Data 0.00047 (0.17148)	Loss 1.1461 (1.0154)	Prec@1 87.50000 (72.07446)	Prec@5 87.50000 (98.67021)
Epoch: [42][48/60]	Time 0.02720 (0.24742)	Data 0.00046 (0.16791)	Loss 0.6985 (1.0088)	Prec@1 75.00000 (72.13542)	Prec@5 100.00000 (98.69792)
Epoch: [42][49/60]	Time 0.02711 (0.24293)	Data 0.00045 (0.16450)	Loss 0.1735 (0.9918)	Prec@1 87.50000 (72.44897)	Prec@5 100.00000 (98.72449)
Epoch: [42][50/60]	Time 0.02816 (0.23863)	Data 0.00048 (0.16122)	Loss 0.9355 (0.9906)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [42][51/60]	Time 0.02649 (0.23447)	Data 0.00051 (0.15807)	Loss 0.1834 (0.9748)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (98.77451)
Epoch: [42][52/60]	Time 0.02425 (0.23043)	Data 0.00047 (0.15503)	Loss 1.1164 (0.9775)	Prec@1 37.50000 (72.11539)	Prec@5 87.50000 (98.55769)
Epoch: [42][53/60]	Time 0.02276 (0.22651)	Data 0.00045 (0.15212)	Loss 0.6636 (0.9716)	Prec@1 75.00000 (72.16982)	Prec@5 100.00000 (98.58491)
Epoch: [42][54/60]	Time 0.02271 (0.22274)	Data 0.00042 (0.14931)	Loss 1.0078 (0.9723)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [42][55/60]	Time 0.02338 (0.21911)	Data 0.00042 (0.14660)	Loss 1.3422 (0.9790)	Prec@1 62.50000 (72.04546)	Prec@5 87.50000 (98.40909)
Epoch: [42][56/60]	Time 0.02252 (0.21560)	Data 0.00050 (0.14399)	Loss 0.6864 (0.9738)	Prec@1 75.00000 (72.09822)	Prec@5 100.00000 (98.43751)
Epoch: [42][57/60]	Time 0.02259 (0.21221)	Data 0.00046 (0.14147)	Loss 1.5294 (0.9835)	Prec@1 62.50000 (71.92982)	Prec@5 87.50000 (98.24561)
Epoch: [42][58/60]	Time 0.02230 (0.20894)	Data 0.00040 (0.13904)	Loss 0.6794 (0.9783)	Prec@1 62.50000 (71.76724)	Prec@5 100.00000 (98.27586)
Epoch: [42][59/60]	Time 0.02265 (0.20578)	Data 0.00049 (0.13669)	Loss 0.9536 (0.9779)	Prec@1 75.00000 (71.82204)	Prec@5 100.00000 (98.30508)
Epoch: [42][60/60]	Time 0.02312 (0.20274)	Data 0.00072 (0.13443)	Loss 0.5817 (0.9713)	Prec@1 87.50000 (72.08334)	Prec@5 100.00000 (98.33334)
train at epoch 43
train at epoch 43
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [43][0/272]	 lr: 0.00400	Time 9.873 (9.873)	Data 9.202 (9.202)	Loss 0.0172 (0.0172)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][10/272]	 lr: 0.00400	Time 0.414 (1.297)	Data 0.128 (0.952)	Loss 0.0501 (0.0208)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][20/272]	 lr: 0.00400	Time 0.366 (0.896)	Data 0.131 (0.560)	Loss 0.0191 (0.0206)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][30/272]	 lr: 0.00400	Time 0.401 (0.745)	Data 0.128 (0.422)	Loss 0.0149 (0.0228)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][40/272]	 lr: 0.00400	Time 0.313 (0.664)	Data 0.128 (0.350)	Loss 0.0128 (0.0246)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][50/272]	 lr: 0.00400	Time 0.440 (0.623)	Data 0.151 (0.307)	Loss 0.0085 (0.0270)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [43][60/272]	 lr: 0.00400	Time 0.392 (0.593)	Data 0.129 (0.278)	Loss 0.0338 (0.0263)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [43][70/272]	 lr: 0.00400	Time 0.407 (0.572)	Data 0.128 (0.257)	Loss 0.0150 (0.0262)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [43][80/272]	 lr: 0.00400	Time 0.458 (0.558)	Data 0.130 (0.242)	Loss 0.0109 (0.0259)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [43][90/272]	 lr: 0.00400	Time 0.434 (0.545)	Data 0.101 (0.228)	Loss 0.0223 (0.0248)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [43][100/272]	 lr: 0.00400	Time 0.458 (0.537)	Data 0.126 (0.218)	Loss 0.0057 (0.0243)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [43][110/272]	 lr: 0.00400	Time 0.470 (0.529)	Data 0.129 (0.211)	Loss 0.0135 (0.0251)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [43][120/272]	 lr: 0.00400	Time 0.349 (0.523)	Data 0.126 (0.204)	Loss 0.0171 (0.0261)	Prec@1 100.00000 (99.87086)	Prec@5 100.00000 (99.99999)
Epoch: [43][130/272]	 lr: 0.00400	Time 0.428 (0.518)	Data 0.119 (0.198)	Loss 0.0243 (0.0252)	Prec@1 100.00000 (99.88072)	Prec@5 100.00000 (100.00000)
Epoch: [43][140/272]	 lr: 0.00400	Time 0.470 (0.512)	Data 0.128 (0.193)	Loss 0.0169 (0.0250)	Prec@1 100.00000 (99.88918)	Prec@5 100.00000 (100.00000)
Epoch: [43][150/272]	 lr: 0.00400	Time 0.386 (0.507)	Data 0.128 (0.189)	Loss 0.0169 (0.0243)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [43][160/272]	 lr: 0.00400	Time 0.326 (0.502)	Data 0.129 (0.185)	Loss 0.0259 (0.0242)	Prec@1 100.00000 (99.88354)	Prec@5 100.00000 (100.00000)
Epoch: [43][170/272]	 lr: 0.00400	Time 0.476 (0.500)	Data 0.110 (0.181)	Loss 0.0127 (0.0241)	Prec@1 100.00000 (99.89035)	Prec@5 100.00000 (100.00000)
Epoch: [43][180/272]	 lr: 0.00400	Time 0.447 (0.498)	Data 0.137 (0.179)	Loss 0.0114 (0.0247)	Prec@1 100.00000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [43][190/272]	 lr: 0.00400	Time 0.540 (0.495)	Data 0.143 (0.176)	Loss 0.0131 (0.0243)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [43][200/272]	 lr: 0.00400	Time 0.444 (0.492)	Data 0.127 (0.174)	Loss 0.0115 (0.0241)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [43][210/272]	 lr: 0.00400	Time 0.414 (0.490)	Data 0.127 (0.172)	Loss 0.0548 (0.0243)	Prec@1 100.00000 (99.88152)	Prec@5 100.00000 (100.00000)
Epoch: [43][220/272]	 lr: 0.00400	Time 0.414 (0.487)	Data 0.143 (0.170)	Loss 0.0106 (0.0242)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [43][230/272]	 lr: 0.00400	Time 0.520 (0.486)	Data 0.147 (0.168)	Loss 0.0250 (0.0245)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [43][240/272]	 lr: 0.00400	Time 0.303 (0.483)	Data 0.109 (0.166)	Loss 0.0134 (0.0243)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [43][250/272]	 lr: 0.00400	Time 0.239 (0.474)	Data 0.129 (0.164)	Loss 0.0097 (0.0244)	Prec@1 100.00000 (99.87550)	Prec@5 100.00000 (100.00000)
Epoch: [43][260/272]	 lr: 0.00400	Time 0.239 (0.465)	Data 0.129 (0.163)	Loss 0.0131 (0.0240)	Prec@1 100.00000 (99.88026)	Prec@5 100.00000 (100.00000)
Epoch: [43][270/272]	 lr: 0.00400	Time 0.240 (0.456)	Data 0.129 (0.162)	Loss 0.0312 (0.0240)	Prec@1 100.00000 (99.88469)	Prec@5 100.00000 (100.00000)
validation at epoch 43
validation at epoch 43
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [43][1/60]	Time 5.71369 (5.71369)	Data 5.52266 (5.52266)	Loss 0.3092 (0.3092)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [43][2/60]	Time 2.05844 (3.88607)	Data 1.94078 (3.73172)	Loss 0.2288 (0.2690)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [43][3/60]	Time 0.16593 (2.64602)	Data 0.02846 (2.49730)	Loss 1.2463 (0.5947)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [43][4/60]	Time 0.13877 (2.01921)	Data 0.01321 (1.87628)	Loss 0.1142 (0.4746)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [43][5/60]	Time 0.08170 (1.63171)	Data 0.00053 (1.50113)	Loss 0.4227 (0.4642)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (97.50000)
Epoch: [43][6/60]	Time 0.10431 (1.37714)	Data 0.00664 (1.25205)	Loss 0.2693 (0.4317)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (97.91667)
Epoch: [43][7/60]	Time 0.05051 (1.18762)	Data 0.02496 (1.07675)	Loss 1.0350 (0.5179)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (98.21429)
Epoch: [43][8/60]	Time 0.04632 (1.04496)	Data 0.00080 (0.94225)	Loss 1.1674 (0.5991)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (98.43750)
Epoch: [43][9/60]	Time 0.15203 (0.94574)	Data 0.06179 (0.84442)	Loss 0.5631 (0.5951)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [43][10/60]	Time 0.17367 (0.86854)	Data 0.02479 (0.76246)	Loss 0.5606 (0.5917)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [43][11/60]	Time 0.08168 (0.79700)	Data 0.01336 (0.69436)	Loss 0.6608 (0.5979)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (98.86364)
Epoch: [43][12/60]	Time 0.10178 (0.73907)	Data 0.00603 (0.63700)	Loss 0.8521 (0.6191)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (98.95834)
Epoch: [43][13/60]	Time 0.17314 (0.69554)	Data 0.02375 (0.58983)	Loss 1.4476 (0.6828)	Prec@1 50.00000 (75.00000)	Prec@5 87.50000 (98.07693)
Epoch: [43][14/60]	Time 0.20775 (0.66069)	Data 0.01714 (0.54892)	Loss 0.1054 (0.6416)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [43][15/60]	Time 0.19952 (0.62995)	Data 0.02022 (0.51367)	Loss 0.9834 (0.6644)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (98.33334)
Epoch: [43][16/60]	Time 0.16357 (0.60080)	Data 0.02034 (0.48284)	Loss 1.1542 (0.6950)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.43750)
Epoch: [43][17/60]	Time 0.14217 (0.57382)	Data 0.00520 (0.45474)	Loss 0.3946 (0.6773)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (98.52941)
Epoch: [43][18/60]	Time 0.15017 (0.55029)	Data 0.05085 (0.43231)	Loss 2.5398 (0.7808)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (98.61111)
Epoch: [43][19/60]	Time 0.05936 (0.52445)	Data 0.00897 (0.41002)	Loss 0.0660 (0.7432)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (98.68421)
Epoch: [43][20/60]	Time 0.32327 (0.51439)	Data 0.13778 (0.39641)	Loss 2.7353 (0.8428)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (98.75000)
Epoch: [43][21/60]	Time 0.10854 (0.49506)	Data 0.00603 (0.37782)	Loss 0.7102 (0.8365)	Prec@1 62.50000 (75.59524)	Prec@5 100.00000 (98.80952)
Epoch: [43][22/60]	Time 0.13816 (0.47884)	Data 0.00172 (0.36073)	Loss 0.8683 (0.8379)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (98.86364)
Epoch: [43][23/60]	Time 0.19125 (0.46634)	Data 0.01073 (0.34551)	Loss 1.1845 (0.8530)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.91305)
Epoch: [43][24/60]	Time 0.14978 (0.45315)	Data 0.07457 (0.33422)	Loss 0.7845 (0.8501)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.95834)
Epoch: [43][25/60]	Time 0.08945 (0.43860)	Data 0.00262 (0.32096)	Loss 0.4241 (0.8331)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (99.00000)
Epoch: [43][26/60]	Time 0.18095 (0.42869)	Data 0.00267 (0.30871)	Loss 0.0323 (0.8023)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (99.03847)
Epoch: [43][27/60]	Time 0.15149 (0.41842)	Data 0.06049 (0.29952)	Loss 1.1905 (0.8167)	Prec@1 62.50000 (75.92593)	Prec@5 100.00000 (99.07407)
Epoch: [43][28/60]	Time 0.08381 (0.40647)	Data 0.00704 (0.28908)	Loss 0.3088 (0.7985)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (99.10715)
Epoch: [43][29/60]	Time 0.11110 (0.39629)	Data 0.00043 (0.27912)	Loss 0.6216 (0.7924)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (99.13793)
Epoch: [43][30/60]	Time 0.05613 (0.38495)	Data 0.00042 (0.26983)	Loss 1.7323 (0.8238)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (99.16667)
Epoch: [43][31/60]	Time 0.08169 (0.37517)	Data 0.00063 (0.26115)	Loss 2.3303 (0.8724)	Prec@1 37.50000 (74.59677)	Prec@5 87.50000 (98.79032)
Epoch: [43][32/60]	Time 0.07986 (0.36594)	Data 0.00062 (0.25301)	Loss 0.6375 (0.8650)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (98.82812)
Epoch: [43][33/60]	Time 0.03025 (0.35577)	Data 0.00047 (0.24535)	Loss 0.1199 (0.8424)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [43][34/60]	Time 0.02850 (0.34614)	Data 0.00052 (0.23815)	Loss 1.1032 (0.8501)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (98.89706)
Epoch: [43][35/60]	Time 0.02859 (0.33707)	Data 0.00053 (0.23136)	Loss 1.3421 (0.8642)	Prec@1 75.00000 (74.64286)	Prec@5 87.50000 (98.57143)
Epoch: [43][36/60]	Time 0.02816 (0.32849)	Data 0.00052 (0.22495)	Loss 1.0911 (0.8705)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (98.61111)
Epoch: [43][37/60]	Time 0.04088 (0.32071)	Data 0.00053 (0.21889)	Loss 1.4420 (0.8859)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (98.64865)
Epoch: [43][38/60]	Time 0.02831 (0.31302)	Data 0.00054 (0.21314)	Loss 2.2054 (0.9206)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (98.68421)
Epoch: [43][39/60]	Time 0.02236 (0.30557)	Data 0.00056 (0.20769)	Loss 0.1106 (0.8999)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (98.71795)
Epoch: [43][40/60]	Time 0.02322 (0.29851)	Data 0.00078 (0.20252)	Loss 0.3073 (0.8851)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (98.75000)
Epoch: [43][41/60]	Time 0.02223 (0.29177)	Data 0.00050 (0.19759)	Loss 0.4273 (0.8739)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (98.78049)
Epoch: [43][42/60]	Time 0.02327 (0.28538)	Data 0.00089 (0.19291)	Loss 0.9899 (0.8767)	Prec@1 87.50000 (74.40476)	Prec@5 100.00000 (98.80952)
Epoch: [43][43/60]	Time 0.02249 (0.27926)	Data 0.00102 (0.18844)	Loss 0.5560 (0.8692)	Prec@1 75.00000 (74.41860)	Prec@5 100.00000 (98.83721)
Epoch: [43][44/60]	Time 0.02213 (0.27342)	Data 0.00071 (0.18418)	Loss 0.6021 (0.8631)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (98.86364)
Epoch: [43][45/60]	Time 0.02183 (0.26783)	Data 0.00041 (0.18009)	Loss 0.7094 (0.8597)	Prec@1 87.50000 (74.72222)	Prec@5 100.00000 (98.88889)
Epoch: [43][46/60]	Time 0.02158 (0.26247)	Data 0.00045 (0.17619)	Loss 0.9477 (0.8616)	Prec@1 50.00000 (74.18478)	Prec@5 100.00000 (98.91305)
Epoch: [43][47/60]	Time 0.02202 (0.25736)	Data 0.00041 (0.17245)	Loss 1.1846 (0.8685)	Prec@1 75.00000 (74.20213)	Prec@5 87.50000 (98.67021)
Epoch: [43][48/60]	Time 0.02190 (0.25245)	Data 0.00066 (0.16887)	Loss 0.5366 (0.8616)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (98.69792)
Epoch: [43][49/60]	Time 0.02178 (0.24774)	Data 0.00040 (0.16543)	Loss 0.1908 (0.8479)	Prec@1 87.50000 (74.48979)	Prec@5 100.00000 (98.72449)
Epoch: [43][50/60]	Time 0.02153 (0.24322)	Data 0.00046 (0.16213)	Loss 0.8461 (0.8479)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (98.75000)
Epoch: [43][51/60]	Time 0.02160 (0.23888)	Data 0.00042 (0.15896)	Loss 0.3082 (0.8373)	Prec@1 75.00000 (74.50980)	Prec@5 100.00000 (98.77451)
Epoch: [43][52/60]	Time 0.02238 (0.23471)	Data 0.00047 (0.15591)	Loss 1.0928 (0.8422)	Prec@1 37.50000 (73.79808)	Prec@5 87.50000 (98.55769)
Epoch: [43][53/60]	Time 0.02226 (0.23070)	Data 0.00041 (0.15298)	Loss 0.7320 (0.8401)	Prec@1 75.00000 (73.82076)	Prec@5 100.00000 (98.58491)
Epoch: [43][54/60]	Time 0.02188 (0.22684)	Data 0.00043 (0.15015)	Loss 0.9919 (0.8429)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (98.61111)
Epoch: [43][55/60]	Time 0.02163 (0.22311)	Data 0.00044 (0.14743)	Loss 1.3687 (0.8525)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (98.40909)
Epoch: [43][56/60]	Time 0.02163 (0.21951)	Data 0.00050 (0.14481)	Loss 0.7343 (0.8504)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.43751)
Epoch: [43][57/60]	Time 0.02187 (0.21604)	Data 0.00045 (0.14228)	Loss 1.5551 (0.8627)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (98.24561)
Epoch: [43][58/60]	Time 0.02274 (0.21271)	Data 0.00043 (0.13983)	Loss 0.6845 (0.8597)	Prec@1 62.50000 (73.06034)	Prec@5 100.00000 (98.27586)
Epoch: [43][59/60]	Time 0.02193 (0.20947)	Data 0.00044 (0.13747)	Loss 0.8740 (0.8599)	Prec@1 87.50000 (73.30508)	Prec@5 100.00000 (98.30508)
Epoch: [43][60/60]	Time 0.02175 (0.20635)	Data 0.00054 (0.13519)	Loss 0.6214 (0.8559)	Prec@1 87.50000 (73.54167)	Prec@5 100.00000 (98.33334)
train at epoch 44
train at epoch 44
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [44][0/272]	 lr: 0.00400	Time 3.727 (3.727)	Data 3.202 (3.202)	Loss 0.0234 (0.0234)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][10/272]	 lr: 0.00400	Time 0.369 (1.270)	Data 0.128 (0.756)	Loss 0.0199 (0.0212)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][20/272]	 lr: 0.00400	Time 0.484 (0.867)	Data 0.141 (0.460)	Loss 0.0555 (0.0200)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][30/272]	 lr: 0.00400	Time 0.453 (0.727)	Data 0.114 (0.353)	Loss 0.0291 (0.0226)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][40/272]	 lr: 0.00400	Time 0.367 (0.653)	Data 0.119 (0.298)	Loss 0.0301 (0.0241)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [44][50/272]	 lr: 0.00400	Time 0.435 (0.613)	Data 0.103 (0.266)	Loss 0.0088 (0.0228)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00000)
Epoch: [44][60/272]	 lr: 0.00400	Time 0.435 (0.584)	Data 0.130 (0.243)	Loss 0.0253 (0.0273)	Prec@1 100.00000 (99.59016)	Prec@5 100.00000 (99.99999)
Epoch: [44][70/272]	 lr: 0.00400	Time 0.401 (0.562)	Data 0.129 (0.228)	Loss 0.5333 (0.0324)	Prec@1 78.12500 (99.33979)	Prec@5 100.00000 (100.00000)
Epoch: [44][80/272]	 lr: 0.00400	Time 0.378 (0.546)	Data 0.124 (0.216)	Loss 0.0254 (0.0324)	Prec@1 100.00000 (99.34414)	Prec@5 100.00000 (100.00000)
Epoch: [44][90/272]	 lr: 0.00400	Time 0.321 (0.534)	Data 0.125 (0.206)	Loss 0.0134 (0.0309)	Prec@1 100.00000 (99.41621)	Prec@5 100.00000 (100.00000)
Epoch: [44][100/272]	 lr: 0.00400	Time 0.500 (0.524)	Data 0.130 (0.199)	Loss 0.0278 (0.0295)	Prec@1 100.00000 (99.47401)	Prec@5 100.00000 (100.00000)
Epoch: [44][110/272]	 lr: 0.00400	Time 0.431 (0.516)	Data 0.127 (0.192)	Loss 0.0247 (0.0292)	Prec@1 100.00000 (99.52140)	Prec@5 100.00000 (100.00000)
Epoch: [44][120/272]	 lr: 0.00400	Time 0.392 (0.509)	Data 0.129 (0.187)	Loss 0.0201 (0.0286)	Prec@1 100.00000 (99.56094)	Prec@5 100.00000 (99.99999)
Epoch: [44][130/272]	 lr: 0.00400	Time 0.463 (0.505)	Data 0.129 (0.183)	Loss 0.0120 (0.0277)	Prec@1 100.00000 (99.59447)	Prec@5 100.00000 (100.00000)
Epoch: [44][140/272]	 lr: 0.00400	Time 0.483 (0.502)	Data 0.129 (0.179)	Loss 0.0267 (0.0275)	Prec@1 100.00000 (99.62322)	Prec@5 100.00000 (100.00000)
Epoch: [44][150/272]	 lr: 0.00400	Time 0.354 (0.498)	Data 0.130 (0.176)	Loss 0.0166 (0.0267)	Prec@1 100.00000 (99.64818)	Prec@5 100.00000 (100.00000)
Epoch: [44][160/272]	 lr: 0.00400	Time 0.418 (0.493)	Data 0.143 (0.173)	Loss 0.0226 (0.0265)	Prec@1 100.00000 (99.67004)	Prec@5 100.00000 (100.00000)
Epoch: [44][170/272]	 lr: 0.00400	Time 0.478 (0.489)	Data 0.144 (0.171)	Loss 0.0051 (0.0261)	Prec@1 100.00000 (99.68933)	Prec@5 100.00000 (100.00000)
Epoch: [44][180/272]	 lr: 0.00400	Time 0.448 (0.485)	Data 0.144 (0.168)	Loss 0.0178 (0.0278)	Prec@1 100.00000 (99.63744)	Prec@5 100.00000 (100.00001)
Epoch: [44][190/272]	 lr: 0.00400	Time 0.493 (0.483)	Data 0.128 (0.167)	Loss 0.0281 (0.0271)	Prec@1 100.00000 (99.65642)	Prec@5 100.00000 (100.00000)
Epoch: [44][200/272]	 lr: 0.00400	Time 0.473 (0.480)	Data 0.129 (0.165)	Loss 0.0059 (0.0266)	Prec@1 100.00000 (99.67351)	Prec@5 100.00000 (100.00000)
Epoch: [44][210/272]	 lr: 0.00400	Time 0.389 (0.477)	Data 0.124 (0.163)	Loss 0.0199 (0.0263)	Prec@1 100.00000 (99.68899)	Prec@5 100.00000 (100.00000)
Epoch: [44][220/272]	 lr: 0.00400	Time 0.467 (0.476)	Data 0.144 (0.162)	Loss 0.0307 (0.0265)	Prec@1 100.00000 (99.67478)	Prec@5 100.00000 (100.00001)
Epoch: [44][230/272]	 lr: 0.00400	Time 0.523 (0.474)	Data 0.128 (0.161)	Loss 0.0068 (0.0263)	Prec@1 100.00000 (99.68885)	Prec@5 100.00000 (100.00000)
Epoch: [44][240/272]	 lr: 0.00400	Time 0.253 (0.472)	Data 0.129 (0.159)	Loss 0.0251 (0.0259)	Prec@1 100.00000 (99.70177)	Prec@5 100.00000 (100.00001)
Epoch: [44][250/272]	 lr: 0.00400	Time 0.250 (0.463)	Data 0.128 (0.158)	Loss 0.0056 (0.0263)	Prec@1 100.00000 (99.67630)	Prec@5 100.00000 (100.00000)
Epoch: [44][260/272]	 lr: 0.00400	Time 0.238 (0.454)	Data 0.128 (0.157)	Loss 0.0050 (0.0261)	Prec@1 100.00000 (99.68870)	Prec@5 100.00000 (100.00000)
Epoch: [44][270/272]	 lr: 0.00400	Time 0.238 (0.446)	Data 0.129 (0.156)	Loss 0.0184 (0.0264)	Prec@1 100.00000 (99.66559)	Prec@5 100.00000 (100.00000)
validation at epoch 44
validation at epoch 44
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [44][1/60]	Time 6.69855 (6.69855)	Data 6.58299 (6.58299)	Loss 0.3116 (0.3116)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][2/60]	Time 0.88671 (3.79263)	Data 0.84712 (3.71506)	Loss 0.2437 (0.2776)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [44][3/60]	Time 0.04047 (2.54191)	Data 0.00106 (2.47706)	Loss 1.1593 (0.5715)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [44][4/60]	Time 0.10959 (1.93383)	Data 0.00901 (1.86004)	Loss 0.1689 (0.4709)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [44][5/60]	Time 0.15436 (1.57794)	Data 0.03704 (1.49544)	Loss 0.4321 (0.4631)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [44][6/60]	Time 0.08939 (1.32985)	Data 0.00064 (1.24631)	Loss 0.3423 (0.4430)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [44][7/60]	Time 0.06470 (1.14911)	Data 0.00993 (1.06968)	Loss 1.5699 (0.6040)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [44][8/60]	Time 0.15476 (1.02482)	Data 0.00199 (0.93622)	Loss 1.3658 (0.6992)	Prec@1 62.50000 (79.68750)	Prec@5 87.50000 (98.43750)
Epoch: [44][9/60]	Time 0.13879 (0.92637)	Data 0.01808 (0.83421)	Loss 0.7428 (0.7040)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [44][10/60]	Time 0.15433 (0.84917)	Data 0.01572 (0.75236)	Loss 0.6992 (0.7036)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [44][11/60]	Time 0.18239 (0.78855)	Data 0.03902 (0.68751)	Loss 0.6828 (0.7017)	Prec@1 87.50000 (78.40910)	Prec@5 87.50000 (97.72727)
Epoch: [44][12/60]	Time 0.08969 (0.73031)	Data 0.00061 (0.63027)	Loss 1.3636 (0.7568)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [44][13/60]	Time 0.19160 (0.68887)	Data 0.01095 (0.58263)	Loss 1.3796 (0.8047)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (98.07693)
Epoch: [44][14/60]	Time 0.12787 (0.64880)	Data 0.00941 (0.54168)	Loss 0.1214 (0.7559)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [44][15/60]	Time 0.17278 (0.61707)	Data 0.01169 (0.50635)	Loss 1.1554 (0.7826)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (98.33334)
Epoch: [44][16/60]	Time 0.12157 (0.58610)	Data 0.01288 (0.47551)	Loss 1.0219 (0.7975)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.43750)
Epoch: [44][17/60]	Time 0.11928 (0.55864)	Data 0.03227 (0.44944)	Loss 0.3360 (0.7704)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (98.52941)
Epoch: [44][18/60]	Time 0.23039 (0.54040)	Data 0.05459 (0.42750)	Loss 2.3010 (0.8554)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (98.61111)
Epoch: [44][19/60]	Time 0.20167 (0.52257)	Data 0.06789 (0.40857)	Loss 0.1159 (0.8165)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (98.68421)
Epoch: [44][20/60]	Time 0.16337 (0.50461)	Data 0.05367 (0.39083)	Loss 2.3182 (0.8916)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (98.75000)
Epoch: [44][21/60]	Time 0.12356 (0.48647)	Data 0.03149 (0.37372)	Loss 0.5929 (0.8773)	Prec@1 75.00000 (76.19048)	Prec@5 100.00000 (98.80952)
Epoch: [44][22/60]	Time 0.18614 (0.47282)	Data 0.00600 (0.35700)	Loss 0.5815 (0.8639)	Prec@1 75.00000 (76.13637)	Prec@5 100.00000 (98.86364)
Epoch: [44][23/60]	Time 0.10339 (0.45676)	Data 0.01643 (0.34219)	Loss 0.8789 (0.8646)	Prec@1 62.50000 (75.54348)	Prec@5 100.00000 (98.91305)
Epoch: [44][24/60]	Time 0.08649 (0.44133)	Data 0.00901 (0.32831)	Loss 0.5649 (0.8521)	Prec@1 75.00000 (75.52084)	Prec@5 100.00000 (98.95834)
Epoch: [44][25/60]	Time 0.09418 (0.42744)	Data 0.01907 (0.31594)	Loss 0.4270 (0.8351)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (99.00000)
Epoch: [44][26/60]	Time 0.06574 (0.41353)	Data 0.00572 (0.30401)	Loss 0.0194 (0.8037)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (99.03847)
Epoch: [44][27/60]	Time 0.10335 (0.40204)	Data 0.01882 (0.29345)	Loss 0.7986 (0.8035)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (99.07407)
Epoch: [44][28/60]	Time 0.07237 (0.39027)	Data 0.00132 (0.28301)	Loss 0.2946 (0.7853)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (99.10715)
Epoch: [44][29/60]	Time 0.10327 (0.38037)	Data 0.00040 (0.27327)	Loss 0.6303 (0.7800)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (99.13793)
Epoch: [44][30/60]	Time 0.10095 (0.37106)	Data 0.00046 (0.26418)	Loss 1.7553 (0.8125)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (99.16667)
Epoch: [44][31/60]	Time 0.09394 (0.36212)	Data 0.00061 (0.25567)	Loss 2.5620 (0.8689)	Prec@1 25.00000 (74.59677)	Prec@5 100.00000 (99.19354)
Epoch: [44][32/60]	Time 0.05498 (0.35252)	Data 0.00044 (0.24770)	Loss 0.6216 (0.8612)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (99.21875)
Epoch: [44][33/60]	Time 0.03421 (0.34287)	Data 0.00056 (0.24021)	Loss 0.3010 (0.8442)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.24242)
Epoch: [44][34/60]	Time 0.03364 (0.33378)	Data 0.00091 (0.23317)	Loss 1.2755 (0.8569)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (99.26471)
Epoch: [44][35/60]	Time 0.03533 (0.32525)	Data 0.00177 (0.22656)	Loss 1.3674 (0.8715)	Prec@1 62.50000 (74.28571)	Prec@5 100.00000 (99.28571)
Epoch: [44][36/60]	Time 0.03456 (0.31718)	Data 0.00055 (0.22028)	Loss 1.1822 (0.8801)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (99.30556)
Epoch: [44][37/60]	Time 0.03263 (0.30949)	Data 0.00048 (0.21434)	Loss 1.4090 (0.8944)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (99.32433)
Epoch: [44][38/60]	Time 0.02781 (0.30207)	Data 0.00066 (0.20872)	Loss 2.4606 (0.9356)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (99.34211)
Epoch: [44][39/60]	Time 0.02680 (0.29502)	Data 0.00066 (0.20338)	Loss 0.2894 (0.9191)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (99.35898)
Epoch: [44][40/60]	Time 0.02770 (0.28833)	Data 0.00079 (0.19832)	Loss 0.5858 (0.9107)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (99.37500)
Epoch: [44][41/60]	Time 0.02699 (0.28196)	Data 0.00080 (0.19350)	Loss 0.3912 (0.8981)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (99.39024)
Epoch: [44][42/60]	Time 0.02769 (0.27590)	Data 0.00093 (0.18892)	Loss 1.2484 (0.9064)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [44][43/60]	Time 0.02755 (0.27013)	Data 0.00048 (0.18453)	Loss 0.4576 (0.8960)	Prec@1 87.50000 (74.12791)	Prec@5 100.00000 (99.41860)
Epoch: [44][44/60]	Time 0.02750 (0.26461)	Data 0.00053 (0.18035)	Loss 0.7999 (0.8938)	Prec@1 50.00000 (73.57954)	Prec@5 100.00000 (99.43182)
Epoch: [44][45/60]	Time 0.02678 (0.25933)	Data 0.00047 (0.17635)	Loss 0.8169 (0.8921)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.44445)
Epoch: [44][46/60]	Time 0.02257 (0.25418)	Data 0.00047 (0.17253)	Loss 1.4920 (0.9051)	Prec@1 50.00000 (73.09782)	Prec@5 100.00000 (99.45652)
Epoch: [44][47/60]	Time 0.02232 (0.24925)	Data 0.00046 (0.16887)	Loss 1.0050 (0.9072)	Prec@1 75.00000 (73.13830)	Prec@5 87.50000 (99.20213)
Epoch: [44][48/60]	Time 0.02228 (0.24452)	Data 0.00048 (0.16536)	Loss 0.4314 (0.8973)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.21875)
Epoch: [44][49/60]	Time 0.02200 (0.23998)	Data 0.00045 (0.16200)	Loss 0.4212 (0.8876)	Prec@1 75.00000 (73.46938)	Prec@5 100.00000 (99.23470)
Epoch: [44][50/60]	Time 0.02201 (0.23562)	Data 0.00043 (0.15876)	Loss 0.5792 (0.8814)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.25000)
Epoch: [44][51/60]	Time 0.02160 (0.23142)	Data 0.00052 (0.15566)	Loss 0.6051 (0.8760)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.26471)
Epoch: [44][52/60]	Time 0.02270 (0.22741)	Data 0.00043 (0.15268)	Loss 0.9889 (0.8782)	Prec@1 50.00000 (73.07693)	Prec@5 87.50000 (99.03847)
Epoch: [44][53/60]	Time 0.02221 (0.22354)	Data 0.00044 (0.14980)	Loss 0.4464 (0.8700)	Prec@1 87.50000 (73.34906)	Prec@5 100.00000 (99.05660)
Epoch: [44][54/60]	Time 0.02199 (0.21981)	Data 0.00047 (0.14704)	Loss 1.0707 (0.8738)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (99.07407)
Epoch: [44][55/60]	Time 0.02172 (0.21620)	Data 0.00044 (0.14437)	Loss 1.1097 (0.8780)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (98.86363)
Epoch: [44][56/60]	Time 0.02175 (0.21273)	Data 0.00052 (0.14180)	Loss 0.8157 (0.8769)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (98.88393)
Epoch: [44][57/60]	Time 0.02283 (0.20940)	Data 0.00045 (0.13932)	Loss 1.5036 (0.8879)	Prec@1 62.50000 (73.02631)	Prec@5 87.50000 (98.68421)
Epoch: [44][58/60]	Time 0.02151 (0.20616)	Data 0.00043 (0.13693)	Loss 0.7135 (0.8849)	Prec@1 75.00000 (73.06034)	Prec@5 100.00000 (98.70689)
Epoch: [44][59/60]	Time 0.02198 (0.20304)	Data 0.00040 (0.13462)	Loss 0.8206 (0.8838)	Prec@1 87.50000 (73.30508)	Prec@5 100.00000 (98.72881)
Epoch: [44][60/60]	Time 0.02207 (0.20002)	Data 0.00051 (0.13238)	Loss 0.4749 (0.8770)	Prec@1 87.50000 (73.54167)	Prec@5 100.00000 (98.75001)
train at epoch 45
train at epoch 45
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [45][0/272]	 lr: 0.00400	Time 9.879 (9.879)	Data 8.800 (8.800)	Loss 0.0450 (0.0450)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][10/272]	 lr: 0.00400	Time 0.378 (1.320)	Data 0.128 (0.911)	Loss 0.0314 (0.0271)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][20/272]	 lr: 0.00400	Time 0.423 (0.889)	Data 0.120 (0.539)	Loss 0.0086 (0.0236)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][30/272]	 lr: 0.00400	Time 0.396 (0.739)	Data 0.133 (0.409)	Loss 0.0142 (0.0205)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][40/272]	 lr: 0.00400	Time 0.446 (0.664)	Data 0.139 (0.341)	Loss 0.0313 (0.0267)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [45][50/272]	 lr: 0.00400	Time 0.482 (0.622)	Data 0.152 (0.301)	Loss 0.0305 (0.0278)	Prec@1 100.00000 (99.75491)	Prec@5 100.00000 (100.00000)
Epoch: [45][60/272]	 lr: 0.00400	Time 0.489 (0.592)	Data 0.130 (0.272)	Loss 0.0154 (0.0261)	Prec@1 100.00000 (99.79507)	Prec@5 100.00000 (99.99999)
Epoch: [45][70/272]	 lr: 0.00400	Time 0.538 (0.571)	Data 0.129 (0.253)	Loss 0.0325 (0.0264)	Prec@1 100.00000 (99.73592)	Prec@5 100.00000 (100.00000)
Epoch: [45][80/272]	 lr: 0.00400	Time 0.420 (0.554)	Data 0.168 (0.238)	Loss 0.0797 (0.0281)	Prec@1 100.00000 (99.72994)	Prec@5 100.00000 (100.00000)
Epoch: [45][90/272]	 lr: 0.00400	Time 0.461 (0.542)	Data 0.129 (0.226)	Loss 0.0685 (0.0272)	Prec@1 100.00000 (99.75962)	Prec@5 100.00000 (100.00000)
Epoch: [45][100/272]	 lr: 0.00400	Time 0.529 (0.532)	Data 0.124 (0.217)	Loss 0.0273 (0.0268)	Prec@1 100.00000 (99.78342)	Prec@5 100.00000 (100.00000)
Epoch: [45][110/272]	 lr: 0.00400	Time 0.484 (0.524)	Data 0.126 (0.208)	Loss 0.0272 (0.0268)	Prec@1 100.00000 (99.80293)	Prec@5 100.00000 (100.00000)
Epoch: [45][120/272]	 lr: 0.00400	Time 0.365 (0.518)	Data 0.126 (0.202)	Loss 0.0165 (0.0273)	Prec@1 100.00000 (99.81921)	Prec@5 100.00000 (99.99999)
Epoch: [45][130/272]	 lr: 0.00400	Time 0.501 (0.513)	Data 0.140 (0.197)	Loss 0.0172 (0.0266)	Prec@1 100.00000 (99.83302)	Prec@5 100.00000 (100.00000)
Epoch: [45][140/272]	 lr: 0.00400	Time 0.497 (0.510)	Data 0.133 (0.192)	Loss 0.0060 (0.0262)	Prec@1 100.00000 (99.82269)	Prec@5 100.00000 (100.00000)
Epoch: [45][150/272]	 lr: 0.00400	Time 0.505 (0.505)	Data 0.128 (0.188)	Loss 0.0306 (0.0267)	Prec@1 100.00000 (99.81374)	Prec@5 100.00000 (100.00000)
Epoch: [45][160/272]	 lr: 0.00400	Time 0.541 (0.501)	Data 0.128 (0.184)	Loss 0.0223 (0.0265)	Prec@1 100.00000 (99.82531)	Prec@5 100.00000 (100.00000)
Epoch: [45][170/272]	 lr: 0.00400	Time 0.430 (0.497)	Data 0.136 (0.181)	Loss 0.0241 (0.0276)	Prec@1 100.00000 (99.79898)	Prec@5 100.00000 (100.00000)
Epoch: [45][180/272]	 lr: 0.00400	Time 0.369 (0.495)	Data 0.129 (0.179)	Loss 0.0116 (0.0270)	Prec@1 100.00000 (99.81009)	Prec@5 100.00000 (100.00001)
Epoch: [45][190/272]	 lr: 0.00400	Time 0.463 (0.493)	Data 0.127 (0.176)	Loss 0.0120 (0.0268)	Prec@1 100.00000 (99.80367)	Prec@5 100.00000 (100.00000)
Epoch: [45][200/272]	 lr: 0.00400	Time 0.525 (0.490)	Data 0.129 (0.174)	Loss 0.0150 (0.0273)	Prec@1 100.00000 (99.78233)	Prec@5 100.00000 (100.00000)
Epoch: [45][210/272]	 lr: 0.00400	Time 0.426 (0.488)	Data 0.129 (0.171)	Loss 0.0203 (0.0269)	Prec@1 100.00000 (99.79266)	Prec@5 100.00000 (100.00000)
Epoch: [45][220/272]	 lr: 0.00400	Time 0.309 (0.485)	Data 0.127 (0.170)	Loss 0.0190 (0.0271)	Prec@1 100.00000 (99.77376)	Prec@5 100.00000 (100.00001)
Epoch: [45][230/272]	 lr: 0.00400	Time 0.333 (0.483)	Data 0.124 (0.168)	Loss 0.0668 (0.0268)	Prec@1 100.00000 (99.78355)	Prec@5 100.00000 (100.00000)
Epoch: [45][240/272]	 lr: 0.00400	Time 0.336 (0.481)	Data 0.128 (0.166)	Loss 0.0127 (0.0268)	Prec@1 100.00000 (99.76660)	Prec@5 100.00000 (100.00001)
Epoch: [45][250/272]	 lr: 0.00400	Time 0.239 (0.472)	Data 0.129 (0.164)	Loss 0.0141 (0.0267)	Prec@1 100.00000 (99.76345)	Prec@5 100.00000 (100.00000)
Epoch: [45][260/272]	 lr: 0.00400	Time 0.240 (0.463)	Data 0.130 (0.163)	Loss 0.0043 (0.0263)	Prec@1 100.00000 (99.77251)	Prec@5 100.00000 (100.00000)
Epoch: [45][270/272]	 lr: 0.00400	Time 0.238 (0.455)	Data 0.128 (0.162)	Loss 0.0349 (0.0264)	Prec@1 100.00000 (99.76937)	Prec@5 100.00000 (100.00000)
validation at epoch 45
validation at epoch 45
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [45][1/60]	Time 3.65340 (3.65340)	Data 3.56348 (3.56348)	Loss 0.3972 (0.3972)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][2/60]	Time 3.43981 (3.54661)	Data 3.35706 (3.46027)	Loss 0.3107 (0.3540)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [45][3/60]	Time 0.12613 (2.40645)	Data 0.00189 (2.30748)	Loss 1.2236 (0.6438)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [45][4/60]	Time 0.47000 (1.92234)	Data 0.39494 (1.82934)	Loss 0.1914 (0.5307)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [45][5/60]	Time 0.19411 (1.57669)	Data 0.00658 (1.46479)	Loss 0.4018 (0.5049)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [45][6/60]	Time 0.08038 (1.32731)	Data 0.00047 (1.22074)	Loss 0.3991 (0.4873)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [45][7/60]	Time 0.19364 (1.16535)	Data 0.00808 (1.04750)	Loss 1.3017 (0.6036)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [45][8/60]	Time 0.15114 (1.03858)	Data 0.02019 (0.91909)	Loss 1.2714 (0.6871)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [45][9/60]	Time 0.14750 (0.93957)	Data 0.01583 (0.81873)	Loss 0.7015 (0.6887)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [45][10/60]	Time 0.10110 (0.85572)	Data 0.02983 (0.73984)	Loss 0.6297 (0.6828)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [45][11/60]	Time 0.28658 (0.80398)	Data 0.08897 (0.68067)	Loss 0.7009 (0.6845)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [45][12/60]	Time 0.16190 (0.75047)	Data 0.02389 (0.62593)	Loss 1.0668 (0.7163)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [45][13/60]	Time 0.13630 (0.70323)	Data 0.00611 (0.57826)	Loss 1.6442 (0.7877)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [45][14/60]	Time 0.09114 (0.65951)	Data 0.01133 (0.53776)	Loss 0.1235 (0.7402)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [45][15/60]	Time 0.10968 (0.62285)	Data 0.00569 (0.50229)	Loss 1.1369 (0.7667)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [45][16/60]	Time 0.10402 (0.59043)	Data 0.00770 (0.47138)	Loss 1.0497 (0.7844)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [45][17/60]	Time 0.07012 (0.55982)	Data 0.00554 (0.44398)	Loss 0.3884 (0.7611)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][18/60]	Time 0.23564 (0.54181)	Data 0.02125 (0.42049)	Loss 2.4709 (0.8561)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][19/60]	Time 0.17085 (0.52229)	Data 0.01807 (0.39931)	Loss 0.1201 (0.8173)	Prec@1 100.00000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [45][20/60]	Time 0.18935 (0.50564)	Data 0.08073 (0.38338)	Loss 2.4793 (0.9004)	Prec@1 62.50000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [45][21/60]	Time 0.10556 (0.48659)	Data 0.00649 (0.36543)	Loss 0.6531 (0.8887)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][22/60]	Time 0.18087 (0.47269)	Data 0.04995 (0.35109)	Loss 0.6926 (0.8797)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][23/60]	Time 0.17650 (0.45981)	Data 0.12517 (0.34127)	Loss 1.0766 (0.8883)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [45][24/60]	Time 0.09030 (0.44442)	Data 0.00064 (0.32708)	Loss 0.6063 (0.8766)	Prec@1 75.00000 (74.47917)	Prec@5 100.00000 (100.00000)
Epoch: [45][25/60]	Time 0.09843 (0.43058)	Data 0.01569 (0.31462)	Loss 0.4596 (0.8599)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [45][26/60]	Time 0.12550 (0.41884)	Data 0.01275 (0.30301)	Loss 0.0311 (0.8280)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [45][27/60]	Time 0.20011 (0.41074)	Data 0.00074 (0.29182)	Loss 0.9394 (0.8321)	Prec@1 62.50000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [45][28/60]	Time 0.12708 (0.40061)	Data 0.00474 (0.28156)	Loss 0.3488 (0.8149)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [45][29/60]	Time 0.12111 (0.39097)	Data 0.02276 (0.27264)	Loss 0.6253 (0.8083)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (100.00000)
Epoch: [45][30/60]	Time 0.04134 (0.37932)	Data 0.00043 (0.26357)	Loss 1.7595 (0.8400)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (100.00001)
Epoch: [45][31/60]	Time 0.03614 (0.36825)	Data 0.00056 (0.25508)	Loss 2.5045 (0.8937)	Prec@1 37.50000 (74.19354)	Prec@5 100.00000 (100.00000)
Epoch: [45][32/60]	Time 0.05138 (0.35835)	Data 0.00626 (0.24731)	Loss 0.8461 (0.8922)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [45][33/60]	Time 0.04508 (0.34885)	Data 0.00040 (0.23982)	Loss 0.1716 (0.8704)	Prec@1 87.50000 (74.62122)	Prec@5 100.00000 (100.00000)
Epoch: [45][34/60]	Time 0.04895 (0.34003)	Data 0.00062 (0.23279)	Loss 1.1942 (0.8799)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [45][35/60]	Time 0.03953 (0.33145)	Data 0.00391 (0.22625)	Loss 1.3203 (0.8925)	Prec@1 75.00000 (74.28571)	Prec@5 100.00000 (100.00000)
Epoch: [45][36/60]	Time 0.03126 (0.32311)	Data 0.00177 (0.22001)	Loss 1.2657 (0.9029)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [45][37/60]	Time 0.02853 (0.31515)	Data 0.00096 (0.21409)	Loss 1.4814 (0.9185)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (100.00000)
Epoch: [45][38/60]	Time 0.03236 (0.30771)	Data 0.00410 (0.20857)	Loss 2.3346 (0.9558)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (100.00000)
Epoch: [45][39/60]	Time 0.03311 (0.30066)	Data 0.00056 (0.20323)	Loss 0.1432 (0.9349)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (100.00000)
Epoch: [45][40/60]	Time 0.02779 (0.29384)	Data 0.00063 (0.19817)	Loss 0.3712 (0.9208)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (100.00000)
Epoch: [45][41/60]	Time 0.02281 (0.28723)	Data 0.00059 (0.19335)	Loss 0.5823 (0.9126)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (100.00000)
Epoch: [45][42/60]	Time 0.02311 (0.28094)	Data 0.00072 (0.18876)	Loss 1.0437 (0.9157)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (100.00000)
Epoch: [45][43/60]	Time 0.02278 (0.27494)	Data 0.00069 (0.18439)	Loss 0.7453 (0.9117)	Prec@1 62.50000 (73.54651)	Prec@5 100.00000 (100.00000)
Epoch: [45][44/60]	Time 0.02243 (0.26920)	Data 0.00093 (0.18022)	Loss 0.7658 (0.9084)	Prec@1 75.00000 (73.57954)	Prec@5 100.00000 (100.00000)
Epoch: [45][45/60]	Time 0.02321 (0.26373)	Data 0.00043 (0.17622)	Loss 0.7385 (0.9047)	Prec@1 87.50000 (73.88889)	Prec@5 100.00000 (100.00000)
Epoch: [45][46/60]	Time 0.02167 (0.25847)	Data 0.00051 (0.17241)	Loss 0.9903 (0.9065)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [45][47/60]	Time 0.02233 (0.25345)	Data 0.00046 (0.16875)	Loss 0.9317 (0.9070)	Prec@1 75.00000 (73.40425)	Prec@5 87.50000 (99.73404)
Epoch: [45][48/60]	Time 0.02200 (0.24863)	Data 0.00048 (0.16524)	Loss 0.5352 (0.8993)	Prec@1 87.50000 (73.69792)	Prec@5 100.00000 (99.73959)
Epoch: [45][49/60]	Time 0.02188 (0.24400)	Data 0.00045 (0.16188)	Loss 0.2167 (0.8854)	Prec@1 87.50000 (73.97959)	Prec@5 100.00000 (99.74490)
Epoch: [45][50/60]	Time 0.02215 (0.23956)	Data 0.00041 (0.15865)	Loss 0.7346 (0.8824)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (99.75000)
Epoch: [45][51/60]	Time 0.02151 (0.23529)	Data 0.00044 (0.15555)	Loss 0.2748 (0.8704)	Prec@1 75.00000 (74.01961)	Prec@5 100.00000 (99.75491)
Epoch: [45][52/60]	Time 0.02289 (0.23120)	Data 0.00042 (0.15256)	Loss 0.9259 (0.8715)	Prec@1 50.00000 (73.55769)	Prec@5 87.50000 (99.51923)
Epoch: [45][53/60]	Time 0.02201 (0.22725)	Data 0.00047 (0.14969)	Loss 0.5458 (0.8654)	Prec@1 75.00000 (73.58491)	Prec@5 100.00000 (99.52831)
Epoch: [45][54/60]	Time 0.02191 (0.22345)	Data 0.00048 (0.14693)	Loss 1.0207 (0.8682)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.53704)
Epoch: [45][55/60]	Time 0.02173 (0.21978)	Data 0.00043 (0.14427)	Loss 1.0977 (0.8724)	Prec@1 62.50000 (73.40909)	Prec@5 87.50000 (99.31818)
Epoch: [45][56/60]	Time 0.02176 (0.21625)	Data 0.00047 (0.14170)	Loss 0.6971 (0.8693)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.33036)
Epoch: [45][57/60]	Time 0.02252 (0.21285)	Data 0.00039 (0.13922)	Loss 1.4459 (0.8794)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (99.12281)
Epoch: [45][58/60]	Time 0.02280 (0.20957)	Data 0.00047 (0.13683)	Loss 0.6462 (0.8754)	Prec@1 62.50000 (73.06034)	Prec@5 100.00000 (99.13793)
Epoch: [45][59/60]	Time 0.02409 (0.20643)	Data 0.00053 (0.13452)	Loss 0.9508 (0.8767)	Prec@1 75.00000 (73.09322)	Prec@5 100.00000 (99.15254)
Epoch: [45][60/60]	Time 0.02289 (0.20337)	Data 0.00080 (0.13229)	Loss 0.5097 (0.8705)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.16667)
train at epoch 46
train at epoch 46
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [46][0/272]	 lr: 0.00400	Time 6.470 (6.470)	Data 5.030 (5.030)	Loss 0.0383 (0.0383)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][10/272]	 lr: 0.00400	Time 0.407 (1.252)	Data 0.128 (0.578)	Loss 0.0276 (0.0190)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][20/272]	 lr: 0.00400	Time 0.337 (0.855)	Data 0.128 (0.366)	Loss 0.0109 (0.0181)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][30/272]	 lr: 0.00400	Time 0.401 (0.721)	Data 0.143 (0.291)	Loss 0.0404 (0.0241)	Prec@1 100.00000 (99.69758)	Prec@5 100.00000 (100.00000)
Epoch: [46][40/272]	 lr: 0.00400	Time 0.422 (0.653)	Data 0.127 (0.252)	Loss 0.0319 (0.0225)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [46][50/272]	 lr: 0.00400	Time 0.351 (0.614)	Data 0.122 (0.227)	Loss 0.0081 (0.0213)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00000)
Epoch: [46][60/272]	 lr: 0.00400	Time 0.441 (0.587)	Data 0.142 (0.211)	Loss 0.0249 (0.0218)	Prec@1 100.00000 (99.84631)	Prec@5 100.00000 (99.99999)
Epoch: [46][70/272]	 lr: 0.00400	Time 0.428 (0.567)	Data 0.128 (0.199)	Loss 0.0217 (0.0216)	Prec@1 100.00000 (99.82394)	Prec@5 100.00000 (100.00000)
Epoch: [46][80/272]	 lr: 0.00400	Time 0.512 (0.554)	Data 0.128 (0.190)	Loss 0.0060 (0.0214)	Prec@1 100.00000 (99.80710)	Prec@5 100.00000 (100.00000)
Epoch: [46][90/272]	 lr: 0.00400	Time 0.500 (0.541)	Data 0.128 (0.184)	Loss 0.0666 (0.0226)	Prec@1 96.87500 (99.75962)	Prec@5 100.00000 (100.00000)
Epoch: [46][100/272]	 lr: 0.00400	Time 0.459 (0.532)	Data 0.140 (0.179)	Loss 0.0208 (0.0227)	Prec@1 100.00000 (99.75247)	Prec@5 100.00000 (100.00000)
Epoch: [46][110/272]	 lr: 0.00400	Time 0.467 (0.525)	Data 0.130 (0.174)	Loss 0.0217 (0.0222)	Prec@1 100.00000 (99.77478)	Prec@5 100.00000 (100.00000)
Epoch: [46][120/272]	 lr: 0.00400	Time 0.357 (0.518)	Data 0.125 (0.170)	Loss 0.0174 (0.0225)	Prec@1 100.00000 (99.79338)	Prec@5 100.00000 (99.99999)
Epoch: [46][130/272]	 lr: 0.00400	Time 0.395 (0.513)	Data 0.137 (0.167)	Loss 0.0155 (0.0228)	Prec@1 100.00000 (99.76145)	Prec@5 100.00000 (100.00000)
Epoch: [46][140/272]	 lr: 0.00400	Time 0.418 (0.507)	Data 0.125 (0.164)	Loss 0.0080 (0.0228)	Prec@1 100.00000 (99.77837)	Prec@5 100.00000 (100.00000)
Epoch: [46][150/272]	 lr: 0.00400	Time 0.408 (0.502)	Data 0.127 (0.161)	Loss 0.0622 (0.0226)	Prec@1 100.00000 (99.79305)	Prec@5 100.00000 (100.00000)
Epoch: [46][160/272]	 lr: 0.00400	Time 0.388 (0.500)	Data 0.129 (0.159)	Loss 0.0099 (0.0225)	Prec@1 100.00000 (99.78649)	Prec@5 100.00000 (100.00000)
Epoch: [46][170/272]	 lr: 0.00400	Time 0.554 (0.497)	Data 0.130 (0.158)	Loss 0.0349 (0.0226)	Prec@1 100.00000 (99.79898)	Prec@5 100.00000 (100.00000)
Epoch: [46][180/272]	 lr: 0.00400	Time 0.451 (0.495)	Data 0.127 (0.156)	Loss 0.0380 (0.0226)	Prec@1 100.00000 (99.81009)	Prec@5 100.00000 (100.00001)
Epoch: [46][190/272]	 lr: 0.00400	Time 0.485 (0.492)	Data 0.136 (0.155)	Loss 0.0190 (0.0229)	Prec@1 100.00000 (99.78731)	Prec@5 100.00000 (100.00000)
Epoch: [46][200/272]	 lr: 0.00400	Time 0.387 (0.490)	Data 0.128 (0.154)	Loss 0.0090 (0.0225)	Prec@1 100.00000 (99.79788)	Prec@5 100.00000 (100.00000)
Epoch: [46][210/272]	 lr: 0.00400	Time 0.456 (0.488)	Data 0.114 (0.152)	Loss 0.0190 (0.0222)	Prec@1 100.00000 (99.80746)	Prec@5 100.00000 (100.00000)
Epoch: [46][220/272]	 lr: 0.00400	Time 0.384 (0.486)	Data 0.127 (0.151)	Loss 0.0098 (0.0220)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00001)
Epoch: [46][230/272]	 lr: 0.00400	Time 0.423 (0.484)	Data 0.129 (0.150)	Loss 0.0668 (0.0220)	Prec@1 100.00000 (99.82413)	Prec@5 100.00000 (100.00000)
Epoch: [46][240/272]	 lr: 0.00400	Time 0.307 (0.482)	Data 0.111 (0.150)	Loss 0.0098 (0.0220)	Prec@1 100.00000 (99.83144)	Prec@5 100.00000 (100.00001)
Epoch: [46][250/272]	 lr: 0.00400	Time 0.241 (0.472)	Data 0.129 (0.149)	Loss 0.0152 (0.0218)	Prec@1 100.00000 (99.82570)	Prec@5 100.00000 (100.00000)
Epoch: [46][260/272]	 lr: 0.00400	Time 0.240 (0.463)	Data 0.129 (0.148)	Loss 0.0198 (0.0215)	Prec@1 100.00000 (99.83237)	Prec@5 100.00000 (100.00000)
Epoch: [46][270/272]	 lr: 0.00400	Time 0.240 (0.455)	Data 0.129 (0.147)	Loss 0.0141 (0.0219)	Prec@1 100.00000 (99.80397)	Prec@5 100.00000 (100.00000)
validation at epoch 46
validation at epoch 46
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [46][1/60]	Time 7.14780 (7.14780)	Data 7.05769 (7.05769)	Loss 0.4022 (0.4022)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][2/60]	Time 0.11526 (3.63153)	Data 0.00632 (3.53201)	Loss 0.3743 (0.3882)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [46][3/60]	Time 0.10091 (2.45466)	Data 0.00269 (2.35557)	Loss 1.2284 (0.6683)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][4/60]	Time 0.31805 (1.92051)	Data 0.10047 (1.79179)	Loss 0.2127 (0.5544)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [46][5/60]	Time 0.22609 (1.58162)	Data 0.05893 (1.44522)	Loss 0.4761 (0.5387)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [46][6/60]	Time 0.19290 (1.35017)	Data 0.00151 (1.20460)	Loss 0.4644 (0.5263)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [46][7/60]	Time 0.07196 (1.16757)	Data 0.00823 (1.03369)	Loss 1.3380 (0.6423)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [46][8/60]	Time 0.19035 (1.04542)	Data 0.05043 (0.91078)	Loss 1.3324 (0.7285)	Prec@1 62.50000 (73.43750)	Prec@5 87.50000 (98.43750)
Epoch: [46][9/60]	Time 0.15514 (0.94650)	Data 0.01548 (0.81131)	Loss 0.6593 (0.7209)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [46][10/60]	Time 0.10715 (0.86256)	Data 0.00708 (0.73088)	Loss 0.7100 (0.7198)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [46][11/60]	Time 0.09225 (0.79253)	Data 0.04617 (0.66864)	Loss 0.7183 (0.7196)	Prec@1 87.50000 (73.86364)	Prec@5 87.50000 (97.72727)
Epoch: [46][12/60]	Time 0.16264 (0.74004)	Data 0.04675 (0.61681)	Loss 1.0849 (0.7501)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (97.91667)
Epoch: [46][13/60]	Time 0.19605 (0.69820)	Data 0.02684 (0.57143)	Loss 1.6190 (0.8169)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (98.07693)
Epoch: [46][14/60]	Time 0.12161 (0.65701)	Data 0.02425 (0.53235)	Loss 0.1396 (0.7685)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [46][15/60]	Time 0.05798 (0.61708)	Data 0.01076 (0.49757)	Loss 1.1288 (0.7926)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (98.33334)
Epoch: [46][16/60]	Time 0.05681 (0.58206)	Data 0.00973 (0.46708)	Loss 1.1823 (0.8169)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (98.43750)
Epoch: [46][17/60]	Time 0.04809 (0.55065)	Data 0.00051 (0.43964)	Loss 0.3627 (0.7902)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (98.52941)
Epoch: [46][18/60]	Time 0.12642 (0.52708)	Data 0.02078 (0.41637)	Loss 2.6001 (0.8907)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (98.61111)
Epoch: [46][19/60]	Time 0.27824 (0.51398)	Data 0.01012 (0.39499)	Loss 0.1237 (0.8504)	Prec@1 100.00000 (74.34210)	Prec@5 100.00000 (98.68421)
Epoch: [46][20/60]	Time 0.29454 (0.50301)	Data 0.00074 (0.37527)	Loss 2.7576 (0.9457)	Prec@1 62.50000 (73.75000)	Prec@5 87.50000 (98.12500)
Epoch: [46][21/60]	Time 0.12148 (0.48484)	Data 0.00077 (0.35744)	Loss 0.6711 (0.9327)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [46][22/60]	Time 0.07552 (0.46624)	Data 0.00066 (0.34122)	Loss 0.8110 (0.9271)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (98.29546)
Epoch: [46][23/60]	Time 0.08646 (0.44973)	Data 0.00879 (0.32677)	Loss 1.1675 (0.9376)	Prec@1 62.50000 (72.82609)	Prec@5 100.00000 (98.36957)
Epoch: [46][24/60]	Time 0.17394 (0.43824)	Data 0.01369 (0.31372)	Loss 0.5877 (0.9230)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (98.43750)
Epoch: [46][25/60]	Time 0.13886 (0.42626)	Data 0.03700 (0.30266)	Loss 0.4563 (0.9043)	Prec@1 87.50000 (73.50000)	Prec@5 100.00000 (98.50000)
Epoch: [46][26/60]	Time 0.24570 (0.41932)	Data 0.06729 (0.29360)	Loss 0.0230 (0.8704)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (98.55769)
Epoch: [46][27/60]	Time 0.12884 (0.40856)	Data 0.02657 (0.28371)	Loss 1.1915 (0.8823)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (98.61111)
Epoch: [46][28/60]	Time 0.18951 (0.40073)	Data 0.04537 (0.27520)	Loss 0.2276 (0.8589)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (98.66072)
Epoch: [46][29/60]	Time 0.05820 (0.38892)	Data 0.00056 (0.26573)	Loss 0.7624 (0.8556)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (98.70689)
Epoch: [46][30/60]	Time 0.05357 (0.37774)	Data 0.00042 (0.25689)	Loss 1.8306 (0.8881)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (98.75001)
Epoch: [46][31/60]	Time 0.04965 (0.36716)	Data 0.00039 (0.24861)	Loss 2.6244 (0.9441)	Prec@1 37.50000 (72.98387)	Prec@5 100.00000 (98.79032)
Epoch: [46][32/60]	Time 0.04968 (0.35724)	Data 0.00046 (0.24086)	Loss 0.9578 (0.9445)	Prec@1 62.50000 (72.65625)	Prec@5 100.00000 (98.82812)
Epoch: [46][33/60]	Time 0.04931 (0.34791)	Data 0.00055 (0.23358)	Loss 0.1528 (0.9206)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (98.86364)
Epoch: [46][34/60]	Time 0.05474 (0.33929)	Data 0.00051 (0.22672)	Loss 1.3162 (0.9322)	Prec@1 62.50000 (72.79412)	Prec@5 100.00000 (98.89706)
Epoch: [46][35/60]	Time 0.03953 (0.33072)	Data 0.00089 (0.22027)	Loss 1.3347 (0.9437)	Prec@1 75.00000 (72.85714)	Prec@5 100.00000 (98.92857)
Epoch: [46][36/60]	Time 0.03167 (0.32241)	Data 0.00051 (0.21416)	Loss 1.2905 (0.9533)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (98.95834)
Epoch: [46][37/60]	Time 0.02964 (0.31450)	Data 0.00044 (0.20839)	Loss 1.6004 (0.9708)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (98.98649)
Epoch: [46][38/60]	Time 0.02917 (0.30699)	Data 0.00131 (0.20294)	Loss 2.5691 (1.0129)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.01316)
Epoch: [46][39/60]	Time 0.03063 (0.29991)	Data 0.00276 (0.19781)	Loss 0.1300 (0.9902)	Prec@1 87.50000 (72.11539)	Prec@5 100.00000 (99.03846)
Epoch: [46][40/60]	Time 0.02924 (0.29314)	Data 0.00165 (0.19290)	Loss 0.2979 (0.9729)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.06250)
Epoch: [46][41/60]	Time 0.02766 (0.28666)	Data 0.00378 (0.18829)	Loss 0.6695 (0.9655)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (99.08537)
Epoch: [46][42/60]	Time 0.02561 (0.28045)	Data 0.00050 (0.18382)	Loss 1.0922 (0.9685)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (99.10715)
Epoch: [46][43/60]	Time 0.02682 (0.27455)	Data 0.00054 (0.17956)	Loss 0.7966 (0.9645)	Prec@1 75.00000 (72.67442)	Prec@5 100.00000 (99.12791)
Epoch: [46][44/60]	Time 0.03124 (0.26902)	Data 0.00384 (0.17556)	Loss 0.8696 (0.9624)	Prec@1 62.50000 (72.44318)	Prec@5 100.00000 (99.14773)
Epoch: [46][45/60]	Time 0.02965 (0.26370)	Data 0.00335 (0.17173)	Loss 0.7463 (0.9576)	Prec@1 87.50000 (72.77778)	Prec@5 100.00000 (99.16667)
Epoch: [46][46/60]	Time 0.02237 (0.25845)	Data 0.00038 (0.16801)	Loss 0.8750 (0.9558)	Prec@1 50.00000 (72.28261)	Prec@5 100.00000 (99.18478)
Epoch: [46][47/60]	Time 0.02278 (0.25344)	Data 0.00044 (0.16444)	Loss 1.0208 (0.9572)	Prec@1 75.00000 (72.34042)	Prec@5 87.50000 (98.93616)
Epoch: [46][48/60]	Time 0.02282 (0.24864)	Data 0.00043 (0.16103)	Loss 0.6001 (0.9497)	Prec@1 75.00000 (72.39584)	Prec@5 100.00000 (98.95834)
Epoch: [46][49/60]	Time 0.02390 (0.24405)	Data 0.00042 (0.15775)	Loss 0.1614 (0.9336)	Prec@1 100.00000 (72.95918)	Prec@5 100.00000 (98.97959)
Epoch: [46][50/60]	Time 0.02357 (0.23964)	Data 0.00049 (0.15460)	Loss 0.6833 (0.9286)	Prec@1 75.00000 (73.00000)	Prec@5 100.00000 (99.00000)
Epoch: [46][51/60]	Time 0.02604 (0.23545)	Data 0.00046 (0.15158)	Loss 0.3384 (0.9171)	Prec@1 75.00000 (73.03922)	Prec@5 100.00000 (99.01961)
Epoch: [46][52/60]	Time 0.02334 (0.23137)	Data 0.00060 (0.14868)	Loss 1.1059 (0.9207)	Prec@1 37.50000 (72.35577)	Prec@5 100.00000 (99.03847)
Epoch: [46][53/60]	Time 0.02291 (0.22744)	Data 0.00041 (0.14588)	Loss 0.5468 (0.9136)	Prec@1 75.00000 (72.40566)	Prec@5 100.00000 (99.05660)
Epoch: [46][54/60]	Time 0.02375 (0.22367)	Data 0.00048 (0.14319)	Loss 1.0896 (0.9169)	Prec@1 75.00000 (72.45370)	Prec@5 100.00000 (99.07407)
Epoch: [46][55/60]	Time 0.02360 (0.22003)	Data 0.00051 (0.14059)	Loss 1.2980 (0.9238)	Prec@1 62.50000 (72.27273)	Prec@5 87.50000 (98.86363)
Epoch: [46][56/60]	Time 0.02289 (0.21651)	Data 0.00054 (0.13809)	Loss 0.6896 (0.9196)	Prec@1 62.50000 (72.09822)	Prec@5 100.00000 (98.88393)
Epoch: [46][57/60]	Time 0.02288 (0.21311)	Data 0.00046 (0.13568)	Loss 1.4006 (0.9281)	Prec@1 62.50000 (71.92982)	Prec@5 87.50000 (98.68421)
Epoch: [46][58/60]	Time 0.02286 (0.20983)	Data 0.00046 (0.13335)	Loss 0.6715 (0.9237)	Prec@1 62.50000 (71.76724)	Prec@5 100.00000 (98.70689)
Epoch: [46][59/60]	Time 0.02355 (0.20667)	Data 0.00042 (0.13109)	Loss 0.9626 (0.9243)	Prec@1 75.00000 (71.82204)	Prec@5 100.00000 (98.72881)
Epoch: [46][60/60]	Time 0.02289 (0.20361)	Data 0.00055 (0.12892)	Loss 0.6350 (0.9195)	Prec@1 87.50000 (72.08334)	Prec@5 100.00000 (98.75001)
train at epoch 47
train at epoch 47
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [47][0/272]	 lr: 0.00400	Time 8.589 (8.589)	Data 7.246 (7.246)	Loss 0.0153 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][10/272]	 lr: 0.00400	Time 0.441 (1.301)	Data 0.140 (0.779)	Loss 0.0279 (0.0209)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][20/272]	 lr: 0.00400	Time 0.463 (0.874)	Data 0.133 (0.472)	Loss 0.0158 (0.0178)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][30/272]	 lr: 0.00400	Time 0.487 (0.734)	Data 0.126 (0.361)	Loss 0.0338 (0.0171)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][40/272]	 lr: 0.00400	Time 0.456 (0.661)	Data 0.128 (0.306)	Loss 0.0329 (0.0173)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][50/272]	 lr: 0.00400	Time 0.412 (0.619)	Data 0.109 (0.271)	Loss 0.0301 (0.0180)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][60/272]	 lr: 0.00400	Time 0.398 (0.589)	Data 0.121 (0.247)	Loss 0.0079 (0.0175)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [47][70/272]	 lr: 0.00400	Time 0.403 (0.567)	Data 0.124 (0.231)	Loss 0.0132 (0.0174)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][80/272]	 lr: 0.00400	Time 0.379 (0.551)	Data 0.130 (0.219)	Loss 0.0238 (0.0173)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][90/272]	 lr: 0.00400	Time 0.491 (0.539)	Data 0.119 (0.208)	Loss 0.0087 (0.0170)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][100/272]	 lr: 0.00400	Time 0.495 (0.530)	Data 0.123 (0.200)	Loss 0.0136 (0.0172)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][110/272]	 lr: 0.00400	Time 0.450 (0.522)	Data 0.124 (0.193)	Loss 0.0357 (0.0188)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [47][120/272]	 lr: 0.00400	Time 0.401 (0.516)	Data 0.126 (0.188)	Loss 0.0182 (0.0184)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [47][130/272]	 lr: 0.00400	Time 0.393 (0.511)	Data 0.136 (0.183)	Loss 0.0038 (0.0200)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [47][140/272]	 lr: 0.00400	Time 0.417 (0.506)	Data 0.099 (0.179)	Loss 0.0168 (0.0200)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [47][150/272]	 lr: 0.00400	Time 0.458 (0.502)	Data 0.137 (0.176)	Loss 0.0717 (0.0201)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [47][160/272]	 lr: 0.00400	Time 0.392 (0.498)	Data 0.129 (0.173)	Loss 0.0226 (0.0198)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [47][170/272]	 lr: 0.00400	Time 0.410 (0.495)	Data 0.128 (0.171)	Loss 0.0087 (0.0201)	Prec@1 100.00000 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [47][180/272]	 lr: 0.00400	Time 0.407 (0.492)	Data 0.131 (0.169)	Loss 0.0296 (0.0198)	Prec@1 100.00000 (99.91368)	Prec@5 100.00000 (100.00001)
Epoch: [47][190/272]	 lr: 0.00400	Time 0.386 (0.489)	Data 0.129 (0.167)	Loss 0.0244 (0.0197)	Prec@1 100.00000 (99.91820)	Prec@5 100.00000 (100.00000)
Epoch: [47][200/272]	 lr: 0.00400	Time 0.534 (0.486)	Data 0.127 (0.165)	Loss 0.0128 (0.0197)	Prec@1 100.00000 (99.92226)	Prec@5 100.00000 (100.00000)
Epoch: [47][210/272]	 lr: 0.00400	Time 0.449 (0.484)	Data 0.143 (0.163)	Loss 0.0105 (0.0196)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [47][220/272]	 lr: 0.00400	Time 0.460 (0.482)	Data 0.142 (0.162)	Loss 0.0123 (0.0199)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [47][230/272]	 lr: 0.00400	Time 0.370 (0.480)	Data 0.127 (0.161)	Loss 0.0185 (0.0200)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [47][240/272]	 lr: 0.00400	Time 0.347 (0.478)	Data 0.129 (0.160)	Loss 0.0066 (0.0200)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [47][250/272]	 lr: 0.00400	Time 0.238 (0.468)	Data 0.128 (0.158)	Loss 0.0075 (0.0203)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [47][260/272]	 lr: 0.00400	Time 0.238 (0.460)	Data 0.128 (0.157)	Loss 0.0135 (0.0203)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [47][270/272]	 lr: 0.00400	Time 0.236 (0.451)	Data 0.128 (0.156)	Loss 0.0049 (0.0202)	Prec@1 100.00000 (99.90775)	Prec@5 100.00000 (100.00000)
validation at epoch 47
validation at epoch 47
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [47][1/60]	Time 5.67155 (5.67155)	Data 5.59711 (5.59711)	Loss 0.3665 (0.3665)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [47][2/60]	Time 0.25509 (2.96332)	Data 0.04921 (2.82316)	Loss 0.4267 (0.3966)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [47][3/60]	Time 0.16482 (2.03048)	Data 0.06544 (1.90392)	Loss 1.1955 (0.6629)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [47][4/60]	Time 1.58533 (1.91919)	Data 1.45930 (1.79276)	Loss 0.1974 (0.5465)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [47][5/60]	Time 0.31921 (1.59920)	Data 0.26941 (1.48809)	Loss 0.3883 (0.5149)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][6/60]	Time 0.07190 (1.34465)	Data 0.00606 (1.24109)	Loss 0.3963 (0.4951)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [47][7/60]	Time 0.06762 (1.16221)	Data 0.00174 (1.06404)	Loss 1.3866 (0.6225)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [47][8/60]	Time 0.21262 (1.04352)	Data 0.05960 (0.93848)	Loss 1.3508 (0.7135)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [47][9/60]	Time 0.15336 (0.94461)	Data 0.01258 (0.83561)	Loss 0.5985 (0.7007)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [47][10/60]	Time 0.18868 (0.86902)	Data 0.00267 (0.75231)	Loss 0.7402 (0.7047)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [47][11/60]	Time 0.05613 (0.79512)	Data 0.01083 (0.68491)	Loss 0.7095 (0.7051)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [47][12/60]	Time 0.10754 (0.73782)	Data 0.01035 (0.62869)	Loss 1.1432 (0.7416)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [47][13/60]	Time 0.08780 (0.68782)	Data 0.00104 (0.58041)	Loss 1.7997 (0.8230)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][14/60]	Time 0.14962 (0.64938)	Data 0.04027 (0.54183)	Loss 0.1058 (0.7718)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [47][15/60]	Time 0.27158 (0.62419)	Data 0.11088 (0.51310)	Loss 1.1810 (0.7991)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [47][16/60]	Time 0.11141 (0.59214)	Data 0.06422 (0.48505)	Loss 1.0466 (0.8145)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][17/60]	Time 0.05214 (0.56038)	Data 0.01367 (0.45732)	Loss 0.3463 (0.7870)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [47][18/60]	Time 0.11250 (0.53549)	Data 0.04938 (0.43465)	Loss 2.4041 (0.8768)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (100.00000)
Epoch: [47][19/60]	Time 0.17822 (0.51669)	Data 0.06396 (0.41514)	Loss 0.1173 (0.8369)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (100.00000)
Epoch: [47][20/60]	Time 0.19815 (0.50076)	Data 0.03909 (0.39634)	Loss 2.3830 (0.9142)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [47][21/60]	Time 0.18529 (0.48574)	Data 0.01129 (0.37801)	Loss 0.6001 (0.8992)	Prec@1 62.50000 (75.59524)	Prec@5 100.00000 (100.00000)
Epoch: [47][22/60]	Time 0.11386 (0.46884)	Data 0.00114 (0.36087)	Loss 0.6658 (0.8886)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (100.00000)
Epoch: [47][23/60]	Time 0.20092 (0.45719)	Data 0.01163 (0.34569)	Loss 1.0539 (0.8958)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][24/60]	Time 0.15824 (0.44473)	Data 0.01347 (0.33185)	Loss 0.5513 (0.8814)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [47][25/60]	Time 0.13257 (0.43225)	Data 0.00942 (0.31895)	Loss 0.4188 (0.8629)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (100.00000)
Epoch: [47][26/60]	Time 0.11814 (0.42016)	Data 0.01375 (0.30721)	Loss 0.0445 (0.8314)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (100.00000)
Epoch: [47][27/60]	Time 0.12178 (0.40911)	Data 0.00969 (0.29619)	Loss 0.9488 (0.8358)	Prec@1 62.50000 (75.92593)	Prec@5 100.00000 (100.00000)
Epoch: [47][28/60]	Time 0.18996 (0.40129)	Data 0.02273 (0.28643)	Loss 0.3609 (0.8188)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (100.00001)
Epoch: [47][29/60]	Time 0.07802 (0.39014)	Data 0.02500 (0.27741)	Loss 0.7026 (0.8148)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (100.00000)
Epoch: [47][30/60]	Time 0.05882 (0.37910)	Data 0.00044 (0.26818)	Loss 1.6989 (0.8443)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [47][31/60]	Time 0.08823 (0.36971)	Data 0.00048 (0.25954)	Loss 2.4865 (0.8973)	Prec@1 37.50000 (74.59677)	Prec@5 87.50000 (99.59677)
Epoch: [47][32/60]	Time 0.08619 (0.36085)	Data 0.00079 (0.25146)	Loss 0.7706 (0.8933)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (99.60938)
Epoch: [47][33/60]	Time 0.10272 (0.35303)	Data 0.00052 (0.24385)	Loss 0.1579 (0.8710)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [47][34/60]	Time 0.03551 (0.34369)	Data 0.00049 (0.23670)	Loss 1.1848 (0.8803)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (99.63235)
Epoch: [47][35/60]	Time 0.03668 (0.33492)	Data 0.00051 (0.22995)	Loss 1.4017 (0.8952)	Prec@1 75.00000 (74.64286)	Prec@5 87.50000 (99.28571)
Epoch: [47][36/60]	Time 0.03440 (0.32657)	Data 0.00046 (0.22357)	Loss 1.0807 (0.9003)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [47][37/60]	Time 0.02716 (0.31848)	Data 0.00047 (0.21754)	Loss 1.4601 (0.9154)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (99.32433)
Epoch: [47][38/60]	Time 0.02708 (0.31081)	Data 0.00068 (0.21184)	Loss 2.2568 (0.9507)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (99.34211)
Epoch: [47][39/60]	Time 0.02855 (0.30357)	Data 0.00069 (0.20642)	Loss 0.1596 (0.9305)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (99.35898)
Epoch: [47][40/60]	Time 0.02369 (0.29658)	Data 0.00050 (0.20127)	Loss 0.2914 (0.9145)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (99.37500)
Epoch: [47][41/60]	Time 0.02385 (0.28992)	Data 0.00058 (0.19638)	Loss 0.5333 (0.9052)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (99.39024)
Epoch: [47][42/60]	Time 0.02294 (0.28357)	Data 0.00071 (0.19172)	Loss 1.0363 (0.9083)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (99.40476)
Epoch: [47][43/60]	Time 0.02274 (0.27750)	Data 0.00043 (0.18727)	Loss 0.6555 (0.9024)	Prec@1 62.50000 (73.83721)	Prec@5 100.00000 (99.41860)
Epoch: [47][44/60]	Time 0.02316 (0.27172)	Data 0.00049 (0.18303)	Loss 0.7796 (0.8996)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [47][45/60]	Time 0.02346 (0.26620)	Data 0.00042 (0.17897)	Loss 0.7495 (0.8963)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.44445)
Epoch: [47][46/60]	Time 0.02303 (0.26092)	Data 0.00046 (0.17509)	Loss 1.1382 (0.9016)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (99.45652)
Epoch: [47][47/60]	Time 0.02273 (0.25585)	Data 0.00044 (0.17137)	Loss 1.0026 (0.9037)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.20213)
Epoch: [47][48/60]	Time 0.02289 (0.25100)	Data 0.00047 (0.16781)	Loss 0.5766 (0.8969)	Prec@1 75.00000 (73.69792)	Prec@5 100.00000 (99.21875)
Epoch: [47][49/60]	Time 0.02370 (0.24636)	Data 0.00041 (0.16440)	Loss 0.3067 (0.8848)	Prec@1 87.50000 (73.97959)	Prec@5 100.00000 (99.23470)
Epoch: [47][50/60]	Time 0.02326 (0.24190)	Data 0.00042 (0.16112)	Loss 0.7711 (0.8826)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (99.25000)
Epoch: [47][51/60]	Time 0.02245 (0.23759)	Data 0.00044 (0.15797)	Loss 0.2486 (0.8701)	Prec@1 75.00000 (74.01961)	Prec@5 100.00000 (99.26471)
Epoch: [47][52/60]	Time 0.02265 (0.23346)	Data 0.00047 (0.15494)	Loss 0.9072 (0.8708)	Prec@1 50.00000 (73.55769)	Prec@5 87.50000 (99.03847)
Epoch: [47][53/60]	Time 0.02264 (0.22948)	Data 0.00043 (0.15202)	Loss 0.6109 (0.8659)	Prec@1 75.00000 (73.58491)	Prec@5 100.00000 (99.05660)
Epoch: [47][54/60]	Time 0.02238 (0.22565)	Data 0.00048 (0.14922)	Loss 0.8848 (0.8663)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.07407)
Epoch: [47][55/60]	Time 0.02311 (0.22196)	Data 0.00047 (0.14651)	Loss 1.1630 (0.8717)	Prec@1 62.50000 (73.40909)	Prec@5 87.50000 (98.86363)
Epoch: [47][56/60]	Time 0.02221 (0.21840)	Data 0.00052 (0.14390)	Loss 0.8339 (0.8710)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (98.88393)
Epoch: [47][57/60]	Time 0.02275 (0.21497)	Data 0.00042 (0.14139)	Loss 1.5467 (0.8829)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (98.68421)
Epoch: [47][58/60]	Time 0.02298 (0.21166)	Data 0.00045 (0.13896)	Loss 0.8119 (0.8816)	Prec@1 62.50000 (73.06034)	Prec@5 100.00000 (98.70689)
Epoch: [47][59/60]	Time 0.02446 (0.20848)	Data 0.00054 (0.13661)	Loss 0.8477 (0.8811)	Prec@1 87.50000 (73.30508)	Prec@5 100.00000 (98.72881)
Epoch: [47][60/60]	Time 0.02332 (0.20540)	Data 0.00050 (0.13434)	Loss 0.5101 (0.8749)	Prec@1 87.50000 (73.54167)	Prec@5 100.00000 (98.75001)
train at epoch 48
train at epoch 48
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [48][0/272]	 lr: 0.00400	Time 8.655 (8.655)	Data 7.925 (7.925)	Loss 0.0448 (0.0448)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][10/272]	 lr: 0.00400	Time 0.459 (1.312)	Data 0.129 (0.831)	Loss 0.0162 (0.0195)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][20/272]	 lr: 0.00400	Time 0.437 (0.890)	Data 0.128 (0.497)	Loss 0.0091 (0.0175)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][30/272]	 lr: 0.00400	Time 0.323 (0.738)	Data 0.120 (0.379)	Loss 0.0215 (0.0180)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][40/272]	 lr: 0.00400	Time 0.439 (0.669)	Data 0.135 (0.319)	Loss 0.0272 (0.0197)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][50/272]	 lr: 0.00400	Time 0.428 (0.621)	Data 0.132 (0.281)	Loss 0.0180 (0.0190)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][60/272]	 lr: 0.00400	Time 0.434 (0.593)	Data 0.127 (0.256)	Loss 0.0057 (0.0206)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [48][70/272]	 lr: 0.00400	Time 0.373 (0.571)	Data 0.106 (0.238)	Loss 0.0096 (0.0199)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][80/272]	 lr: 0.00400	Time 0.455 (0.551)	Data 0.130 (0.225)	Loss 0.0135 (0.0206)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [48][90/272]	 lr: 0.00400	Time 0.498 (0.539)	Data 0.142 (0.215)	Loss 0.0272 (0.0203)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [48][100/272]	 lr: 0.00400	Time 0.389 (0.529)	Data 0.127 (0.206)	Loss 0.0589 (0.0205)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [48][110/272]	 lr: 0.00400	Time 0.488 (0.523)	Data 0.126 (0.199)	Loss 0.0198 (0.0204)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [48][120/272]	 lr: 0.00400	Time 0.433 (0.515)	Data 0.123 (0.193)	Loss 0.0163 (0.0197)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [48][130/272]	 lr: 0.00400	Time 0.551 (0.509)	Data 0.141 (0.188)	Loss 0.0320 (0.0203)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [48][140/272]	 lr: 0.00400	Time 0.444 (0.504)	Data 0.135 (0.184)	Loss 0.0255 (0.0201)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [48][150/272]	 lr: 0.00400	Time 0.363 (0.500)	Data 0.128 (0.181)	Loss 0.0244 (0.0202)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [48][160/272]	 lr: 0.00400	Time 0.533 (0.497)	Data 0.129 (0.177)	Loss 0.0064 (0.0202)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [48][170/272]	 lr: 0.00400	Time 0.509 (0.492)	Data 0.123 (0.175)	Loss 0.0434 (0.0206)	Prec@1 96.87500 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [48][180/272]	 lr: 0.00400	Time 0.467 (0.489)	Data 0.135 (0.172)	Loss 0.0064 (0.0207)	Prec@1 100.00000 (99.91368)	Prec@5 100.00000 (100.00001)
Epoch: [48][190/272]	 lr: 0.00400	Time 0.479 (0.488)	Data 0.120 (0.170)	Loss 0.0064 (0.0208)	Prec@1 100.00000 (99.91820)	Prec@5 100.00000 (100.00000)
Epoch: [48][200/272]	 lr: 0.00400	Time 0.277 (0.485)	Data 0.129 (0.168)	Loss 0.0093 (0.0204)	Prec@1 100.00000 (99.92226)	Prec@5 100.00000 (100.00000)
Epoch: [48][210/272]	 lr: 0.00400	Time 0.487 (0.482)	Data 0.125 (0.166)	Loss 0.0533 (0.0202)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [48][220/272]	 lr: 0.00400	Time 0.471 (0.481)	Data 0.129 (0.165)	Loss 0.0182 (0.0199)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [48][230/272]	 lr: 0.00400	Time 0.463 (0.479)	Data 0.129 (0.163)	Loss 0.0278 (0.0198)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [48][240/272]	 lr: 0.00400	Time 0.283 (0.476)	Data 0.128 (0.162)	Loss 0.0138 (0.0196)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [48][250/272]	 lr: 0.00400	Time 0.241 (0.466)	Data 0.128 (0.160)	Loss 0.0121 (0.0194)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [48][260/272]	 lr: 0.00400	Time 0.238 (0.458)	Data 0.129 (0.159)	Loss 0.0135 (0.0195)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [48][270/272]	 lr: 0.00400	Time 0.242 (0.449)	Data 0.129 (0.158)	Loss 0.0212 (0.0193)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 48
validation at epoch 48
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [48][1/60]	Time 7.44308 (7.44308)	Data 7.38710 (7.38710)	Loss 0.3752 (0.3752)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][2/60]	Time 0.11533 (3.77920)	Data 0.01332 (3.70021)	Loss 0.3887 (0.3819)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [48][3/60]	Time 0.05713 (2.53851)	Data 0.00088 (2.46710)	Loss 1.1599 (0.6412)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [48][4/60]	Time 0.06303 (1.91964)	Data 0.00096 (1.85056)	Loss 0.1672 (0.5227)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [48][5/60]	Time 0.16696 (1.56910)	Data 0.00769 (1.48199)	Loss 0.3174 (0.4817)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][6/60]	Time 0.12216 (1.32795)	Data 0.00202 (1.23533)	Loss 0.2604 (0.4448)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [48][7/60]	Time 0.12887 (1.15665)	Data 0.01393 (1.06084)	Loss 1.5046 (0.5962)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [48][8/60]	Time 0.20142 (1.03725)	Data 0.02086 (0.93084)	Loss 1.4814 (0.7068)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [48][9/60]	Time 0.18599 (0.94266)	Data 0.01045 (0.82858)	Loss 0.6114 (0.6962)	Prec@1 87.50000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [48][10/60]	Time 0.05081 (0.85348)	Data 0.00924 (0.74664)	Loss 0.7435 (0.7010)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [48][11/60]	Time 0.22183 (0.79606)	Data 0.00230 (0.67898)	Loss 0.7217 (0.7028)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [48][12/60]	Time 0.11054 (0.73893)	Data 0.00292 (0.62264)	Loss 1.2358 (0.7473)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [48][13/60]	Time 0.02702 (0.68417)	Data 0.00061 (0.57479)	Loss 1.8389 (0.8312)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [48][14/60]	Time 0.09800 (0.64230)	Data 0.00744 (0.53427)	Loss 0.0684 (0.7767)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [48][15/60]	Time 0.11477 (0.60713)	Data 0.02398 (0.50025)	Loss 1.3762 (0.8167)	Prec@1 50.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [48][16/60]	Time 0.09521 (0.57513)	Data 0.00289 (0.46916)	Loss 1.0345 (0.8303)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [48][17/60]	Time 0.10581 (0.54753)	Data 0.00590 (0.44191)	Loss 0.3408 (0.8015)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [48][18/60]	Time 0.23048 (0.52991)	Data 0.06810 (0.42114)	Loss 2.4648 (0.8939)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [48][19/60]	Time 0.14076 (0.50943)	Data 0.01797 (0.39992)	Loss 0.1013 (0.8522)	Prec@1 100.00000 (78.28947)	Prec@5 100.00000 (100.00000)
Epoch: [48][20/60]	Time 0.16003 (0.49196)	Data 0.00700 (0.38028)	Loss 2.4388 (0.9315)	Prec@1 62.50000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [48][21/60]	Time 0.19173 (0.47766)	Data 0.03181 (0.36368)	Loss 0.6111 (0.9163)	Prec@1 62.50000 (76.78571)	Prec@5 100.00000 (100.00000)
Epoch: [48][22/60]	Time 0.13705 (0.46218)	Data 0.00684 (0.34746)	Loss 0.6379 (0.9036)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (100.00000)
Epoch: [48][23/60]	Time 0.08278 (0.44569)	Data 0.00223 (0.33245)	Loss 1.0531 (0.9101)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (100.00000)
Epoch: [48][24/60]	Time 0.13807 (0.43287)	Data 0.01639 (0.31928)	Loss 0.5237 (0.8940)	Prec@1 75.00000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [48][25/60]	Time 0.10042 (0.41957)	Data 0.00565 (0.30674)	Loss 0.4040 (0.8744)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (100.00000)
Epoch: [48][26/60]	Time 0.19505 (0.41093)	Data 0.00670 (0.29520)	Loss 0.0421 (0.8424)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (100.00000)
Epoch: [48][27/60]	Time 0.10472 (0.39959)	Data 0.01619 (0.28486)	Loss 0.9292 (0.8456)	Prec@1 62.50000 (76.85185)	Prec@5 100.00000 (100.00000)
Epoch: [48][28/60]	Time 0.09772 (0.38881)	Data 0.00866 (0.27500)	Loss 0.3389 (0.8275)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (100.00001)
Epoch: [48][29/60]	Time 0.10788 (0.37912)	Data 0.00044 (0.26553)	Loss 0.6671 (0.8220)	Prec@1 75.00000 (77.15517)	Prec@5 100.00000 (100.00000)
Epoch: [48][30/60]	Time 0.11852 (0.37044)	Data 0.00044 (0.25670)	Loss 1.7166 (0.8518)	Prec@1 62.50000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [48][31/60]	Time 0.08751 (0.36131)	Data 0.02211 (0.24913)	Loss 2.6932 (0.9112)	Prec@1 25.00000 (75.00000)	Prec@5 87.50000 (99.59677)
Epoch: [48][32/60]	Time 0.05661 (0.35179)	Data 0.00046 (0.24136)	Loss 0.7185 (0.9052)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.60938)
Epoch: [48][33/60]	Time 0.07655 (0.34345)	Data 0.00047 (0.23406)	Loss 0.1651 (0.8828)	Prec@1 87.50000 (75.37879)	Prec@5 100.00000 (99.62122)
Epoch: [48][34/60]	Time 0.05267 (0.33490)	Data 0.00045 (0.22719)	Loss 1.1275 (0.8900)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.63235)
Epoch: [48][35/60]	Time 0.03580 (0.32635)	Data 0.00070 (0.22072)	Loss 1.5405 (0.9085)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.28571)
Epoch: [48][36/60]	Time 0.03385 (0.31823)	Data 0.00059 (0.21460)	Loss 1.1097 (0.9141)	Prec@1 62.50000 (74.65278)	Prec@5 100.00000 (99.30556)
Epoch: [48][37/60]	Time 0.03397 (0.31054)	Data 0.00054 (0.20882)	Loss 1.3977 (0.9272)	Prec@1 62.50000 (74.32433)	Prec@5 100.00000 (99.32433)
Epoch: [48][38/60]	Time 0.03301 (0.30324)	Data 0.00047 (0.20333)	Loss 2.2078 (0.9609)	Prec@1 50.00000 (73.68421)	Prec@5 100.00000 (99.34211)
Epoch: [48][39/60]	Time 0.03276 (0.29630)	Data 0.00061 (0.19814)	Loss 0.2137 (0.9418)	Prec@1 87.50000 (74.03846)	Prec@5 100.00000 (99.35898)
Epoch: [48][40/60]	Time 0.03479 (0.28977)	Data 0.00079 (0.19320)	Loss 0.3430 (0.9268)	Prec@1 87.50000 (74.37500)	Prec@5 100.00000 (99.37500)
Epoch: [48][41/60]	Time 0.03255 (0.28349)	Data 0.00046 (0.18850)	Loss 0.5188 (0.9168)	Prec@1 75.00000 (74.39024)	Prec@5 100.00000 (99.39024)
Epoch: [48][42/60]	Time 0.02704 (0.27739)	Data 0.00045 (0.18402)	Loss 1.0297 (0.9195)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (99.40476)
Epoch: [48][43/60]	Time 0.02683 (0.27156)	Data 0.00048 (0.17976)	Loss 0.6668 (0.9136)	Prec@1 62.50000 (74.12791)	Prec@5 100.00000 (99.41860)
Epoch: [48][44/60]	Time 0.02315 (0.26591)	Data 0.00047 (0.17568)	Loss 0.7485 (0.9099)	Prec@1 75.00000 (74.14773)	Prec@5 100.00000 (99.43182)
Epoch: [48][45/60]	Time 0.02328 (0.26052)	Data 0.00050 (0.17179)	Loss 0.7978 (0.9074)	Prec@1 87.50000 (74.44444)	Prec@5 100.00000 (99.44445)
Epoch: [48][46/60]	Time 0.02176 (0.25533)	Data 0.00042 (0.16806)	Loss 1.1128 (0.9119)	Prec@1 50.00000 (73.91305)	Prec@5 100.00000 (99.45652)
Epoch: [48][47/60]	Time 0.02166 (0.25036)	Data 0.00044 (0.16450)	Loss 0.9052 (0.9117)	Prec@1 75.00000 (73.93616)	Prec@5 87.50000 (99.20213)
Epoch: [48][48/60]	Time 0.02167 (0.24560)	Data 0.00045 (0.16108)	Loss 0.5125 (0.9034)	Prec@1 75.00000 (73.95834)	Prec@5 100.00000 (99.21875)
Epoch: [48][49/60]	Time 0.02245 (0.24104)	Data 0.00046 (0.15780)	Loss 0.3153 (0.8914)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.23470)
Epoch: [48][50/60]	Time 0.02269 (0.23667)	Data 0.00045 (0.15465)	Loss 0.6474 (0.8865)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.25000)
Epoch: [48][51/60]	Time 0.02131 (0.23245)	Data 0.00045 (0.15163)	Loss 0.2036 (0.8731)	Prec@1 87.50000 (74.50980)	Prec@5 100.00000 (99.26471)
Epoch: [48][52/60]	Time 0.02178 (0.22840)	Data 0.00051 (0.14872)	Loss 0.8032 (0.8718)	Prec@1 50.00000 (74.03847)	Prec@5 87.50000 (99.03847)
Epoch: [48][53/60]	Time 0.02162 (0.22450)	Data 0.00041 (0.14593)	Loss 0.4944 (0.8647)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (99.05660)
Epoch: [48][54/60]	Time 0.02199 (0.22075)	Data 0.00045 (0.14323)	Loss 0.8251 (0.8639)	Prec@1 75.00000 (74.07407)	Prec@5 100.00000 (99.07407)
Epoch: [48][55/60]	Time 0.02164 (0.21713)	Data 0.00043 (0.14063)	Loss 1.0441 (0.8672)	Prec@1 62.50000 (73.86363)	Prec@5 87.50000 (98.86363)
Epoch: [48][56/60]	Time 0.02698 (0.21373)	Data 0.00050 (0.13813)	Loss 0.7812 (0.8657)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (98.88393)
Epoch: [48][57/60]	Time 0.02300 (0.21039)	Data 0.00093 (0.13573)	Loss 1.4975 (0.8768)	Prec@1 62.50000 (73.90351)	Prec@5 87.50000 (98.68421)
Epoch: [48][58/60]	Time 0.02191 (0.20714)	Data 0.00043 (0.13339)	Loss 0.7867 (0.8752)	Prec@1 75.00000 (73.92242)	Prec@5 100.00000 (98.70689)
Epoch: [48][59/60]	Time 0.02201 (0.20400)	Data 0.00073 (0.13114)	Loss 0.7681 (0.8734)	Prec@1 87.50000 (74.15254)	Prec@5 100.00000 (98.72881)
Epoch: [48][60/60]	Time 0.02198 (0.20097)	Data 0.00049 (0.12897)	Loss 0.4656 (0.8666)	Prec@1 87.50000 (74.37501)	Prec@5 100.00000 (98.75001)
train at epoch 49
train at epoch 49
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [49][0/272]	 lr: 0.00400	Time 7.939 (7.939)	Data 7.037 (7.037)	Loss 0.0627 (0.0627)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [49][10/272]	 lr: 0.00400	Time 0.386 (1.265)	Data 0.153 (0.778)	Loss 0.0116 (0.0176)	Prec@1 100.00000 (99.71591)	Prec@5 100.00000 (100.00000)
Epoch: [49][20/272]	 lr: 0.00400	Time 0.478 (0.860)	Data 0.128 (0.471)	Loss 0.0081 (0.0156)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [49][30/272]	 lr: 0.00400	Time 0.457 (0.719)	Data 0.140 (0.361)	Loss 0.0161 (0.0152)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [49][40/272]	 lr: 0.00400	Time 0.437 (0.657)	Data 0.125 (0.305)	Loss 0.0145 (0.0154)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [49][50/272]	 lr: 0.00400	Time 0.505 (0.613)	Data 0.131 (0.270)	Loss 0.0153 (0.0151)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [49][60/272]	 lr: 0.00400	Time 0.516 (0.586)	Data 0.129 (0.248)	Loss 0.0324 (0.0151)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [49][70/272]	 lr: 0.00400	Time 0.430 (0.566)	Data 0.148 (0.231)	Loss 0.0131 (0.0157)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [49][80/272]	 lr: 0.00400	Time 0.593 (0.556)	Data 0.127 (0.218)	Loss 0.0117 (0.0165)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [49][90/272]	 lr: 0.00400	Time 0.478 (0.541)	Data 0.126 (0.208)	Loss 0.0255 (0.0178)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [49][100/272]	 lr: 0.00400	Time 0.369 (0.531)	Data 0.130 (0.200)	Loss 0.0099 (0.0172)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [49][110/272]	 lr: 0.00400	Time 0.370 (0.523)	Data 0.111 (0.193)	Loss 0.0053 (0.0168)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [49][120/272]	 lr: 0.00400	Time 0.397 (0.516)	Data 0.129 (0.188)	Loss 0.0117 (0.0169)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [49][130/272]	 lr: 0.00400	Time 0.495 (0.510)	Data 0.138 (0.184)	Loss 0.0538 (0.0171)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [49][140/272]	 lr: 0.00400	Time 0.384 (0.505)	Data 0.137 (0.180)	Loss 0.0053 (0.0169)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [49][150/272]	 lr: 0.00400	Time 0.413 (0.499)	Data 0.110 (0.176)	Loss 0.0200 (0.0170)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [49][160/272]	 lr: 0.00400	Time 0.421 (0.495)	Data 0.128 (0.173)	Loss 0.0257 (0.0174)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [49][170/272]	 lr: 0.00400	Time 0.409 (0.492)	Data 0.110 (0.170)	Loss 0.0384 (0.0175)	Prec@1 100.00000 (99.96345)	Prec@5 100.00000 (100.00000)
Epoch: [49][180/272]	 lr: 0.00400	Time 0.540 (0.489)	Data 0.142 (0.168)	Loss 0.0068 (0.0177)	Prec@1 100.00000 (99.96548)	Prec@5 100.00000 (100.00001)
Epoch: [49][190/272]	 lr: 0.00400	Time 0.532 (0.486)	Data 0.127 (0.166)	Loss 0.0242 (0.0178)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [49][200/272]	 lr: 0.00400	Time 0.490 (0.484)	Data 0.142 (0.164)	Loss 0.0231 (0.0176)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [49][210/272]	 lr: 0.00400	Time 0.448 (0.483)	Data 0.152 (0.162)	Loss 0.0071 (0.0175)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [49][220/272]	 lr: 0.00400	Time 0.447 (0.481)	Data 0.126 (0.161)	Loss 0.0136 (0.0173)	Prec@1 100.00000 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [49][230/272]	 lr: 0.00400	Time 0.404 (0.478)	Data 0.114 (0.159)	Loss 0.0098 (0.0178)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [49][240/272]	 lr: 0.00400	Time 0.270 (0.477)	Data 0.124 (0.158)	Loss 0.0045 (0.0177)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [49][250/272]	 lr: 0.00400	Time 0.238 (0.467)	Data 0.128 (0.157)	Loss 0.0243 (0.0177)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [49][260/272]	 lr: 0.00400	Time 0.241 (0.458)	Data 0.129 (0.156)	Loss 0.0341 (0.0179)	Prec@1 100.00000 (99.94013)	Prec@5 100.00000 (100.00000)
Epoch: [49][270/272]	 lr: 0.00400	Time 0.239 (0.450)	Data 0.128 (0.155)	Loss 0.0064 (0.0183)	Prec@1 100.00000 (99.94234)	Prec@5 100.00000 (100.00000)
validation at epoch 49
validation at epoch 49
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [49][1/60]	Time 3.77688 (3.77688)	Data 3.68606 (3.68606)	Loss 0.3503 (0.3503)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [49][2/60]	Time 2.17383 (2.97535)	Data 2.03901 (2.86253)	Loss 0.4400 (0.3952)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [49][3/60]	Time 0.51455 (2.15508)	Data 0.16637 (1.96381)	Loss 1.1987 (0.6630)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [49][4/60]	Time 1.27526 (1.93513)	Data 1.22617 (1.77940)	Loss 0.2094 (0.5496)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [49][5/60]	Time 0.23447 (1.59500)	Data 0.01260 (1.42604)	Loss 0.4022 (0.5201)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [49][6/60]	Time 0.12171 (1.34945)	Data 0.01433 (1.19076)	Loss 0.3739 (0.4958)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [49][7/60]	Time 0.12258 (1.17418)	Data 0.01745 (1.02314)	Loss 1.4767 (0.6359)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [49][8/60]	Time 0.14437 (1.04546)	Data 0.02557 (0.89844)	Loss 1.4784 (0.7412)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [49][9/60]	Time 0.07506 (0.93763)	Data 0.00051 (0.79867)	Loss 0.5680 (0.7220)	Prec@1 87.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [49][10/60]	Time 0.14737 (0.85861)	Data 0.03597 (0.72240)	Loss 0.7328 (0.7230)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [49][11/60]	Time 0.10995 (0.79055)	Data 0.00479 (0.65717)	Loss 0.7156 (0.7224)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [49][12/60]	Time 0.13104 (0.73559)	Data 0.01538 (0.60368)	Loss 1.2489 (0.7663)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [49][13/60]	Time 0.14954 (0.69051)	Data 0.01660 (0.55852)	Loss 1.7840 (0.8445)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [49][14/60]	Time 0.09455 (0.64794)	Data 0.02710 (0.52056)	Loss 0.0749 (0.7896)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [49][15/60]	Time 0.11313 (0.61229)	Data 0.01935 (0.48715)	Loss 1.3830 (0.8291)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [49][16/60]	Time 0.10718 (0.58072)	Data 0.00050 (0.45673)	Loss 1.1095 (0.8467)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [49][17/60]	Time 0.07244 (0.55082)	Data 0.02263 (0.43120)	Loss 0.3374 (0.8167)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [49][18/60]	Time 0.13300 (0.52761)	Data 0.01381 (0.40801)	Loss 2.6227 (0.9170)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [49][19/60]	Time 0.14701 (0.50757)	Data 0.01027 (0.38708)	Loss 0.0991 (0.8740)	Prec@1 100.00000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [49][20/60]	Time 0.16945 (0.49067)	Data 0.03734 (0.36959)	Loss 2.5935 (0.9599)	Prec@1 62.50000 (75.62500)	Prec@5 87.50000 (99.37500)
Epoch: [49][21/60]	Time 0.13145 (0.47356)	Data 0.00251 (0.35211)	Loss 0.6207 (0.9438)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.40476)
Epoch: [49][22/60]	Time 0.18947 (0.46065)	Data 0.04425 (0.33812)	Loss 0.7351 (0.9343)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.43182)
Epoch: [49][23/60]	Time 0.20978 (0.44974)	Data 0.03418 (0.32490)	Loss 1.0417 (0.9390)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (99.45652)
Epoch: [49][24/60]	Time 0.15634 (0.43752)	Data 0.01507 (0.31199)	Loss 0.6520 (0.9270)	Prec@1 75.00000 (74.47917)	Prec@5 100.00000 (99.47917)
Epoch: [49][25/60]	Time 0.13082 (0.42525)	Data 0.00584 (0.29975)	Loss 0.3933 (0.9057)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.50000)
Epoch: [49][26/60]	Time 0.13211 (0.41397)	Data 0.02838 (0.28931)	Loss 0.0332 (0.8721)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (99.51923)
Epoch: [49][27/60]	Time 0.12916 (0.40343)	Data 0.00207 (0.27867)	Loss 1.0206 (0.8776)	Prec@1 62.50000 (75.46297)	Prec@5 100.00000 (99.53704)
Epoch: [49][28/60]	Time 0.15563 (0.39458)	Data 0.01698 (0.26932)	Loss 0.3134 (0.8575)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (99.55357)
Epoch: [49][29/60]	Time 0.12436 (0.38526)	Data 0.00046 (0.26005)	Loss 0.6719 (0.8511)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (99.56896)
Epoch: [49][30/60]	Time 0.04587 (0.37395)	Data 0.02073 (0.25208)	Loss 1.7704 (0.8817)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (99.58334)
Epoch: [49][31/60]	Time 0.06583 (0.36401)	Data 0.00050 (0.24396)	Loss 2.6557 (0.9389)	Prec@1 37.50000 (74.19354)	Prec@5 87.50000 (99.19354)
Epoch: [49][32/60]	Time 0.04972 (0.35418)	Data 0.00337 (0.23644)	Loss 0.9136 (0.9381)	Prec@1 62.50000 (73.82812)	Prec@5 100.00000 (99.21875)
Epoch: [49][33/60]	Time 0.04773 (0.34490)	Data 0.00049 (0.22929)	Loss 0.1707 (0.9149)	Prec@1 87.50000 (74.24242)	Prec@5 100.00000 (99.24242)
Epoch: [49][34/60]	Time 0.05447 (0.33636)	Data 0.00039 (0.22256)	Loss 1.2626 (0.9251)	Prec@1 62.50000 (73.89706)	Prec@5 100.00000 (99.26471)
Epoch: [49][35/60]	Time 0.04296 (0.32797)	Data 0.00459 (0.21633)	Loss 1.3958 (0.9386)	Prec@1 75.00000 (73.92857)	Prec@5 87.50000 (98.92857)
Epoch: [49][36/60]	Time 0.03168 (0.31974)	Data 0.00050 (0.21034)	Loss 1.3254 (0.9493)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (98.95834)
Epoch: [49][37/60]	Time 0.03435 (0.31203)	Data 0.00564 (0.20480)	Loss 1.4717 (0.9634)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (98.98649)
Epoch: [49][38/60]	Time 0.02920 (0.30459)	Data 0.00083 (0.19944)	Loss 2.3538 (1.0000)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (99.01316)
Epoch: [49][39/60]	Time 0.02352 (0.29738)	Data 0.00071 (0.19434)	Loss 0.2018 (0.9795)	Prec@1 87.50000 (73.07693)	Prec@5 100.00000 (99.03846)
Epoch: [49][40/60]	Time 0.02244 (0.29051)	Data 0.00070 (0.18950)	Loss 0.3622 (0.9641)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.06250)
Epoch: [49][41/60]	Time 0.02233 (0.28397)	Data 0.00106 (0.18490)	Loss 0.6869 (0.9574)	Prec@1 75.00000 (73.47561)	Prec@5 100.00000 (99.08537)
Epoch: [49][42/60]	Time 0.02252 (0.27774)	Data 0.00109 (0.18053)	Loss 1.0578 (0.9597)	Prec@1 75.00000 (73.51191)	Prec@5 100.00000 (99.10715)
Epoch: [49][43/60]	Time 0.02304 (0.27182)	Data 0.00099 (0.17635)	Loss 0.7818 (0.9556)	Prec@1 62.50000 (73.25581)	Prec@5 100.00000 (99.12791)
Epoch: [49][44/60]	Time 0.02260 (0.26615)	Data 0.00054 (0.17236)	Loss 0.8535 (0.9533)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (99.14773)
Epoch: [49][45/60]	Time 0.02223 (0.26073)	Data 0.00071 (0.16854)	Loss 0.7338 (0.9484)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (99.16667)
Epoch: [49][46/60]	Time 0.02280 (0.25556)	Data 0.00097 (0.16490)	Loss 0.9678 (0.9488)	Prec@1 50.00000 (73.09782)	Prec@5 100.00000 (99.18478)
Epoch: [49][47/60]	Time 0.02264 (0.25061)	Data 0.00100 (0.16141)	Loss 0.8400 (0.9465)	Prec@1 87.50000 (73.40425)	Prec@5 87.50000 (98.93616)
Epoch: [49][48/60]	Time 0.02331 (0.24587)	Data 0.00049 (0.15806)	Loss 0.5059 (0.9373)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (98.95834)
Epoch: [49][49/60]	Time 0.02165 (0.24129)	Data 0.00045 (0.15484)	Loss 0.2119 (0.9225)	Prec@1 87.50000 (73.72449)	Prec@5 100.00000 (98.97959)
Epoch: [49][50/60]	Time 0.02265 (0.23692)	Data 0.00040 (0.15175)	Loss 0.6209 (0.9165)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (99.00000)
Epoch: [49][51/60]	Time 0.02192 (0.23271)	Data 0.00047 (0.14879)	Loss 0.1658 (0.9018)	Prec@1 87.50000 (74.01961)	Prec@5 100.00000 (99.01961)
Epoch: [49][52/60]	Time 0.02209 (0.22866)	Data 0.00045 (0.14594)	Loss 0.7657 (0.8992)	Prec@1 62.50000 (73.79808)	Prec@5 100.00000 (99.03847)
Epoch: [49][53/60]	Time 0.02200 (0.22476)	Data 0.00046 (0.14319)	Loss 0.4794 (0.8912)	Prec@1 75.00000 (73.82076)	Prec@5 100.00000 (99.05660)
Epoch: [49][54/60]	Time 0.02214 (0.22100)	Data 0.00047 (0.14055)	Loss 0.9614 (0.8925)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (99.07407)
Epoch: [49][55/60]	Time 0.02255 (0.21740)	Data 0.00047 (0.13800)	Loss 1.0222 (0.8949)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (98.86363)
Epoch: [49][56/60]	Time 0.02258 (0.21392)	Data 0.00072 (0.13555)	Loss 0.7224 (0.8918)	Prec@1 75.00000 (73.66072)	Prec@5 100.00000 (98.88393)
Epoch: [49][57/60]	Time 0.02353 (0.21058)	Data 0.00048 (0.13318)	Loss 1.3927 (0.9006)	Prec@1 62.50000 (73.46491)	Prec@5 100.00000 (98.90351)
Epoch: [49][58/60]	Time 0.02225 (0.20733)	Data 0.00054 (0.13089)	Loss 0.7199 (0.8975)	Prec@1 75.00000 (73.49138)	Prec@5 100.00000 (98.92242)
Epoch: [49][59/60]	Time 0.02174 (0.20418)	Data 0.00045 (0.12868)	Loss 0.8491 (0.8967)	Prec@1 87.50000 (73.72881)	Prec@5 100.00000 (98.94068)
Epoch: [49][60/60]	Time 0.02252 (0.20116)	Data 0.00058 (0.12655)	Loss 0.5187 (0.8904)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (98.95834)
train at epoch 50
train at epoch 50
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [50][0/272]	 lr: 0.00400	Time 9.913 (9.913)	Data 9.514 (9.514)	Loss 0.0111 (0.0111)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [50][10/272]	 lr: 0.00400	Time 0.383 (1.338)	Data 0.129 (0.979)	Loss 0.1632 (0.0326)	Prec@1 93.75000 (99.43182)	Prec@5 100.00000 (100.00000)
Epoch: [50][20/272]	 lr: 0.00400	Time 0.470 (0.908)	Data 0.149 (0.575)	Loss 0.0165 (0.0231)	Prec@1 100.00000 (99.70238)	Prec@5 100.00000 (100.00000)
Epoch: [50][30/272]	 lr: 0.00400	Time 0.413 (0.754)	Data 0.132 (0.430)	Loss 0.0240 (0.0212)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [50][40/272]	 lr: 0.00400	Time 0.383 (0.675)	Data 0.130 (0.357)	Loss 0.0109 (0.0200)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [50][50/272]	 lr: 0.00400	Time 0.424 (0.629)	Data 0.142 (0.312)	Loss 0.0088 (0.0196)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [50][60/272]	 lr: 0.00400	Time 0.473 (0.600)	Data 0.124 (0.282)	Loss 0.0076 (0.0184)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [50][70/272]	 lr: 0.00400	Time 0.522 (0.580)	Data 0.124 (0.260)	Loss 0.0087 (0.0186)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [50][80/272]	 lr: 0.00400	Time 0.455 (0.562)	Data 0.142 (0.244)	Loss 0.0056 (0.0186)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [50][90/272]	 lr: 0.00400	Time 0.425 (0.546)	Data 0.127 (0.231)	Loss 0.0209 (0.0183)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [50][100/272]	 lr: 0.00400	Time 0.447 (0.538)	Data 0.138 (0.221)	Loss 0.0126 (0.0182)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [50][110/272]	 lr: 0.00400	Time 0.446 (0.531)	Data 0.127 (0.213)	Loss 0.0102 (0.0177)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [50][120/272]	 lr: 0.00400	Time 0.446 (0.524)	Data 0.105 (0.206)	Loss 0.0813 (0.0196)	Prec@1 100.00000 (99.87086)	Prec@5 100.00000 (99.99999)
Epoch: [50][130/272]	 lr: 0.00400	Time 0.463 (0.517)	Data 0.140 (0.200)	Loss 0.0118 (0.0199)	Prec@1 100.00000 (99.88072)	Prec@5 100.00000 (100.00000)
Epoch: [50][140/272]	 lr: 0.00400	Time 0.291 (0.512)	Data 0.129 (0.195)	Loss 0.0261 (0.0198)	Prec@1 100.00000 (99.88918)	Prec@5 100.00000 (100.00000)
Epoch: [50][150/272]	 lr: 0.00400	Time 0.409 (0.508)	Data 0.124 (0.190)	Loss 0.0104 (0.0198)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [50][160/272]	 lr: 0.00400	Time 0.484 (0.503)	Data 0.116 (0.186)	Loss 0.0069 (0.0196)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [50][170/272]	 lr: 0.00400	Time 0.371 (0.499)	Data 0.110 (0.183)	Loss 0.0149 (0.0198)	Prec@1 100.00000 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [50][180/272]	 lr: 0.00400	Time 0.413 (0.496)	Data 0.129 (0.180)	Loss 0.0066 (0.0200)	Prec@1 100.00000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [50][190/272]	 lr: 0.00400	Time 0.349 (0.492)	Data 0.123 (0.177)	Loss 0.0290 (0.0197)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [50][200/272]	 lr: 0.00400	Time 0.516 (0.490)	Data 0.130 (0.175)	Loss 0.0210 (0.0196)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [50][210/272]	 lr: 0.00400	Time 0.383 (0.487)	Data 0.128 (0.172)	Loss 0.0185 (0.0193)	Prec@1 100.00000 (99.91114)	Prec@5 100.00000 (100.00000)
Epoch: [50][220/272]	 lr: 0.00400	Time 0.311 (0.485)	Data 0.129 (0.170)	Loss 0.0177 (0.0199)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [50][230/272]	 lr: 0.00400	Time 0.424 (0.483)	Data 0.129 (0.169)	Loss 0.0056 (0.0198)	Prec@1 100.00000 (99.87825)	Prec@5 100.00000 (100.00000)
Epoch: [50][240/272]	 lr: 0.00400	Time 0.322 (0.481)	Data 0.129 (0.167)	Loss 0.0120 (0.0199)	Prec@1 100.00000 (99.88330)	Prec@5 100.00000 (100.00001)
Epoch: [50][250/272]	 lr: 0.00400	Time 0.238 (0.471)	Data 0.128 (0.166)	Loss 0.0158 (0.0198)	Prec@1 100.00000 (99.88795)	Prec@5 100.00000 (100.00000)
Epoch: [50][260/272]	 lr: 0.00400	Time 0.239 (0.462)	Data 0.129 (0.164)	Loss 0.0175 (0.0201)	Prec@1 100.00000 (99.88026)	Prec@5 100.00000 (100.00000)
Epoch: [50][270/272]	 lr: 0.00400	Time 0.239 (0.454)	Data 0.129 (0.163)	Loss 0.0121 (0.0200)	Prec@1 100.00000 (99.88469)	Prec@5 100.00000 (100.00000)
validation at epoch 50
validation at epoch 50
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [50][1/60]	Time 3.37852 (3.37852)	Data 3.21993 (3.21993)	Loss 0.3599 (0.3599)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][2/60]	Time 4.05369 (3.71610)	Data 3.99731 (3.60862)	Loss 0.3820 (0.3709)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][3/60]	Time 0.06229 (2.49817)	Data 0.00069 (2.40598)	Loss 1.2286 (0.6568)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [50][4/60]	Time 0.03062 (1.88128)	Data 0.00082 (1.80469)	Loss 0.1230 (0.5234)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][5/60]	Time 0.06681 (1.51839)	Data 0.00096 (1.44394)	Loss 0.4451 (0.5077)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][6/60]	Time 0.18656 (1.29641)	Data 0.06555 (1.21421)	Loss 0.3147 (0.4755)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][7/60]	Time 0.16823 (1.13525)	Data 0.02554 (1.04440)	Loss 1.3153 (0.5955)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (100.00001)
Epoch: [50][8/60]	Time 0.21830 (1.02063)	Data 0.01259 (0.91542)	Loss 1.4943 (0.7079)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [50][9/60]	Time 0.13990 (0.92277)	Data 0.01842 (0.81576)	Loss 0.6143 (0.6975)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [50][10/60]	Time 0.23831 (0.85432)	Data 0.11134 (0.74532)	Loss 0.5539 (0.6831)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [50][11/60]	Time 0.16669 (0.79181)	Data 0.01419 (0.67885)	Loss 0.6384 (0.6790)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [50][12/60]	Time 0.12896 (0.73657)	Data 0.02057 (0.62399)	Loss 1.2223 (0.7243)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [50][13/60]	Time 0.08097 (0.68614)	Data 0.00202 (0.57615)	Loss 1.8732 (0.8127)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [50][14/60]	Time 0.08955 (0.64353)	Data 0.00604 (0.53543)	Loss 0.0937 (0.7613)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [50][15/60]	Time 0.19363 (0.61353)	Data 0.05657 (0.50350)	Loss 1.3732 (0.8021)	Prec@1 50.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [50][16/60]	Time 0.16997 (0.58581)	Data 0.00055 (0.47207)	Loss 0.9932 (0.8141)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [50][17/60]	Time 0.10126 (0.55731)	Data 0.01629 (0.44526)	Loss 0.3645 (0.7876)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [50][18/60]	Time 0.06077 (0.52972)	Data 0.00591 (0.42085)	Loss 2.3624 (0.8751)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [50][19/60]	Time 0.09424 (0.50680)	Data 0.00985 (0.39922)	Loss 0.1315 (0.8360)	Prec@1 100.00000 (78.28947)	Prec@5 100.00000 (100.00000)
Epoch: [50][20/60]	Time 0.15331 (0.48913)	Data 0.00561 (0.37954)	Loss 2.3237 (0.9103)	Prec@1 62.50000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [50][21/60]	Time 0.15294 (0.47312)	Data 0.00378 (0.36164)	Loss 0.5823 (0.8947)	Prec@1 62.50000 (76.78571)	Prec@5 100.00000 (100.00000)
Epoch: [50][22/60]	Time 0.12413 (0.45726)	Data 0.02527 (0.34636)	Loss 0.6560 (0.8839)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (100.00000)
Epoch: [50][23/60]	Time 0.07415 (0.44060)	Data 0.00210 (0.33139)	Loss 0.9352 (0.8861)	Prec@1 50.00000 (75.54348)	Prec@5 100.00000 (100.00000)
Epoch: [50][24/60]	Time 0.11634 (0.42709)	Data 0.01603 (0.31825)	Loss 0.6423 (0.8759)	Prec@1 75.00000 (75.52084)	Prec@5 100.00000 (100.00000)
Epoch: [50][25/60]	Time 0.26489 (0.42060)	Data 0.10735 (0.30981)	Loss 0.4469 (0.8588)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (100.00000)
Epoch: [50][26/60]	Time 0.28594 (0.41542)	Data 0.07703 (0.30086)	Loss 0.0480 (0.8276)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [50][27/60]	Time 0.18824 (0.40701)	Data 0.01202 (0.29016)	Loss 0.7212 (0.8237)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [50][28/60]	Time 0.10540 (0.39624)	Data 0.00727 (0.28006)	Loss 0.3210 (0.8057)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [50][29/60]	Time 0.14007 (0.38740)	Data 0.00055 (0.27042)	Loss 0.7342 (0.8032)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (100.00000)
Epoch: [50][30/60]	Time 0.08207 (0.37722)	Data 0.00040 (0.26142)	Loss 1.7376 (0.8344)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (100.00001)
Epoch: [50][31/60]	Time 0.06021 (0.36700)	Data 0.00189 (0.25305)	Loss 2.5998 (0.8913)	Prec@1 25.00000 (74.59677)	Prec@5 87.50000 (99.59677)
Epoch: [50][32/60]	Time 0.08968 (0.35833)	Data 0.00042 (0.24515)	Loss 0.6580 (0.8840)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (99.60938)
Epoch: [50][33/60]	Time 0.02824 (0.34833)	Data 0.00041 (0.23774)	Loss 0.1321 (0.8613)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [50][34/60]	Time 0.02676 (0.33887)	Data 0.00050 (0.23076)	Loss 1.1219 (0.8689)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (99.63235)
Epoch: [50][35/60]	Time 0.02722 (0.32997)	Data 0.00093 (0.22419)	Loss 1.4699 (0.8861)	Prec@1 75.00000 (74.64286)	Prec@5 87.50000 (99.28571)
Epoch: [50][36/60]	Time 0.03085 (0.32166)	Data 0.00239 (0.21803)	Loss 1.1364 (0.8930)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [50][37/60]	Time 0.03029 (0.31378)	Data 0.00163 (0.21218)	Loss 1.3479 (0.9053)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (99.32433)
Epoch: [50][38/60]	Time 0.03018 (0.30632)	Data 0.00229 (0.20666)	Loss 2.2347 (0.9403)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (99.34211)
Epoch: [50][39/60]	Time 0.02818 (0.29919)	Data 0.00052 (0.20137)	Loss 0.1240 (0.9194)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (99.35898)
Epoch: [50][40/60]	Time 0.02765 (0.29240)	Data 0.00067 (0.19636)	Loss 0.2906 (0.9037)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (99.37500)
Epoch: [50][41/60]	Time 0.02709 (0.28593)	Data 0.00046 (0.19158)	Loss 0.5006 (0.8938)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (99.39024)
Epoch: [50][42/60]	Time 0.02691 (0.27976)	Data 0.00044 (0.18703)	Loss 1.0040 (0.8965)	Prec@1 87.50000 (74.40476)	Prec@5 100.00000 (99.40476)
Epoch: [50][43/60]	Time 0.02737 (0.27389)	Data 0.00045 (0.18269)	Loss 0.7142 (0.8922)	Prec@1 62.50000 (74.12791)	Prec@5 100.00000 (99.41860)
Epoch: [50][44/60]	Time 0.02328 (0.26820)	Data 0.00046 (0.17855)	Loss 0.6615 (0.8870)	Prec@1 75.00000 (74.14773)	Prec@5 100.00000 (99.43182)
Epoch: [50][45/60]	Time 0.02324 (0.26275)	Data 0.00045 (0.17459)	Loss 0.6993 (0.8828)	Prec@1 87.50000 (74.44444)	Prec@5 100.00000 (99.44445)
Epoch: [50][46/60]	Time 0.02290 (0.25754)	Data 0.00045 (0.17080)	Loss 1.2053 (0.8898)	Prec@1 50.00000 (73.91305)	Prec@5 100.00000 (99.45652)
Epoch: [50][47/60]	Time 0.02456 (0.25258)	Data 0.00050 (0.16718)	Loss 0.8553 (0.8891)	Prec@1 75.00000 (73.93616)	Prec@5 87.50000 (99.20213)
Epoch: [50][48/60]	Time 0.02318 (0.24780)	Data 0.00076 (0.16371)	Loss 0.4345 (0.8796)	Prec@1 87.50000 (74.21875)	Prec@5 100.00000 (99.21875)
Epoch: [50][49/60]	Time 0.02343 (0.24322)	Data 0.00043 (0.16038)	Loss 0.3457 (0.8687)	Prec@1 87.50000 (74.48979)	Prec@5 100.00000 (99.23470)
Epoch: [50][50/60]	Time 0.02251 (0.23881)	Data 0.00045 (0.15718)	Loss 0.6240 (0.8638)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (99.25000)
Epoch: [50][51/60]	Time 0.02300 (0.23458)	Data 0.00046 (0.15411)	Loss 0.2383 (0.8516)	Prec@1 75.00000 (74.50980)	Prec@5 100.00000 (99.26471)
Epoch: [50][52/60]	Time 0.02253 (0.23050)	Data 0.00042 (0.15115)	Loss 0.7103 (0.8488)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (99.27885)
Epoch: [50][53/60]	Time 0.02290 (0.22658)	Data 0.00044 (0.14831)	Loss 0.4966 (0.8422)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (99.29246)
Epoch: [50][54/60]	Time 0.02306 (0.22281)	Data 0.00048 (0.14557)	Loss 0.8287 (0.8419)	Prec@1 75.00000 (74.07407)	Prec@5 100.00000 (99.30556)
Epoch: [50][55/60]	Time 0.02262 (0.21917)	Data 0.00045 (0.14293)	Loss 1.0303 (0.8454)	Prec@1 62.50000 (73.86363)	Prec@5 87.50000 (99.09090)
Epoch: [50][56/60]	Time 0.02265 (0.21566)	Data 0.00047 (0.14039)	Loss 0.8461 (0.8454)	Prec@1 75.00000 (73.88393)	Prec@5 100.00000 (99.10715)
Epoch: [50][57/60]	Time 0.02292 (0.21228)	Data 0.00042 (0.13793)	Loss 1.4509 (0.8560)	Prec@1 62.50000 (73.68421)	Prec@5 100.00000 (99.12281)
Epoch: [50][58/60]	Time 0.02342 (0.20903)	Data 0.00042 (0.13556)	Loss 0.8021 (0.8551)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (99.13793)
Epoch: [50][59/60]	Time 0.02305 (0.20587)	Data 0.00061 (0.13328)	Loss 0.7546 (0.8534)	Prec@1 87.50000 (73.94068)	Prec@5 100.00000 (99.15254)
Epoch: [50][60/60]	Time 0.02292 (0.20283)	Data 0.00047 (0.13106)	Loss 0.4977 (0.8475)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.16667)
train at epoch 51
train at epoch 51
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [51][0/272]	 lr: 0.00400	Time 8.462 (8.462)	Data 7.018 (7.018)	Loss 0.0258 (0.0258)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][10/272]	 lr: 0.00400	Time 0.522 (1.281)	Data 0.129 (0.766)	Loss 0.0317 (0.0341)	Prec@1 100.00000 (99.71591)	Prec@5 100.00000 (100.00000)
Epoch: [51][20/272]	 lr: 0.00400	Time 0.459 (0.869)	Data 0.129 (0.464)	Loss 0.0071 (0.0234)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [51][30/272]	 lr: 0.00400	Time 0.379 (0.730)	Data 0.109 (0.355)	Loss 0.0113 (0.0211)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [51][40/272]	 lr: 0.00400	Time 0.405 (0.665)	Data 0.122 (0.300)	Loss 0.0123 (0.0186)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [51][50/272]	 lr: 0.00400	Time 0.381 (0.621)	Data 0.122 (0.265)	Loss 0.0211 (0.0178)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [51][60/272]	 lr: 0.00400	Time 0.413 (0.592)	Data 0.128 (0.243)	Loss 0.0200 (0.0177)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [51][70/272]	 lr: 0.00400	Time 0.453 (0.573)	Data 0.117 (0.227)	Loss 0.0157 (0.0173)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [51][80/272]	 lr: 0.00400	Time 0.426 (0.556)	Data 0.109 (0.215)	Loss 0.0408 (0.0173)	Prec@1 96.87500 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [51][90/272]	 lr: 0.00400	Time 0.473 (0.543)	Data 0.141 (0.205)	Loss 0.0277 (0.0176)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [51][100/272]	 lr: 0.00400	Time 0.500 (0.535)	Data 0.129 (0.197)	Loss 0.0143 (0.0187)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [51][110/272]	 lr: 0.00400	Time 0.481 (0.527)	Data 0.102 (0.191)	Loss 0.0529 (0.0190)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [51][120/272]	 lr: 0.00400	Time 0.402 (0.520)	Data 0.126 (0.186)	Loss 0.0349 (0.0206)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [51][130/272]	 lr: 0.00400	Time 0.404 (0.514)	Data 0.128 (0.181)	Loss 0.0114 (0.0209)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [51][140/272]	 lr: 0.00400	Time 0.467 (0.508)	Data 0.107 (0.177)	Loss 0.0074 (0.0204)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [51][150/272]	 lr: 0.00400	Time 0.496 (0.504)	Data 0.116 (0.174)	Loss 0.0097 (0.0201)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [51][160/272]	 lr: 0.00400	Time 0.434 (0.502)	Data 0.126 (0.171)	Loss 0.0321 (0.0199)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [51][170/272]	 lr: 0.00400	Time 0.390 (0.498)	Data 0.128 (0.169)	Loss 0.0128 (0.0194)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [51][180/272]	 lr: 0.00400	Time 0.498 (0.495)	Data 0.126 (0.166)	Loss 0.0095 (0.0190)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [51][190/272]	 lr: 0.00400	Time 0.509 (0.492)	Data 0.126 (0.164)	Loss 0.0196 (0.0189)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [51][200/272]	 lr: 0.00400	Time 0.435 (0.489)	Data 0.127 (0.162)	Loss 0.0072 (0.0185)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [51][210/272]	 lr: 0.00400	Time 0.485 (0.486)	Data 0.101 (0.161)	Loss 0.0149 (0.0184)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [51][220/272]	 lr: 0.00400	Time 0.495 (0.485)	Data 0.148 (0.160)	Loss 0.0219 (0.0185)	Prec@1 100.00000 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [51][230/272]	 lr: 0.00400	Time 0.524 (0.484)	Data 0.141 (0.158)	Loss 0.0124 (0.0185)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [51][240/272]	 lr: 0.00400	Time 0.252 (0.482)	Data 0.113 (0.157)	Loss 0.0084 (0.0187)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [51][250/272]	 lr: 0.00400	Time 0.239 (0.472)	Data 0.129 (0.156)	Loss 0.0115 (0.0187)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [51][260/272]	 lr: 0.00400	Time 0.240 (0.463)	Data 0.129 (0.155)	Loss 0.0162 (0.0185)	Prec@1 100.00000 (99.94013)	Prec@5 100.00000 (100.00000)
Epoch: [51][270/272]	 lr: 0.00400	Time 0.240 (0.455)	Data 0.129 (0.154)	Loss 0.0063 (0.0183)	Prec@1 100.00000 (99.94234)	Prec@5 100.00000 (100.00000)
validation at epoch 51
validation at epoch 51
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [51][1/60]	Time 3.71459 (3.71459)	Data 3.58880 (3.58880)	Loss 0.3840 (0.3840)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][2/60]	Time 2.94703 (3.33081)	Data 2.88630 (3.23755)	Loss 0.4089 (0.3965)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [51][3/60]	Time 0.13108 (2.26423)	Data 0.03053 (2.16854)	Loss 1.2548 (0.6826)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [51][4/60]	Time 0.10085 (1.72339)	Data 0.00988 (1.62888)	Loss 0.1958 (0.5609)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [51][5/60]	Time 0.20666 (1.42004)	Data 0.01010 (1.30512)	Loss 0.3880 (0.5263)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [51][6/60]	Time 0.54828 (1.27475)	Data 0.48087 (1.16775)	Loss 0.3661 (0.4996)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [51][7/60]	Time 0.05105 (1.09994)	Data 0.00175 (1.00118)	Loss 1.2265 (0.6035)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [51][8/60]	Time 0.17287 (0.98405)	Data 0.05606 (0.88304)	Loss 1.2367 (0.6826)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [51][9/60]	Time 0.08506 (0.88416)	Data 0.01271 (0.78633)	Loss 0.6170 (0.6753)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][10/60]	Time 0.29287 (0.82503)	Data 0.23566 (0.73127)	Loss 0.5802 (0.6658)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][11/60]	Time 0.14850 (0.76353)	Data 0.06866 (0.67103)	Loss 0.6044 (0.6602)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [51][12/60]	Time 0.19548 (0.71619)	Data 0.08852 (0.62249)	Loss 1.0926 (0.6963)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][13/60]	Time 0.12530 (0.67074)	Data 0.01890 (0.57606)	Loss 1.7939 (0.7807)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [51][14/60]	Time 0.13404 (0.63240)	Data 0.00948 (0.53559)	Loss 0.0895 (0.7313)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [51][15/60]	Time 0.12325 (0.59846)	Data 0.01341 (0.50078)	Loss 1.1627 (0.7601)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [51][16/60]	Time 0.22007 (0.57481)	Data 0.02874 (0.47127)	Loss 1.0381 (0.7775)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [51][17/60]	Time 0.23697 (0.55494)	Data 0.09732 (0.44928)	Loss 0.3741 (0.7537)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [51][18/60]	Time 0.19272 (0.53482)	Data 0.00705 (0.42471)	Loss 2.3516 (0.8425)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [51][19/60]	Time 0.16122 (0.51515)	Data 0.00151 (0.40243)	Loss 0.1122 (0.8041)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [51][20/60]	Time 0.21692 (0.50024)	Data 0.06807 (0.38572)	Loss 2.3247 (0.8801)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][21/60]	Time 0.15111 (0.48362)	Data 0.00064 (0.36738)	Loss 0.6410 (0.8687)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [51][22/60]	Time 0.05154 (0.46398)	Data 0.00077 (0.35071)	Loss 0.7233 (0.8621)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [51][23/60]	Time 0.09038 (0.44773)	Data 0.02244 (0.33644)	Loss 1.0611 (0.8708)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (100.00000)
Epoch: [51][24/60]	Time 0.09374 (0.43298)	Data 0.01214 (0.32293)	Loss 0.7025 (0.8637)	Prec@1 75.00000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [51][25/60]	Time 0.18280 (0.42297)	Data 0.00857 (0.31036)	Loss 0.4150 (0.8458)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [51][26/60]	Time 0.12651 (0.41157)	Data 0.00965 (0.29879)	Loss 0.0556 (0.8154)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [51][27/60]	Time 0.22233 (0.40456)	Data 0.03545 (0.28904)	Loss 0.8905 (0.8182)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [51][28/60]	Time 0.09864 (0.39364)	Data 0.01592 (0.27928)	Loss 0.4112 (0.8036)	Prec@1 87.50000 (75.44643)	Prec@5 100.00000 (100.00001)
Epoch: [51][29/60]	Time 0.15094 (0.38527)	Data 0.01618 (0.27021)	Loss 0.5995 (0.7966)	Prec@1 75.00000 (75.43104)	Prec@5 100.00000 (100.00000)
Epoch: [51][30/60]	Time 0.13117 (0.37680)	Data 0.01373 (0.26166)	Loss 1.6475 (0.8250)	Prec@1 62.50000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [51][31/60]	Time 0.07613 (0.36710)	Data 0.02223 (0.25394)	Loss 2.4355 (0.8769)	Prec@1 37.50000 (73.79032)	Prec@5 87.50000 (99.59677)
Epoch: [51][32/60]	Time 0.04045 (0.35689)	Data 0.00049 (0.24602)	Loss 0.6543 (0.8700)	Prec@1 75.00000 (73.82812)	Prec@5 100.00000 (99.60938)
Epoch: [51][33/60]	Time 0.03040 (0.34700)	Data 0.00290 (0.23865)	Loss 0.1333 (0.8476)	Prec@1 87.50000 (74.24242)	Prec@5 100.00000 (99.62122)
Epoch: [51][34/60]	Time 0.03089 (0.33770)	Data 0.00218 (0.23169)	Loss 1.1467 (0.8564)	Prec@1 62.50000 (73.89706)	Prec@5 100.00000 (99.63235)
Epoch: [51][35/60]	Time 0.02999 (0.32891)	Data 0.00219 (0.22514)	Loss 1.4096 (0.8722)	Prec@1 75.00000 (73.92857)	Prec@5 87.50000 (99.28571)
Epoch: [51][36/60]	Time 0.02852 (0.32056)	Data 0.00256 (0.21895)	Loss 1.0548 (0.8773)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [51][37/60]	Time 0.02706 (0.31263)	Data 0.00087 (0.21306)	Loss 1.3856 (0.8910)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (99.32433)
Epoch: [51][38/60]	Time 0.02360 (0.30503)	Data 0.00087 (0.20748)	Loss 2.2730 (0.9274)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (99.34211)
Epoch: [51][39/60]	Time 0.02293 (0.29779)	Data 0.00085 (0.20218)	Loss 0.1392 (0.9072)	Prec@1 87.50000 (73.07693)	Prec@5 100.00000 (99.35898)
Epoch: [51][40/60]	Time 0.02300 (0.29092)	Data 0.00091 (0.19715)	Loss 0.3003 (0.8920)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.37500)
Epoch: [51][41/60]	Time 0.02320 (0.28439)	Data 0.00094 (0.19236)	Loss 0.5239 (0.8831)	Prec@1 75.00000 (73.47561)	Prec@5 100.00000 (99.39024)
Epoch: [51][42/60]	Time 0.02335 (0.27818)	Data 0.00088 (0.18780)	Loss 1.0621 (0.8873)	Prec@1 87.50000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [51][43/60]	Time 0.02309 (0.27225)	Data 0.00081 (0.18345)	Loss 0.6179 (0.8811)	Prec@1 62.50000 (73.54651)	Prec@5 100.00000 (99.41860)
Epoch: [51][44/60]	Time 0.02244 (0.26657)	Data 0.00043 (0.17929)	Loss 0.6896 (0.8767)	Prec@1 75.00000 (73.57954)	Prec@5 100.00000 (99.43182)
Epoch: [51][45/60]	Time 0.02247 (0.26114)	Data 0.00044 (0.17532)	Loss 0.7309 (0.8735)	Prec@1 87.50000 (73.88889)	Prec@5 100.00000 (99.44445)
Epoch: [51][46/60]	Time 0.02241 (0.25595)	Data 0.00046 (0.17152)	Loss 1.3044 (0.8828)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (99.45652)
Epoch: [51][47/60]	Time 0.02362 (0.25101)	Data 0.00044 (0.16788)	Loss 0.9400 (0.8840)	Prec@1 75.00000 (73.40425)	Prec@5 87.50000 (99.20213)
Epoch: [51][48/60]	Time 0.02278 (0.24626)	Data 0.00047 (0.16439)	Loss 0.5092 (0.8762)	Prec@1 87.50000 (73.69792)	Prec@5 100.00000 (99.21875)
Epoch: [51][49/60]	Time 0.02243 (0.24169)	Data 0.00047 (0.16104)	Loss 0.3958 (0.8664)	Prec@1 87.50000 (73.97959)	Prec@5 100.00000 (99.23470)
Epoch: [51][50/60]	Time 0.02261 (0.23731)	Data 0.00048 (0.15783)	Loss 0.8040 (0.8652)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (99.25000)
Epoch: [51][51/60]	Time 0.02324 (0.23311)	Data 0.00046 (0.15475)	Loss 0.2404 (0.8529)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [51][52/60]	Time 0.02265 (0.22906)	Data 0.00048 (0.15178)	Loss 0.8514 (0.8529)	Prec@1 50.00000 (73.79808)	Prec@5 87.50000 (99.03847)
Epoch: [51][53/60]	Time 0.02260 (0.22517)	Data 0.00045 (0.14893)	Loss 0.6714 (0.8495)	Prec@1 75.00000 (73.82076)	Prec@5 100.00000 (99.05660)
Epoch: [51][54/60]	Time 0.02253 (0.22141)	Data 0.00046 (0.14618)	Loss 0.8975 (0.8504)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (99.07407)
Epoch: [51][55/60]	Time 0.02240 (0.21780)	Data 0.00043 (0.14353)	Loss 1.1342 (0.8555)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (98.86363)
Epoch: [51][56/60]	Time 0.02334 (0.21432)	Data 0.00068 (0.14098)	Loss 0.9074 (0.8565)	Prec@1 75.00000 (73.66072)	Prec@5 100.00000 (98.88393)
Epoch: [51][57/60]	Time 0.02250 (0.21096)	Data 0.00047 (0.13851)	Loss 1.5747 (0.8691)	Prec@1 62.50000 (73.46491)	Prec@5 87.50000 (98.68421)
Epoch: [51][58/60]	Time 0.02251 (0.20771)	Data 0.00051 (0.13613)	Loss 0.8698 (0.8691)	Prec@1 62.50000 (73.27586)	Prec@5 100.00000 (98.70689)
Epoch: [51][59/60]	Time 0.02411 (0.20460)	Data 0.00054 (0.13383)	Loss 0.8000 (0.8679)	Prec@1 87.50000 (73.51695)	Prec@5 100.00000 (98.72881)
Epoch: [51][60/60]	Time 0.02320 (0.20157)	Data 0.00048 (0.13161)	Loss 0.5061 (0.8619)	Prec@1 87.50000 (73.75001)	Prec@5 100.00000 (98.75001)
train at epoch 52
train at epoch 52
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [52][0/272]	 lr: 0.00400	Time 8.402 (8.402)	Data 6.924 (6.924)	Loss 0.0146 (0.0146)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][10/272]	 lr: 0.00400	Time 0.538 (1.302)	Data 0.128 (0.748)	Loss 0.0082 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][20/272]	 lr: 0.00400	Time 0.416 (0.872)	Data 0.130 (0.454)	Loss 0.0106 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][30/272]	 lr: 0.00400	Time 0.417 (0.729)	Data 0.122 (0.350)	Loss 0.0267 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][40/272]	 lr: 0.00400	Time 0.375 (0.657)	Data 0.125 (0.296)	Loss 0.0139 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][50/272]	 lr: 0.00400	Time 0.405 (0.615)	Data 0.128 (0.264)	Loss 0.0145 (0.0180)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][60/272]	 lr: 0.00400	Time 0.358 (0.586)	Data 0.128 (0.242)	Loss 0.1262 (0.0188)	Prec@1 93.75000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [52][70/272]	 lr: 0.00400	Time 0.470 (0.565)	Data 0.134 (0.226)	Loss 0.0154 (0.0185)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [52][80/272]	 lr: 0.00400	Time 0.333 (0.549)	Data 0.127 (0.214)	Loss 0.0122 (0.0183)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [52][90/272]	 lr: 0.00400	Time 0.528 (0.536)	Data 0.128 (0.204)	Loss 0.0274 (0.0181)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [52][100/272]	 lr: 0.00400	Time 0.358 (0.525)	Data 0.106 (0.197)	Loss 0.0390 (0.0181)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [52][110/272]	 lr: 0.00400	Time 0.409 (0.520)	Data 0.126 (0.191)	Loss 0.0287 (0.0181)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [52][120/272]	 lr: 0.00400	Time 0.426 (0.514)	Data 0.126 (0.186)	Loss 0.0334 (0.0189)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [52][130/272]	 lr: 0.00400	Time 0.489 (0.509)	Data 0.118 (0.181)	Loss 0.0106 (0.0191)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [52][140/272]	 lr: 0.00400	Time 0.488 (0.505)	Data 0.141 (0.178)	Loss 0.0234 (0.0188)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [52][150/272]	 lr: 0.00400	Time 0.433 (0.501)	Data 0.115 (0.175)	Loss 0.0075 (0.0189)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [52][160/272]	 lr: 0.00400	Time 0.483 (0.498)	Data 0.127 (0.172)	Loss 0.0119 (0.0190)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [52][170/272]	 lr: 0.00400	Time 0.487 (0.496)	Data 0.128 (0.169)	Loss 0.0080 (0.0197)	Prec@1 100.00000 (99.92690)	Prec@5 100.00000 (100.00000)
Epoch: [52][180/272]	 lr: 0.00400	Time 0.405 (0.494)	Data 0.128 (0.167)	Loss 0.0071 (0.0196)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [52][190/272]	 lr: 0.00400	Time 0.448 (0.492)	Data 0.112 (0.165)	Loss 0.0197 (0.0196)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [52][200/272]	 lr: 0.00400	Time 0.408 (0.488)	Data 0.138 (0.164)	Loss 0.0273 (0.0196)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [52][210/272]	 lr: 0.00400	Time 0.456 (0.487)	Data 0.126 (0.162)	Loss 0.0133 (0.0195)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [52][220/272]	 lr: 0.00400	Time 0.537 (0.485)	Data 0.130 (0.160)	Loss 0.0167 (0.0194)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [52][230/272]	 lr: 0.00400	Time 0.423 (0.483)	Data 0.129 (0.159)	Loss 0.0092 (0.0190)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [52][240/272]	 lr: 0.00400	Time 0.257 (0.482)	Data 0.122 (0.158)	Loss 0.0406 (0.0190)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [52][250/272]	 lr: 0.00400	Time 0.240 (0.472)	Data 0.128 (0.156)	Loss 0.0076 (0.0187)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [52][260/272]	 lr: 0.00400	Time 0.242 (0.463)	Data 0.129 (0.155)	Loss 0.0105 (0.0189)	Prec@1 100.00000 (99.94013)	Prec@5 100.00000 (100.00000)
Epoch: [52][270/272]	 lr: 0.00400	Time 0.240 (0.455)	Data 0.128 (0.154)	Loss 0.0260 (0.0190)	Prec@1 100.00000 (99.94234)	Prec@5 100.00000 (100.00000)
validation at epoch 52
validation at epoch 52
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [52][1/60]	Time 6.37667 (6.37667)	Data 6.27197 (6.27197)	Loss 0.3988 (0.3988)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][2/60]	Time 1.17820 (3.77744)	Data 1.10976 (3.69086)	Loss 0.4245 (0.4116)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [52][3/60]	Time 0.08586 (2.54691)	Data 0.04498 (2.47557)	Loss 1.2247 (0.6826)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][4/60]	Time 0.13617 (1.94422)	Data 0.02808 (1.86370)	Loss 0.2114 (0.5648)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [52][5/60]	Time 0.15268 (1.58592)	Data 0.04278 (1.49951)	Loss 0.5079 (0.5534)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [52][6/60]	Time 0.20338 (1.35549)	Data 0.02704 (1.25410)	Loss 0.5647 (0.5553)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [52][7/60]	Time 0.12828 (1.18018)	Data 0.00930 (1.07627)	Loss 1.1182 (0.6357)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [52][8/60]	Time 0.17369 (1.05437)	Data 0.02648 (0.94505)	Loss 1.2034 (0.7067)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [52][9/60]	Time 0.05651 (0.94349)	Data 0.01469 (0.84168)	Loss 0.7766 (0.7144)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [52][10/60]	Time 0.27684 (0.87683)	Data 0.11189 (0.76870)	Loss 0.5040 (0.6934)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (100.00000)
Epoch: [52][11/60]	Time 0.17318 (0.81286)	Data 0.02094 (0.70072)	Loss 0.5502 (0.6804)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [52][12/60]	Time 0.04269 (0.74868)	Data 0.01459 (0.64354)	Loss 1.0789 (0.7136)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [52][13/60]	Time 0.07887 (0.69716)	Data 0.00273 (0.59425)	Loss 1.7706 (0.7949)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (100.00000)
Epoch: [52][14/60]	Time 0.22451 (0.66340)	Data 0.06065 (0.55613)	Loss 0.1677 (0.7501)	Prec@1 87.50000 (72.32143)	Prec@5 100.00000 (100.00001)
Epoch: [52][15/60]	Time 0.15092 (0.62923)	Data 0.01634 (0.52015)	Loss 1.0269 (0.7686)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (100.00001)
Epoch: [52][16/60]	Time 0.12079 (0.59745)	Data 0.02537 (0.48922)	Loss 1.1387 (0.7917)	Prec@1 75.00000 (71.09375)	Prec@5 100.00000 (100.00000)
Epoch: [52][17/60]	Time 0.19704 (0.57390)	Data 0.00834 (0.46094)	Loss 0.3751 (0.7672)	Prec@1 87.50000 (72.05882)	Prec@5 100.00000 (100.00000)
Epoch: [52][18/60]	Time 0.15998 (0.55090)	Data 0.00118 (0.43539)	Loss 2.4444 (0.8604)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [52][19/60]	Time 0.15145 (0.52988)	Data 0.02163 (0.41362)	Loss 0.2105 (0.8262)	Prec@1 87.50000 (73.02631)	Prec@5 100.00000 (100.00000)
Epoch: [52][20/60]	Time 0.11924 (0.50935)	Data 0.04110 (0.39499)	Loss 2.4574 (0.9077)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (99.37500)
Epoch: [52][21/60]	Time 0.20044 (0.49464)	Data 0.00635 (0.37649)	Loss 0.5289 (0.8897)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (99.40476)
Epoch: [52][22/60]	Time 0.13435 (0.47826)	Data 0.00327 (0.35952)	Loss 0.7569 (0.8836)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.43182)
Epoch: [52][23/60]	Time 0.11905 (0.46264)	Data 0.04250 (0.34574)	Loss 1.0851 (0.8924)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (99.45652)
Epoch: [52][24/60]	Time 0.08116 (0.44675)	Data 0.01072 (0.33178)	Loss 0.7606 (0.8869)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.47917)
Epoch: [52][25/60]	Time 0.05543 (0.43109)	Data 0.00048 (0.31853)	Loss 0.5073 (0.8717)	Prec@1 75.00000 (72.00000)	Prec@5 100.00000 (99.50000)
Epoch: [52][26/60]	Time 0.20221 (0.42229)	Data 0.01476 (0.30684)	Loss 0.0599 (0.8405)	Prec@1 100.00000 (73.07693)	Prec@5 100.00000 (99.51923)
Epoch: [52][27/60]	Time 0.21668 (0.41468)	Data 0.02084 (0.29625)	Loss 0.9272 (0.8437)	Prec@1 62.50000 (72.68519)	Prec@5 100.00000 (99.53704)
Epoch: [52][28/60]	Time 0.16203 (0.40565)	Data 0.00451 (0.28583)	Loss 0.3338 (0.8255)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.55357)
Epoch: [52][29/60]	Time 0.09484 (0.39494)	Data 0.00044 (0.27599)	Loss 0.8023 (0.8247)	Prec@1 75.00000 (73.27586)	Prec@5 100.00000 (99.56896)
Epoch: [52][30/60]	Time 0.09179 (0.38483)	Data 0.00052 (0.26681)	Loss 1.8531 (0.8590)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (99.58334)
Epoch: [52][31/60]	Time 0.04937 (0.37401)	Data 0.00041 (0.25821)	Loss 2.4970 (0.9118)	Prec@1 37.50000 (71.77419)	Prec@5 87.50000 (99.19354)
Epoch: [52][32/60]	Time 0.06410 (0.36433)	Data 0.00062 (0.25016)	Loss 0.8841 (0.9110)	Prec@1 62.50000 (71.48438)	Prec@5 100.00000 (99.21875)
Epoch: [52][33/60]	Time 0.03848 (0.35445)	Data 0.00062 (0.24260)	Loss 0.1180 (0.8869)	Prec@1 87.50000 (71.96970)	Prec@5 100.00000 (99.24242)
Epoch: [52][34/60]	Time 0.04238 (0.34527)	Data 0.00055 (0.23548)	Loss 1.3020 (0.8991)	Prec@1 62.50000 (71.69118)	Prec@5 100.00000 (99.26471)
Epoch: [52][35/60]	Time 0.03701 (0.33646)	Data 0.00489 (0.22889)	Loss 1.3690 (0.9126)	Prec@1 75.00000 (71.78571)	Prec@5 87.50000 (98.92857)
Epoch: [52][36/60]	Time 0.02903 (0.32792)	Data 0.00063 (0.22255)	Loss 1.2112 (0.9209)	Prec@1 62.50000 (71.52778)	Prec@5 100.00000 (98.95834)
Epoch: [52][37/60]	Time 0.02811 (0.31982)	Data 0.00040 (0.21655)	Loss 1.4980 (0.9365)	Prec@1 62.50000 (71.28378)	Prec@5 100.00000 (98.98649)
Epoch: [52][38/60]	Time 0.02996 (0.31219)	Data 0.00298 (0.21093)	Loss 2.3330 (0.9732)	Prec@1 50.00000 (70.72369)	Prec@5 100.00000 (99.01316)
Epoch: [52][39/60]	Time 0.02717 (0.30489)	Data 0.00072 (0.20554)	Loss 0.1220 (0.9514)	Prec@1 87.50000 (71.15385)	Prec@5 100.00000 (99.03846)
Epoch: [52][40/60]	Time 0.02689 (0.29794)	Data 0.00078 (0.20042)	Loss 0.2162 (0.9330)	Prec@1 87.50000 (71.56250)	Prec@5 100.00000 (99.06250)
Epoch: [52][41/60]	Time 0.02684 (0.29132)	Data 0.00088 (0.19555)	Loss 0.7389 (0.9283)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (99.08537)
Epoch: [52][42/60]	Time 0.02438 (0.28497)	Data 0.00043 (0.19091)	Loss 1.0668 (0.9316)	Prec@1 87.50000 (72.02381)	Prec@5 100.00000 (99.10715)
Epoch: [52][43/60]	Time 0.02371 (0.27889)	Data 0.00062 (0.18648)	Loss 0.7862 (0.9282)	Prec@1 62.50000 (71.80232)	Prec@5 100.00000 (99.12791)
Epoch: [52][44/60]	Time 0.02264 (0.27307)	Data 0.00044 (0.18225)	Loss 0.8482 (0.9264)	Prec@1 62.50000 (71.59091)	Prec@5 100.00000 (99.14773)
Epoch: [52][45/60]	Time 0.02286 (0.26751)	Data 0.00046 (0.17821)	Loss 0.7364 (0.9221)	Prec@1 87.50000 (71.94444)	Prec@5 100.00000 (99.16667)
Epoch: [52][46/60]	Time 0.02277 (0.26219)	Data 0.00045 (0.17435)	Loss 0.9743 (0.9233)	Prec@1 50.00000 (71.46739)	Prec@5 100.00000 (99.18478)
Epoch: [52][47/60]	Time 0.02360 (0.25711)	Data 0.00046 (0.17065)	Loss 0.9496 (0.9238)	Prec@1 75.00000 (71.54255)	Prec@5 100.00000 (99.20213)
Epoch: [52][48/60]	Time 0.02330 (0.25224)	Data 0.00050 (0.16711)	Loss 0.4318 (0.9136)	Prec@1 75.00000 (71.61459)	Prec@5 100.00000 (99.21875)
Epoch: [52][49/60]	Time 0.02254 (0.24755)	Data 0.00051 (0.16371)	Loss 0.2112 (0.8992)	Prec@1 87.50000 (71.93877)	Prec@5 100.00000 (99.23470)
Epoch: [52][50/60]	Time 0.02221 (0.24305)	Data 0.00043 (0.16044)	Loss 0.6753 (0.8948)	Prec@1 75.00000 (72.00000)	Prec@5 100.00000 (99.25000)
Epoch: [52][51/60]	Time 0.02230 (0.23872)	Data 0.00041 (0.15730)	Loss 0.3479 (0.8840)	Prec@1 75.00000 (72.05882)	Prec@5 100.00000 (99.26471)
Epoch: [52][52/60]	Time 0.02296 (0.23457)	Data 0.00043 (0.15429)	Loss 1.0019 (0.8863)	Prec@1 37.50000 (71.39423)	Prec@5 100.00000 (99.27885)
Epoch: [52][53/60]	Time 0.02809 (0.23067)	Data 0.00041 (0.15138)	Loss 0.5847 (0.8806)	Prec@1 87.50000 (71.69811)	Prec@5 100.00000 (99.29246)
Epoch: [52][54/60]	Time 0.02285 (0.22682)	Data 0.00068 (0.14859)	Loss 1.0506 (0.8838)	Prec@1 75.00000 (71.75926)	Prec@5 100.00000 (99.30556)
Epoch: [52][55/60]	Time 0.02266 (0.22311)	Data 0.00050 (0.14590)	Loss 1.2859 (0.8911)	Prec@1 62.50000 (71.59090)	Prec@5 87.50000 (99.09090)
Epoch: [52][56/60]	Time 0.02366 (0.21955)	Data 0.00053 (0.14330)	Loss 0.7559 (0.8887)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (99.10715)
Epoch: [52][57/60]	Time 0.02354 (0.21611)	Data 0.00054 (0.14080)	Loss 1.4149 (0.8979)	Prec@1 62.50000 (71.27193)	Prec@5 100.00000 (99.12281)
Epoch: [52][58/60]	Time 0.02232 (0.21277)	Data 0.00046 (0.13838)	Loss 0.7440 (0.8952)	Prec@1 62.50000 (71.12069)	Prec@5 100.00000 (99.13793)
Epoch: [52][59/60]	Time 0.02223 (0.20954)	Data 0.00041 (0.13604)	Loss 0.9953 (0.8969)	Prec@1 75.00000 (71.18644)	Prec@5 100.00000 (99.15254)
Epoch: [52][60/60]	Time 0.02213 (0.20642)	Data 0.00051 (0.13378)	Loss 0.6286 (0.8925)	Prec@1 87.50000 (71.45834)	Prec@5 100.00000 (99.16667)
train at epoch 53
train at epoch 53
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [53][0/272]	 lr: 0.00400	Time 8.031 (8.031)	Data 6.693 (6.693)	Loss 0.0067 (0.0067)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [53][10/272]	 lr: 0.00400	Time 0.452 (1.297)	Data 0.141 (0.730)	Loss 0.0166 (0.0187)	Prec@1 100.00000 (99.43182)	Prec@5 100.00000 (100.00000)
Epoch: [53][20/272]	 lr: 0.00400	Time 0.504 (0.890)	Data 0.139 (0.444)	Loss 0.0092 (0.0182)	Prec@1 100.00000 (99.70238)	Prec@5 100.00000 (100.00000)
Epoch: [53][30/272]	 lr: 0.00400	Time 0.440 (0.747)	Data 0.128 (0.343)	Loss 0.0044 (0.0164)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [53][40/272]	 lr: 0.00400	Time 0.378 (0.669)	Data 0.129 (0.291)	Loss 0.0077 (0.0158)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [53][50/272]	 lr: 0.00400	Time 0.438 (0.623)	Data 0.128 (0.260)	Loss 0.0095 (0.0157)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [53][60/272]	 lr: 0.00400	Time 0.448 (0.589)	Data 0.125 (0.238)	Loss 0.0057 (0.0150)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [53][70/272]	 lr: 0.00400	Time 0.434 (0.566)	Data 0.115 (0.223)	Loss 0.0067 (0.0154)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [53][80/272]	 lr: 0.00400	Time 0.510 (0.553)	Data 0.129 (0.211)	Loss 0.0829 (0.0161)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [53][90/272]	 lr: 0.00400	Time 0.359 (0.538)	Data 0.107 (0.201)	Loss 0.0291 (0.0164)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [53][100/272]	 lr: 0.00400	Time 0.446 (0.529)	Data 0.114 (0.194)	Loss 0.0110 (0.0165)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [53][110/272]	 lr: 0.00400	Time 0.412 (0.522)	Data 0.119 (0.188)	Loss 0.0222 (0.0174)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [53][120/272]	 lr: 0.00400	Time 0.437 (0.518)	Data 0.124 (0.183)	Loss 0.0104 (0.0171)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [53][130/272]	 lr: 0.00400	Time 0.452 (0.512)	Data 0.116 (0.179)	Loss 0.0066 (0.0174)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [53][140/272]	 lr: 0.00400	Time 0.413 (0.507)	Data 0.129 (0.175)	Loss 0.0064 (0.0176)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [53][150/272]	 lr: 0.00400	Time 0.444 (0.504)	Data 0.140 (0.172)	Loss 0.0079 (0.0179)	Prec@1 100.00000 (99.87582)	Prec@5 100.00000 (100.00000)
Epoch: [53][160/272]	 lr: 0.00400	Time 0.462 (0.500)	Data 0.130 (0.170)	Loss 0.0092 (0.0177)	Prec@1 100.00000 (99.88354)	Prec@5 100.00000 (100.00000)
Epoch: [53][170/272]	 lr: 0.00400	Time 0.512 (0.496)	Data 0.153 (0.168)	Loss 0.0046 (0.0176)	Prec@1 100.00000 (99.89035)	Prec@5 100.00000 (100.00000)
Epoch: [53][180/272]	 lr: 0.00400	Time 0.407 (0.493)	Data 0.121 (0.166)	Loss 0.0072 (0.0176)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [53][190/272]	 lr: 0.00400	Time 0.440 (0.491)	Data 0.142 (0.164)	Loss 0.0166 (0.0174)	Prec@1 100.00000 (99.88548)	Prec@5 100.00000 (100.00000)
Epoch: [53][200/272]	 lr: 0.00400	Time 0.356 (0.488)	Data 0.129 (0.162)	Loss 0.0032 (0.0173)	Prec@1 100.00000 (99.89117)	Prec@5 100.00000 (100.00000)
Epoch: [53][210/272]	 lr: 0.00400	Time 0.454 (0.486)	Data 0.129 (0.160)	Loss 0.0201 (0.0173)	Prec@1 100.00000 (99.89633)	Prec@5 100.00000 (100.00000)
Epoch: [53][220/272]	 lr: 0.00400	Time 0.442 (0.484)	Data 0.128 (0.159)	Loss 0.0148 (0.0172)	Prec@1 100.00000 (99.90102)	Prec@5 100.00000 (100.00001)
Epoch: [53][230/272]	 lr: 0.00400	Time 0.544 (0.482)	Data 0.103 (0.158)	Loss 0.0258 (0.0172)	Prec@1 100.00000 (99.90530)	Prec@5 100.00000 (100.00000)
Epoch: [53][240/272]	 lr: 0.00400	Time 0.267 (0.479)	Data 0.127 (0.156)	Loss 0.0063 (0.0174)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [53][250/272]	 lr: 0.00400	Time 0.240 (0.470)	Data 0.129 (0.155)	Loss 0.0090 (0.0172)	Prec@1 100.00000 (99.91285)	Prec@5 100.00000 (100.00000)
Epoch: [53][260/272]	 lr: 0.00400	Time 0.239 (0.461)	Data 0.129 (0.154)	Loss 0.0140 (0.0177)	Prec@1 100.00000 (99.89224)	Prec@5 100.00000 (100.00000)
Epoch: [53][270/272]	 lr: 0.00400	Time 0.241 (0.453)	Data 0.128 (0.153)	Loss 0.0330 (0.0182)	Prec@1 100.00000 (99.88469)	Prec@5 100.00000 (100.00000)
validation at epoch 53
validation at epoch 53
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [53][1/60]	Time 7.32911 (7.32911)	Data 7.26517 (7.26517)	Loss 0.4094 (0.4094)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [53][2/60]	Time 0.08206 (3.70558)	Data 0.01279 (3.63898)	Loss 0.4324 (0.4209)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [53][3/60]	Time 0.14785 (2.51967)	Data 0.03084 (2.43627)	Loss 1.2307 (0.6908)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [53][4/60]	Time 0.12017 (1.91980)	Data 0.00960 (1.82960)	Loss 0.2372 (0.5774)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [53][5/60]	Time 0.08602 (1.55304)	Data 0.00280 (1.46424)	Loss 0.3320 (0.5283)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [53][6/60]	Time 0.08495 (1.30836)	Data 0.01435 (1.22259)	Loss 0.4608 (0.5171)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [53][7/60]	Time 0.10231 (1.13607)	Data 0.00103 (1.04808)	Loss 1.3565 (0.6370)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [53][8/60]	Time 0.24059 (1.02413)	Data 0.00270 (0.91741)	Loss 1.1813 (0.7050)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [53][9/60]	Time 0.19510 (0.93202)	Data 0.05761 (0.82188)	Loss 0.7206 (0.7068)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [53][10/60]	Time 0.14764 (0.85358)	Data 0.02407 (0.74210)	Loss 0.5780 (0.6939)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (100.00000)
Epoch: [53][11/60]	Time 0.14561 (0.78922)	Data 0.07780 (0.68171)	Loss 0.6175 (0.6870)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [53][12/60]	Time 0.05904 (0.72837)	Data 0.00519 (0.62533)	Loss 1.3491 (0.7421)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [53][13/60]	Time 0.10662 (0.68054)	Data 0.02494 (0.57915)	Loss 1.8165 (0.8248)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (100.00000)
Epoch: [53][14/60]	Time 0.16917 (0.64402)	Data 0.00448 (0.53810)	Loss 0.0806 (0.7716)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (100.00001)
Epoch: [53][15/60]	Time 0.27683 (0.61954)	Data 0.07750 (0.50739)	Loss 1.1909 (0.7996)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (100.00001)
Epoch: [53][16/60]	Time 0.19365 (0.59292)	Data 0.00073 (0.47573)	Loss 1.0228 (0.8135)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [53][17/60]	Time 0.15392 (0.56710)	Data 0.00060 (0.44778)	Loss 0.3703 (0.7875)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (100.00000)
Epoch: [53][18/60]	Time 0.08445 (0.54028)	Data 0.00462 (0.42316)	Loss 2.4051 (0.8773)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (100.00000)
Epoch: [53][19/60]	Time 0.20184 (0.52247)	Data 0.06950 (0.40454)	Loss 0.1560 (0.8394)	Prec@1 87.50000 (73.68421)	Prec@5 100.00000 (100.00000)
Epoch: [53][20/60]	Time 0.08948 (0.50082)	Data 0.01222 (0.38493)	Loss 2.3599 (0.9154)	Prec@1 62.50000 (73.12500)	Prec@5 87.50000 (99.37500)
Epoch: [53][21/60]	Time 0.12233 (0.48280)	Data 0.00479 (0.36683)	Loss 0.5116 (0.8962)	Prec@1 87.50000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [53][22/60]	Time 0.17436 (0.46878)	Data 0.00540 (0.35040)	Loss 0.6401 (0.8845)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [53][23/60]	Time 0.13159 (0.45412)	Data 0.00877 (0.33554)	Loss 1.0520 (0.8918)	Prec@1 62.50000 (73.36957)	Prec@5 100.00000 (99.45652)
Epoch: [53][24/60]	Time 0.13376 (0.44077)	Data 0.02013 (0.32240)	Loss 0.7227 (0.8848)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (99.47917)
Epoch: [53][25/60]	Time 0.19740 (0.43103)	Data 0.00468 (0.30969)	Loss 0.4345 (0.8667)	Prec@1 75.00000 (73.00000)	Prec@5 100.00000 (99.50000)
Epoch: [53][26/60]	Time 0.18031 (0.42139)	Data 0.06374 (0.30023)	Loss 0.0804 (0.8365)	Prec@1 100.00000 (74.03847)	Prec@5 100.00000 (99.51923)
Epoch: [53][27/60]	Time 0.15387 (0.41148)	Data 0.05214 (0.29104)	Loss 0.8281 (0.8362)	Prec@1 50.00000 (73.14815)	Prec@5 100.00000 (99.53704)
Epoch: [53][28/60]	Time 0.07874 (0.39960)	Data 0.00057 (0.28067)	Loss 0.4726 (0.8232)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (99.55357)
Epoch: [53][29/60]	Time 0.07157 (0.38829)	Data 0.00969 (0.27133)	Loss 0.6302 (0.8165)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (99.56896)
Epoch: [53][30/60]	Time 0.06274 (0.37744)	Data 0.00042 (0.26230)	Loss 1.7312 (0.8470)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (99.58334)
Epoch: [53][31/60]	Time 0.07664 (0.36773)	Data 0.00044 (0.25385)	Loss 2.3534 (0.8956)	Prec@1 37.50000 (72.17741)	Prec@5 100.00000 (99.59677)
Epoch: [53][32/60]	Time 0.05744 (0.35804)	Data 0.00191 (0.24598)	Loss 0.7428 (0.8909)	Prec@1 75.00000 (72.26562)	Prec@5 100.00000 (99.60938)
Epoch: [53][33/60]	Time 0.05250 (0.34878)	Data 0.01694 (0.23904)	Loss 0.0996 (0.8669)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (99.62122)
Epoch: [53][34/60]	Time 0.06708 (0.34049)	Data 0.00041 (0.23202)	Loss 1.1657 (0.8757)	Prec@1 75.00000 (72.79412)	Prec@5 100.00000 (99.63235)
Epoch: [53][35/60]	Time 0.03428 (0.33174)	Data 0.00042 (0.22540)	Loss 1.3344 (0.8888)	Prec@1 75.00000 (72.85714)	Prec@5 100.00000 (99.64286)
Epoch: [53][36/60]	Time 0.02831 (0.32331)	Data 0.00055 (0.21915)	Loss 1.0837 (0.8942)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (99.65278)
Epoch: [53][37/60]	Time 0.03740 (0.31559)	Data 0.00049 (0.21324)	Loss 1.4203 (0.9084)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (99.66216)
Epoch: [53][38/60]	Time 0.03651 (0.30824)	Data 0.00247 (0.20770)	Loss 2.2479 (0.9437)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.67105)
Epoch: [53][39/60]	Time 0.03278 (0.30118)	Data 0.00075 (0.20239)	Loss 0.1227 (0.9226)	Prec@1 87.50000 (72.11539)	Prec@5 100.00000 (99.67949)
Epoch: [53][40/60]	Time 0.02726 (0.29433)	Data 0.00068 (0.19735)	Loss 0.2758 (0.9064)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.68750)
Epoch: [53][41/60]	Time 0.02883 (0.28786)	Data 0.00075 (0.19255)	Loss 0.5765 (0.8984)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (99.69512)
Epoch: [53][42/60]	Time 0.02318 (0.28155)	Data 0.00048 (0.18798)	Loss 1.0602 (0.9022)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.70238)
Epoch: [53][43/60]	Time 0.02314 (0.27554)	Data 0.00077 (0.18363)	Loss 0.6334 (0.8960)	Prec@1 75.00000 (72.96512)	Prec@5 100.00000 (99.70930)
Epoch: [53][44/60]	Time 0.02270 (0.26980)	Data 0.00046 (0.17946)	Loss 0.7731 (0.8932)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (99.71591)
Epoch: [53][45/60]	Time 0.02415 (0.26434)	Data 0.00047 (0.17549)	Loss 0.7106 (0.8891)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.72222)
Epoch: [53][46/60]	Time 0.02368 (0.25911)	Data 0.00070 (0.17169)	Loss 1.1473 (0.8948)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.72826)
Epoch: [53][47/60]	Time 0.02298 (0.25408)	Data 0.00042 (0.16804)	Loss 1.0370 (0.8978)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.46808)
Epoch: [53][48/60]	Time 0.02199 (0.24925)	Data 0.00059 (0.16455)	Loss 0.4965 (0.8894)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.47917)
Epoch: [53][49/60]	Time 0.02222 (0.24462)	Data 0.00049 (0.16121)	Loss 0.3015 (0.8774)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.48979)
Epoch: [53][50/60]	Time 0.02188 (0.24016)	Data 0.00051 (0.15799)	Loss 0.7934 (0.8757)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.50000)
Epoch: [53][51/60]	Time 0.02201 (0.23588)	Data 0.00043 (0.15490)	Loss 0.3734 (0.8659)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.50980)
Epoch: [53][52/60]	Time 0.02291 (0.23179)	Data 0.00045 (0.15193)	Loss 0.9932 (0.8683)	Prec@1 37.50000 (72.83654)	Prec@5 87.50000 (99.27885)
Epoch: [53][53/60]	Time 0.02191 (0.22783)	Data 0.00045 (0.14907)	Loss 0.6742 (0.8647)	Prec@1 75.00000 (72.87736)	Prec@5 100.00000 (99.29246)
Epoch: [53][54/60]	Time 0.02157 (0.22401)	Data 0.00047 (0.14632)	Loss 0.9106 (0.8655)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (99.30556)
Epoch: [53][55/60]	Time 0.02554 (0.22040)	Data 0.00104 (0.14368)	Loss 1.2572 (0.8726)	Prec@1 62.50000 (72.72727)	Prec@5 87.50000 (99.09090)
Epoch: [53][56/60]	Time 0.02282 (0.21687)	Data 0.00068 (0.14113)	Loss 0.7634 (0.8707)	Prec@1 75.00000 (72.76786)	Prec@5 100.00000 (99.10715)
Epoch: [53][57/60]	Time 0.02238 (0.21346)	Data 0.00054 (0.13866)	Loss 1.4874 (0.8815)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (98.90351)
Epoch: [53][58/60]	Time 0.02167 (0.21015)	Data 0.00045 (0.13628)	Loss 0.7332 (0.8790)	Prec@1 75.00000 (72.62931)	Prec@5 100.00000 (98.92242)
Epoch: [53][59/60]	Time 0.02172 (0.20696)	Data 0.00046 (0.13398)	Loss 0.8194 (0.8779)	Prec@1 87.50000 (72.88136)	Prec@5 100.00000 (98.94068)
Epoch: [53][60/60]	Time 0.02164 (0.20387)	Data 0.00060 (0.13175)	Loss 0.4882 (0.8715)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (98.95834)
train at epoch 54
train at epoch 54
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [54][0/272]	 lr: 0.00400	Time 9.089 (9.089)	Data 7.567 (7.567)	Loss 0.0127 (0.0127)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][10/272]	 lr: 0.00400	Time 0.461 (1.301)	Data 0.132 (0.804)	Loss 0.0700 (0.0192)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][20/272]	 lr: 0.00400	Time 0.451 (0.890)	Data 0.128 (0.483)	Loss 0.0120 (0.0194)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][30/272]	 lr: 0.00400	Time 0.378 (0.738)	Data 0.129 (0.369)	Loss 0.0113 (0.0210)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [54][40/272]	 lr: 0.00400	Time 0.485 (0.668)	Data 0.127 (0.309)	Loss 0.0112 (0.0194)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [54][50/272]	 lr: 0.00400	Time 0.472 (0.629)	Data 0.129 (0.274)	Loss 0.0069 (0.0192)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [54][60/272]	 lr: 0.00400	Time 0.429 (0.599)	Data 0.123 (0.250)	Loss 0.0065 (0.0188)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [54][70/272]	 lr: 0.00400	Time 0.460 (0.578)	Data 0.128 (0.232)	Loss 0.0185 (0.0181)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [54][80/272]	 lr: 0.00400	Time 0.405 (0.561)	Data 0.128 (0.219)	Loss 0.0260 (0.0183)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [54][90/272]	 lr: 0.00400	Time 0.443 (0.548)	Data 0.130 (0.209)	Loss 0.0239 (0.0182)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [54][100/272]	 lr: 0.00400	Time 0.379 (0.539)	Data 0.110 (0.201)	Loss 0.0115 (0.0181)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [54][110/272]	 lr: 0.00400	Time 0.500 (0.532)	Data 0.125 (0.194)	Loss 0.0083 (0.0178)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [54][120/272]	 lr: 0.00400	Time 0.491 (0.525)	Data 0.151 (0.188)	Loss 0.0473 (0.0176)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [54][130/272]	 lr: 0.00400	Time 0.451 (0.517)	Data 0.116 (0.184)	Loss 0.0076 (0.0177)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [54][140/272]	 lr: 0.00400	Time 0.443 (0.511)	Data 0.126 (0.179)	Loss 0.0136 (0.0179)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [54][150/272]	 lr: 0.00400	Time 0.513 (0.506)	Data 0.142 (0.176)	Loss 0.0380 (0.0180)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [54][160/272]	 lr: 0.00400	Time 0.472 (0.503)	Data 0.141 (0.173)	Loss 0.0176 (0.0177)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [54][170/272]	 lr: 0.00400	Time 0.391 (0.500)	Data 0.118 (0.170)	Loss 0.0159 (0.0177)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [54][180/272]	 lr: 0.00400	Time 0.484 (0.497)	Data 0.126 (0.168)	Loss 0.0281 (0.0181)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [54][190/272]	 lr: 0.00400	Time 0.519 (0.495)	Data 0.142 (0.166)	Loss 0.0102 (0.0179)	Prec@1 100.00000 (99.98364)	Prec@5 100.00000 (100.00000)
Epoch: [54][200/272]	 lr: 0.00400	Time 0.522 (0.493)	Data 0.124 (0.164)	Loss 0.0149 (0.0178)	Prec@1 100.00000 (99.98445)	Prec@5 100.00000 (100.00000)
Epoch: [54][210/272]	 lr: 0.00400	Time 0.465 (0.491)	Data 0.142 (0.163)	Loss 0.0128 (0.0179)	Prec@1 100.00000 (99.98519)	Prec@5 100.00000 (100.00000)
Epoch: [54][220/272]	 lr: 0.00400	Time 0.363 (0.489)	Data 0.128 (0.161)	Loss 0.0071 (0.0177)	Prec@1 100.00000 (99.98586)	Prec@5 100.00000 (100.00001)
Epoch: [54][230/272]	 lr: 0.00400	Time 0.496 (0.487)	Data 0.129 (0.160)	Loss 0.0137 (0.0175)	Prec@1 100.00000 (99.98647)	Prec@5 100.00000 (100.00000)
Epoch: [54][240/272]	 lr: 0.00400	Time 0.274 (0.484)	Data 0.129 (0.158)	Loss 0.0073 (0.0174)	Prec@1 100.00000 (99.98704)	Prec@5 100.00000 (100.00001)
Epoch: [54][250/272]	 lr: 0.00400	Time 0.241 (0.474)	Data 0.127 (0.157)	Loss 0.0070 (0.0173)	Prec@1 100.00000 (99.98756)	Prec@5 100.00000 (100.00000)
Epoch: [54][260/272]	 lr: 0.00400	Time 0.241 (0.465)	Data 0.127 (0.156)	Loss 0.0082 (0.0175)	Prec@1 100.00000 (99.97605)	Prec@5 100.00000 (100.00000)
Epoch: [54][270/272]	 lr: 0.00400	Time 0.243 (0.457)	Data 0.127 (0.155)	Loss 0.0394 (0.0176)	Prec@1 100.00000 (99.97694)	Prec@5 100.00000 (100.00000)
validation at epoch 54
validation at epoch 54
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [54][1/60]	Time 6.76513 (6.76513)	Data 6.56444 (6.56444)	Loss 0.4184 (0.4184)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][2/60]	Time 0.21331 (3.48922)	Data 0.07924 (3.32184)	Loss 0.4197 (0.4190)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [54][3/60]	Time 0.13086 (2.36977)	Data 0.01787 (2.22052)	Loss 1.2494 (0.6958)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][4/60]	Time 0.25871 (1.84200)	Data 0.00757 (1.66728)	Loss 0.2493 (0.5842)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [54][5/60]	Time 0.44331 (1.56226)	Data 0.38269 (1.41036)	Loss 0.3759 (0.5425)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [54][6/60]	Time 0.14962 (1.32682)	Data 0.00456 (1.17606)	Loss 0.4384 (0.5252)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [54][7/60]	Time 0.19258 (1.16479)	Data 0.02793 (1.01204)	Loss 1.3406 (0.6417)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [54][8/60]	Time 0.04854 (1.02526)	Data 0.00242 (0.88584)	Loss 1.1943 (0.7107)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [54][9/60]	Time 0.16979 (0.93020)	Data 0.00466 (0.78793)	Loss 0.7316 (0.7131)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [54][10/60]	Time 0.12988 (0.85017)	Data 0.01115 (0.71025)	Loss 0.5535 (0.6971)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (100.00000)
Epoch: [54][11/60]	Time 0.27012 (0.79744)	Data 0.10132 (0.65490)	Loss 0.5844 (0.6869)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [54][12/60]	Time 0.15994 (0.74432)	Data 0.07186 (0.60631)	Loss 1.1897 (0.7288)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [54][13/60]	Time 0.16976 (0.70012)	Data 0.02405 (0.56152)	Loss 1.7070 (0.8040)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (100.00000)
Epoch: [54][14/60]	Time 0.14624 (0.66056)	Data 0.00065 (0.52146)	Loss 0.0735 (0.7518)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (100.00001)
Epoch: [54][15/60]	Time 0.12814 (0.62506)	Data 0.01396 (0.48762)	Loss 1.2581 (0.7856)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (100.00001)
Epoch: [54][16/60]	Time 0.15695 (0.59580)	Data 0.07941 (0.46211)	Loss 1.0553 (0.8024)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [54][17/60]	Time 0.08625 (0.56583)	Data 0.00419 (0.43517)	Loss 0.3655 (0.7767)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (100.00000)
Epoch: [54][18/60]	Time 0.18483 (0.54466)	Data 0.02653 (0.41247)	Loss 2.3711 (0.8653)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (100.00000)
Epoch: [54][19/60]	Time 0.12764 (0.52272)	Data 0.00164 (0.39085)	Loss 0.1035 (0.8252)	Prec@1 100.00000 (74.34210)	Prec@5 100.00000 (100.00000)
Epoch: [54][20/60]	Time 0.22211 (0.50769)	Data 0.00941 (0.37178)	Loss 2.3231 (0.9001)	Prec@1 62.50000 (73.75000)	Prec@5 100.00000 (100.00000)
Epoch: [54][21/60]	Time 0.11455 (0.48896)	Data 0.00493 (0.35431)	Loss 0.6473 (0.8881)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (100.00000)
Epoch: [54][22/60]	Time 0.12226 (0.47230)	Data 0.00171 (0.33828)	Loss 0.6180 (0.8758)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [54][23/60]	Time 0.24801 (0.46254)	Data 0.00261 (0.32369)	Loss 1.0094 (0.8816)	Prec@1 62.50000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [54][24/60]	Time 0.08513 (0.44682)	Data 0.00404 (0.31037)	Loss 0.7415 (0.8758)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [54][25/60]	Time 0.09882 (0.43290)	Data 0.00233 (0.29805)	Loss 0.4223 (0.8576)	Prec@1 87.50000 (73.50000)	Prec@5 100.00000 (100.00000)
Epoch: [54][26/60]	Time 0.22402 (0.42486)	Data 0.06411 (0.28905)	Loss 0.0390 (0.8261)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (100.00000)
Epoch: [54][27/60]	Time 0.15282 (0.41479)	Data 0.01186 (0.27878)	Loss 0.8425 (0.8267)	Prec@1 50.00000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [54][28/60]	Time 0.23394 (0.40833)	Data 0.00713 (0.26908)	Loss 0.4421 (0.8130)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (100.00001)
Epoch: [54][29/60]	Time 0.11771 (0.39831)	Data 0.00047 (0.25982)	Loss 0.4857 (0.8017)	Prec@1 75.00000 (74.13793)	Prec@5 100.00000 (100.00000)
Epoch: [54][30/60]	Time 0.06242 (0.38711)	Data 0.00068 (0.25118)	Loss 1.6917 (0.8314)	Prec@1 62.50000 (73.75001)	Prec@5 100.00000 (100.00001)
Epoch: [54][31/60]	Time 0.05341 (0.37635)	Data 0.00064 (0.24310)	Loss 2.6400 (0.8897)	Prec@1 37.50000 (72.58064)	Prec@5 87.50000 (99.59677)
Epoch: [54][32/60]	Time 0.03875 (0.36580)	Data 0.00053 (0.23552)	Loss 0.7061 (0.8840)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (99.60938)
Epoch: [54][33/60]	Time 0.03407 (0.35575)	Data 0.00144 (0.22843)	Loss 0.1002 (0.8602)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (99.62122)
Epoch: [54][34/60]	Time 0.03192 (0.34622)	Data 0.00057 (0.22172)	Loss 1.2718 (0.8723)	Prec@1 75.00000 (73.16177)	Prec@5 100.00000 (99.63235)
Epoch: [54][35/60]	Time 0.02467 (0.33703)	Data 0.00093 (0.21542)	Loss 1.5595 (0.8920)	Prec@1 75.00000 (73.21429)	Prec@5 87.50000 (99.28571)
Epoch: [54][36/60]	Time 0.02302 (0.32831)	Data 0.00051 (0.20945)	Loss 1.0733 (0.8970)	Prec@1 62.50000 (72.91666)	Prec@5 100.00000 (99.30556)
Epoch: [54][37/60]	Time 0.02321 (0.32007)	Data 0.00075 (0.20381)	Loss 1.6522 (0.9174)	Prec@1 62.50000 (72.63514)	Prec@5 100.00000 (99.32433)
Epoch: [54][38/60]	Time 0.02282 (0.31224)	Data 0.00074 (0.19846)	Loss 2.5626 (0.9607)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (99.34211)
Epoch: [54][39/60]	Time 0.02372 (0.30485)	Data 0.00072 (0.19339)	Loss 0.1347 (0.9395)	Prec@1 87.50000 (72.43590)	Prec@5 100.00000 (99.35898)
Epoch: [54][40/60]	Time 0.02250 (0.29779)	Data 0.00044 (0.18857)	Loss 0.2962 (0.9235)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (99.37500)
Epoch: [54][41/60]	Time 0.02288 (0.29108)	Data 0.00049 (0.18398)	Loss 0.5428 (0.9142)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (99.39024)
Epoch: [54][42/60]	Time 0.02282 (0.28469)	Data 0.00054 (0.17961)	Loss 1.2512 (0.9222)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (99.40476)
Epoch: [54][43/60]	Time 0.02336 (0.27862)	Data 0.00048 (0.17545)	Loss 0.6431 (0.9157)	Prec@1 62.50000 (72.67442)	Prec@5 100.00000 (99.41860)
Epoch: [54][44/60]	Time 0.02414 (0.27283)	Data 0.00045 (0.17147)	Loss 0.8536 (0.9143)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.43182)
Epoch: [54][45/60]	Time 0.02291 (0.26728)	Data 0.00047 (0.16767)	Loss 0.8465 (0.9128)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (99.44445)
Epoch: [54][46/60]	Time 0.02294 (0.26197)	Data 0.00051 (0.16404)	Loss 1.4978 (0.9255)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (99.45652)
Epoch: [54][47/60]	Time 0.02378 (0.25690)	Data 0.00050 (0.16056)	Loss 1.0503 (0.9282)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (99.20213)
Epoch: [54][48/60]	Time 0.02296 (0.25203)	Data 0.00045 (0.15722)	Loss 0.4560 (0.9183)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.21875)
Epoch: [54][49/60]	Time 0.02260 (0.24734)	Data 0.00053 (0.15402)	Loss 0.4294 (0.9083)	Prec@1 75.00000 (72.95918)	Prec@5 100.00000 (99.23470)
Epoch: [54][50/60]	Time 0.02274 (0.24285)	Data 0.00049 (0.15095)	Loss 0.7142 (0.9045)	Prec@1 75.00000 (73.00000)	Prec@5 100.00000 (99.25000)
Epoch: [54][51/60]	Time 0.02294 (0.23854)	Data 0.00046 (0.14800)	Loss 0.5879 (0.8983)	Prec@1 75.00000 (73.03922)	Prec@5 100.00000 (99.26471)
Epoch: [54][52/60]	Time 0.02386 (0.23441)	Data 0.00047 (0.14516)	Loss 1.0251 (0.9007)	Prec@1 50.00000 (72.59615)	Prec@5 87.50000 (99.03847)
Epoch: [54][53/60]	Time 0.02257 (0.23041)	Data 0.00044 (0.14243)	Loss 0.6382 (0.8957)	Prec@1 75.00000 (72.64151)	Prec@5 100.00000 (99.05660)
Epoch: [54][54/60]	Time 0.02281 (0.22657)	Data 0.00052 (0.13981)	Loss 1.0798 (0.8992)	Prec@1 62.50000 (72.45370)	Prec@5 100.00000 (99.07407)
Epoch: [54][55/60]	Time 0.02303 (0.22287)	Data 0.00055 (0.13727)	Loss 1.2015 (0.9046)	Prec@1 62.50000 (72.27273)	Prec@5 87.50000 (98.86363)
Epoch: [54][56/60]	Time 0.02767 (0.21938)	Data 0.00056 (0.13483)	Loss 0.8187 (0.9031)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (98.88393)
Epoch: [54][57/60]	Time 0.02387 (0.21595)	Data 0.00073 (0.13248)	Loss 1.6102 (0.9155)	Prec@1 62.50000 (72.14912)	Prec@5 87.50000 (98.68421)
Epoch: [54][58/60]	Time 0.02280 (0.21262)	Data 0.00050 (0.13020)	Loss 0.8013 (0.9135)	Prec@1 62.50000 (71.98276)	Prec@5 100.00000 (98.70689)
Epoch: [54][59/60]	Time 0.02260 (0.20940)	Data 0.00061 (0.12801)	Loss 0.8010 (0.9116)	Prec@1 87.50000 (72.24577)	Prec@5 100.00000 (98.72881)
Epoch: [54][60/60]	Time 0.02284 (0.20629)	Data 0.00044 (0.12588)	Loss 0.5220 (0.9051)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (98.75001)
train at epoch 55
train at epoch 55
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [55][0/272]	 lr: 0.00040	Time 9.506 (9.506)	Data 8.684 (8.684)	Loss 0.0076 (0.0076)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][10/272]	 lr: 0.00040	Time 0.406 (1.294)	Data 0.129 (0.900)	Loss 0.0227 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][20/272]	 lr: 0.00040	Time 0.467 (0.876)	Data 0.129 (0.533)	Loss 0.0057 (0.0127)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][30/272]	 lr: 0.00040	Time 0.479 (0.732)	Data 0.116 (0.402)	Loss 0.0151 (0.0161)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [55][40/272]	 lr: 0.00040	Time 0.401 (0.659)	Data 0.118 (0.335)	Loss 0.0089 (0.0160)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [55][50/272]	 lr: 0.00040	Time 0.536 (0.618)	Data 0.128 (0.294)	Loss 0.0125 (0.0166)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00000)
Epoch: [55][60/272]	 lr: 0.00040	Time 0.389 (0.584)	Data 0.142 (0.267)	Loss 0.0151 (0.0160)	Prec@1 100.00000 (99.84631)	Prec@5 100.00000 (99.99999)
Epoch: [55][70/272]	 lr: 0.00040	Time 0.331 (0.565)	Data 0.119 (0.248)	Loss 0.0083 (0.0153)	Prec@1 100.00000 (99.86796)	Prec@5 100.00000 (100.00000)
Epoch: [55][80/272]	 lr: 0.00040	Time 0.432 (0.551)	Data 0.128 (0.233)	Loss 0.0208 (0.0159)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [55][90/272]	 lr: 0.00040	Time 0.501 (0.539)	Data 0.128 (0.221)	Loss 0.0060 (0.0159)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [55][100/272]	 lr: 0.00040	Time 0.386 (0.530)	Data 0.106 (0.211)	Loss 0.0035 (0.0160)	Prec@1 100.00000 (99.87624)	Prec@5 100.00000 (100.00000)
Epoch: [55][110/272]	 lr: 0.00040	Time 0.330 (0.520)	Data 0.129 (0.204)	Loss 0.0160 (0.0160)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [55][120/272]	 lr: 0.00040	Time 0.475 (0.516)	Data 0.129 (0.198)	Loss 0.0082 (0.0165)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [55][130/272]	 lr: 0.00040	Time 0.411 (0.511)	Data 0.126 (0.192)	Loss 0.0355 (0.0162)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [55][140/272]	 lr: 0.00040	Time 0.369 (0.506)	Data 0.127 (0.188)	Loss 0.0120 (0.0163)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [55][150/272]	 lr: 0.00040	Time 0.547 (0.503)	Data 0.128 (0.184)	Loss 0.0026 (0.0169)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [55][160/272]	 lr: 0.00040	Time 0.478 (0.500)	Data 0.127 (0.180)	Loss 0.0139 (0.0165)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [55][170/272]	 lr: 0.00040	Time 0.512 (0.498)	Data 0.127 (0.177)	Loss 0.0097 (0.0165)	Prec@1 100.00000 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [55][180/272]	 lr: 0.00040	Time 0.447 (0.494)	Data 0.102 (0.174)	Loss 0.0103 (0.0166)	Prec@1 100.00000 (99.91368)	Prec@5 100.00000 (100.00001)
Epoch: [55][190/272]	 lr: 0.00040	Time 0.439 (0.491)	Data 0.134 (0.172)	Loss 0.0195 (0.0166)	Prec@1 100.00000 (99.91820)	Prec@5 100.00000 (100.00000)
Epoch: [55][200/272]	 lr: 0.00040	Time 0.428 (0.488)	Data 0.097 (0.169)	Loss 0.0155 (0.0166)	Prec@1 100.00000 (99.92226)	Prec@5 100.00000 (100.00000)
Epoch: [55][210/272]	 lr: 0.00040	Time 0.383 (0.486)	Data 0.101 (0.167)	Loss 0.0123 (0.0167)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [55][220/272]	 lr: 0.00040	Time 0.428 (0.484)	Data 0.130 (0.165)	Loss 0.0062 (0.0168)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [55][230/272]	 lr: 0.00040	Time 0.509 (0.482)	Data 0.124 (0.164)	Loss 0.0298 (0.0166)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [55][240/272]	 lr: 0.00040	Time 0.321 (0.479)	Data 0.127 (0.163)	Loss 0.0127 (0.0165)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [55][250/272]	 lr: 0.00040	Time 0.238 (0.469)	Data 0.129 (0.161)	Loss 0.0200 (0.0166)	Prec@1 100.00000 (99.92530)	Prec@5 100.00000 (100.00000)
Epoch: [55][260/272]	 lr: 0.00040	Time 0.240 (0.461)	Data 0.130 (0.160)	Loss 0.0085 (0.0166)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [55][270/272]	 lr: 0.00040	Time 0.240 (0.452)	Data 0.129 (0.159)	Loss 0.0262 (0.0166)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 55
validation at epoch 55
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [55][1/60]	Time 7.34687 (7.34687)	Data 7.29807 (7.29807)	Loss 0.4051 (0.4051)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][2/60]	Time 0.12471 (3.73579)	Data 0.02879 (3.66343)	Loss 0.4001 (0.4026)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [55][3/60]	Time 0.06615 (2.51258)	Data 0.00068 (2.44251)	Loss 1.2000 (0.6684)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [55][4/60]	Time 0.15326 (1.92275)	Data 0.04896 (1.84413)	Loss 0.2232 (0.5571)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [55][5/60]	Time 0.12069 (1.56234)	Data 0.01702 (1.47870)	Loss 0.3568 (0.5170)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [55][6/60]	Time 0.12415 (1.32264)	Data 0.00778 (1.23355)	Loss 0.3816 (0.4945)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [55][7/60]	Time 0.22245 (1.16547)	Data 0.11079 (1.07316)	Loss 1.4664 (0.6333)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [55][8/60]	Time 0.10082 (1.03239)	Data 0.02971 (0.94272)	Loss 1.2933 (0.7158)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [55][9/60]	Time 0.14231 (0.93349)	Data 0.04697 (0.84320)	Loss 0.7540 (0.7201)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][10/60]	Time 0.08375 (0.84852)	Data 0.00966 (0.75984)	Loss 0.6672 (0.7148)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][11/60]	Time 0.08244 (0.77887)	Data 0.00634 (0.69134)	Loss 0.6583 (0.7097)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [55][12/60]	Time 0.09713 (0.72206)	Data 0.02154 (0.63552)	Loss 1.4017 (0.7673)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [55][13/60]	Time 0.22826 (0.68408)	Data 0.02643 (0.58867)	Loss 1.7256 (0.8410)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [55][14/60]	Time 0.11765 (0.64362)	Data 0.04562 (0.54988)	Loss 0.0767 (0.7864)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [55][15/60]	Time 0.23997 (0.61671)	Data 0.09569 (0.51960)	Loss 1.2907 (0.8201)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [55][16/60]	Time 0.17602 (0.58916)	Data 0.00086 (0.48718)	Loss 1.0048 (0.8316)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [55][17/60]	Time 0.18090 (0.56515)	Data 0.00081 (0.45857)	Loss 0.3112 (0.8010)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [55][18/60]	Time 0.17866 (0.54368)	Data 0.02502 (0.43449)	Loss 2.5098 (0.8959)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [55][19/60]	Time 0.13401 (0.52212)	Data 0.00680 (0.41198)	Loss 0.1317 (0.8557)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [55][20/60]	Time 0.14976 (0.50350)	Data 0.01518 (0.39214)	Loss 2.4258 (0.9342)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (99.37500)
Epoch: [55][21/60]	Time 0.06146 (0.48245)	Data 0.00600 (0.37375)	Loss 0.4935 (0.9132)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.40476)
Epoch: [55][22/60]	Time 0.14021 (0.46689)	Data 0.00059 (0.35679)	Loss 0.5586 (0.8971)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.43182)
Epoch: [55][23/60]	Time 0.14459 (0.45288)	Data 0.01607 (0.34197)	Loss 1.0688 (0.9046)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (99.45652)
Epoch: [55][24/60]	Time 0.10743 (0.43849)	Data 0.01043 (0.32816)	Loss 0.5731 (0.8908)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (99.47917)
Epoch: [55][25/60]	Time 0.13046 (0.42617)	Data 0.01298 (0.31555)	Loss 0.3999 (0.8711)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (99.50000)
Epoch: [55][26/60]	Time 0.10191 (0.41369)	Data 0.00095 (0.30345)	Loss 0.0416 (0.8392)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (99.51923)
Epoch: [55][27/60]	Time 0.21352 (0.40628)	Data 0.04170 (0.29376)	Loss 0.9313 (0.8426)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (99.53704)
Epoch: [55][28/60]	Time 0.15738 (0.39739)	Data 0.03717 (0.28459)	Loss 0.4026 (0.8269)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.55357)
Epoch: [55][29/60]	Time 0.09738 (0.38705)	Data 0.01468 (0.27529)	Loss 0.6503 (0.8208)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.56896)
Epoch: [55][30/60]	Time 0.06307 (0.37625)	Data 0.00057 (0.26613)	Loss 1.8011 (0.8535)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (99.58334)
Epoch: [55][31/60]	Time 0.05968 (0.36603)	Data 0.00040 (0.25756)	Loss 2.6121 (0.9102)	Prec@1 37.50000 (73.38709)	Prec@5 100.00000 (99.59677)
Epoch: [55][32/60]	Time 0.03632 (0.35573)	Data 0.00045 (0.24952)	Loss 0.8404 (0.9080)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.60938)
Epoch: [55][33/60]	Time 0.03609 (0.34604)	Data 0.00045 (0.24197)	Loss 0.1623 (0.8854)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (99.62122)
Epoch: [55][34/60]	Time 0.02240 (0.33653)	Data 0.00046 (0.23487)	Loss 1.1974 (0.8946)	Prec@1 62.50000 (73.52941)	Prec@5 100.00000 (99.63235)
Epoch: [55][35/60]	Time 0.02277 (0.32756)	Data 0.00088 (0.22819)	Loss 1.3780 (0.9084)	Prec@1 75.00000 (73.57143)	Prec@5 100.00000 (99.64286)
Epoch: [55][36/60]	Time 0.02292 (0.31910)	Data 0.00088 (0.22187)	Loss 1.2951 (0.9192)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (99.65278)
Epoch: [55][37/60]	Time 0.02372 (0.31112)	Data 0.00041 (0.21589)	Loss 1.4871 (0.9345)	Prec@1 62.50000 (72.97298)	Prec@5 100.00000 (99.66216)
Epoch: [55][38/60]	Time 0.02267 (0.30353)	Data 0.00044 (0.21022)	Loss 2.3450 (0.9716)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (99.67105)
Epoch: [55][39/60]	Time 0.02314 (0.29634)	Data 0.00083 (0.20485)	Loss 0.1891 (0.9516)	Prec@1 87.50000 (72.75641)	Prec@5 100.00000 (99.67949)
Epoch: [55][40/60]	Time 0.02255 (0.28949)	Data 0.00057 (0.19974)	Loss 0.3898 (0.9375)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (99.68750)
Epoch: [55][41/60]	Time 0.02270 (0.28298)	Data 0.00041 (0.19488)	Loss 0.6130 (0.9296)	Prec@1 75.00000 (73.17073)	Prec@5 100.00000 (99.69512)
Epoch: [55][42/60]	Time 0.02483 (0.27684)	Data 0.00040 (0.19025)	Loss 1.1123 (0.9340)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (99.70238)
Epoch: [55][43/60]	Time 0.02300 (0.27093)	Data 0.00050 (0.18584)	Loss 0.7153 (0.9289)	Prec@1 62.50000 (72.96512)	Prec@5 100.00000 (99.70930)
Epoch: [55][44/60]	Time 0.02250 (0.26529)	Data 0.00051 (0.18162)	Loss 0.8577 (0.9273)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (99.71591)
Epoch: [55][45/60]	Time 0.02307 (0.25991)	Data 0.00052 (0.17760)	Loss 0.7544 (0.9234)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.72222)
Epoch: [55][46/60]	Time 0.02265 (0.25475)	Data 0.00050 (0.17375)	Loss 1.0748 (0.9267)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.72826)
Epoch: [55][47/60]	Time 0.02326 (0.24982)	Data 0.00049 (0.17006)	Loss 0.9984 (0.9282)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.46808)
Epoch: [55][48/60]	Time 0.02161 (0.24507)	Data 0.00042 (0.16653)	Loss 0.5401 (0.9202)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.47917)
Epoch: [55][49/60]	Time 0.02279 (0.24053)	Data 0.00046 (0.16314)	Loss 0.3036 (0.9076)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.48979)
Epoch: [55][50/60]	Time 0.02267 (0.23617)	Data 0.00045 (0.15989)	Loss 0.7189 (0.9038)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.50000)
Epoch: [55][51/60]	Time 0.02310 (0.23200)	Data 0.00043 (0.15676)	Loss 0.3720 (0.8934)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.50980)
Epoch: [55][52/60]	Time 0.02377 (0.22799)	Data 0.00045 (0.15375)	Loss 0.9512 (0.8945)	Prec@1 37.50000 (72.83654)	Prec@5 87.50000 (99.27885)
Epoch: [55][53/60]	Time 0.02346 (0.22413)	Data 0.00044 (0.15086)	Loss 0.5574 (0.8881)	Prec@1 75.00000 (72.87736)	Prec@5 100.00000 (99.29246)
Epoch: [55][54/60]	Time 0.02305 (0.22041)	Data 0.00051 (0.14808)	Loss 0.8951 (0.8883)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (99.30556)
Epoch: [55][55/60]	Time 0.02247 (0.21681)	Data 0.00048 (0.14539)	Loss 1.1828 (0.8936)	Prec@1 62.50000 (72.72727)	Prec@5 87.50000 (99.09090)
Epoch: [55][56/60]	Time 0.02537 (0.21339)	Data 0.00056 (0.14281)	Loss 0.7087 (0.8903)	Prec@1 75.00000 (72.76786)	Prec@5 100.00000 (99.10715)
Epoch: [55][57/60]	Time 0.02323 (0.21006)	Data 0.00062 (0.14031)	Loss 1.4391 (0.8999)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (98.90351)
Epoch: [55][58/60]	Time 0.02313 (0.20683)	Data 0.00046 (0.13790)	Loss 0.7033 (0.8965)	Prec@1 75.00000 (72.62931)	Prec@5 100.00000 (98.92242)
Epoch: [55][59/60]	Time 0.02295 (0.20372)	Data 0.00067 (0.13557)	Loss 0.7850 (0.8947)	Prec@1 87.50000 (72.88136)	Prec@5 100.00000 (98.94068)
Epoch: [55][60/60]	Time 0.02246 (0.20070)	Data 0.00056 (0.13332)	Loss 0.4553 (0.8873)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (98.95834)
train at epoch 56
train at epoch 56
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [56][0/272]	 lr: 0.00040	Time 10.034 (10.034)	Data 9.468 (9.468)	Loss 0.0400 (0.0400)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [56][10/272]	 lr: 0.00040	Time 0.357 (1.307)	Data 0.143 (0.982)	Loss 0.0118 (0.0190)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [56][20/272]	 lr: 0.00040	Time 0.452 (0.887)	Data 0.127 (0.577)	Loss 0.0175 (0.0191)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [56][30/272]	 lr: 0.00040	Time 0.420 (0.739)	Data 0.130 (0.433)	Loss 0.0095 (0.0183)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [56][40/272]	 lr: 0.00040	Time 0.404 (0.671)	Data 0.134 (0.360)	Loss 0.0074 (0.0172)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [56][50/272]	 lr: 0.00040	Time 0.415 (0.624)	Data 0.129 (0.316)	Loss 0.0066 (0.0171)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [56][60/272]	 lr: 0.00040	Time 0.513 (0.597)	Data 0.141 (0.286)	Loss 0.0112 (0.0161)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [56][70/272]	 lr: 0.00040	Time 0.514 (0.576)	Data 0.126 (0.263)	Loss 0.0188 (0.0156)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [56][80/272]	 lr: 0.00040	Time 0.366 (0.557)	Data 0.128 (0.247)	Loss 0.0096 (0.0158)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [56][90/272]	 lr: 0.00040	Time 0.433 (0.544)	Data 0.125 (0.234)	Loss 0.0078 (0.0156)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [56][100/272]	 lr: 0.00040	Time 0.376 (0.534)	Data 0.094 (0.223)	Loss 0.0155 (0.0165)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [56][110/272]	 lr: 0.00040	Time 0.489 (0.525)	Data 0.138 (0.214)	Loss 0.0207 (0.0159)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [56][120/272]	 lr: 0.00040	Time 0.412 (0.518)	Data 0.115 (0.207)	Loss 0.0096 (0.0161)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [56][130/272]	 lr: 0.00040	Time 0.462 (0.514)	Data 0.130 (0.201)	Loss 0.0073 (0.0159)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [56][140/272]	 lr: 0.00040	Time 0.499 (0.509)	Data 0.130 (0.195)	Loss 0.0098 (0.0167)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [56][150/272]	 lr: 0.00040	Time 0.459 (0.505)	Data 0.129 (0.191)	Loss 0.0080 (0.0168)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [56][160/272]	 lr: 0.00040	Time 0.494 (0.501)	Data 0.141 (0.187)	Loss 0.0128 (0.0165)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [56][170/272]	 lr: 0.00040	Time 0.379 (0.496)	Data 0.127 (0.184)	Loss 0.0083 (0.0172)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [56][180/272]	 lr: 0.00040	Time 0.411 (0.494)	Data 0.124 (0.181)	Loss 0.0070 (0.0170)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [56][190/272]	 lr: 0.00040	Time 0.391 (0.492)	Data 0.126 (0.178)	Loss 0.0351 (0.0169)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [56][200/272]	 lr: 0.00040	Time 0.440 (0.489)	Data 0.129 (0.175)	Loss 0.0049 (0.0165)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [56][210/272]	 lr: 0.00040	Time 0.514 (0.487)	Data 0.126 (0.173)	Loss 0.0162 (0.0171)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [56][220/272]	 lr: 0.00040	Time 0.520 (0.486)	Data 0.129 (0.171)	Loss 0.0191 (0.0178)	Prec@1 100.00000 (99.90102)	Prec@5 100.00000 (100.00001)
Epoch: [56][230/272]	 lr: 0.00040	Time 0.435 (0.484)	Data 0.111 (0.169)	Loss 0.1030 (0.0179)	Prec@1 100.00000 (99.90530)	Prec@5 100.00000 (100.00000)
Epoch: [56][240/272]	 lr: 0.00040	Time 0.329 (0.482)	Data 0.128 (0.167)	Loss 0.0247 (0.0178)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [56][250/272]	 lr: 0.00040	Time 0.237 (0.472)	Data 0.127 (0.166)	Loss 0.0054 (0.0178)	Prec@1 100.00000 (99.91285)	Prec@5 100.00000 (100.00000)
Epoch: [56][260/272]	 lr: 0.00040	Time 0.238 (0.463)	Data 0.129 (0.164)	Loss 0.0069 (0.0179)	Prec@1 100.00000 (99.91618)	Prec@5 100.00000 (100.00000)
Epoch: [56][270/272]	 lr: 0.00040	Time 0.238 (0.455)	Data 0.128 (0.163)	Loss 0.0090 (0.0178)	Prec@1 100.00000 (99.91928)	Prec@5 100.00000 (100.00000)
validation at epoch 56
validation at epoch 56
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [56][1/60]	Time 4.69910 (4.69910)	Data 4.54744 (4.54744)	Loss 0.3814 (0.3814)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [56][2/60]	Time 2.47877 (3.58894)	Data 2.39983 (3.47363)	Loss 0.4237 (0.4026)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [56][3/60]	Time 0.08612 (2.42133)	Data 0.00570 (2.31766)	Loss 1.0223 (0.6091)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [56][4/60]	Time 0.15063 (1.85366)	Data 0.00737 (1.74008)	Loss 0.1898 (0.5043)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [56][5/60]	Time 0.12896 (1.50872)	Data 0.00205 (1.39248)	Loss 0.3174 (0.4669)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [56][6/60]	Time 0.12680 (1.27840)	Data 0.00148 (1.16064)	Loss 0.2997 (0.4390)	Prec@1 100.00000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [56][7/60]	Time 0.27436 (1.13496)	Data 0.08007 (1.00628)	Loss 1.1738 (0.5440)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [56][8/60]	Time 0.21981 (1.02057)	Data 0.02608 (0.88375)	Loss 1.1003 (0.6135)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [56][9/60]	Time 0.09658 (0.91790)	Data 0.02723 (0.78858)	Loss 0.5556 (0.6071)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [56][10/60]	Time 0.06428 (0.83254)	Data 0.01539 (0.71126)	Loss 0.6041 (0.6068)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [56][11/60]	Time 0.12224 (0.76797)	Data 0.05014 (0.65116)	Loss 0.5841 (0.6047)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [56][12/60]	Time 0.13774 (0.71545)	Data 0.03258 (0.59961)	Loss 0.9172 (0.6308)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [56][13/60]	Time 0.20184 (0.67594)	Data 0.03495 (0.55618)	Loss 1.5467 (0.7012)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [56][14/60]	Time 0.11026 (0.63554)	Data 0.00048 (0.51648)	Loss 0.0666 (0.6559)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [56][15/60]	Time 0.22054 (0.60787)	Data 0.02325 (0.48360)	Loss 1.1381 (0.6880)	Prec@1 50.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [56][16/60]	Time 0.14850 (0.57916)	Data 0.00070 (0.45342)	Loss 1.1549 (0.7172)	Prec@1 75.00000 (76.56250)	Prec@5 87.50000 (99.21875)
Epoch: [56][17/60]	Time 0.11261 (0.55171)	Data 0.00443 (0.42701)	Loss 0.3391 (0.6950)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (99.26471)
Epoch: [56][18/60]	Time 0.09587 (0.52639)	Data 0.00061 (0.40332)	Loss 2.6588 (0.8041)	Prec@1 75.00000 (77.08334)	Prec@5 87.50000 (98.61111)
Epoch: [56][19/60]	Time 0.09184 (0.50352)	Data 0.01754 (0.38302)	Loss 0.1039 (0.7672)	Prec@1 100.00000 (78.28947)	Prec@5 100.00000 (98.68421)
Epoch: [56][20/60]	Time 0.20724 (0.48870)	Data 0.01843 (0.36479)	Loss 2.7152 (0.8646)	Prec@1 62.50000 (77.50000)	Prec@5 87.50000 (98.12500)
Epoch: [56][21/60]	Time 0.14975 (0.47256)	Data 0.01464 (0.34811)	Loss 0.6115 (0.8526)	Prec@1 62.50000 (76.78571)	Prec@5 100.00000 (98.21429)
Epoch: [56][22/60]	Time 0.09083 (0.45521)	Data 0.00951 (0.33272)	Loss 0.8223 (0.8512)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (98.29546)
Epoch: [56][23/60]	Time 0.21806 (0.44490)	Data 0.01056 (0.31872)	Loss 1.1552 (0.8644)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (98.36957)
Epoch: [56][24/60]	Time 0.13813 (0.43212)	Data 0.02038 (0.30628)	Loss 0.7373 (0.8591)	Prec@1 62.50000 (75.52084)	Prec@5 100.00000 (98.43750)
Epoch: [56][25/60]	Time 0.07972 (0.41802)	Data 0.03424 (0.29540)	Loss 0.4101 (0.8412)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (98.50000)
Epoch: [56][26/60]	Time 0.13371 (0.40709)	Data 0.02145 (0.28487)	Loss 0.0299 (0.8100)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (98.55769)
Epoch: [56][27/60]	Time 0.20509 (0.39961)	Data 0.06911 (0.27688)	Loss 1.2532 (0.8264)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (98.61111)
Epoch: [56][28/60]	Time 0.05005 (0.38712)	Data 0.00065 (0.26701)	Loss 0.2598 (0.8061)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (98.66072)
Epoch: [56][29/60]	Time 0.04132 (0.37520)	Data 0.00039 (0.25782)	Loss 0.6793 (0.8018)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (98.70689)
Epoch: [56][30/60]	Time 0.07235 (0.36510)	Data 0.00945 (0.24954)	Loss 1.8122 (0.8354)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (98.75001)
Epoch: [56][31/60]	Time 0.07423 (0.35572)	Data 0.00051 (0.24150)	Loss 2.6258 (0.8932)	Prec@1 37.50000 (75.00000)	Prec@5 87.50000 (98.38709)
Epoch: [56][32/60]	Time 0.08080 (0.34713)	Data 0.00036 (0.23397)	Loss 1.0699 (0.8987)	Prec@1 62.50000 (74.60938)	Prec@5 100.00000 (98.43750)
Epoch: [56][33/60]	Time 0.06047 (0.33844)	Data 0.00040 (0.22689)	Loss 0.0827 (0.8740)	Prec@1 100.00000 (75.37879)	Prec@5 100.00000 (98.48485)
Epoch: [56][34/60]	Time 0.07629 (0.33073)	Data 0.00040 (0.22023)	Loss 1.3357 (0.8876)	Prec@1 75.00000 (75.36765)	Prec@5 100.00000 (98.52941)
Epoch: [56][35/60]	Time 0.07733 (0.32349)	Data 0.00300 (0.21402)	Loss 1.3512 (0.9008)	Prec@1 75.00000 (75.35714)	Prec@5 87.50000 (98.21429)
Epoch: [56][36/60]	Time 0.05224 (0.31596)	Data 0.00046 (0.20809)	Loss 1.3394 (0.9130)	Prec@1 75.00000 (75.34722)	Prec@5 100.00000 (98.26389)
Epoch: [56][37/60]	Time 0.03904 (0.30847)	Data 0.00149 (0.20251)	Loss 1.6482 (0.9329)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.31081)
Epoch: [56][38/60]	Time 0.03517 (0.30128)	Data 0.00067 (0.19720)	Loss 2.4556 (0.9729)	Prec@1 50.00000 (74.34210)	Prec@5 100.00000 (98.35526)
Epoch: [56][39/60]	Time 0.03375 (0.29442)	Data 0.00053 (0.19215)	Loss 0.1034 (0.9506)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (98.39744)
Epoch: [56][40/60]	Time 0.02797 (0.28776)	Data 0.00052 (0.18736)	Loss 0.1850 (0.9315)	Prec@1 87.50000 (75.31250)	Prec@5 100.00000 (98.43750)
Epoch: [56][41/60]	Time 0.02812 (0.28143)	Data 0.00055 (0.18281)	Loss 0.8382 (0.9292)	Prec@1 75.00000 (75.30488)	Prec@5 100.00000 (98.47561)
Epoch: [56][42/60]	Time 0.02381 (0.27529)	Data 0.00056 (0.17847)	Loss 1.0450 (0.9320)	Prec@1 87.50000 (75.59524)	Prec@5 100.00000 (98.51191)
Epoch: [56][43/60]	Time 0.02295 (0.26942)	Data 0.00050 (0.17433)	Loss 0.9046 (0.9313)	Prec@1 62.50000 (75.29070)	Prec@5 100.00000 (98.54651)
Epoch: [56][44/60]	Time 0.02255 (0.26381)	Data 0.00076 (0.17038)	Loss 0.9363 (0.9315)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.57955)
Epoch: [56][45/60]	Time 0.02210 (0.25844)	Data 0.00080 (0.16661)	Loss 0.7260 (0.9269)	Prec@1 87.50000 (75.27778)	Prec@5 100.00000 (98.61111)
Epoch: [56][46/60]	Time 0.02260 (0.25332)	Data 0.00110 (0.16302)	Loss 0.7315 (0.9226)	Prec@1 50.00000 (74.72826)	Prec@5 100.00000 (98.64130)
Epoch: [56][47/60]	Time 0.02306 (0.24842)	Data 0.00099 (0.15957)	Loss 0.8997 (0.9222)	Prec@1 75.00000 (74.73404)	Prec@5 100.00000 (98.67021)
Epoch: [56][48/60]	Time 0.02239 (0.24371)	Data 0.00069 (0.15626)	Loss 0.4196 (0.9117)	Prec@1 75.00000 (74.73959)	Prec@5 100.00000 (98.69792)
Epoch: [56][49/60]	Time 0.02233 (0.23919)	Data 0.00103 (0.15309)	Loss 0.1310 (0.8958)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.72449)
Epoch: [56][50/60]	Time 0.02184 (0.23484)	Data 0.00079 (0.15004)	Loss 0.5211 (0.8883)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [56][51/60]	Time 0.02423 (0.23071)	Data 0.00043 (0.14711)	Loss 0.2148 (0.8751)	Prec@1 87.50000 (75.24510)	Prec@5 100.00000 (98.77451)
Epoch: [56][52/60]	Time 0.02348 (0.22673)	Data 0.00073 (0.14430)	Loss 0.8105 (0.8738)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.79808)
Epoch: [56][53/60]	Time 0.02192 (0.22286)	Data 0.00048 (0.14158)	Loss 0.3898 (0.8647)	Prec@1 87.50000 (75.23585)	Prec@5 100.00000 (98.82076)
Epoch: [56][54/60]	Time 0.02165 (0.21914)	Data 0.00046 (0.13897)	Loss 0.9924 (0.8670)	Prec@1 75.00000 (75.23148)	Prec@5 100.00000 (98.84259)
Epoch: [56][55/60]	Time 0.02174 (0.21555)	Data 0.00042 (0.13645)	Loss 1.2019 (0.8731)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.86363)
Epoch: [56][56/60]	Time 0.02225 (0.21210)	Data 0.00046 (0.13402)	Loss 0.6604 (0.8693)	Prec@1 62.50000 (74.77679)	Prec@5 100.00000 (98.88393)
Epoch: [56][57/60]	Time 0.02239 (0.20877)	Data 0.00040 (0.13168)	Loss 1.2562 (0.8761)	Prec@1 62.50000 (74.56140)	Prec@5 100.00000 (98.90351)
Epoch: [56][58/60]	Time 0.02273 (0.20556)	Data 0.00043 (0.12941)	Loss 0.6904 (0.8729)	Prec@1 62.50000 (74.35345)	Prec@5 100.00000 (98.92242)
Epoch: [56][59/60]	Time 0.02182 (0.20245)	Data 0.00046 (0.12723)	Loss 0.8608 (0.8727)	Prec@1 87.50000 (74.57627)	Prec@5 100.00000 (98.94068)
Epoch: [56][60/60]	Time 0.02458 (0.19948)	Data 0.00056 (0.12512)	Loss 0.6116 (0.8684)	Prec@1 87.50000 (74.79167)	Prec@5 100.00000 (98.95834)
train at epoch 57
train at epoch 57
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [57][0/272]	 lr: 0.00040	Time 10.190 (10.190)	Data 9.834 (9.834)	Loss 0.0038 (0.0038)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [57][10/272]	 lr: 0.00040	Time 0.405 (1.325)	Data 0.115 (1.006)	Loss 0.0085 (0.0097)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [57][20/272]	 lr: 0.00040	Time 0.482 (0.895)	Data 0.126 (0.589)	Loss 0.0041 (0.0100)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [57][30/272]	 lr: 0.00040	Time 0.375 (0.740)	Data 0.140 (0.441)	Loss 0.0233 (0.0157)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [57][40/272]	 lr: 0.00040	Time 0.442 (0.668)	Data 0.149 (0.366)	Loss 0.0113 (0.0165)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [57][50/272]	 lr: 0.00040	Time 0.424 (0.623)	Data 0.122 (0.320)	Loss 0.0043 (0.0156)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [57][60/272]	 lr: 0.00040	Time 0.346 (0.593)	Data 0.122 (0.289)	Loss 0.0071 (0.0154)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [57][70/272]	 lr: 0.00040	Time 0.401 (0.571)	Data 0.121 (0.267)	Loss 0.0038 (0.0163)	Prec@1 100.00000 (99.86796)	Prec@5 100.00000 (100.00000)
Epoch: [57][80/272]	 lr: 0.00040	Time 0.415 (0.558)	Data 0.129 (0.250)	Loss 0.0164 (0.0162)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [57][90/272]	 lr: 0.00040	Time 0.456 (0.545)	Data 0.139 (0.237)	Loss 0.0108 (0.0159)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [57][100/272]	 lr: 0.00040	Time 0.410 (0.535)	Data 0.125 (0.226)	Loss 0.0039 (0.0157)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [57][110/272]	 lr: 0.00040	Time 0.483 (0.528)	Data 0.130 (0.217)	Loss 0.0074 (0.0159)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [57][120/272]	 lr: 0.00040	Time 0.429 (0.521)	Data 0.124 (0.209)	Loss 0.0103 (0.0174)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [57][130/272]	 lr: 0.00040	Time 0.437 (0.516)	Data 0.137 (0.203)	Loss 0.0525 (0.0175)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [57][140/272]	 lr: 0.00040	Time 0.444 (0.511)	Data 0.154 (0.199)	Loss 0.0114 (0.0172)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [57][150/272]	 lr: 0.00040	Time 0.366 (0.506)	Data 0.128 (0.194)	Loss 0.0050 (0.0168)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [57][160/272]	 lr: 0.00040	Time 0.413 (0.504)	Data 0.125 (0.190)	Loss 0.0107 (0.0166)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [57][170/272]	 lr: 0.00040	Time 0.491 (0.505)	Data 0.141 (0.186)	Loss 0.0286 (0.0182)	Prec@1 100.00000 (99.87208)	Prec@5 100.00000 (100.00000)
Epoch: [57][180/272]	 lr: 0.00040	Time 0.408 (0.501)	Data 0.128 (0.183)	Loss 0.0531 (0.0188)	Prec@1 96.87500 (99.86189)	Prec@5 100.00000 (100.00001)
Epoch: [57][190/272]	 lr: 0.00040	Time 0.402 (0.498)	Data 0.129 (0.180)	Loss 0.0098 (0.0187)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [57][200/272]	 lr: 0.00040	Time 0.501 (0.495)	Data 0.149 (0.177)	Loss 0.0065 (0.0184)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [57][210/272]	 lr: 0.00040	Time 0.439 (0.493)	Data 0.134 (0.175)	Loss 0.0262 (0.0188)	Prec@1 100.00000 (99.88152)	Prec@5 100.00000 (100.00000)
Epoch: [57][220/272]	 lr: 0.00040	Time 0.495 (0.490)	Data 0.155 (0.173)	Loss 0.0138 (0.0185)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [57][230/272]	 lr: 0.00040	Time 0.423 (0.489)	Data 0.126 (0.171)	Loss 0.0161 (0.0184)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [57][240/272]	 lr: 0.00040	Time 0.365 (0.487)	Data 0.128 (0.170)	Loss 0.0081 (0.0186)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [57][250/272]	 lr: 0.00040	Time 0.239 (0.477)	Data 0.127 (0.168)	Loss 0.0147 (0.0187)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [57][260/272]	 lr: 0.00040	Time 0.236 (0.468)	Data 0.128 (0.166)	Loss 0.0041 (0.0184)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [57][270/272]	 lr: 0.00040	Time 0.239 (0.459)	Data 0.128 (0.165)	Loss 0.0176 (0.0184)	Prec@1 100.00000 (99.90775)	Prec@5 100.00000 (100.00000)
validation at epoch 57
validation at epoch 57
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [57][1/60]	Time 6.97228 (6.97228)	Data 6.88165 (6.88165)	Loss 0.3932 (0.3932)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [57][2/60]	Time 0.12065 (3.54646)	Data 0.00543 (3.44354)	Loss 0.3827 (0.3880)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [57][3/60]	Time 0.23311 (2.44201)	Data 0.05279 (2.31329)	Loss 1.1109 (0.6289)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [57][4/60]	Time 0.16997 (1.87400)	Data 0.00373 (1.73590)	Loss 0.1510 (0.5094)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [57][5/60]	Time 0.38375 (1.57595)	Data 0.30243 (1.44921)	Loss 0.3653 (0.4806)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [57][6/60]	Time 0.19745 (1.34620)	Data 0.00994 (1.20933)	Loss 0.3496 (0.4588)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [57][7/60]	Time 0.10888 (1.16944)	Data 0.01516 (1.03873)	Loss 1.0333 (0.5409)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [57][8/60]	Time 0.17947 (1.04569)	Data 0.03352 (0.91308)	Loss 0.9384 (0.5906)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [57][9/60]	Time 0.20047 (0.95178)	Data 0.00066 (0.81170)	Loss 0.6527 (0.5975)	Prec@1 62.50000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [57][10/60]	Time 0.19891 (0.87649)	Data 0.00047 (0.73058)	Loss 0.4586 (0.5836)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [57][11/60]	Time 0.04700 (0.80109)	Data 0.00330 (0.66446)	Loss 0.4967 (0.5757)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [57][12/60]	Time 0.11464 (0.74388)	Data 0.02473 (0.61115)	Loss 0.9891 (0.6101)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [57][13/60]	Time 0.14233 (0.69761)	Data 0.01416 (0.56523)	Loss 1.5542 (0.6827)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [57][14/60]	Time 0.13181 (0.65719)	Data 0.00814 (0.52544)	Loss 0.0905 (0.6404)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [57][15/60]	Time 0.06302 (0.61758)	Data 0.00955 (0.49104)	Loss 0.9043 (0.6580)	Prec@1 75.00000 (77.50001)	Prec@5 100.00000 (100.00001)
Epoch: [57][16/60]	Time 0.09212 (0.58474)	Data 0.01514 (0.46130)	Loss 1.0535 (0.6827)	Prec@1 75.00000 (77.34375)	Prec@5 100.00000 (100.00000)
Epoch: [57][17/60]	Time 0.06273 (0.55403)	Data 0.01767 (0.43520)	Loss 0.3210 (0.6615)	Prec@1 87.50000 (77.94118)	Prec@5 100.00000 (100.00000)
Epoch: [57][18/60]	Time 0.13671 (0.53085)	Data 0.01996 (0.41213)	Loss 2.3936 (0.7577)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [57][19/60]	Time 0.23133 (0.51509)	Data 0.07444 (0.39436)	Loss 0.1768 (0.7271)	Prec@1 87.50000 (78.28947)	Prec@5 100.00000 (100.00000)
Epoch: [57][20/60]	Time 0.23848 (0.50126)	Data 0.01179 (0.37523)	Loss 2.3986 (0.8107)	Prec@1 62.50000 (77.50000)	Prec@5 87.50000 (99.37500)
Epoch: [57][21/60]	Time 0.16597 (0.48529)	Data 0.00066 (0.35740)	Loss 0.4744 (0.7947)	Prec@1 75.00000 (77.38095)	Prec@5 100.00000 (99.40476)
Epoch: [57][22/60]	Time 0.11618 (0.46851)	Data 0.01335 (0.34176)	Loss 0.6610 (0.7886)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (99.43182)
Epoch: [57][23/60]	Time 0.16342 (0.45525)	Data 0.06320 (0.32965)	Loss 1.0294 (0.7991)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (99.45652)
Epoch: [57][24/60]	Time 0.08799 (0.43994)	Data 0.00276 (0.31603)	Loss 0.6503 (0.7929)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (99.47917)
Epoch: [57][25/60]	Time 0.07401 (0.42531)	Data 0.00105 (0.30343)	Loss 0.4477 (0.7791)	Prec@1 87.50000 (77.00000)	Prec@5 100.00000 (99.50000)
Epoch: [57][26/60]	Time 0.13860 (0.41428)	Data 0.02315 (0.29265)	Loss 0.0464 (0.7509)	Prec@1 100.00000 (77.88462)	Prec@5 100.00000 (99.51923)
Epoch: [57][27/60]	Time 0.18699 (0.40586)	Data 0.05436 (0.28382)	Loss 0.8824 (0.7558)	Prec@1 62.50000 (77.31481)	Prec@5 100.00000 (99.53704)
Epoch: [57][28/60]	Time 0.16003 (0.39708)	Data 0.01247 (0.27413)	Loss 0.3489 (0.7412)	Prec@1 87.50000 (77.67857)	Prec@5 100.00000 (99.55357)
Epoch: [57][29/60]	Time 0.07936 (0.38613)	Data 0.00065 (0.26470)	Loss 0.7288 (0.7408)	Prec@1 75.00000 (77.58620)	Prec@5 100.00000 (99.56896)
Epoch: [57][30/60]	Time 0.09324 (0.37636)	Data 0.00055 (0.25589)	Loss 1.7829 (0.7755)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (99.58334)
Epoch: [57][31/60]	Time 0.07058 (0.36650)	Data 0.00051 (0.24766)	Loss 2.3534 (0.8264)	Prec@1 37.50000 (75.80645)	Prec@5 100.00000 (99.59677)
Epoch: [57][32/60]	Time 0.06895 (0.35720)	Data 0.01316 (0.24033)	Loss 0.8122 (0.8260)	Prec@1 62.50000 (75.39062)	Prec@5 100.00000 (99.60938)
Epoch: [57][33/60]	Time 0.03773 (0.34752)	Data 0.00559 (0.23322)	Loss 0.1042 (0.8041)	Prec@1 87.50000 (75.75758)	Prec@5 100.00000 (99.62122)
Epoch: [57][34/60]	Time 0.03174 (0.33823)	Data 0.00347 (0.22646)	Loss 1.1787 (0.8151)	Prec@1 75.00000 (75.73530)	Prec@5 100.00000 (99.63235)
Epoch: [57][35/60]	Time 0.03279 (0.32951)	Data 0.00450 (0.22012)	Loss 1.2720 (0.8282)	Prec@1 75.00000 (75.71429)	Prec@5 87.50000 (99.28571)
Epoch: [57][36/60]	Time 0.02869 (0.32115)	Data 0.00444 (0.21413)	Loss 1.1525 (0.8372)	Prec@1 62.50000 (75.34722)	Prec@5 100.00000 (99.30556)
Epoch: [57][37/60]	Time 0.03401 (0.31339)	Data 0.00052 (0.20835)	Loss 1.4422 (0.8536)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.32433)
Epoch: [57][38/60]	Time 0.02865 (0.30590)	Data 0.00051 (0.20288)	Loss 2.2572 (0.8905)	Prec@1 50.00000 (74.34210)	Prec@5 100.00000 (99.34211)
Epoch: [57][39/60]	Time 0.02735 (0.29875)	Data 0.00065 (0.19770)	Loss 0.1310 (0.8710)	Prec@1 87.50000 (74.67949)	Prec@5 100.00000 (99.35898)
Epoch: [57][40/60]	Time 0.03034 (0.29204)	Data 0.00065 (0.19277)	Loss 0.2387 (0.8552)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.37500)
Epoch: [57][41/60]	Time 0.02338 (0.28549)	Data 0.00081 (0.18809)	Loss 0.6570 (0.8504)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.39024)
Epoch: [57][42/60]	Time 0.02208 (0.27922)	Data 0.00067 (0.18363)	Loss 1.0393 (0.8549)	Prec@1 87.50000 (75.29762)	Prec@5 100.00000 (99.40476)
Epoch: [57][43/60]	Time 0.02165 (0.27323)	Data 0.00042 (0.17937)	Loss 0.6938 (0.8511)	Prec@1 75.00000 (75.29070)	Prec@5 100.00000 (99.41860)
Epoch: [57][44/60]	Time 0.02229 (0.26753)	Data 0.00042 (0.17530)	Loss 0.7858 (0.8496)	Prec@1 75.00000 (75.28410)	Prec@5 100.00000 (99.43182)
Epoch: [57][45/60]	Time 0.02271 (0.26209)	Data 0.00047 (0.17141)	Loss 0.7062 (0.8465)	Prec@1 87.50000 (75.55556)	Prec@5 100.00000 (99.44445)
Epoch: [57][46/60]	Time 0.02181 (0.25686)	Data 0.00045 (0.16770)	Loss 0.8706 (0.8470)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.45652)
Epoch: [57][47/60]	Time 0.02180 (0.25186)	Data 0.00045 (0.16414)	Loss 0.9876 (0.8500)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.20213)
Epoch: [57][48/60]	Time 0.02165 (0.24706)	Data 0.00042 (0.16073)	Loss 0.4059 (0.8407)	Prec@1 87.50000 (75.26042)	Prec@5 100.00000 (99.21875)
Epoch: [57][49/60]	Time 0.02202 (0.24247)	Data 0.00040 (0.15746)	Loss 0.1956 (0.8276)	Prec@1 87.50000 (75.51020)	Prec@5 100.00000 (99.23470)
Epoch: [57][50/60]	Time 0.02234 (0.23807)	Data 0.00047 (0.15432)	Loss 0.6472 (0.8239)	Prec@1 75.00000 (75.50000)	Prec@5 100.00000 (99.25000)
Epoch: [57][51/60]	Time 0.02188 (0.23383)	Data 0.00044 (0.15130)	Loss 0.3668 (0.8150)	Prec@1 75.00000 (75.49020)	Prec@5 100.00000 (99.26471)
Epoch: [57][52/60]	Time 0.02150 (0.22975)	Data 0.00045 (0.14840)	Loss 0.9571 (0.8177)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.27885)
Epoch: [57][53/60]	Time 0.02141 (0.22582)	Data 0.00038 (0.14561)	Loss 0.5169 (0.8120)	Prec@1 87.50000 (75.23585)	Prec@5 100.00000 (99.29246)
Epoch: [57][54/60]	Time 0.02319 (0.22206)	Data 0.00047 (0.14292)	Loss 0.9764 (0.8151)	Prec@1 75.00000 (75.23148)	Prec@5 100.00000 (99.30556)
Epoch: [57][55/60]	Time 0.02256 (0.21844)	Data 0.00048 (0.14033)	Loss 1.2754 (0.8235)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (99.09090)
Epoch: [57][56/60]	Time 0.02180 (0.21492)	Data 0.00048 (0.13783)	Loss 0.7131 (0.8215)	Prec@1 62.50000 (74.77679)	Prec@5 100.00000 (99.10715)
Epoch: [57][57/60]	Time 0.02170 (0.21153)	Data 0.00047 (0.13542)	Loss 1.3144 (0.8301)	Prec@1 62.50000 (74.56140)	Prec@5 100.00000 (99.12281)
Epoch: [57][58/60]	Time 0.02171 (0.20826)	Data 0.00046 (0.13309)	Loss 0.6594 (0.8272)	Prec@1 62.50000 (74.35345)	Prec@5 100.00000 (99.13793)
Epoch: [57][59/60]	Time 0.02178 (0.20510)	Data 0.00045 (0.13085)	Loss 0.8805 (0.8281)	Prec@1 75.00000 (74.36441)	Prec@5 100.00000 (99.15254)
Epoch: [57][60/60]	Time 0.02249 (0.20206)	Data 0.00056 (0.12867)	Loss 0.6322 (0.8248)	Prec@1 87.50000 (74.58334)	Prec@5 100.00000 (99.16667)
train at epoch 58
train at epoch 58
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [58][0/272]	 lr: 0.00040	Time 7.944 (7.944)	Data 6.293 (6.293)	Loss 0.0225 (0.0225)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [58][10/272]	 lr: 0.00040	Time 0.443 (1.307)	Data 0.129 (0.729)	Loss 0.0225 (0.0185)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [58][20/272]	 lr: 0.00040	Time 0.414 (0.917)	Data 0.126 (0.441)	Loss 0.0074 (0.0178)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [58][30/272]	 lr: 0.00040	Time 0.396 (0.763)	Data 0.128 (0.341)	Loss 0.1033 (0.0212)	Prec@1 96.87500 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [58][40/272]	 lr: 0.00040	Time 0.356 (0.694)	Data 0.094 (0.288)	Loss 0.0068 (0.0192)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [58][50/272]	 lr: 0.00040	Time 0.529 (0.657)	Data 0.143 (0.256)	Loss 0.0247 (0.0181)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [58][60/272]	 lr: 0.00040	Time 0.427 (0.620)	Data 0.131 (0.235)	Loss 0.0431 (0.0177)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [58][70/272]	 lr: 0.00040	Time 0.453 (0.595)	Data 0.142 (0.221)	Loss 0.0054 (0.0165)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [58][80/272]	 lr: 0.00040	Time 0.462 (0.575)	Data 0.126 (0.209)	Loss 0.0041 (0.0169)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [58][90/272]	 lr: 0.00040	Time 0.426 (0.562)	Data 0.142 (0.200)	Loss 0.0184 (0.0176)	Prec@1 100.00000 (99.86264)	Prec@5 100.00000 (100.00000)
Epoch: [58][100/272]	 lr: 0.00040	Time 0.349 (0.552)	Data 0.122 (0.193)	Loss 0.0074 (0.0168)	Prec@1 100.00000 (99.87624)	Prec@5 100.00000 (100.00000)
Epoch: [58][110/272]	 lr: 0.00040	Time 0.477 (0.542)	Data 0.141 (0.187)	Loss 0.0155 (0.0163)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [58][120/272]	 lr: 0.00040	Time 0.477 (0.533)	Data 0.127 (0.183)	Loss 0.0208 (0.0164)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [58][130/272]	 lr: 0.00040	Time 0.458 (0.526)	Data 0.160 (0.179)	Loss 0.1061 (0.0175)	Prec@1 93.75000 (99.85687)	Prec@5 100.00000 (100.00000)
Epoch: [58][140/272]	 lr: 0.00040	Time 0.476 (0.521)	Data 0.133 (0.176)	Loss 0.0106 (0.0174)	Prec@1 100.00000 (99.86702)	Prec@5 100.00000 (100.00000)
Epoch: [58][150/272]	 lr: 0.00040	Time 0.399 (0.516)	Data 0.127 (0.173)	Loss 0.0119 (0.0171)	Prec@1 100.00000 (99.87582)	Prec@5 100.00000 (100.00000)
Epoch: [58][160/272]	 lr: 0.00040	Time 0.487 (0.511)	Data 0.127 (0.170)	Loss 0.0062 (0.0174)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [58][170/272]	 lr: 0.00040	Time 0.540 (0.507)	Data 0.146 (0.168)	Loss 0.0109 (0.0170)	Prec@1 100.00000 (99.87208)	Prec@5 100.00000 (100.00000)
Epoch: [58][180/272]	 lr: 0.00040	Time 0.455 (0.504)	Data 0.127 (0.166)	Loss 0.0073 (0.0170)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [58][190/272]	 lr: 0.00040	Time 0.433 (0.500)	Data 0.128 (0.164)	Loss 0.0084 (0.0172)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [58][200/272]	 lr: 0.00040	Time 0.419 (0.497)	Data 0.129 (0.162)	Loss 0.0102 (0.0170)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [58][210/272]	 lr: 0.00040	Time 0.485 (0.495)	Data 0.140 (0.161)	Loss 0.0057 (0.0168)	Prec@1 100.00000 (99.88152)	Prec@5 100.00000 (100.00000)
Epoch: [58][220/272]	 lr: 0.00040	Time 0.392 (0.492)	Data 0.127 (0.159)	Loss 0.0153 (0.0167)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [58][230/272]	 lr: 0.00040	Time 0.397 (0.490)	Data 0.128 (0.158)	Loss 0.0549 (0.0167)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [58][240/272]	 lr: 0.00040	Time 0.212 (0.489)	Data 0.081 (0.157)	Loss 0.0142 (0.0170)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [58][250/272]	 lr: 0.00040	Time 0.239 (0.479)	Data 0.129 (0.156)	Loss 0.0033 (0.0168)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [58][260/272]	 lr: 0.00040	Time 0.238 (0.470)	Data 0.128 (0.155)	Loss 0.0076 (0.0172)	Prec@1 100.00000 (99.89224)	Prec@5 100.00000 (100.00000)
Epoch: [58][270/272]	 lr: 0.00040	Time 0.239 (0.461)	Data 0.129 (0.154)	Loss 0.0095 (0.0179)	Prec@1 100.00000 (99.87315)	Prec@5 100.00000 (100.00000)
validation at epoch 58
validation at epoch 58
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [58][1/60]	Time 5.18224 (5.18224)	Data 5.03325 (5.03325)	Loss 0.4982 (0.4982)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [58][2/60]	Time 2.15165 (3.66695)	Data 2.02366 (3.52846)	Loss 0.6064 (0.5523)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [58][3/60]	Time 0.33527 (2.55639)	Data 0.28824 (2.44838)	Loss 1.2542 (0.7863)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [58][4/60]	Time 0.13601 (1.95129)	Data 0.04150 (1.84666)	Loss 0.2578 (0.6541)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [58][5/60]	Time 0.10985 (1.58301)	Data 0.01608 (1.48055)	Loss 0.2027 (0.5639)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [58][6/60]	Time 0.21843 (1.35558)	Data 0.04941 (1.24202)	Loss 0.4261 (0.5409)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [58][7/60]	Time 0.19138 (1.18926)	Data 0.06024 (1.07320)	Loss 1.2748 (0.6457)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [58][8/60]	Time 0.09560 (1.05255)	Data 0.00896 (0.94017)	Loss 1.1380 (0.7073)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [58][9/60]	Time 0.24521 (0.96285)	Data 0.07801 (0.84437)	Loss 0.6243 (0.6980)	Prec@1 87.50000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [58][10/60]	Time 0.11514 (0.87808)	Data 0.00963 (0.76090)	Loss 0.6256 (0.6908)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [58][11/60]	Time 0.10689 (0.80797)	Data 0.03361 (0.69478)	Loss 0.5662 (0.6795)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [58][12/60]	Time 0.09420 (0.74849)	Data 0.00279 (0.63712)	Loss 1.3922 (0.7389)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [58][13/60]	Time 0.13460 (0.70127)	Data 0.02050 (0.58968)	Loss 2.3460 (0.8625)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [58][14/60]	Time 0.12825 (0.66034)	Data 0.01500 (0.54863)	Loss 0.0616 (0.8053)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [58][15/60]	Time 0.11428 (0.62393)	Data 0.00516 (0.51240)	Loss 1.2905 (0.8376)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [58][16/60]	Time 0.11556 (0.59216)	Data 0.00069 (0.48042)	Loss 0.8602 (0.8390)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [58][17/60]	Time 0.19507 (0.56880)	Data 0.05717 (0.45552)	Loss 0.3856 (0.8124)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [58][18/60]	Time 0.14653 (0.54534)	Data 0.01252 (0.43091)	Loss 2.1705 (0.8878)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (100.00000)
Epoch: [58][19/60]	Time 0.14374 (0.52420)	Data 0.01258 (0.40890)	Loss 0.1209 (0.8475)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (100.00000)
Epoch: [58][20/60]	Time 0.16283 (0.50614)	Data 0.03116 (0.39001)	Loss 1.9522 (0.9027)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [58][21/60]	Time 0.13217 (0.48833)	Data 0.00609 (0.37173)	Loss 0.5505 (0.8859)	Prec@1 75.00000 (76.19048)	Prec@5 100.00000 (100.00000)
Epoch: [58][22/60]	Time 0.12119 (0.47164)	Data 0.00625 (0.35511)	Loss 0.5314 (0.8698)	Prec@1 75.00000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [58][23/60]	Time 0.15338 (0.45780)	Data 0.01589 (0.34036)	Loss 0.9125 (0.8717)	Prec@1 62.50000 (75.54348)	Prec@5 100.00000 (100.00000)
Epoch: [58][24/60]	Time 0.13154 (0.44421)	Data 0.00975 (0.32659)	Loss 0.7483 (0.8665)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [58][25/60]	Time 0.16639 (0.43310)	Data 0.00694 (0.31380)	Loss 0.4368 (0.8493)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (100.00000)
Epoch: [58][26/60]	Time 0.16038 (0.42261)	Data 0.07496 (0.30462)	Loss 0.0759 (0.8196)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (100.00000)
Epoch: [58][27/60]	Time 0.10826 (0.41096)	Data 0.01062 (0.29373)	Loss 0.6395 (0.8129)	Prec@1 50.00000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [58][28/60]	Time 0.12460 (0.40074)	Data 0.00682 (0.28348)	Loss 0.5150 (0.8023)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [58][29/60]	Time 0.08502 (0.38985)	Data 0.00047 (0.27372)	Loss 0.5380 (0.7932)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (100.00000)
Epoch: [58][30/60]	Time 0.08478 (0.37968)	Data 0.00050 (0.26461)	Loss 1.5547 (0.8185)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (100.00001)
Epoch: [58][31/60]	Time 0.08113 (0.37005)	Data 0.00517 (0.25625)	Loss 2.1739 (0.8623)	Prec@1 25.00000 (73.79032)	Prec@5 87.50000 (99.59677)
Epoch: [58][32/60]	Time 0.07354 (0.36078)	Data 0.00041 (0.24825)	Loss 0.5168 (0.8515)	Prec@1 75.00000 (73.82812)	Prec@5 100.00000 (99.60938)
Epoch: [58][33/60]	Time 0.04292 (0.35115)	Data 0.00550 (0.24089)	Loss 0.0644 (0.8276)	Prec@1 100.00000 (74.62122)	Prec@5 100.00000 (99.62122)
Epoch: [58][34/60]	Time 0.03996 (0.34200)	Data 0.00047 (0.23382)	Loss 1.0340 (0.8337)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (99.63235)
Epoch: [58][35/60]	Time 0.03719 (0.33329)	Data 0.00173 (0.22719)	Loss 1.3703 (0.8490)	Prec@1 75.00000 (74.28571)	Prec@5 87.50000 (99.28571)
Epoch: [58][36/60]	Time 0.03022 (0.32487)	Data 0.00069 (0.22090)	Loss 0.8174 (0.8481)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [58][37/60]	Time 0.03681 (0.31709)	Data 0.00072 (0.21495)	Loss 1.2822 (0.8599)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (99.32433)
Epoch: [58][38/60]	Time 0.02758 (0.30947)	Data 0.00063 (0.20931)	Loss 1.9226 (0.8878)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (99.34211)
Epoch: [58][39/60]	Time 0.02278 (0.30212)	Data 0.00060 (0.20396)	Loss 0.0971 (0.8676)	Prec@1 100.00000 (74.03846)	Prec@5 100.00000 (99.35898)
Epoch: [58][40/60]	Time 0.02321 (0.29514)	Data 0.00074 (0.19888)	Loss 0.1576 (0.8498)	Prec@1 87.50000 (74.37500)	Prec@5 100.00000 (99.37500)
Epoch: [58][41/60]	Time 0.02314 (0.28851)	Data 0.00073 (0.19404)	Loss 0.4416 (0.8399)	Prec@1 75.00000 (74.39024)	Prec@5 100.00000 (99.39024)
Epoch: [58][42/60]	Time 0.02355 (0.28220)	Data 0.00073 (0.18944)	Loss 0.9889 (0.8434)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (99.40476)
Epoch: [58][43/60]	Time 0.02293 (0.27617)	Data 0.00060 (0.18505)	Loss 0.5652 (0.8369)	Prec@1 75.00000 (74.41860)	Prec@5 100.00000 (99.41860)
Epoch: [58][44/60]	Time 0.02402 (0.27044)	Data 0.00077 (0.18086)	Loss 0.5817 (0.8311)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (99.43182)
Epoch: [58][45/60]	Time 0.02318 (0.26495)	Data 0.00044 (0.17685)	Loss 0.7194 (0.8287)	Prec@1 87.50000 (74.72222)	Prec@5 100.00000 (99.44445)
Epoch: [58][46/60]	Time 0.02573 (0.25975)	Data 0.00047 (0.17302)	Loss 1.0218 (0.8329)	Prec@1 50.00000 (74.18478)	Prec@5 100.00000 (99.45652)
Epoch: [58][47/60]	Time 0.02251 (0.25470)	Data 0.00050 (0.16935)	Loss 1.0125 (0.8367)	Prec@1 75.00000 (74.20213)	Prec@5 87.50000 (99.20213)
Epoch: [58][48/60]	Time 0.02309 (0.24987)	Data 0.00042 (0.16583)	Loss 0.4180 (0.8280)	Prec@1 87.50000 (74.47917)	Prec@5 100.00000 (99.21875)
Epoch: [58][49/60]	Time 0.02297 (0.24524)	Data 0.00048 (0.16245)	Loss 0.2669 (0.8165)	Prec@1 87.50000 (74.74490)	Prec@5 100.00000 (99.23470)
Epoch: [58][50/60]	Time 0.02329 (0.24080)	Data 0.00042 (0.15921)	Loss 0.7676 (0.8155)	Prec@1 75.00000 (74.75000)	Prec@5 100.00000 (99.25000)
Epoch: [58][51/60]	Time 0.02277 (0.23653)	Data 0.00047 (0.15610)	Loss 0.2191 (0.8038)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.26471)
Epoch: [58][52/60]	Time 0.02281 (0.23242)	Data 0.00047 (0.15311)	Loss 0.8012 (0.8038)	Prec@1 62.50000 (74.75962)	Prec@5 87.50000 (99.03847)
Epoch: [58][53/60]	Time 0.02278 (0.22846)	Data 0.00047 (0.15023)	Loss 0.6233 (0.8004)	Prec@1 75.00000 (74.76415)	Prec@5 100.00000 (99.05660)
Epoch: [58][54/60]	Time 0.02342 (0.22467)	Data 0.00049 (0.14745)	Loss 0.8078 (0.8005)	Prec@1 75.00000 (74.76852)	Prec@5 100.00000 (99.07407)
Epoch: [58][55/60]	Time 0.02359 (0.22101)	Data 0.00045 (0.14478)	Loss 1.1924 (0.8076)	Prec@1 62.50000 (74.54546)	Prec@5 87.50000 (98.86363)
Epoch: [58][56/60]	Time 0.02358 (0.21748)	Data 0.00054 (0.14221)	Loss 0.7146 (0.8060)	Prec@1 87.50000 (74.77679)	Prec@5 100.00000 (98.88393)
Epoch: [58][57/60]	Time 0.02293 (0.21407)	Data 0.00049 (0.13972)	Loss 1.4415 (0.8171)	Prec@1 62.50000 (74.56140)	Prec@5 87.50000 (98.68421)
Epoch: [58][58/60]	Time 0.02296 (0.21078)	Data 0.00046 (0.13732)	Loss 0.6779 (0.8147)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (98.70689)
Epoch: [58][59/60]	Time 0.02299 (0.20759)	Data 0.00062 (0.13500)	Loss 0.7071 (0.8129)	Prec@1 87.50000 (74.78814)	Prec@5 100.00000 (98.72881)
Epoch: [58][60/60]	Time 0.02494 (0.20455)	Data 0.00043 (0.13276)	Loss 0.5163 (0.8080)	Prec@1 87.50000 (75.00001)	Prec@5 100.00000 (98.75001)
train at epoch 59
train at epoch 59
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [59][0/272]	 lr: 0.00040	Time 10.229 (10.229)	Data 9.569 (9.569)	Loss 0.0091 (0.0091)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][10/272]	 lr: 0.00040	Time 0.390 (1.300)	Data 0.128 (0.982)	Loss 0.0163 (0.0123)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][20/272]	 lr: 0.00040	Time 0.449 (0.884)	Data 0.118 (0.576)	Loss 0.0165 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][30/272]	 lr: 0.00040	Time 0.421 (0.739)	Data 0.140 (0.433)	Loss 0.0154 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][40/272]	 lr: 0.00040	Time 0.475 (0.667)	Data 0.129 (0.360)	Loss 0.0131 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][50/272]	 lr: 0.00040	Time 0.444 (0.620)	Data 0.127 (0.315)	Loss 0.0176 (0.0172)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][60/272]	 lr: 0.00040	Time 0.521 (0.592)	Data 0.132 (0.285)	Loss 0.0117 (0.0162)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [59][70/272]	 lr: 0.00040	Time 0.444 (0.570)	Data 0.128 (0.263)	Loss 0.0393 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][80/272]	 lr: 0.00040	Time 0.530 (0.553)	Data 0.111 (0.246)	Loss 0.0093 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][90/272]	 lr: 0.00040	Time 0.535 (0.542)	Data 0.128 (0.234)	Loss 0.0158 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][100/272]	 lr: 0.00040	Time 0.528 (0.533)	Data 0.154 (0.223)	Loss 0.0227 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][110/272]	 lr: 0.00040	Time 0.433 (0.525)	Data 0.147 (0.214)	Loss 0.0051 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][120/272]	 lr: 0.00040	Time 0.394 (0.518)	Data 0.137 (0.207)	Loss 0.0050 (0.0163)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [59][130/272]	 lr: 0.00040	Time 0.405 (0.515)	Data 0.123 (0.201)	Loss 0.0121 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][140/272]	 lr: 0.00040	Time 0.414 (0.510)	Data 0.143 (0.196)	Loss 0.0435 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][150/272]	 lr: 0.00040	Time 0.475 (0.506)	Data 0.141 (0.191)	Loss 0.0045 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][160/272]	 lr: 0.00040	Time 0.399 (0.503)	Data 0.121 (0.187)	Loss 0.0103 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][170/272]	 lr: 0.00040	Time 0.422 (0.499)	Data 0.121 (0.183)	Loss 0.0066 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][180/272]	 lr: 0.00040	Time 0.337 (0.496)	Data 0.129 (0.180)	Loss 0.0929 (0.0166)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [59][190/272]	 lr: 0.00040	Time 0.350 (0.493)	Data 0.128 (0.178)	Loss 0.0115 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][200/272]	 lr: 0.00040	Time 0.503 (0.491)	Data 0.130 (0.175)	Loss 0.0126 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][210/272]	 lr: 0.00040	Time 0.512 (0.489)	Data 0.129 (0.173)	Loss 0.0365 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][220/272]	 lr: 0.00040	Time 0.461 (0.487)	Data 0.128 (0.171)	Loss 0.0078 (0.0165)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [59][230/272]	 lr: 0.00040	Time 0.399 (0.485)	Data 0.105 (0.169)	Loss 0.0052 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][240/272]	 lr: 0.00040	Time 0.281 (0.483)	Data 0.129 (0.167)	Loss 0.0163 (0.0164)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [59][250/272]	 lr: 0.00040	Time 0.238 (0.474)	Data 0.128 (0.166)	Loss 0.0072 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][260/272]	 lr: 0.00040	Time 0.240 (0.465)	Data 0.129 (0.164)	Loss 0.0054 (0.0164)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][270/272]	 lr: 0.00040	Time 0.248 (0.457)	Data 0.129 (0.163)	Loss 0.0098 (0.0167)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
validation at epoch 59
validation at epoch 59
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [59][1/60]	Time 6.08174 (6.08174)	Data 5.91015 (5.91015)	Loss 0.3854 (0.3854)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][2/60]	Time 0.69126 (3.38650)	Data 0.54679 (3.22847)	Loss 0.4764 (0.4309)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [59][3/60]	Time 0.18134 (2.31811)	Data 0.00085 (2.15260)	Loss 1.1289 (0.6635)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [59][4/60]	Time 0.56944 (1.88095)	Data 0.49663 (1.73860)	Loss 0.1826 (0.5433)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [59][5/60]	Time 0.33844 (1.57244)	Data 0.30960 (1.45280)	Loss 0.3410 (0.5029)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [59][6/60]	Time 0.05546 (1.31961)	Data 0.00070 (1.21079)	Loss 0.3365 (0.4751)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [59][7/60]	Time 0.12286 (1.14865)	Data 0.00044 (1.03788)	Loss 1.2495 (0.5858)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [59][8/60]	Time 0.11916 (1.01996)	Data 0.00388 (0.90863)	Loss 1.1302 (0.6538)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [59][9/60]	Time 0.11957 (0.91992)	Data 0.01319 (0.80914)	Loss 0.6438 (0.6527)	Prec@1 75.00000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [59][10/60]	Time 0.18660 (0.84659)	Data 0.01633 (0.72986)	Loss 0.5108 (0.6385)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [59][11/60]	Time 0.32191 (0.79889)	Data 0.26570 (0.68766)	Loss 0.4944 (0.6254)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [59][12/60]	Time 0.10703 (0.74124)	Data 0.00045 (0.63039)	Loss 1.3668 (0.6872)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [59][13/60]	Time 0.11090 (0.69275)	Data 0.03775 (0.58480)	Loss 1.7908 (0.7721)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [59][14/60]	Time 0.16880 (0.65532)	Data 0.01105 (0.54382)	Loss 0.0669 (0.7217)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [59][15/60]	Time 0.14020 (0.62098)	Data 0.00368 (0.50781)	Loss 1.0832 (0.7458)	Prec@1 50.00000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [59][16/60]	Time 0.25323 (0.59800)	Data 0.07578 (0.48081)	Loss 0.9038 (0.7557)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (100.00000)
Epoch: [59][17/60]	Time 0.20047 (0.57461)	Data 0.03543 (0.45461)	Loss 0.2691 (0.7271)	Prec@1 87.50000 (76.47059)	Prec@5 100.00000 (100.00000)
Epoch: [59][18/60]	Time 0.12383 (0.54957)	Data 0.01084 (0.42996)	Loss 2.2565 (0.8120)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [59][19/60]	Time 0.08445 (0.52509)	Data 0.00086 (0.40737)	Loss 0.1598 (0.7777)	Prec@1 100.00000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [59][20/60]	Time 0.25091 (0.51138)	Data 0.08273 (0.39114)	Loss 2.2097 (0.8493)	Prec@1 62.50000 (76.87500)	Prec@5 87.50000 (99.37500)
Epoch: [59][21/60]	Time 0.06516 (0.49013)	Data 0.00076 (0.37255)	Loss 0.3697 (0.8265)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (99.40476)
Epoch: [59][22/60]	Time 0.22036 (0.47787)	Data 0.07973 (0.35924)	Loss 0.4292 (0.8084)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (99.43182)
Epoch: [59][23/60]	Time 0.07396 (0.46031)	Data 0.01604 (0.34432)	Loss 0.9045 (0.8126)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (99.45652)
Epoch: [59][24/60]	Time 0.07247 (0.44415)	Data 0.01329 (0.33053)	Loss 0.5231 (0.8005)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (99.47917)
Epoch: [59][25/60]	Time 0.08472 (0.42977)	Data 0.00053 (0.31733)	Loss 0.3869 (0.7840)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (99.50000)
Epoch: [59][26/60]	Time 0.20037 (0.42095)	Data 0.05313 (0.30717)	Loss 0.0426 (0.7555)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (99.51923)
Epoch: [59][27/60]	Time 0.16347 (0.41141)	Data 0.03019 (0.29691)	Loss 0.6204 (0.7505)	Prec@1 50.00000 (76.38889)	Prec@5 100.00000 (99.53704)
Epoch: [59][28/60]	Time 0.14592 (0.40193)	Data 0.04025 (0.28774)	Loss 0.3650 (0.7367)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (99.55357)
Epoch: [59][29/60]	Time 0.10026 (0.39153)	Data 0.00045 (0.27783)	Loss 0.6166 (0.7326)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (99.56896)
Epoch: [59][30/60]	Time 0.09852 (0.38176)	Data 0.00044 (0.26859)	Loss 1.7067 (0.7650)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (99.58334)
Epoch: [59][31/60]	Time 0.05058 (0.37108)	Data 0.00069 (0.25995)	Loss 2.4503 (0.8194)	Prec@1 37.50000 (75.00000)	Prec@5 100.00000 (99.59677)
Epoch: [59][32/60]	Time 0.06150 (0.36140)	Data 0.00046 (0.25184)	Loss 0.6847 (0.8152)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.60938)
Epoch: [59][33/60]	Time 0.05427 (0.35210)	Data 0.00055 (0.24422)	Loss 0.1415 (0.7948)	Prec@1 87.50000 (75.37879)	Prec@5 100.00000 (99.62122)
Epoch: [59][34/60]	Time 0.03358 (0.34273)	Data 0.00058 (0.23706)	Loss 1.1208 (0.8044)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.63235)
Epoch: [59][35/60]	Time 0.03947 (0.33406)	Data 0.00053 (0.23030)	Loss 1.2979 (0.8185)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.64286)
Epoch: [59][36/60]	Time 0.04045 (0.32591)	Data 0.00272 (0.22398)	Loss 1.1582 (0.8279)	Prec@1 62.50000 (74.65278)	Prec@5 100.00000 (99.65278)
Epoch: [59][37/60]	Time 0.02756 (0.31784)	Data 0.00040 (0.21793)	Loss 1.3114 (0.8410)	Prec@1 62.50000 (74.32433)	Prec@5 100.00000 (99.66216)
Epoch: [59][38/60]	Time 0.03109 (0.31030)	Data 0.00295 (0.21228)	Loss 2.2209 (0.8773)	Prec@1 50.00000 (73.68421)	Prec@5 100.00000 (99.67105)
Epoch: [59][39/60]	Time 0.03148 (0.30315)	Data 0.00215 (0.20689)	Loss 0.1916 (0.8597)	Prec@1 87.50000 (74.03846)	Prec@5 100.00000 (99.67949)
Epoch: [59][40/60]	Time 0.02850 (0.29628)	Data 0.00063 (0.20173)	Loss 0.3681 (0.8474)	Prec@1 87.50000 (74.37500)	Prec@5 100.00000 (99.68750)
Epoch: [59][41/60]	Time 0.02905 (0.28976)	Data 0.00184 (0.19686)	Loss 0.5026 (0.8390)	Prec@1 75.00000 (74.39024)	Prec@5 100.00000 (99.69512)
Epoch: [59][42/60]	Time 0.03209 (0.28363)	Data 0.00374 (0.19226)	Loss 1.0819 (0.8448)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (99.70238)
Epoch: [59][43/60]	Time 0.03175 (0.27777)	Data 0.00156 (0.18782)	Loss 0.6559 (0.8404)	Prec@1 62.50000 (74.12791)	Prec@5 100.00000 (99.70930)
Epoch: [59][44/60]	Time 0.02751 (0.27208)	Data 0.00042 (0.18356)	Loss 0.7158 (0.8376)	Prec@1 75.00000 (74.14773)	Prec@5 100.00000 (99.71591)
Epoch: [59][45/60]	Time 0.02996 (0.26670)	Data 0.00325 (0.17956)	Loss 0.6839 (0.8341)	Prec@1 87.50000 (74.44444)	Prec@5 100.00000 (99.72222)
Epoch: [59][46/60]	Time 0.02674 (0.26149)	Data 0.00045 (0.17566)	Loss 1.0294 (0.8384)	Prec@1 50.00000 (73.91305)	Prec@5 100.00000 (99.72826)
Epoch: [59][47/60]	Time 0.02697 (0.25650)	Data 0.00043 (0.17194)	Loss 1.0095 (0.8420)	Prec@1 75.00000 (73.93616)	Prec@5 87.50000 (99.46808)
Epoch: [59][48/60]	Time 0.02722 (0.25172)	Data 0.00047 (0.16836)	Loss 0.3033 (0.8308)	Prec@1 87.50000 (74.21875)	Prec@5 100.00000 (99.47917)
Epoch: [59][49/60]	Time 0.02616 (0.24712)	Data 0.00049 (0.16494)	Loss 0.3005 (0.8200)	Prec@1 75.00000 (74.23470)	Prec@5 100.00000 (99.48979)
Epoch: [59][50/60]	Time 0.02785 (0.24273)	Data 0.00054 (0.16165)	Loss 0.5426 (0.8144)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.50000)
Epoch: [59][51/60]	Time 0.02692 (0.23850)	Data 0.00057 (0.15849)	Loss 0.5023 (0.8083)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.50980)
Epoch: [59][52/60]	Time 0.02714 (0.23444)	Data 0.00042 (0.15545)	Loss 0.8683 (0.8095)	Prec@1 62.50000 (74.03847)	Prec@5 100.00000 (99.51923)
Epoch: [59][53/60]	Time 0.02693 (0.23052)	Data 0.00042 (0.15253)	Loss 0.4447 (0.8026)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (99.52831)
Epoch: [59][54/60]	Time 0.02622 (0.22674)	Data 0.00043 (0.14971)	Loss 0.9361 (0.8051)	Prec@1 62.50000 (73.84259)	Prec@5 100.00000 (99.53704)
Epoch: [59][55/60]	Time 0.02647 (0.22310)	Data 0.00045 (0.14700)	Loss 1.2557 (0.8133)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (99.31818)
Epoch: [59][56/60]	Time 0.02469 (0.21955)	Data 0.00045 (0.14438)	Loss 0.6953 (0.8111)	Prec@1 75.00000 (73.66072)	Prec@5 100.00000 (99.33036)
Epoch: [59][57/60]	Time 0.02294 (0.21610)	Data 0.00046 (0.14185)	Loss 1.3157 (0.8200)	Prec@1 62.50000 (73.46491)	Prec@5 87.50000 (99.12281)
Epoch: [59][58/60]	Time 0.02363 (0.21278)	Data 0.00069 (0.13942)	Loss 0.6400 (0.8169)	Prec@1 75.00000 (73.49138)	Prec@5 100.00000 (99.13793)
Epoch: [59][59/60]	Time 0.02324 (0.20957)	Data 0.00046 (0.13706)	Loss 0.7644 (0.8160)	Prec@1 87.50000 (73.72881)	Prec@5 100.00000 (99.15254)
Epoch: [59][60/60]	Time 0.02398 (0.20648)	Data 0.00052 (0.13479)	Loss 0.5871 (0.8122)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.16667)
train at epoch 60
train at epoch 60
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [60][0/272]	 lr: 0.00040	Time 4.936 (4.936)	Data 3.923 (3.923)	Loss 0.0152 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][10/272]	 lr: 0.00040	Time 0.390 (1.310)	Data 0.128 (0.863)	Loss 0.0232 (0.0176)	Prec@1 100.00000 (99.71591)	Prec@5 100.00000 (100.00000)
Epoch: [60][20/272]	 lr: 0.00040	Time 0.459 (0.883)	Data 0.127 (0.514)	Loss 0.0169 (0.0237)	Prec@1 100.00000 (99.55357)	Prec@5 100.00000 (100.00000)
Epoch: [60][30/272]	 lr: 0.00040	Time 0.585 (0.749)	Data 0.137 (0.389)	Loss 0.0058 (0.0295)	Prec@1 100.00000 (99.29435)	Prec@5 100.00000 (100.00000)
Epoch: [60][40/272]	 lr: 0.00040	Time 0.334 (0.676)	Data 0.123 (0.325)	Loss 0.0150 (0.0250)	Prec@1 100.00000 (99.46646)	Prec@5 100.00000 (100.00000)
Epoch: [60][50/272]	 lr: 0.00040	Time 0.410 (0.633)	Data 0.129 (0.286)	Loss 0.0130 (0.0251)	Prec@1 100.00000 (99.50980)	Prec@5 100.00000 (100.00000)
Epoch: [60][60/272]	 lr: 0.00040	Time 0.347 (0.603)	Data 0.099 (0.260)	Loss 0.0098 (0.0244)	Prec@1 100.00000 (99.53893)	Prec@5 100.00000 (99.99999)
Epoch: [60][70/272]	 lr: 0.00040	Time 0.471 (0.580)	Data 0.129 (0.241)	Loss 0.0120 (0.0227)	Prec@1 100.00000 (99.60387)	Prec@5 100.00000 (100.00000)
Epoch: [60][80/272]	 lr: 0.00040	Time 0.468 (0.565)	Data 0.123 (0.226)	Loss 0.0136 (0.0217)	Prec@1 100.00000 (99.65278)	Prec@5 100.00000 (100.00000)
Epoch: [60][90/272]	 lr: 0.00040	Time 0.418 (0.551)	Data 0.142 (0.216)	Loss 0.0421 (0.0225)	Prec@1 100.00000 (99.62225)	Prec@5 100.00000 (100.00000)
Epoch: [60][100/272]	 lr: 0.00040	Time 0.375 (0.543)	Data 0.140 (0.207)	Loss 0.0127 (0.0220)	Prec@1 100.00000 (99.65965)	Prec@5 100.00000 (100.00000)
Epoch: [60][110/272]	 lr: 0.00040	Time 0.544 (0.535)	Data 0.124 (0.199)	Loss 0.0175 (0.0218)	Prec@1 100.00000 (99.69032)	Prec@5 100.00000 (100.00000)
Epoch: [60][120/272]	 lr: 0.00040	Time 0.438 (0.528)	Data 0.117 (0.193)	Loss 0.0069 (0.0213)	Prec@1 100.00000 (99.71590)	Prec@5 100.00000 (99.99999)
Epoch: [60][130/272]	 lr: 0.00040	Time 0.448 (0.521)	Data 0.125 (0.188)	Loss 0.0135 (0.0207)	Prec@1 100.00000 (99.73759)	Prec@5 100.00000 (100.00000)
Epoch: [60][140/272]	 lr: 0.00040	Time 0.441 (0.515)	Data 0.124 (0.184)	Loss 0.0203 (0.0202)	Prec@1 100.00000 (99.75620)	Prec@5 100.00000 (100.00000)
Epoch: [60][150/272]	 lr: 0.00040	Time 0.481 (0.510)	Data 0.136 (0.180)	Loss 0.0139 (0.0212)	Prec@1 100.00000 (99.77235)	Prec@5 100.00000 (100.00000)
Epoch: [60][160/272]	 lr: 0.00040	Time 0.460 (0.507)	Data 0.126 (0.177)	Loss 0.0072 (0.0207)	Prec@1 100.00000 (99.78649)	Prec@5 100.00000 (100.00000)
Epoch: [60][170/272]	 lr: 0.00040	Time 0.452 (0.505)	Data 0.129 (0.174)	Loss 0.0159 (0.0205)	Prec@1 100.00000 (99.79898)	Prec@5 100.00000 (100.00000)
Epoch: [60][180/272]	 lr: 0.00040	Time 0.525 (0.502)	Data 0.133 (0.171)	Loss 0.0052 (0.0201)	Prec@1 100.00000 (99.79282)	Prec@5 100.00000 (100.00001)
Epoch: [60][190/272]	 lr: 0.00040	Time 0.539 (0.500)	Data 0.127 (0.169)	Loss 0.0057 (0.0198)	Prec@1 100.00000 (99.80367)	Prec@5 100.00000 (100.00000)
Epoch: [60][200/272]	 lr: 0.00040	Time 0.363 (0.497)	Data 0.129 (0.167)	Loss 0.0083 (0.0195)	Prec@1 100.00000 (99.81343)	Prec@5 100.00000 (100.00000)
Epoch: [60][210/272]	 lr: 0.00040	Time 0.456 (0.495)	Data 0.116 (0.165)	Loss 0.0043 (0.0191)	Prec@1 100.00000 (99.82228)	Prec@5 100.00000 (100.00000)
Epoch: [60][220/272]	 lr: 0.00040	Time 0.442 (0.492)	Data 0.120 (0.163)	Loss 0.0091 (0.0188)	Prec@1 100.00000 (99.83032)	Prec@5 100.00000 (100.00001)
Epoch: [60][230/272]	 lr: 0.00040	Time 0.595 (0.490)	Data 0.130 (0.162)	Loss 0.0194 (0.0192)	Prec@1 100.00000 (99.81061)	Prec@5 100.00000 (100.00000)
Epoch: [60][240/272]	 lr: 0.00040	Time 0.309 (0.486)	Data 0.130 (0.160)	Loss 0.0095 (0.0189)	Prec@1 100.00000 (99.81847)	Prec@5 100.00000 (100.00001)
Epoch: [60][250/272]	 lr: 0.00040	Time 0.241 (0.476)	Data 0.128 (0.159)	Loss 0.0199 (0.0191)	Prec@1 100.00000 (99.82570)	Prec@5 100.00000 (100.00000)
Epoch: [60][260/272]	 lr: 0.00040	Time 0.240 (0.467)	Data 0.127 (0.158)	Loss 0.0065 (0.0188)	Prec@1 100.00000 (99.83237)	Prec@5 100.00000 (100.00000)
Epoch: [60][270/272]	 lr: 0.00040	Time 0.246 (0.459)	Data 0.128 (0.156)	Loss 0.0126 (0.0187)	Prec@1 100.00000 (99.83856)	Prec@5 100.00000 (100.00000)
validation at epoch 60
validation at epoch 60
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [60][1/60]	Time 6.33291 (6.33291)	Data 6.18612 (6.18612)	Loss 0.4176 (0.4176)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [60][2/60]	Time 0.83069 (3.58180)	Data 0.67974 (3.43293)	Loss 0.5122 (0.4649)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [60][3/60]	Time 0.16309 (2.44223)	Data 0.00521 (2.29036)	Loss 1.1961 (0.7086)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [60][4/60]	Time 0.12741 (1.86353)	Data 0.00308 (1.71854)	Loss 0.2538 (0.5949)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [60][5/60]	Time 0.19448 (1.52972)	Data 0.00997 (1.37682)	Loss 0.3055 (0.5370)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [60][6/60]	Time 0.16145 (1.30167)	Data 0.00676 (1.14848)	Loss 0.4400 (0.5209)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [60][7/60]	Time 0.13942 (1.13564)	Data 0.00237 (0.98475)	Loss 1.2648 (0.6271)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [60][8/60]	Time 0.21837 (1.02098)	Data 0.00370 (0.86212)	Loss 1.1880 (0.6973)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][9/60]	Time 0.11385 (0.92019)	Data 0.00281 (0.76664)	Loss 0.6037 (0.6869)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][10/60]	Time 0.09058 (0.83722)	Data 0.00056 (0.69003)	Loss 0.6170 (0.6799)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][11/60]	Time 0.13068 (0.77299)	Data 0.00078 (0.62737)	Loss 0.5771 (0.6705)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [60][12/60]	Time 0.11323 (0.71801)	Data 0.02175 (0.57690)	Loss 1.1808 (0.7131)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][13/60]	Time 0.14380 (0.67384)	Data 0.01660 (0.53380)	Loss 1.9763 (0.8102)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [60][14/60]	Time 0.15889 (0.63706)	Data 0.01840 (0.49699)	Loss 0.0743 (0.7577)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [60][15/60]	Time 0.09094 (0.60065)	Data 0.03483 (0.46618)	Loss 1.2141 (0.7881)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [60][16/60]	Time 0.21075 (0.57628)	Data 0.06182 (0.44091)	Loss 1.0606 (0.8051)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [60][17/60]	Time 0.11487 (0.54914)	Data 0.01670 (0.41595)	Loss 0.3916 (0.7808)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [60][18/60]	Time 0.12723 (0.52570)	Data 0.03836 (0.39498)	Loss 2.2882 (0.8645)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [60][19/60]	Time 0.10538 (0.50358)	Data 0.00847 (0.37463)	Loss 0.1241 (0.8256)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [60][20/60]	Time 0.17561 (0.48718)	Data 0.07746 (0.35978)	Loss 2.2116 (0.8949)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][21/60]	Time 0.12940 (0.47014)	Data 0.01932 (0.34356)	Loss 0.6944 (0.8853)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [60][22/60]	Time 0.13316 (0.45483)	Data 0.02739 (0.32919)	Loss 0.6608 (0.8751)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [60][23/60]	Time 0.21269 (0.44430)	Data 0.11351 (0.31981)	Loss 0.9608 (0.8788)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (100.00000)
Epoch: [60][24/60]	Time 0.06203 (0.42837)	Data 0.00089 (0.30653)	Loss 0.7476 (0.8734)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [60][25/60]	Time 0.06074 (0.41367)	Data 0.01074 (0.29469)	Loss 0.4626 (0.8569)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][26/60]	Time 0.07503 (0.40064)	Data 0.00583 (0.28358)	Loss 0.0429 (0.8256)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [60][27/60]	Time 0.07260 (0.38849)	Data 0.00056 (0.27310)	Loss 0.7782 (0.8239)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (100.00000)
Epoch: [60][28/60]	Time 0.19282 (0.38150)	Data 0.07006 (0.26585)	Loss 0.3807 (0.8081)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (100.00001)
Epoch: [60][29/60]	Time 0.13021 (0.37284)	Data 0.01899 (0.25734)	Loss 0.5325 (0.7985)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (100.00000)
Epoch: [60][30/60]	Time 0.06488 (0.36257)	Data 0.00043 (0.24877)	Loss 1.6520 (0.8270)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [60][31/60]	Time 0.03500 (0.35201)	Data 0.00054 (0.24077)	Loss 2.5004 (0.8810)	Prec@1 25.00000 (72.58064)	Prec@5 87.50000 (99.59677)
Epoch: [60][32/60]	Time 0.04372 (0.34237)	Data 0.00056 (0.23326)	Loss 0.7201 (0.8759)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (99.60938)
Epoch: [60][33/60]	Time 0.02826 (0.33285)	Data 0.00050 (0.22621)	Loss 0.0917 (0.8522)	Prec@1 100.00000 (73.48485)	Prec@5 100.00000 (99.62122)
Epoch: [60][34/60]	Time 0.02791 (0.32388)	Data 0.00047 (0.21957)	Loss 1.2122 (0.8628)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.63235)
Epoch: [60][35/60]	Time 0.02342 (0.31530)	Data 0.00049 (0.21331)	Loss 1.5012 (0.8810)	Prec@1 75.00000 (73.57143)	Prec@5 87.50000 (99.28571)
Epoch: [60][36/60]	Time 0.03182 (0.30743)	Data 0.00358 (0.20748)	Loss 1.0303 (0.8852)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (99.30556)
Epoch: [60][37/60]	Time 0.03020 (0.29993)	Data 0.00143 (0.20191)	Loss 1.5630 (0.9035)	Prec@1 62.50000 (72.97298)	Prec@5 100.00000 (99.32433)
Epoch: [60][38/60]	Time 0.02872 (0.29280)	Data 0.00165 (0.19664)	Loss 2.3062 (0.9404)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (99.34211)
Epoch: [60][39/60]	Time 0.03052 (0.28607)	Data 0.00427 (0.19171)	Loss 0.1092 (0.9191)	Prec@1 87.50000 (72.75641)	Prec@5 100.00000 (99.35898)
Epoch: [60][40/60]	Time 0.03158 (0.27971)	Data 0.00491 (0.18704)	Loss 0.2149 (0.9015)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (99.37500)
Epoch: [60][41/60]	Time 0.02409 (0.27347)	Data 0.00084 (0.18250)	Loss 0.5788 (0.8936)	Prec@1 75.00000 (73.17073)	Prec@5 100.00000 (99.39024)
Epoch: [60][42/60]	Time 0.02200 (0.26749)	Data 0.00044 (0.17816)	Loss 1.1061 (0.8987)	Prec@1 87.50000 (73.51191)	Prec@5 100.00000 (99.40476)
Epoch: [60][43/60]	Time 0.02844 (0.26193)	Data 0.00042 (0.17403)	Loss 0.7157 (0.8944)	Prec@1 62.50000 (73.25581)	Prec@5 100.00000 (99.41860)
Epoch: [60][44/60]	Time 0.02572 (0.25656)	Data 0.00112 (0.17010)	Loss 0.8089 (0.8925)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (99.43182)
Epoch: [60][45/60]	Time 0.02348 (0.25138)	Data 0.00050 (0.16633)	Loss 0.7864 (0.8901)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (99.44445)
Epoch: [60][46/60]	Time 0.02326 (0.24642)	Data 0.00048 (0.16273)	Loss 0.9626 (0.8917)	Prec@1 50.00000 (73.09782)	Prec@5 100.00000 (99.45652)
Epoch: [60][47/60]	Time 0.02281 (0.24166)	Data 0.00047 (0.15927)	Loss 0.9545 (0.8930)	Prec@1 75.00000 (73.13830)	Prec@5 100.00000 (99.46808)
Epoch: [60][48/60]	Time 0.02398 (0.23713)	Data 0.00049 (0.15597)	Loss 0.3760 (0.8822)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [60][49/60]	Time 0.02276 (0.23275)	Data 0.00046 (0.15279)	Loss 0.2295 (0.8689)	Prec@1 87.50000 (73.72449)	Prec@5 100.00000 (99.48979)
Epoch: [60][50/60]	Time 0.02373 (0.22857)	Data 0.00051 (0.14975)	Loss 0.5998 (0.8635)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (99.50000)
Epoch: [60][51/60]	Time 0.02354 (0.22455)	Data 0.00054 (0.14682)	Loss 0.3997 (0.8545)	Prec@1 75.00000 (73.77451)	Prec@5 100.00000 (99.50980)
Epoch: [60][52/60]	Time 0.02305 (0.22068)	Data 0.00045 (0.14401)	Loss 0.8282 (0.8539)	Prec@1 50.00000 (73.31731)	Prec@5 100.00000 (99.51923)
Epoch: [60][53/60]	Time 0.02703 (0.21702)	Data 0.00047 (0.14130)	Loss 0.5174 (0.8476)	Prec@1 87.50000 (73.58491)	Prec@5 100.00000 (99.52831)
Epoch: [60][54/60]	Time 0.02313 (0.21343)	Data 0.00045 (0.13869)	Loss 0.9567 (0.8496)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.53704)
Epoch: [60][55/60]	Time 0.02418 (0.20999)	Data 0.00046 (0.13618)	Loss 1.1943 (0.8559)	Prec@1 62.50000 (73.40909)	Prec@5 87.50000 (99.31818)
Epoch: [60][56/60]	Time 0.02363 (0.20666)	Data 0.00055 (0.13375)	Loss 0.6273 (0.8518)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (99.33036)
Epoch: [60][57/60]	Time 0.02257 (0.20343)	Data 0.00052 (0.13142)	Loss 1.3207 (0.8600)	Prec@1 62.50000 (73.02631)	Prec@5 87.50000 (99.12281)
Epoch: [60][58/60]	Time 0.02272 (0.20032)	Data 0.00049 (0.12916)	Loss 0.6544 (0.8565)	Prec@1 62.50000 (72.84483)	Prec@5 100.00000 (99.13793)
Epoch: [60][59/60]	Time 0.02301 (0.19731)	Data 0.00052 (0.12698)	Loss 0.7892 (0.8553)	Prec@1 87.50000 (73.09322)	Prec@5 100.00000 (99.15254)
Epoch: [60][60/60]	Time 0.02323 (0.19441)	Data 0.00040 (0.12487)	Loss 0.5530 (0.8503)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.16667)
train at epoch 61
train at epoch 61
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [61][0/272]	 lr: 0.00040	Time 9.337 (9.337)	Data 7.962 (7.962)	Loss 0.0119 (0.0119)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [61][10/272]	 lr: 0.00040	Time 0.421 (1.313)	Data 0.135 (0.846)	Loss 0.0072 (0.0271)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [61][20/272]	 lr: 0.00040	Time 0.398 (0.891)	Data 0.128 (0.504)	Loss 0.0462 (0.0266)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [61][30/272]	 lr: 0.00040	Time 0.411 (0.743)	Data 0.130 (0.383)	Loss 0.1445 (0.0274)	Prec@1 96.87500 (99.69758)	Prec@5 100.00000 (100.00000)
Epoch: [61][40/272]	 lr: 0.00040	Time 0.356 (0.673)	Data 0.111 (0.321)	Loss 0.0071 (0.0257)	Prec@1 100.00000 (99.61890)	Prec@5 100.00000 (100.00000)
Epoch: [61][50/272]	 lr: 0.00040	Time 0.452 (0.629)	Data 0.148 (0.284)	Loss 0.0067 (0.0226)	Prec@1 100.00000 (99.69363)	Prec@5 100.00000 (100.00000)
Epoch: [61][60/272]	 lr: 0.00040	Time 0.442 (0.600)	Data 0.128 (0.260)	Loss 0.0035 (0.0214)	Prec@1 100.00000 (99.74384)	Prec@5 100.00000 (99.99999)
Epoch: [61][70/272]	 lr: 0.00040	Time 0.434 (0.577)	Data 0.109 (0.241)	Loss 0.0313 (0.0206)	Prec@1 100.00000 (99.77993)	Prec@5 100.00000 (100.00000)
Epoch: [61][80/272]	 lr: 0.00040	Time 0.469 (0.562)	Data 0.129 (0.228)	Loss 0.0077 (0.0200)	Prec@1 100.00000 (99.80710)	Prec@5 100.00000 (100.00000)
Epoch: [61][90/272]	 lr: 0.00040	Time 0.357 (0.548)	Data 0.126 (0.217)	Loss 0.0184 (0.0194)	Prec@1 100.00000 (99.82830)	Prec@5 100.00000 (100.00000)
Epoch: [61][100/272]	 lr: 0.00040	Time 0.447 (0.538)	Data 0.127 (0.209)	Loss 0.0110 (0.0191)	Prec@1 100.00000 (99.84530)	Prec@5 100.00000 (100.00000)
Epoch: [61][110/272]	 lr: 0.00040	Time 0.415 (0.531)	Data 0.128 (0.201)	Loss 0.0178 (0.0195)	Prec@1 100.00000 (99.85924)	Prec@5 100.00000 (100.00000)
Epoch: [61][120/272]	 lr: 0.00040	Time 0.454 (0.525)	Data 0.127 (0.195)	Loss 0.0075 (0.0194)	Prec@1 100.00000 (99.87086)	Prec@5 100.00000 (99.99999)
Epoch: [61][130/272]	 lr: 0.00040	Time 0.442 (0.518)	Data 0.135 (0.190)	Loss 0.0079 (0.0193)	Prec@1 100.00000 (99.88072)	Prec@5 100.00000 (100.00000)
Epoch: [61][140/272]	 lr: 0.00040	Time 0.477 (0.514)	Data 0.135 (0.185)	Loss 0.0110 (0.0189)	Prec@1 100.00000 (99.88918)	Prec@5 100.00000 (100.00000)
Epoch: [61][150/272]	 lr: 0.00040	Time 0.583 (0.511)	Data 0.128 (0.181)	Loss 0.0046 (0.0189)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [61][160/272]	 lr: 0.00040	Time 0.505 (0.505)	Data 0.126 (0.178)	Loss 0.0074 (0.0185)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [61][170/272]	 lr: 0.00040	Time 0.436 (0.501)	Data 0.131 (0.175)	Loss 0.0085 (0.0185)	Prec@1 100.00000 (99.89035)	Prec@5 100.00000 (100.00000)
Epoch: [61][180/272]	 lr: 0.00040	Time 0.429 (0.500)	Data 0.119 (0.173)	Loss 0.0064 (0.0181)	Prec@1 100.00000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [61][190/272]	 lr: 0.00040	Time 0.435 (0.497)	Data 0.129 (0.171)	Loss 0.0082 (0.0180)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [61][200/272]	 lr: 0.00040	Time 0.420 (0.494)	Data 0.141 (0.169)	Loss 0.0154 (0.0178)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [61][210/272]	 lr: 0.00040	Time 0.376 (0.491)	Data 0.122 (0.167)	Loss 0.0151 (0.0179)	Prec@1 100.00000 (99.89633)	Prec@5 100.00000 (100.00000)
Epoch: [61][220/272]	 lr: 0.00040	Time 0.469 (0.489)	Data 0.142 (0.166)	Loss 0.0214 (0.0181)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [61][230/272]	 lr: 0.00040	Time 0.468 (0.487)	Data 0.126 (0.164)	Loss 0.0124 (0.0190)	Prec@1 100.00000 (99.86472)	Prec@5 100.00000 (100.00000)
Epoch: [61][240/272]	 lr: 0.00040	Time 0.243 (0.485)	Data 0.128 (0.162)	Loss 0.0136 (0.0189)	Prec@1 100.00000 (99.85737)	Prec@5 100.00000 (100.00001)
Epoch: [61][250/272]	 lr: 0.00040	Time 0.241 (0.475)	Data 0.128 (0.161)	Loss 0.0051 (0.0188)	Prec@1 100.00000 (99.86305)	Prec@5 100.00000 (100.00000)
Epoch: [61][260/272]	 lr: 0.00040	Time 0.239 (0.466)	Data 0.129 (0.160)	Loss 0.0193 (0.0188)	Prec@1 100.00000 (99.86829)	Prec@5 100.00000 (100.00000)
Epoch: [61][270/272]	 lr: 0.00040	Time 0.238 (0.458)	Data 0.127 (0.158)	Loss 0.0044 (0.0186)	Prec@1 100.00000 (99.87315)	Prec@5 100.00000 (100.00000)
validation at epoch 61
validation at epoch 61
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [61][1/60]	Time 4.13895 (4.13895)	Data 4.01306 (4.01306)	Loss 0.4110 (0.4110)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [61][2/60]	Time 3.21601 (3.67748)	Data 3.08286 (3.54796)	Loss 0.4304 (0.4207)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [61][3/60]	Time 0.23098 (2.52865)	Data 0.04774 (2.38122)	Loss 1.2827 (0.7081)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [61][4/60]	Time 0.10535 (1.92282)	Data 0.01981 (1.79087)	Loss 0.2792 (0.6008)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [61][5/60]	Time 0.11503 (1.56126)	Data 0.02065 (1.43682)	Loss 0.3618 (0.5530)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [61][6/60]	Time 0.10071 (1.31784)	Data 0.01857 (1.20045)	Loss 0.6454 (0.5684)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [61][7/60]	Time 0.11379 (1.14583)	Data 0.00085 (1.02908)	Loss 1.2590 (0.6671)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [61][8/60]	Time 0.28153 (1.03779)	Data 0.08298 (0.91082)	Loss 1.1148 (0.7231)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.43750)
Epoch: [61][9/60]	Time 0.20361 (0.94511)	Data 0.00059 (0.80968)	Loss 0.7446 (0.7254)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [61][10/60]	Time 0.10340 (0.86094)	Data 0.01359 (0.73007)	Loss 0.6356 (0.7165)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [61][11/60]	Time 0.13322 (0.79478)	Data 0.01217 (0.66481)	Loss 0.6330 (0.7089)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [61][12/60]	Time 0.17591 (0.74321)	Data 0.06618 (0.61492)	Loss 1.0124 (0.7342)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [61][13/60]	Time 0.08030 (0.69221)	Data 0.00483 (0.56799)	Loss 1.7808 (0.8147)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (99.03847)
Epoch: [61][14/60]	Time 0.10938 (0.65058)	Data 0.00045 (0.52745)	Loss 0.1315 (0.7659)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [61][15/60]	Time 0.12413 (0.61549)	Data 0.01733 (0.49344)	Loss 1.0827 (0.7870)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (99.16667)
Epoch: [61][16/60]	Time 0.08472 (0.58231)	Data 0.00051 (0.46263)	Loss 1.2535 (0.8162)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.21875)
Epoch: [61][17/60]	Time 0.24773 (0.56263)	Data 0.07316 (0.43972)	Loss 0.4344 (0.7937)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [61][18/60]	Time 0.12988 (0.53859)	Data 0.00060 (0.41533)	Loss 2.5039 (0.8887)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [61][19/60]	Time 0.25650 (0.52374)	Data 0.04938 (0.39607)	Loss 0.2197 (0.8535)	Prec@1 87.50000 (74.34210)	Prec@5 100.00000 (99.34211)
Epoch: [61][20/60]	Time 0.11927 (0.50352)	Data 0.00260 (0.37639)	Loss 2.4854 (0.9351)	Prec@1 62.50000 (73.75000)	Prec@5 87.50000 (98.75000)
Epoch: [61][21/60]	Time 0.09670 (0.48415)	Data 0.02862 (0.35983)	Loss 0.7022 (0.9240)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (98.80952)
Epoch: [61][22/60]	Time 0.09768 (0.46658)	Data 0.00540 (0.34372)	Loss 0.7271 (0.9151)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (98.86364)
Epoch: [61][23/60]	Time 0.05801 (0.44882)	Data 0.00564 (0.32902)	Loss 1.1692 (0.9261)	Prec@1 62.50000 (72.82609)	Prec@5 100.00000 (98.91305)
Epoch: [61][24/60]	Time 0.23735 (0.44001)	Data 0.01455 (0.31592)	Loss 0.8253 (0.9219)	Prec@1 62.50000 (72.39584)	Prec@5 100.00000 (98.95834)
Epoch: [61][25/60]	Time 0.17411 (0.42937)	Data 0.00079 (0.30332)	Loss 0.5664 (0.9077)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.00000)
Epoch: [61][26/60]	Time 0.10652 (0.41695)	Data 0.02649 (0.29267)	Loss 0.0863 (0.8761)	Prec@1 100.00000 (73.55769)	Prec@5 100.00000 (99.03847)
Epoch: [61][27/60]	Time 0.19671 (0.40880)	Data 0.04851 (0.28363)	Loss 1.0087 (0.8810)	Prec@1 50.00000 (72.68519)	Prec@5 100.00000 (99.07407)
Epoch: [61][28/60]	Time 0.18053 (0.40064)	Data 0.03333 (0.27469)	Loss 0.4512 (0.8657)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [61][29/60]	Time 0.11757 (0.39088)	Data 0.00044 (0.26523)	Loss 0.7338 (0.8611)	Prec@1 75.00000 (73.27586)	Prec@5 100.00000 (99.13793)
Epoch: [61][30/60]	Time 0.05141 (0.37957)	Data 0.00048 (0.25640)	Loss 1.8714 (0.8948)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (99.16667)
Epoch: [61][31/60]	Time 0.04365 (0.36873)	Data 0.00044 (0.24815)	Loss 2.4442 (0.9448)	Prec@1 37.50000 (71.77419)	Prec@5 100.00000 (99.19354)
Epoch: [61][32/60]	Time 0.05328 (0.35887)	Data 0.00041 (0.24041)	Loss 0.8934 (0.9432)	Prec@1 62.50000 (71.48438)	Prec@5 100.00000 (99.21875)
Epoch: [61][33/60]	Time 0.03469 (0.34905)	Data 0.00054 (0.23314)	Loss 0.1229 (0.9183)	Prec@1 87.50000 (71.96970)	Prec@5 100.00000 (99.24242)
Epoch: [61][34/60]	Time 0.02790 (0.33960)	Data 0.00370 (0.22639)	Loss 1.3905 (0.9322)	Prec@1 50.00000 (71.32353)	Prec@5 100.00000 (99.26471)
Epoch: [61][35/60]	Time 0.02925 (0.33074)	Data 0.00045 (0.21993)	Loss 1.4108 (0.9459)	Prec@1 75.00000 (71.42857)	Prec@5 100.00000 (99.28571)
Epoch: [61][36/60]	Time 0.02837 (0.32234)	Data 0.00047 (0.21384)	Loss 1.0964 (0.9500)	Prec@1 62.50000 (71.18056)	Prec@5 100.00000 (99.30556)
Epoch: [61][37/60]	Time 0.02919 (0.31441)	Data 0.00049 (0.20807)	Loss 1.6834 (0.9699)	Prec@1 62.50000 (70.94595)	Prec@5 100.00000 (99.32433)
Epoch: [61][38/60]	Time 0.02956 (0.30692)	Data 0.00045 (0.20261)	Loss 2.4896 (1.0099)	Prec@1 50.00000 (70.39474)	Prec@5 100.00000 (99.34211)
Epoch: [61][39/60]	Time 0.02852 (0.29978)	Data 0.00062 (0.19743)	Loss 0.1576 (0.9880)	Prec@1 87.50000 (70.83334)	Prec@5 100.00000 (99.35898)
Epoch: [61][40/60]	Time 0.02878 (0.29300)	Data 0.00054 (0.19251)	Loss 0.2717 (0.9701)	Prec@1 87.50000 (71.25000)	Prec@5 100.00000 (99.37500)
Epoch: [61][41/60]	Time 0.02919 (0.28657)	Data 0.00039 (0.18782)	Loss 0.7067 (0.9637)	Prec@1 75.00000 (71.34146)	Prec@5 100.00000 (99.39024)
Epoch: [61][42/60]	Time 0.02665 (0.28038)	Data 0.00039 (0.18336)	Loss 1.2537 (0.9706)	Prec@1 62.50000 (71.13095)	Prec@5 100.00000 (99.40476)
Epoch: [61][43/60]	Time 0.02667 (0.27448)	Data 0.00044 (0.17910)	Loss 0.7441 (0.9653)	Prec@1 75.00000 (71.22093)	Prec@5 100.00000 (99.41860)
Epoch: [61][44/60]	Time 0.02681 (0.26885)	Data 0.00048 (0.17504)	Loss 0.9813 (0.9657)	Prec@1 62.50000 (71.02273)	Prec@5 100.00000 (99.43182)
Epoch: [61][45/60]	Time 0.02604 (0.26346)	Data 0.00042 (0.17116)	Loss 0.8415 (0.9629)	Prec@1 87.50000 (71.38889)	Prec@5 100.00000 (99.44445)
Epoch: [61][46/60]	Time 0.02685 (0.25831)	Data 0.00045 (0.16745)	Loss 0.9578 (0.9628)	Prec@1 50.00000 (70.92391)	Prec@5 100.00000 (99.45652)
Epoch: [61][47/60]	Time 0.03096 (0.25348)	Data 0.00043 (0.16390)	Loss 1.2669 (0.9693)	Prec@1 75.00000 (71.01064)	Prec@5 87.50000 (99.20213)
Epoch: [61][48/60]	Time 0.02621 (0.24874)	Data 0.00052 (0.16050)	Loss 0.6670 (0.9630)	Prec@1 87.50000 (71.35417)	Prec@5 100.00000 (99.21875)
Epoch: [61][49/60]	Time 0.02713 (0.24422)	Data 0.00042 (0.15723)	Loss 0.2075 (0.9476)	Prec@1 75.00000 (71.42857)	Prec@5 100.00000 (99.23470)
Epoch: [61][50/60]	Time 0.02665 (0.23987)	Data 0.00057 (0.15410)	Loss 0.9650 (0.9479)	Prec@1 75.00000 (71.50000)	Prec@5 100.00000 (99.25000)
Epoch: [61][51/60]	Time 0.02645 (0.23568)	Data 0.00046 (0.15108)	Loss 0.5433 (0.9400)	Prec@1 75.00000 (71.56863)	Prec@5 100.00000 (99.26471)
Epoch: [61][52/60]	Time 0.02640 (0.23166)	Data 0.00044 (0.14819)	Loss 1.4362 (0.9495)	Prec@1 25.00000 (70.67308)	Prec@5 87.50000 (99.03847)
Epoch: [61][53/60]	Time 0.02668 (0.22779)	Data 0.00048 (0.14540)	Loss 0.8215 (0.9471)	Prec@1 62.50000 (70.51887)	Prec@5 100.00000 (99.05660)
Epoch: [61][54/60]	Time 0.02684 (0.22407)	Data 0.00045 (0.14271)	Loss 1.1394 (0.9507)	Prec@1 75.00000 (70.60185)	Prec@5 100.00000 (99.07407)
Epoch: [61][55/60]	Time 0.02669 (0.22048)	Data 0.00045 (0.14013)	Loss 1.5691 (0.9619)	Prec@1 62.50000 (70.45454)	Prec@5 87.50000 (98.86363)
Epoch: [61][56/60]	Time 0.02668 (0.21702)	Data 0.00056 (0.13764)	Loss 0.6557 (0.9564)	Prec@1 62.50000 (70.31250)	Prec@5 100.00000 (98.88393)
Epoch: [61][57/60]	Time 0.02839 (0.21371)	Data 0.00042 (0.13523)	Loss 1.5661 (0.9671)	Prec@1 50.00000 (69.95614)	Prec@5 87.50000 (98.68421)
Epoch: [61][58/60]	Time 0.02295 (0.21042)	Data 0.00044 (0.13290)	Loss 0.6963 (0.9625)	Prec@1 62.50000 (69.82758)	Prec@5 100.00000 (98.70689)
Epoch: [61][59/60]	Time 0.02275 (0.20724)	Data 0.00043 (0.13066)	Loss 1.0101 (0.9633)	Prec@1 75.00000 (69.91525)	Prec@5 100.00000 (98.72881)
Epoch: [61][60/60]	Time 0.02253 (0.20416)	Data 0.00055 (0.12849)	Loss 0.6297 (0.9577)	Prec@1 87.50000 (70.20834)	Prec@5 100.00000 (98.75001)
train at epoch 62
train at epoch 62
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [62][0/272]	 lr: 0.00040	Time 7.519 (7.519)	Data 6.409 (6.409)	Loss 0.0236 (0.0236)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][10/272]	 lr: 0.00040	Time 0.372 (1.293)	Data 0.128 (0.724)	Loss 0.0171 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][20/272]	 lr: 0.00040	Time 0.551 (0.885)	Data 0.140 (0.442)	Loss 0.0146 (0.0192)	Prec@1 100.00000 (99.70238)	Prec@5 100.00000 (100.00000)
Epoch: [62][30/272]	 lr: 0.00040	Time 0.370 (0.743)	Data 0.127 (0.340)	Loss 0.0039 (0.0260)	Prec@1 100.00000 (99.49596)	Prec@5 100.00000 (100.00000)
Epoch: [62][40/272]	 lr: 0.00040	Time 0.517 (0.670)	Data 0.123 (0.290)	Loss 0.0079 (0.0237)	Prec@1 100.00000 (99.61890)	Prec@5 100.00000 (100.00000)
Epoch: [62][50/272]	 lr: 0.00040	Time 0.362 (0.627)	Data 0.140 (0.258)	Loss 0.0089 (0.0217)	Prec@1 100.00000 (99.69363)	Prec@5 100.00000 (100.00000)
Epoch: [62][60/272]	 lr: 0.00040	Time 0.434 (0.596)	Data 0.130 (0.237)	Loss 0.0170 (0.0200)	Prec@1 100.00000 (99.74384)	Prec@5 100.00000 (99.99999)
Epoch: [62][70/272]	 lr: 0.00040	Time 0.440 (0.573)	Data 0.121 (0.222)	Loss 0.0085 (0.0188)	Prec@1 100.00000 (99.77993)	Prec@5 100.00000 (100.00000)
Epoch: [62][80/272]	 lr: 0.00040	Time 0.479 (0.560)	Data 0.129 (0.210)	Loss 0.0142 (0.0182)	Prec@1 100.00000 (99.80710)	Prec@5 100.00000 (100.00000)
Epoch: [62][90/272]	 lr: 0.00040	Time 0.431 (0.548)	Data 0.135 (0.202)	Loss 0.0103 (0.0175)	Prec@1 100.00000 (99.82830)	Prec@5 100.00000 (100.00000)
Epoch: [62][100/272]	 lr: 0.00040	Time 0.465 (0.539)	Data 0.128 (0.195)	Loss 0.0395 (0.0177)	Prec@1 100.00000 (99.84530)	Prec@5 100.00000 (100.00000)
Epoch: [62][110/272]	 lr: 0.00040	Time 0.507 (0.530)	Data 0.118 (0.189)	Loss 0.0169 (0.0183)	Prec@1 100.00000 (99.83109)	Prec@5 100.00000 (100.00000)
Epoch: [62][120/272]	 lr: 0.00040	Time 0.375 (0.522)	Data 0.112 (0.184)	Loss 0.0103 (0.0183)	Prec@1 100.00000 (99.84504)	Prec@5 100.00000 (99.99999)
Epoch: [62][130/272]	 lr: 0.00040	Time 0.352 (0.516)	Data 0.126 (0.179)	Loss 0.0130 (0.0182)	Prec@1 100.00000 (99.85687)	Prec@5 100.00000 (100.00000)
Epoch: [62][140/272]	 lr: 0.00040	Time 0.455 (0.511)	Data 0.129 (0.176)	Loss 0.0150 (0.0177)	Prec@1 100.00000 (99.86702)	Prec@5 100.00000 (100.00000)
Epoch: [62][150/272]	 lr: 0.00040	Time 0.495 (0.507)	Data 0.129 (0.172)	Loss 0.0126 (0.0175)	Prec@1 100.00000 (99.87582)	Prec@5 100.00000 (100.00000)
Epoch: [62][160/272]	 lr: 0.00040	Time 0.406 (0.503)	Data 0.129 (0.170)	Loss 0.0200 (0.0176)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [62][170/272]	 lr: 0.00040	Time 0.423 (0.500)	Data 0.110 (0.167)	Loss 0.0114 (0.0175)	Prec@1 100.00000 (99.87208)	Prec@5 100.00000 (100.00000)
Epoch: [62][180/272]	 lr: 0.00040	Time 0.478 (0.496)	Data 0.127 (0.165)	Loss 0.0231 (0.0173)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [62][190/272]	 lr: 0.00040	Time 0.507 (0.494)	Data 0.129 (0.164)	Loss 0.0130 (0.0174)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [62][200/272]	 lr: 0.00040	Time 0.455 (0.491)	Data 0.128 (0.162)	Loss 0.1246 (0.0178)	Prec@1 96.87500 (99.86007)	Prec@5 100.00000 (100.00000)
Epoch: [62][210/272]	 lr: 0.00040	Time 0.430 (0.489)	Data 0.126 (0.160)	Loss 0.0204 (0.0175)	Prec@1 100.00000 (99.86671)	Prec@5 100.00000 (100.00000)
Epoch: [62][220/272]	 lr: 0.00040	Time 0.560 (0.489)	Data 0.121 (0.159)	Loss 0.0117 (0.0173)	Prec@1 100.00000 (99.87274)	Prec@5 100.00000 (100.00001)
Epoch: [62][230/272]	 lr: 0.00040	Time 0.393 (0.486)	Data 0.127 (0.157)	Loss 0.2529 (0.0181)	Prec@1 93.75000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [62][240/272]	 lr: 0.00040	Time 0.274 (0.484)	Data 0.129 (0.156)	Loss 0.0048 (0.0178)	Prec@1 100.00000 (99.85737)	Prec@5 100.00000 (100.00001)
Epoch: [62][250/272]	 lr: 0.00040	Time 0.239 (0.474)	Data 0.128 (0.155)	Loss 0.0088 (0.0175)	Prec@1 100.00000 (99.86305)	Prec@5 100.00000 (100.00000)
Epoch: [62][260/272]	 lr: 0.00040	Time 0.239 (0.465)	Data 0.129 (0.154)	Loss 0.0057 (0.0174)	Prec@1 100.00000 (99.86829)	Prec@5 100.00000 (100.00000)
Epoch: [62][270/272]	 lr: 0.00040	Time 0.241 (0.457)	Data 0.129 (0.153)	Loss 0.0092 (0.0173)	Prec@1 100.00000 (99.87315)	Prec@5 100.00000 (100.00000)
validation at epoch 62
validation at epoch 62
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [62][1/60]	Time 5.59941 (5.59941)	Data 5.44202 (5.44202)	Loss 0.4928 (0.4928)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [62][2/60]	Time 0.26125 (2.93033)	Data 0.02858 (2.73530)	Loss 0.6023 (0.5475)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [62][3/60]	Time 0.41528 (2.09198)	Data 0.07982 (1.85014)	Loss 1.2626 (0.7859)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [62][4/60]	Time 0.36006 (1.65900)	Data 0.25651 (1.45173)	Loss 0.2705 (0.6570)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [62][5/60]	Time 0.27790 (1.38278)	Data 0.05498 (1.17238)	Loss 0.2835 (0.5823)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [62][6/60]	Time 0.16671 (1.18010)	Data 0.00299 (0.97748)	Loss 0.5328 (0.5741)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [62][7/60]	Time 0.62793 (1.10122)	Data 0.52903 (0.91342)	Loss 1.2883 (0.6761)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [62][8/60]	Time 0.13559 (0.98052)	Data 0.05357 (0.80594)	Loss 1.2967 (0.7537)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][9/60]	Time 0.10144 (0.88284)	Data 0.03899 (0.72072)	Loss 0.6322 (0.7402)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][10/60]	Time 0.13599 (0.80816)	Data 0.09450 (0.65810)	Loss 0.6100 (0.7272)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][11/60]	Time 0.13976 (0.74739)	Data 0.01876 (0.59998)	Loss 0.5399 (0.7101)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [62][12/60]	Time 0.16352 (0.69874)	Data 0.06412 (0.55532)	Loss 1.3582 (0.7641)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][13/60]	Time 0.11989 (0.65421)	Data 0.02656 (0.51465)	Loss 2.4029 (0.8902)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [62][14/60]	Time 0.36915 (0.63385)	Data 0.00848 (0.47849)	Loss 0.0856 (0.8327)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [62][15/60]	Time 0.30099 (0.61166)	Data 0.24946 (0.46322)	Loss 1.3876 (0.8697)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [62][16/60]	Time 0.09138 (0.57914)	Data 0.01949 (0.43549)	Loss 0.9365 (0.8739)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [62][17/60]	Time 0.08444 (0.55004)	Data 0.01810 (0.41094)	Loss 0.3992 (0.8460)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [62][18/60]	Time 0.08608 (0.52426)	Data 0.00805 (0.38855)	Loss 2.1040 (0.9159)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [62][19/60]	Time 0.22351 (0.50844)	Data 0.05034 (0.37075)	Loss 0.1382 (0.8749)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [62][20/60]	Time 0.31646 (0.49884)	Data 0.06188 (0.35531)	Loss 1.9335 (0.9279)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][21/60]	Time 0.11043 (0.48034)	Data 0.01757 (0.33923)	Loss 0.6255 (0.9135)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][22/60]	Time 0.14343 (0.46503)	Data 0.05228 (0.32618)	Loss 0.5220 (0.8957)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [62][23/60]	Time 0.08125 (0.44834)	Data 0.00076 (0.31203)	Loss 0.8505 (0.8937)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [62][24/60]	Time 0.11422 (0.43442)	Data 0.00061 (0.29906)	Loss 0.8130 (0.8903)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [62][25/60]	Time 0.14523 (0.42285)	Data 0.00725 (0.28739)	Loss 0.4708 (0.8736)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [62][26/60]	Time 0.10432 (0.41060)	Data 0.01660 (0.27697)	Loss 0.0608 (0.8423)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [62][27/60]	Time 0.10586 (0.39931)	Data 0.01886 (0.26741)	Loss 0.4881 (0.8292)	Prec@1 75.00000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [62][28/60]	Time 0.23788 (0.39355)	Data 0.05858 (0.25995)	Loss 0.4650 (0.8162)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [62][29/60]	Time 0.16547 (0.38568)	Data 0.00068 (0.25101)	Loss 0.5262 (0.8062)	Prec@1 87.50000 (76.29311)	Prec@5 100.00000 (100.00000)
Epoch: [62][30/60]	Time 0.17274 (0.37859)	Data 0.00065 (0.24267)	Loss 1.5898 (0.8323)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [62][31/60]	Time 0.03831 (0.36761)	Data 0.00063 (0.23486)	Loss 2.3940 (0.8827)	Prec@1 25.00000 (74.19354)	Prec@5 87.50000 (99.59677)
Epoch: [62][32/60]	Time 0.03881 (0.35733)	Data 0.00046 (0.22753)	Loss 0.5143 (0.8712)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (99.60938)
Epoch: [62][33/60]	Time 0.06181 (0.34838)	Data 0.00041 (0.22065)	Loss 0.0601 (0.8466)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [62][34/60]	Time 0.04049 (0.33932)	Data 0.00042 (0.21418)	Loss 1.1168 (0.8545)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.63235)
Epoch: [62][35/60]	Time 0.03895 (0.33074)	Data 0.00269 (0.20813)	Loss 1.5689 (0.8749)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.28571)
Epoch: [62][36/60]	Time 0.02472 (0.32224)	Data 0.00058 (0.20237)	Loss 0.7849 (0.8724)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.30556)
Epoch: [62][37/60]	Time 0.03040 (0.31435)	Data 0.00381 (0.19700)	Loss 1.4179 (0.8872)	Prec@1 62.50000 (74.66216)	Prec@5 100.00000 (99.32433)
Epoch: [62][38/60]	Time 0.02725 (0.30680)	Data 0.00074 (0.19184)	Loss 2.1635 (0.9208)	Prec@1 50.00000 (74.01316)	Prec@5 100.00000 (99.34211)
Epoch: [62][39/60]	Time 0.02677 (0.29962)	Data 0.00085 (0.18694)	Loss 0.0852 (0.8993)	Prec@1 100.00000 (74.67949)	Prec@5 100.00000 (99.35898)
Epoch: [62][40/60]	Time 0.02665 (0.29279)	Data 0.00109 (0.18229)	Loss 0.1588 (0.8808)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.37500)
Epoch: [62][41/60]	Time 0.02692 (0.28631)	Data 0.00106 (0.17787)	Loss 0.4270 (0.8698)	Prec@1 87.50000 (75.30488)	Prec@5 100.00000 (99.39024)
Epoch: [62][42/60]	Time 0.02688 (0.28013)	Data 0.00108 (0.17366)	Loss 1.1036 (0.8753)	Prec@1 75.00000 (75.29762)	Prec@5 100.00000 (99.40476)
Epoch: [62][43/60]	Time 0.02705 (0.27425)	Data 0.00092 (0.16965)	Loss 0.6361 (0.8698)	Prec@1 75.00000 (75.29070)	Prec@5 100.00000 (99.41860)
Epoch: [62][44/60]	Time 0.02673 (0.26862)	Data 0.00047 (0.16580)	Loss 0.6592 (0.8650)	Prec@1 75.00000 (75.28410)	Prec@5 100.00000 (99.43182)
Epoch: [62][45/60]	Time 0.02602 (0.26323)	Data 0.00042 (0.16213)	Loss 0.8003 (0.8635)	Prec@1 87.50000 (75.55556)	Prec@5 100.00000 (99.44445)
Epoch: [62][46/60]	Time 0.02648 (0.25808)	Data 0.00049 (0.15861)	Loss 1.3374 (0.8738)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.45652)
Epoch: [62][47/60]	Time 0.02616 (0.25315)	Data 0.00045 (0.15525)	Loss 0.9960 (0.8764)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.20213)
Epoch: [62][48/60]	Time 0.02668 (0.24843)	Data 0.00051 (0.15202)	Loss 0.3204 (0.8649)	Prec@1 87.50000 (75.26042)	Prec@5 100.00000 (99.21875)
Epoch: [62][49/60]	Time 0.02603 (0.24389)	Data 0.00044 (0.14893)	Loss 0.3722 (0.8548)	Prec@1 87.50000 (75.51020)	Prec@5 100.00000 (99.23470)
Epoch: [62][50/60]	Time 0.02630 (0.23954)	Data 0.00042 (0.14596)	Loss 0.7058 (0.8518)	Prec@1 62.50000 (75.25000)	Prec@5 100.00000 (99.25000)
Epoch: [62][51/60]	Time 0.02643 (0.23536)	Data 0.00046 (0.14311)	Loss 0.3538 (0.8421)	Prec@1 75.00000 (75.24510)	Prec@5 100.00000 (99.26471)
Epoch: [62][52/60]	Time 0.02609 (0.23134)	Data 0.00046 (0.14036)	Loss 0.7747 (0.8408)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.27885)
Epoch: [62][53/60]	Time 0.02580 (0.22746)	Data 0.00047 (0.13772)	Loss 0.6635 (0.8374)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.29246)
Epoch: [62][54/60]	Time 0.02590 (0.22373)	Data 0.00040 (0.13518)	Loss 0.9219 (0.8390)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.30556)
Epoch: [62][55/60]	Time 0.02608 (0.22013)	Data 0.00048 (0.13273)	Loss 1.1916 (0.8454)	Prec@1 62.50000 (74.77273)	Prec@5 87.50000 (99.09090)
Epoch: [62][56/60]	Time 0.02850 (0.21671)	Data 0.00065 (0.13037)	Loss 0.8031 (0.8446)	Prec@1 75.00000 (74.77679)	Prec@5 100.00000 (99.10715)
Epoch: [62][57/60]	Time 0.02253 (0.21330)	Data 0.00052 (0.12810)	Loss 1.4886 (0.8559)	Prec@1 62.50000 (74.56140)	Prec@5 87.50000 (98.90351)
Epoch: [62][58/60]	Time 0.02232 (0.21001)	Data 0.00044 (0.12589)	Loss 0.7584 (0.8542)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (98.92242)
Epoch: [62][59/60]	Time 0.02256 (0.20683)	Data 0.00050 (0.12377)	Loss 0.7759 (0.8529)	Prec@1 75.00000 (74.57627)	Prec@5 100.00000 (98.94068)
Epoch: [62][60/60]	Time 0.02268 (0.20376)	Data 0.00051 (0.12171)	Loss 0.5679 (0.8482)	Prec@1 75.00000 (74.58334)	Prec@5 100.00000 (98.95834)
train at epoch 63
train at epoch 63
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [63][0/272]	 lr: 0.00040	Time 5.875 (5.875)	Data 4.679 (4.679)	Loss 0.0173 (0.0173)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][10/272]	 lr: 0.00040	Time 0.450 (1.236)	Data 0.128 (0.568)	Loss 0.0076 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][20/272]	 lr: 0.00040	Time 0.386 (0.842)	Data 0.127 (0.362)	Loss 0.0108 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][30/272]	 lr: 0.00040	Time 0.428 (0.710)	Data 0.128 (0.288)	Loss 0.0042 (0.0141)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][40/272]	 lr: 0.00040	Time 0.414 (0.645)	Data 0.125 (0.249)	Loss 0.0161 (0.0136)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][50/272]	 lr: 0.00040	Time 0.382 (0.607)	Data 0.123 (0.225)	Loss 0.0163 (0.0136)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][60/272]	 lr: 0.00040	Time 0.478 (0.579)	Data 0.129 (0.209)	Loss 0.0054 (0.0134)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [63][70/272]	 lr: 0.00040	Time 0.486 (0.561)	Data 0.127 (0.198)	Loss 0.0100 (0.0138)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][80/272]	 lr: 0.00040	Time 0.541 (0.550)	Data 0.128 (0.189)	Loss 0.0105 (0.0136)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][90/272]	 lr: 0.00040	Time 0.283 (0.536)	Data 0.118 (0.182)	Loss 0.0072 (0.0139)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][100/272]	 lr: 0.00040	Time 0.412 (0.526)	Data 0.126 (0.177)	Loss 0.0304 (0.0141)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][110/272]	 lr: 0.00040	Time 0.416 (0.520)	Data 0.127 (0.172)	Loss 0.0161 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][120/272]	 lr: 0.00040	Time 0.480 (0.516)	Data 0.140 (0.169)	Loss 0.0130 (0.0147)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [63][130/272]	 lr: 0.00040	Time 0.387 (0.511)	Data 0.129 (0.166)	Loss 0.0050 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][140/272]	 lr: 0.00040	Time 0.544 (0.508)	Data 0.134 (0.163)	Loss 0.0098 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][150/272]	 lr: 0.00040	Time 0.441 (0.503)	Data 0.149 (0.161)	Loss 0.0145 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][160/272]	 lr: 0.00040	Time 0.434 (0.500)	Data 0.129 (0.159)	Loss 0.0141 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][170/272]	 lr: 0.00040	Time 0.378 (0.496)	Data 0.143 (0.157)	Loss 0.0202 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][180/272]	 lr: 0.00040	Time 0.463 (0.494)	Data 0.124 (0.156)	Loss 0.0160 (0.0151)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [63][190/272]	 lr: 0.00040	Time 0.403 (0.491)	Data 0.129 (0.154)	Loss 0.0090 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][200/272]	 lr: 0.00040	Time 0.442 (0.490)	Data 0.095 (0.153)	Loss 0.0064 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][210/272]	 lr: 0.00040	Time 0.419 (0.488)	Data 0.127 (0.152)	Loss 0.0145 (0.0152)	Prec@1 100.00000 (99.97038)	Prec@5 100.00000 (100.00000)
Epoch: [63][220/272]	 lr: 0.00040	Time 0.355 (0.486)	Data 0.128 (0.151)	Loss 0.0255 (0.0154)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [63][230/272]	 lr: 0.00040	Time 0.496 (0.485)	Data 0.143 (0.150)	Loss 0.0035 (0.0155)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [63][240/272]	 lr: 0.00040	Time 0.383 (0.483)	Data 0.116 (0.149)	Loss 0.0257 (0.0155)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [63][250/272]	 lr: 0.00040	Time 0.238 (0.473)	Data 0.128 (0.148)	Loss 0.0094 (0.0154)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [63][260/272]	 lr: 0.00040	Time 0.239 (0.464)	Data 0.129 (0.147)	Loss 0.0212 (0.0157)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [63][270/272]	 lr: 0.00040	Time 0.238 (0.456)	Data 0.128 (0.146)	Loss 0.0280 (0.0157)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 63
validation at epoch 63
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [63][1/60]	Time 7.09769 (7.09769)	Data 7.00670 (7.00670)	Loss 0.4380 (0.4380)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][2/60]	Time 0.12659 (3.61214)	Data 0.01376 (3.51023)	Loss 0.4415 (0.4397)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [63][3/60]	Time 0.34257 (2.52228)	Data 0.24087 (2.42044)	Loss 1.3004 (0.7266)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][4/60]	Time 0.12338 (1.92256)	Data 0.00054 (1.81547)	Loss 0.3010 (0.6202)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [63][5/60]	Time 0.10559 (1.55916)	Data 0.00874 (1.45412)	Loss 0.5367 (0.6035)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [63][6/60]	Time 0.05990 (1.30929)	Data 0.00109 (1.21195)	Loss 0.5897 (0.6012)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [63][7/60]	Time 0.09989 (1.13651)	Data 0.00576 (1.03964)	Loss 1.5057 (0.7304)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [63][8/60]	Time 0.08074 (1.00454)	Data 0.00269 (0.91002)	Loss 1.4268 (0.8175)	Prec@1 62.50000 (73.43750)	Prec@5 87.50000 (98.43750)
Epoch: [63][9/60]	Time 0.21842 (0.91720)	Data 0.00340 (0.80928)	Loss 0.8604 (0.8222)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [63][10/60]	Time 0.17316 (0.84279)	Data 0.01338 (0.72969)	Loss 0.7225 (0.8123)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [63][11/60]	Time 0.11186 (0.77634)	Data 0.00076 (0.66343)	Loss 0.6566 (0.7981)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [63][12/60]	Time 0.10773 (0.72063)	Data 0.00074 (0.60820)	Loss 1.3365 (0.8430)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [63][13/60]	Time 0.11013 (0.67366)	Data 0.00054 (0.56146)	Loss 1.8409 (0.9197)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (99.03847)
Epoch: [63][14/60]	Time 0.23491 (0.64233)	Data 0.00772 (0.52191)	Loss 0.1696 (0.8662)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [63][15/60]	Time 0.17833 (0.61139)	Data 0.01081 (0.48783)	Loss 1.2876 (0.8943)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (99.16667)
Epoch: [63][16/60]	Time 0.12161 (0.58078)	Data 0.06632 (0.46149)	Loss 1.2158 (0.9144)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.21875)
Epoch: [63][17/60]	Time 0.05896 (0.55009)	Data 0.00589 (0.43469)	Loss 0.3564 (0.8815)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (99.26471)
Epoch: [63][18/60]	Time 0.06797 (0.52330)	Data 0.00332 (0.41072)	Loss 2.6580 (0.9802)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (99.30556)
Epoch: [63][19/60]	Time 0.07290 (0.49960)	Data 0.00202 (0.38921)	Loss 0.1801 (0.9381)	Prec@1 87.50000 (73.68421)	Prec@5 100.00000 (99.34211)
Epoch: [63][20/60]	Time 0.09917 (0.47958)	Data 0.00800 (0.37015)	Loss 2.6532 (1.0239)	Prec@1 62.50000 (73.12500)	Prec@5 87.50000 (98.75000)
Epoch: [63][21/60]	Time 0.17112 (0.46489)	Data 0.05711 (0.35525)	Loss 0.6918 (1.0081)	Prec@1 62.50000 (72.61905)	Prec@5 100.00000 (98.80952)
Epoch: [63][22/60]	Time 0.14447 (0.45032)	Data 0.02709 (0.34033)	Loss 0.6587 (0.9922)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [63][23/60]	Time 0.12977 (0.43639)	Data 0.00200 (0.32562)	Loss 1.2103 (1.0017)	Prec@1 62.50000 (72.28261)	Prec@5 100.00000 (98.91305)
Epoch: [63][24/60]	Time 0.09345 (0.42210)	Data 0.01067 (0.31250)	Loss 0.6095 (0.9853)	Prec@1 75.00000 (72.39584)	Prec@5 100.00000 (98.95834)
Epoch: [63][25/60]	Time 0.14012 (0.41082)	Data 0.00570 (0.30022)	Loss 0.4939 (0.9657)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.00000)
Epoch: [63][26/60]	Time 0.28799 (0.40609)	Data 0.07613 (0.29161)	Loss 0.0282 (0.9296)	Prec@1 100.00000 (73.55769)	Prec@5 100.00000 (99.03847)
Epoch: [63][27/60]	Time 0.17939 (0.39770)	Data 0.00081 (0.28084)	Loss 1.0765 (0.9350)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (99.07407)
Epoch: [63][28/60]	Time 0.07185 (0.38606)	Data 0.00653 (0.27104)	Loss 0.3266 (0.9133)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (99.10715)
Epoch: [63][29/60]	Time 0.06166 (0.37487)	Data 0.00041 (0.26171)	Loss 0.7469 (0.9076)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (99.13793)
Epoch: [63][30/60]	Time 0.05179 (0.36410)	Data 0.00041 (0.25300)	Loss 1.9352 (0.9418)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (99.16667)
Epoch: [63][31/60]	Time 0.07533 (0.35479)	Data 0.02885 (0.24577)	Loss 3.0008 (1.0082)	Prec@1 25.00000 (71.77419)	Prec@5 87.50000 (98.79032)
Epoch: [63][32/60]	Time 0.04302 (0.34505)	Data 0.00433 (0.23822)	Loss 1.0915 (1.0108)	Prec@1 62.50000 (71.48438)	Prec@5 100.00000 (98.82812)
Epoch: [63][33/60]	Time 0.06238 (0.33648)	Data 0.00109 (0.23104)	Loss 0.1646 (0.9852)	Prec@1 87.50000 (71.96970)	Prec@5 100.00000 (98.86364)
Epoch: [63][34/60]	Time 0.03926 (0.32774)	Data 0.00055 (0.22426)	Loss 1.3244 (0.9952)	Prec@1 62.50000 (71.69118)	Prec@5 100.00000 (98.89706)
Epoch: [63][35/60]	Time 0.06178 (0.32014)	Data 0.00041 (0.21786)	Loss 1.5611 (1.0114)	Prec@1 75.00000 (71.78571)	Prec@5 87.50000 (98.57143)
Epoch: [63][36/60]	Time 0.03759 (0.31229)	Data 0.00065 (0.21183)	Loss 1.4969 (1.0248)	Prec@1 62.50000 (71.52778)	Prec@5 100.00000 (98.61111)
Epoch: [63][37/60]	Time 0.05039 (0.30521)	Data 0.01284 (0.20645)	Loss 1.6619 (1.0421)	Prec@1 62.50000 (71.28378)	Prec@5 100.00000 (98.64865)
Epoch: [63][38/60]	Time 0.03788 (0.29818)	Data 0.00052 (0.20103)	Loss 2.5071 (1.0806)	Prec@1 50.00000 (70.72369)	Prec@5 100.00000 (98.68421)
Epoch: [63][39/60]	Time 0.03891 (0.29153)	Data 0.00179 (0.19592)	Loss 0.1963 (1.0579)	Prec@1 87.50000 (71.15385)	Prec@5 100.00000 (98.71795)
Epoch: [63][40/60]	Time 0.03169 (0.28503)	Data 0.00053 (0.19104)	Loss 0.3694 (1.0407)	Prec@1 87.50000 (71.56250)	Prec@5 100.00000 (98.75000)
Epoch: [63][41/60]	Time 0.03753 (0.27900)	Data 0.00053 (0.18639)	Loss 0.7862 (1.0345)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (98.78049)
Epoch: [63][42/60]	Time 0.02741 (0.27301)	Data 0.00060 (0.18197)	Loss 1.1361 (1.0369)	Prec@1 75.00000 (71.72619)	Prec@5 100.00000 (98.80952)
Epoch: [63][43/60]	Time 0.03277 (0.26742)	Data 0.00469 (0.17784)	Loss 0.9688 (1.0353)	Prec@1 62.50000 (71.51163)	Prec@5 100.00000 (98.83721)
Epoch: [63][44/60]	Time 0.03047 (0.26203)	Data 0.00350 (0.17388)	Loss 1.0588 (1.0359)	Prec@1 62.50000 (71.30682)	Prec@5 100.00000 (98.86364)
Epoch: [63][45/60]	Time 0.02265 (0.25671)	Data 0.00048 (0.17003)	Loss 0.8243 (1.0312)	Prec@1 87.50000 (71.66667)	Prec@5 100.00000 (98.88889)
Epoch: [63][46/60]	Time 0.02272 (0.25163)	Data 0.00044 (0.16634)	Loss 0.9431 (1.0293)	Prec@1 50.00000 (71.19566)	Prec@5 100.00000 (98.91305)
Epoch: [63][47/60]	Time 0.02285 (0.24676)	Data 0.00047 (0.16281)	Loss 0.8992 (1.0265)	Prec@1 75.00000 (71.27660)	Prec@5 87.50000 (98.67021)
Epoch: [63][48/60]	Time 0.02383 (0.24212)	Data 0.00046 (0.15943)	Loss 0.5558 (1.0167)	Prec@1 75.00000 (71.35417)	Prec@5 100.00000 (98.69792)
Epoch: [63][49/60]	Time 0.02245 (0.23763)	Data 0.00042 (0.15619)	Loss 0.2413 (1.0009)	Prec@1 87.50000 (71.68367)	Prec@5 100.00000 (98.72449)
Epoch: [63][50/60]	Time 0.02271 (0.23333)	Data 0.00044 (0.15307)	Loss 0.6450 (0.9937)	Prec@1 75.00000 (71.75000)	Prec@5 100.00000 (98.75000)
Epoch: [63][51/60]	Time 0.02278 (0.22921)	Data 0.00047 (0.15008)	Loss 0.3642 (0.9814)	Prec@1 75.00000 (71.81373)	Prec@5 100.00000 (98.77451)
Epoch: [63][52/60]	Time 0.02320 (0.22524)	Data 0.00042 (0.14720)	Loss 1.0826 (0.9834)	Prec@1 25.00000 (70.91347)	Prec@5 100.00000 (98.79808)
Epoch: [63][53/60]	Time 0.02326 (0.22143)	Data 0.00048 (0.14443)	Loss 0.5703 (0.9756)	Prec@1 75.00000 (70.99057)	Prec@5 100.00000 (98.82076)
Epoch: [63][54/60]	Time 0.02316 (0.21776)	Data 0.00046 (0.14177)	Loss 1.0114 (0.9762)	Prec@1 75.00000 (71.06481)	Prec@5 100.00000 (98.84259)
Epoch: [63][55/60]	Time 0.02260 (0.21421)	Data 0.00049 (0.13920)	Loss 1.1509 (0.9794)	Prec@1 62.50000 (70.90909)	Prec@5 87.50000 (98.63636)
Epoch: [63][56/60]	Time 0.02224 (0.21079)	Data 0.00050 (0.13672)	Loss 0.6151 (0.9729)	Prec@1 75.00000 (70.98215)	Prec@5 100.00000 (98.66072)
Epoch: [63][57/60]	Time 0.02235 (0.20748)	Data 0.00043 (0.13433)	Loss 1.4278 (0.9809)	Prec@1 62.50000 (70.83334)	Prec@5 100.00000 (98.68421)
Epoch: [63][58/60]	Time 0.02308 (0.20430)	Data 0.00042 (0.13202)	Loss 0.6686 (0.9755)	Prec@1 62.50000 (70.68965)	Prec@5 100.00000 (98.70689)
Epoch: [63][59/60]	Time 0.02242 (0.20122)	Data 0.00048 (0.12979)	Loss 0.9555 (0.9752)	Prec@1 75.00000 (70.76271)	Prec@5 100.00000 (98.72881)
Epoch: [63][60/60]	Time 0.02242 (0.19824)	Data 0.00055 (0.12764)	Loss 0.5666 (0.9683)	Prec@1 87.50000 (71.04167)	Prec@5 100.00000 (98.75001)
train at epoch 64
train at epoch 64
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [64][0/272]	 lr: 0.00040	Time 8.729 (8.729)	Data 6.916 (6.916)	Loss 0.0212 (0.0212)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][10/272]	 lr: 0.00040	Time 0.488 (1.292)	Data 0.118 (0.795)	Loss 0.0154 (0.0183)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][20/272]	 lr: 0.00040	Time 0.386 (0.873)	Data 0.117 (0.476)	Loss 0.0150 (0.0177)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][30/272]	 lr: 0.00040	Time 0.474 (0.736)	Data 0.130 (0.365)	Loss 0.0129 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][40/272]	 lr: 0.00040	Time 0.390 (0.664)	Data 0.120 (0.309)	Loss 0.0119 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][50/272]	 lr: 0.00040	Time 0.420 (0.622)	Data 0.123 (0.274)	Loss 0.0042 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][60/272]	 lr: 0.00040	Time 0.362 (0.590)	Data 0.126 (0.250)	Loss 0.0077 (0.0151)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [64][70/272]	 lr: 0.00040	Time 0.445 (0.569)	Data 0.125 (0.233)	Loss 0.0469 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][80/272]	 lr: 0.00040	Time 0.425 (0.552)	Data 0.114 (0.220)	Loss 0.0089 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][90/272]	 lr: 0.00040	Time 0.444 (0.540)	Data 0.120 (0.210)	Loss 0.0195 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][100/272]	 lr: 0.00040	Time 0.432 (0.530)	Data 0.124 (0.202)	Loss 0.0085 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][110/272]	 lr: 0.00040	Time 0.457 (0.524)	Data 0.129 (0.195)	Loss 0.0147 (0.0163)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [64][120/272]	 lr: 0.00040	Time 0.397 (0.515)	Data 0.128 (0.189)	Loss 0.0200 (0.0161)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [64][130/272]	 lr: 0.00040	Time 0.497 (0.509)	Data 0.127 (0.185)	Loss 0.0070 (0.0160)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [64][140/272]	 lr: 0.00040	Time 0.468 (0.504)	Data 0.152 (0.181)	Loss 0.0095 (0.0158)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [64][150/272]	 lr: 0.00040	Time 0.354 (0.501)	Data 0.128 (0.177)	Loss 0.0042 (0.0158)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [64][160/272]	 lr: 0.00040	Time 0.532 (0.497)	Data 0.128 (0.175)	Loss 0.0096 (0.0158)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [64][170/272]	 lr: 0.00040	Time 0.437 (0.493)	Data 0.137 (0.172)	Loss 0.0141 (0.0162)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [64][180/272]	 lr: 0.00040	Time 0.466 (0.492)	Data 0.128 (0.170)	Loss 0.0106 (0.0162)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [64][190/272]	 lr: 0.00040	Time 0.424 (0.491)	Data 0.125 (0.167)	Loss 0.0171 (0.0167)	Prec@1 100.00000 (99.96728)	Prec@5 100.00000 (100.00000)
Epoch: [64][200/272]	 lr: 0.00040	Time 0.435 (0.488)	Data 0.142 (0.166)	Loss 0.0136 (0.0168)	Prec@1 100.00000 (99.96890)	Prec@5 100.00000 (100.00000)
Epoch: [64][210/272]	 lr: 0.00040	Time 0.367 (0.486)	Data 0.124 (0.164)	Loss 0.1066 (0.0176)	Prec@1 96.87500 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [64][220/272]	 lr: 0.00040	Time 0.432 (0.484)	Data 0.109 (0.162)	Loss 0.0135 (0.0175)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [64][230/272]	 lr: 0.00040	Time 0.483 (0.482)	Data 0.142 (0.161)	Loss 0.0061 (0.0172)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [64][240/272]	 lr: 0.00040	Time 0.263 (0.480)	Data 0.128 (0.160)	Loss 0.0084 (0.0170)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [64][250/272]	 lr: 0.00040	Time 0.241 (0.470)	Data 0.128 (0.158)	Loss 0.0128 (0.0169)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [64][260/272]	 lr: 0.00040	Time 0.241 (0.462)	Data 0.129 (0.157)	Loss 0.0086 (0.0166)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [64][270/272]	 lr: 0.00040	Time 0.240 (0.453)	Data 0.129 (0.156)	Loss 0.0137 (0.0164)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 64
validation at epoch 64
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [64][1/60]	Time 3.59814 (3.59814)	Data 3.50203 (3.50203)	Loss 0.4038 (0.4038)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [64][2/60]	Time 2.63248 (3.11531)	Data 2.55495 (3.02849)	Loss 0.4962 (0.4500)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [64][3/60]	Time 0.59682 (2.27582)	Data 0.52444 (2.19381)	Loss 1.2290 (0.7096)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [64][4/60]	Time 0.11754 (1.73625)	Data 0.00579 (1.64680)	Loss 0.2089 (0.5845)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [64][5/60]	Time 0.23755 (1.43651)	Data 0.00206 (1.31785)	Loss 0.3395 (0.5355)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [64][6/60]	Time 0.44376 (1.27105)	Data 0.36437 (1.15894)	Loss 0.3788 (0.5093)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [64][7/60]	Time 0.12682 (1.10759)	Data 0.00189 (0.99365)	Loss 1.0927 (0.5927)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [64][8/60]	Time 0.19554 (0.99358)	Data 0.07233 (0.87848)	Loss 1.1771 (0.6657)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][9/60]	Time 0.15180 (0.90005)	Data 0.01006 (0.78199)	Loss 0.5412 (0.6519)	Prec@1 87.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [64][10/60]	Time 0.06028 (0.81607)	Data 0.01400 (0.70519)	Loss 0.5231 (0.6390)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [64][11/60]	Time 0.16307 (0.75671)	Data 0.00202 (0.64127)	Loss 0.5168 (0.6279)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [64][12/60]	Time 0.25116 (0.71458)	Data 0.00736 (0.58844)	Loss 1.0538 (0.6634)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [64][13/60]	Time 0.24944 (0.67880)	Data 0.00067 (0.54323)	Loss 2.0106 (0.7670)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [64][14/60]	Time 0.24205 (0.64760)	Data 0.00696 (0.50492)	Loss 0.0662 (0.7170)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [64][15/60]	Time 0.15562 (0.61481)	Data 0.04419 (0.47421)	Loss 1.2035 (0.7494)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [64][16/60]	Time 0.14035 (0.58515)	Data 0.00384 (0.44481)	Loss 1.0586 (0.7687)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [64][17/60]	Time 0.12498 (0.55808)	Data 0.00550 (0.41897)	Loss 0.3710 (0.7453)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][18/60]	Time 0.09748 (0.53249)	Data 0.00622 (0.39604)	Loss 2.3388 (0.8339)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][19/60]	Time 0.10853 (0.51018)	Data 0.00463 (0.37544)	Loss 0.1345 (0.7971)	Prec@1 100.00000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [64][20/60]	Time 0.25306 (0.49732)	Data 0.07144 (0.36024)	Loss 2.2527 (0.8698)	Prec@1 62.50000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [64][21/60]	Time 0.21626 (0.48394)	Data 0.01950 (0.34401)	Loss 0.6057 (0.8573)	Prec@1 75.00000 (75.59524)	Prec@5 100.00000 (100.00000)
Epoch: [64][22/60]	Time 0.11932 (0.46737)	Data 0.00097 (0.32842)	Loss 0.6617 (0.8484)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (100.00000)
Epoch: [64][23/60]	Time 0.08960 (0.45094)	Data 0.01730 (0.31489)	Loss 0.9749 (0.8539)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][24/60]	Time 0.18482 (0.43985)	Data 0.05871 (0.30422)	Loss 0.7509 (0.8496)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [64][25/60]	Time 0.08396 (0.42562)	Data 0.02529 (0.29306)	Loss 0.4484 (0.8335)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (100.00000)
Epoch: [64][26/60]	Time 0.08091 (0.41236)	Data 0.00049 (0.28181)	Loss 0.0525 (0.8035)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (100.00000)
Epoch: [64][27/60]	Time 0.07453 (0.39985)	Data 0.00143 (0.27142)	Loss 0.7314 (0.8008)	Prec@1 62.50000 (75.92593)	Prec@5 100.00000 (100.00000)
Epoch: [64][28/60]	Time 0.09351 (0.38891)	Data 0.00787 (0.26201)	Loss 0.3927 (0.7862)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (100.00001)
Epoch: [64][29/60]	Time 0.09475 (0.37876)	Data 0.00807 (0.25325)	Loss 0.5856 (0.7793)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (100.00000)
Epoch: [64][30/60]	Time 0.11411 (0.36994)	Data 0.00041 (0.24483)	Loss 1.6924 (0.8098)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [64][31/60]	Time 0.12266 (0.36196)	Data 0.00049 (0.23694)	Loss 2.4391 (0.8623)	Prec@1 25.00000 (74.19354)	Prec@5 87.50000 (99.59677)
Epoch: [64][32/60]	Time 0.05815 (0.35247)	Data 0.00043 (0.22955)	Loss 0.6866 (0.8568)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (99.60938)
Epoch: [64][33/60]	Time 0.07901 (0.34418)	Data 0.00045 (0.22261)	Loss 0.0575 (0.8326)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [64][34/60]	Time 0.03208 (0.33500)	Data 0.00071 (0.21608)	Loss 1.1532 (0.8420)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.63235)
Epoch: [64][35/60]	Time 0.03301 (0.32638)	Data 0.00538 (0.21006)	Loss 1.4853 (0.8604)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.28571)
Epoch: [64][36/60]	Time 0.02826 (0.31809)	Data 0.00463 (0.20436)	Loss 0.9881 (0.8640)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.30556)
Epoch: [64][37/60]	Time 0.02974 (0.31030)	Data 0.00049 (0.19885)	Loss 1.5222 (0.8818)	Prec@1 62.50000 (74.66216)	Prec@5 100.00000 (99.32433)
Epoch: [64][38/60]	Time 0.03018 (0.30293)	Data 0.00052 (0.19363)	Loss 2.2781 (0.9185)	Prec@1 50.00000 (74.01316)	Prec@5 100.00000 (99.34211)
Epoch: [64][39/60]	Time 0.02914 (0.29591)	Data 0.00051 (0.18868)	Loss 0.0712 (0.8968)	Prec@1 100.00000 (74.67949)	Prec@5 100.00000 (99.35898)
Epoch: [64][40/60]	Time 0.02842 (0.28922)	Data 0.00044 (0.18397)	Loss 0.1558 (0.8783)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.37500)
Epoch: [64][41/60]	Time 0.03268 (0.28296)	Data 0.00069 (0.17950)	Loss 0.5555 (0.8704)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.39024)
Epoch: [64][42/60]	Time 0.02450 (0.27681)	Data 0.00088 (0.17525)	Loss 1.0637 (0.8750)	Prec@1 87.50000 (75.29762)	Prec@5 100.00000 (99.40476)
Epoch: [64][43/60]	Time 0.02274 (0.27090)	Data 0.00041 (0.17118)	Loss 0.7225 (0.8714)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.41860)
Epoch: [64][44/60]	Time 0.02267 (0.26526)	Data 0.00043 (0.16730)	Loss 0.7702 (0.8691)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.43182)
Epoch: [64][45/60]	Time 0.02280 (0.25987)	Data 0.00044 (0.16359)	Loss 0.7551 (0.8666)	Prec@1 87.50000 (75.27778)	Prec@5 100.00000 (99.44445)
Epoch: [64][46/60]	Time 0.02349 (0.25473)	Data 0.00045 (0.16005)	Loss 1.1490 (0.8727)	Prec@1 50.00000 (74.72826)	Prec@5 100.00000 (99.45652)
Epoch: [64][47/60]	Time 0.02300 (0.24980)	Data 0.00047 (0.15665)	Loss 0.9871 (0.8752)	Prec@1 75.00000 (74.73404)	Prec@5 100.00000 (99.46808)
Epoch: [64][48/60]	Time 0.02267 (0.24507)	Data 0.00044 (0.15340)	Loss 0.3959 (0.8652)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.47917)
Epoch: [64][49/60]	Time 0.02286 (0.24054)	Data 0.00045 (0.15028)	Loss 0.2996 (0.8537)	Prec@1 87.50000 (75.25510)	Prec@5 100.00000 (99.48979)
Epoch: [64][50/60]	Time 0.02380 (0.23620)	Data 0.00044 (0.14728)	Loss 0.7134 (0.8508)	Prec@1 75.00000 (75.25000)	Prec@5 100.00000 (99.50000)
Epoch: [64][51/60]	Time 0.02344 (0.23203)	Data 0.00049 (0.14440)	Loss 0.3885 (0.8418)	Prec@1 75.00000 (75.24510)	Prec@5 100.00000 (99.50980)
Epoch: [64][52/60]	Time 0.02281 (0.22801)	Data 0.00047 (0.14163)	Loss 0.8779 (0.8425)	Prec@1 50.00000 (74.75962)	Prec@5 100.00000 (99.51923)
Epoch: [64][53/60]	Time 0.02255 (0.22413)	Data 0.00047 (0.13897)	Loss 0.6170 (0.8382)	Prec@1 75.00000 (74.76415)	Prec@5 100.00000 (99.52831)
Epoch: [64][54/60]	Time 0.02268 (0.22040)	Data 0.00044 (0.13640)	Loss 0.9961 (0.8411)	Prec@1 75.00000 (74.76852)	Prec@5 100.00000 (99.53704)
Epoch: [64][55/60]	Time 0.02302 (0.21681)	Data 0.00045 (0.13393)	Loss 1.2401 (0.8484)	Prec@1 62.50000 (74.54546)	Prec@5 87.50000 (99.31818)
Epoch: [64][56/60]	Time 0.02305 (0.21335)	Data 0.00053 (0.13155)	Loss 0.7825 (0.8472)	Prec@1 62.50000 (74.33036)	Prec@5 100.00000 (99.33036)
Epoch: [64][57/60]	Time 0.02248 (0.21000)	Data 0.00044 (0.12925)	Loss 1.4457 (0.8577)	Prec@1 62.50000 (74.12281)	Prec@5 87.50000 (99.12281)
Epoch: [64][58/60]	Time 0.02275 (0.20677)	Data 0.00048 (0.12703)	Loss 0.7515 (0.8559)	Prec@1 62.50000 (73.92242)	Prec@5 100.00000 (99.13793)
Epoch: [64][59/60]	Time 0.02251 (0.20365)	Data 0.00061 (0.12489)	Loss 0.8096 (0.8551)	Prec@1 87.50000 (74.15254)	Prec@5 100.00000 (99.15254)
Epoch: [64][60/60]	Time 0.02311 (0.20064)	Data 0.00042 (0.12281)	Loss 0.6437 (0.8516)	Prec@1 87.50000 (74.37501)	Prec@5 100.00000 (99.16667)
train at epoch 65
train at epoch 65
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [65][0/272]	 lr: 0.00004	Time 7.087 (7.087)	Data 5.884 (5.884)	Loss 0.0120 (0.0120)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [65][10/272]	 lr: 0.00004	Time 0.379 (1.256)	Data 0.127 (0.799)	Loss 0.0087 (0.0132)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [65][20/272]	 lr: 0.00004	Time 0.461 (0.861)	Data 0.129 (0.480)	Loss 0.0058 (0.0130)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [65][30/272]	 lr: 0.00004	Time 0.428 (0.723)	Data 0.129 (0.368)	Loss 0.0062 (0.0130)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [65][40/272]	 lr: 0.00004	Time 0.446 (0.655)	Data 0.119 (0.311)	Loss 0.0165 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [65][50/272]	 lr: 0.00004	Time 0.470 (0.612)	Data 0.127 (0.276)	Loss 0.0341 (0.0151)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [65][60/272]	 lr: 0.00004	Time 0.562 (0.587)	Data 0.139 (0.253)	Loss 0.0063 (0.0177)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [65][70/272]	 lr: 0.00004	Time 0.427 (0.568)	Data 0.125 (0.234)	Loss 0.0048 (0.0197)	Prec@1 100.00000 (99.86796)	Prec@5 100.00000 (100.00000)
Epoch: [65][80/272]	 lr: 0.00004	Time 0.340 (0.552)	Data 0.121 (0.221)	Loss 0.0468 (0.0202)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [65][90/272]	 lr: 0.00004	Time 0.434 (0.540)	Data 0.126 (0.211)	Loss 0.0326 (0.0192)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [65][100/272]	 lr: 0.00004	Time 0.397 (0.529)	Data 0.146 (0.203)	Loss 0.0081 (0.0204)	Prec@1 100.00000 (99.87624)	Prec@5 100.00000 (100.00000)
Epoch: [65][110/272]	 lr: 0.00004	Time 0.423 (0.521)	Data 0.126 (0.196)	Loss 0.0127 (0.0197)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [65][120/272]	 lr: 0.00004	Time 0.381 (0.513)	Data 0.126 (0.190)	Loss 0.0147 (0.0189)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [65][130/272]	 lr: 0.00004	Time 0.507 (0.509)	Data 0.134 (0.186)	Loss 0.0164 (0.0188)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [65][140/272]	 lr: 0.00004	Time 0.383 (0.504)	Data 0.135 (0.182)	Loss 0.0053 (0.0189)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [65][150/272]	 lr: 0.00004	Time 0.446 (0.501)	Data 0.136 (0.178)	Loss 0.0219 (0.0188)	Prec@1 100.00000 (99.91722)	Prec@5 100.00000 (100.00000)
Epoch: [65][160/272]	 lr: 0.00004	Time 0.418 (0.498)	Data 0.124 (0.175)	Loss 0.0048 (0.0184)	Prec@1 100.00000 (99.92236)	Prec@5 100.00000 (100.00000)
Epoch: [65][170/272]	 lr: 0.00004	Time 0.417 (0.493)	Data 0.124 (0.173)	Loss 0.0089 (0.0181)	Prec@1 100.00000 (99.92690)	Prec@5 100.00000 (100.00000)
Epoch: [65][180/272]	 lr: 0.00004	Time 0.454 (0.489)	Data 0.140 (0.170)	Loss 0.0047 (0.0178)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [65][190/272]	 lr: 0.00004	Time 0.411 (0.486)	Data 0.105 (0.168)	Loss 0.0183 (0.0177)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [65][200/272]	 lr: 0.00004	Time 0.308 (0.483)	Data 0.128 (0.166)	Loss 0.0087 (0.0176)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [65][210/272]	 lr: 0.00004	Time 0.432 (0.481)	Data 0.141 (0.165)	Loss 0.0120 (0.0178)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [65][220/272]	 lr: 0.00004	Time 0.419 (0.479)	Data 0.107 (0.163)	Loss 0.0125 (0.0180)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [65][230/272]	 lr: 0.00004	Time 0.451 (0.477)	Data 0.129 (0.162)	Loss 0.0110 (0.0179)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [65][240/272]	 lr: 0.00004	Time 0.277 (0.474)	Data 0.139 (0.160)	Loss 0.0045 (0.0179)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [65][250/272]	 lr: 0.00004	Time 0.240 (0.465)	Data 0.128 (0.159)	Loss 0.0183 (0.0178)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [65][260/272]	 lr: 0.00004	Time 0.240 (0.456)	Data 0.128 (0.158)	Loss 0.0198 (0.0187)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [65][270/272]	 lr: 0.00004	Time 0.240 (0.448)	Data 0.129 (0.157)	Loss 0.0138 (0.0185)	Prec@1 100.00000 (99.90775)	Prec@5 100.00000 (100.00000)
validation at epoch 65
validation at epoch 65
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [65][1/60]	Time 6.87991 (6.87991)	Data 6.79625 (6.79625)	Loss 0.4340 (0.4340)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [65][2/60]	Time 0.27667 (3.57829)	Data 0.06319 (3.42972)	Loss 0.5345 (0.4842)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [65][3/60]	Time 0.22951 (2.46203)	Data 0.01452 (2.29132)	Loss 1.2857 (0.7514)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [65][4/60]	Time 0.12757 (1.87841)	Data 0.00698 (1.72024)	Loss 0.2959 (0.6375)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [65][5/60]	Time 0.14984 (1.53270)	Data 0.00673 (1.37754)	Loss 0.3235 (0.5747)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [65][6/60]	Time 0.12173 (1.29754)	Data 0.01600 (1.15061)	Loss 0.4388 (0.5521)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [65][7/60]	Time 0.09032 (1.12508)	Data 0.00184 (0.98650)	Loss 1.5593 (0.6959)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [65][8/60]	Time 0.14725 (1.00285)	Data 0.08626 (0.87397)	Loss 1.4572 (0.7911)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (98.43750)
Epoch: [65][9/60]	Time 0.11579 (0.90429)	Data 0.00098 (0.77697)	Loss 0.6930 (0.7802)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.61111)
Epoch: [65][10/60]	Time 0.18979 (0.83284)	Data 0.03670 (0.70295)	Loss 0.7418 (0.7764)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (98.75000)
Epoch: [65][11/60]	Time 0.21254 (0.77645)	Data 0.06247 (0.64472)	Loss 0.6999 (0.7694)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (98.86364)
Epoch: [65][12/60]	Time 0.10204 (0.72025)	Data 0.01617 (0.59234)	Loss 1.5634 (0.8356)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.95834)
Epoch: [65][13/60]	Time 0.16430 (0.67748)	Data 0.05791 (0.55123)	Loss 2.1893 (0.9397)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (99.03847)
Epoch: [65][14/60]	Time 0.15262 (0.63999)	Data 0.00815 (0.51244)	Loss 0.0684 (0.8775)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.10715)
Epoch: [65][15/60]	Time 0.12560 (0.60570)	Data 0.01088 (0.47900)	Loss 1.5014 (0.9191)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (99.16667)
Epoch: [65][16/60]	Time 0.13241 (0.57612)	Data 0.00066 (0.44911)	Loss 1.0616 (0.9280)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.21875)
Epoch: [65][17/60]	Time 0.16592 (0.55199)	Data 0.02671 (0.42426)	Loss 0.3759 (0.8955)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [65][18/60]	Time 0.14146 (0.52918)	Data 0.07406 (0.40480)	Loss 2.4313 (0.9808)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [65][19/60]	Time 0.08261 (0.50568)	Data 0.00258 (0.38363)	Loss 0.1134 (0.9352)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (99.34211)
Epoch: [65][20/60]	Time 0.11297 (0.48604)	Data 0.00297 (0.36460)	Loss 2.2620 (1.0015)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.37500)
Epoch: [65][21/60]	Time 0.30343 (0.47735)	Data 0.08408 (0.35124)	Loss 0.7287 (0.9885)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (99.40476)
Epoch: [65][22/60]	Time 0.10672 (0.46050)	Data 0.01238 (0.33584)	Loss 0.5666 (0.9693)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (99.43182)
Epoch: [65][23/60]	Time 0.14259 (0.44668)	Data 0.00236 (0.32134)	Loss 1.0032 (0.9708)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (99.45652)
Epoch: [65][24/60]	Time 0.10483 (0.43243)	Data 0.00286 (0.30807)	Loss 0.7437 (0.9613)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [65][25/60]	Time 0.11761 (0.41984)	Data 0.01195 (0.29623)	Loss 0.4430 (0.9406)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (99.50000)
Epoch: [65][26/60]	Time 0.18346 (0.41075)	Data 0.00052 (0.28485)	Loss 0.0354 (0.9058)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.51923)
Epoch: [65][27/60]	Time 0.18280 (0.40231)	Data 0.00959 (0.27466)	Loss 0.7601 (0.9004)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (99.53704)
Epoch: [65][28/60]	Time 0.17009 (0.39401)	Data 0.07760 (0.26762)	Loss 0.4453 (0.8841)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (99.55357)
Epoch: [65][29/60]	Time 0.12122 (0.38461)	Data 0.02572 (0.25928)	Loss 0.5177 (0.8715)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (99.56896)
Epoch: [65][30/60]	Time 0.05241 (0.37353)	Data 0.00198 (0.25070)	Loss 1.7140 (0.8996)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (99.58334)
Epoch: [65][31/60]	Time 0.06643 (0.36363)	Data 0.00047 (0.24263)	Loss 2.6853 (0.9572)	Prec@1 25.00000 (72.58064)	Prec@5 87.50000 (99.19354)
Epoch: [65][32/60]	Time 0.05178 (0.35388)	Data 0.00057 (0.23507)	Loss 0.7398 (0.9504)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (99.21875)
Epoch: [65][33/60]	Time 0.04345 (0.34448)	Data 0.00084 (0.22797)	Loss 0.1151 (0.9251)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (99.24242)
Epoch: [65][34/60]	Time 0.02674 (0.33513)	Data 0.00332 (0.22136)	Loss 1.2143 (0.9336)	Prec@1 62.50000 (72.79412)	Prec@5 100.00000 (99.26471)
Epoch: [65][35/60]	Time 0.02316 (0.32622)	Data 0.00050 (0.21505)	Loss 1.6099 (0.9529)	Prec@1 75.00000 (72.85714)	Prec@5 87.50000 (98.92857)
Epoch: [65][36/60]	Time 0.02873 (0.31795)	Data 0.00050 (0.20909)	Loss 1.0924 (0.9568)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (98.95834)
Epoch: [65][37/60]	Time 0.02768 (0.31011)	Data 0.00126 (0.20347)	Loss 1.5554 (0.9730)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (98.98649)
Epoch: [65][38/60]	Time 0.02304 (0.30255)	Data 0.00081 (0.19814)	Loss 2.3259 (1.0086)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.01316)
Epoch: [65][39/60]	Time 0.02316 (0.29539)	Data 0.00088 (0.19308)	Loss 0.1325 (0.9861)	Prec@1 87.50000 (72.11539)	Prec@5 100.00000 (99.03846)
Epoch: [65][40/60]	Time 0.02303 (0.28858)	Data 0.00080 (0.18828)	Loss 0.2855 (0.9686)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.06250)
Epoch: [65][41/60]	Time 0.02429 (0.28213)	Data 0.00084 (0.18370)	Loss 0.5812 (0.9592)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (99.08537)
Epoch: [65][42/60]	Time 0.02265 (0.27596)	Data 0.00048 (0.17934)	Loss 1.1298 (0.9632)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.10715)
Epoch: [65][43/60]	Time 0.02233 (0.27006)	Data 0.00042 (0.17518)	Loss 0.7417 (0.9581)	Prec@1 62.50000 (72.67442)	Prec@5 100.00000 (99.12791)
Epoch: [65][44/60]	Time 0.02392 (0.26446)	Data 0.00043 (0.17121)	Loss 0.8617 (0.9559)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.14773)
Epoch: [65][45/60]	Time 0.02237 (0.25908)	Data 0.00042 (0.16741)	Loss 0.8194 (0.9528)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (99.16667)
Epoch: [65][46/60]	Time 0.02290 (0.25395)	Data 0.00038 (0.16378)	Loss 1.3034 (0.9605)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (99.18478)
Epoch: [65][47/60]	Time 0.02219 (0.24902)	Data 0.00043 (0.16031)	Loss 0.7478 (0.9559)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (98.93616)
Epoch: [65][48/60]	Time 0.02221 (0.24429)	Data 0.00043 (0.15698)	Loss 0.4229 (0.9448)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [65][49/60]	Time 0.02219 (0.23976)	Data 0.00042 (0.15378)	Loss 0.3789 (0.9333)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (98.97959)
Epoch: [65][50/60]	Time 0.02249 (0.23542)	Data 0.00040 (0.15071)	Loss 0.5588 (0.9258)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (99.00000)
Epoch: [65][51/60]	Time 0.02298 (0.23125)	Data 0.00049 (0.14777)	Loss 0.2786 (0.9131)	Prec@1 75.00000 (73.28432)	Prec@5 100.00000 (99.01961)
Epoch: [65][52/60]	Time 0.02255 (0.22724)	Data 0.00038 (0.14493)	Loss 0.6648 (0.9083)	Prec@1 75.00000 (73.31731)	Prec@5 100.00000 (99.03847)
Epoch: [65][53/60]	Time 0.02253 (0.22337)	Data 0.00045 (0.14221)	Loss 0.4461 (0.8996)	Prec@1 75.00000 (73.34906)	Prec@5 100.00000 (99.05660)
Epoch: [65][54/60]	Time 0.02359 (0.21967)	Data 0.00041 (0.13958)	Loss 0.8374 (0.8985)	Prec@1 75.00000 (73.37963)	Prec@5 100.00000 (99.07407)
Epoch: [65][55/60]	Time 0.02315 (0.21610)	Data 0.00053 (0.13705)	Loss 0.8481 (0.8975)	Prec@1 75.00000 (73.40909)	Prec@5 87.50000 (98.86363)
Epoch: [65][56/60]	Time 0.02242 (0.21264)	Data 0.00068 (0.13462)	Loss 0.7380 (0.8947)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (98.88393)
Epoch: [65][57/60]	Time 0.02266 (0.20931)	Data 0.00042 (0.13226)	Loss 1.4516 (0.9045)	Prec@1 62.50000 (73.46491)	Prec@5 100.00000 (98.90351)
Epoch: [65][58/60]	Time 0.02251 (0.20609)	Data 0.00045 (0.12999)	Loss 0.7528 (0.9018)	Prec@1 87.50000 (73.70689)	Prec@5 100.00000 (98.92242)
Epoch: [65][59/60]	Time 0.02229 (0.20297)	Data 0.00043 (0.12780)	Loss 0.7030 (0.8985)	Prec@1 87.50000 (73.94068)	Prec@5 100.00000 (98.94068)
Epoch: [65][60/60]	Time 0.02329 (0.19998)	Data 0.00052 (0.12567)	Loss 0.3956 (0.8901)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (98.95834)
train at epoch 66
train at epoch 66
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [66][0/272]	 lr: 0.00004	Time 9.859 (9.859)	Data 9.137 (9.137)	Loss 0.0261 (0.0261)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][10/272]	 lr: 0.00004	Time 0.421 (1.315)	Data 0.127 (0.947)	Loss 0.0078 (0.0120)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][20/272]	 lr: 0.00004	Time 0.386 (0.903)	Data 0.129 (0.558)	Loss 0.0138 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][30/272]	 lr: 0.00004	Time 0.482 (0.753)	Data 0.134 (0.421)	Loss 0.0197 (0.0139)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][40/272]	 lr: 0.00004	Time 0.382 (0.677)	Data 0.138 (0.350)	Loss 0.0248 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][50/272]	 lr: 0.00004	Time 0.391 (0.626)	Data 0.129 (0.306)	Loss 0.0058 (0.0139)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][60/272]	 lr: 0.00004	Time 0.401 (0.596)	Data 0.107 (0.277)	Loss 0.0052 (0.0143)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [66][70/272]	 lr: 0.00004	Time 0.398 (0.574)	Data 0.128 (0.256)	Loss 0.0268 (0.0146)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][80/272]	 lr: 0.00004	Time 0.429 (0.558)	Data 0.127 (0.240)	Loss 0.0133 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][90/272]	 lr: 0.00004	Time 0.349 (0.545)	Data 0.125 (0.228)	Loss 0.0186 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][100/272]	 lr: 0.00004	Time 0.434 (0.535)	Data 0.127 (0.218)	Loss 0.0089 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][110/272]	 lr: 0.00004	Time 0.450 (0.527)	Data 0.116 (0.209)	Loss 0.0291 (0.0164)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][120/272]	 lr: 0.00004	Time 0.470 (0.521)	Data 0.138 (0.203)	Loss 0.0193 (0.0161)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [66][130/272]	 lr: 0.00004	Time 0.354 (0.514)	Data 0.126 (0.197)	Loss 0.0107 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][140/272]	 lr: 0.00004	Time 0.450 (0.510)	Data 0.135 (0.192)	Loss 0.0232 (0.0162)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [66][150/272]	 lr: 0.00004	Time 0.437 (0.505)	Data 0.161 (0.188)	Loss 0.0127 (0.0159)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [66][160/272]	 lr: 0.00004	Time 0.361 (0.502)	Data 0.125 (0.184)	Loss 0.0245 (0.0165)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [66][170/272]	 lr: 0.00004	Time 0.452 (0.499)	Data 0.120 (0.181)	Loss 0.0061 (0.0163)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [66][180/272]	 lr: 0.00004	Time 0.488 (0.497)	Data 0.127 (0.177)	Loss 0.0163 (0.0163)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [66][190/272]	 lr: 0.00004	Time 0.400 (0.493)	Data 0.126 (0.175)	Loss 0.0144 (0.0162)	Prec@1 100.00000 (99.98364)	Prec@5 100.00000 (100.00000)
Epoch: [66][200/272]	 lr: 0.00004	Time 0.443 (0.490)	Data 0.129 (0.173)	Loss 0.0178 (0.0161)	Prec@1 100.00000 (99.98445)	Prec@5 100.00000 (100.00000)
Epoch: [66][210/272]	 lr: 0.00004	Time 0.460 (0.487)	Data 0.143 (0.171)	Loss 0.0239 (0.0163)	Prec@1 100.00000 (99.97038)	Prec@5 100.00000 (100.00000)
Epoch: [66][220/272]	 lr: 0.00004	Time 0.467 (0.485)	Data 0.131 (0.169)	Loss 0.0181 (0.0161)	Prec@1 100.00000 (99.97173)	Prec@5 100.00000 (100.00001)
Epoch: [66][230/272]	 lr: 0.00004	Time 0.461 (0.483)	Data 0.142 (0.167)	Loss 0.0719 (0.0171)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [66][240/272]	 lr: 0.00004	Time 0.284 (0.482)	Data 0.127 (0.166)	Loss 0.0082 (0.0169)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [66][250/272]	 lr: 0.00004	Time 0.238 (0.472)	Data 0.128 (0.164)	Loss 0.0087 (0.0167)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [66][260/272]	 lr: 0.00004	Time 0.238 (0.463)	Data 0.127 (0.163)	Loss 0.0140 (0.0167)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [66][270/272]	 lr: 0.00004	Time 0.240 (0.455)	Data 0.129 (0.161)	Loss 0.0103 (0.0167)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 66
validation at epoch 66
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [66][1/60]	Time 7.08407 (7.08407)	Data 7.01361 (7.01361)	Loss 0.4252 (0.4252)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [66][2/60]	Time 0.09362 (3.58885)	Data 0.00072 (3.50716)	Loss 0.5026 (0.4639)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [66][3/60]	Time 0.10380 (2.42716)	Data 0.02245 (2.34559)	Loss 1.3086 (0.7455)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [66][4/60]	Time 0.13072 (1.85305)	Data 0.04335 (1.77003)	Loss 0.2627 (0.6248)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [66][5/60]	Time 0.20557 (1.52356)	Data 0.02316 (1.42066)	Loss 0.4326 (0.5863)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [66][6/60]	Time 0.17501 (1.29880)	Data 0.11417 (1.20291)	Loss 0.5601 (0.5820)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [66][7/60]	Time 0.07684 (1.12423)	Data 0.00089 (1.03119)	Loss 1.5669 (0.7227)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [66][8/60]	Time 0.11421 (0.99798)	Data 0.00576 (0.90301)	Loss 1.3559 (0.8018)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][9/60]	Time 0.21841 (0.91136)	Data 0.06657 (0.81008)	Loss 0.8082 (0.8025)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][10/60]	Time 0.05519 (0.82574)	Data 0.00333 (0.72940)	Loss 0.7164 (0.7939)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][11/60]	Time 0.09509 (0.75932)	Data 0.00782 (0.66380)	Loss 0.6427 (0.7802)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [66][12/60]	Time 0.09525 (0.70398)	Data 0.00317 (0.60875)	Loss 1.4446 (0.8355)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][13/60]	Time 0.05598 (0.65414)	Data 0.00655 (0.56243)	Loss 2.0336 (0.9277)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [66][14/60]	Time 0.24129 (0.62465)	Data 0.00405 (0.52254)	Loss 0.1385 (0.8713)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [66][15/60]	Time 0.13622 (0.59208)	Data 0.00090 (0.48777)	Loss 1.3397 (0.9026)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [66][16/60]	Time 0.22470 (0.56912)	Data 0.05469 (0.46070)	Loss 1.1170 (0.9160)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [66][17/60]	Time 0.18893 (0.54676)	Data 0.02608 (0.43513)	Loss 0.3673 (0.8837)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [66][18/60]	Time 0.21553 (0.52836)	Data 0.10529 (0.41681)	Loss 2.5343 (0.9754)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [66][19/60]	Time 0.10800 (0.50623)	Data 0.00423 (0.39509)	Loss 0.2126 (0.9352)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [66][20/60]	Time 0.11777 (0.48681)	Data 0.00116 (0.37540)	Loss 2.4800 (1.0125)	Prec@1 62.50000 (74.37500)	Prec@5 87.50000 (99.37500)
Epoch: [66][21/60]	Time 0.10925 (0.46883)	Data 0.00119 (0.35758)	Loss 0.6133 (0.9935)	Prec@1 62.50000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [66][22/60]	Time 0.11823 (0.45289)	Data 0.00462 (0.34153)	Loss 0.6145 (0.9762)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [66][23/60]	Time 0.20528 (0.44213)	Data 0.00388 (0.32685)	Loss 1.1925 (0.9856)	Prec@1 62.50000 (73.36957)	Prec@5 100.00000 (99.45652)
Epoch: [66][24/60]	Time 0.08192 (0.42712)	Data 0.00763 (0.31355)	Loss 0.6016 (0.9696)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [66][25/60]	Time 0.16302 (0.41656)	Data 0.06680 (0.30368)	Loss 0.5144 (0.9514)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.50000)
Epoch: [66][26/60]	Time 0.10612 (0.40462)	Data 0.01321 (0.29251)	Loss 0.0525 (0.9169)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (99.51923)
Epoch: [66][27/60]	Time 0.05797 (0.39178)	Data 0.00072 (0.28170)	Loss 0.9389 (0.9177)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (99.53704)
Epoch: [66][28/60]	Time 0.07476 (0.38046)	Data 0.00092 (0.27168)	Loss 0.4416 (0.9007)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (99.55357)
Epoch: [66][29/60]	Time 0.05757 (0.36932)	Data 0.00042 (0.26232)	Loss 0.7913 (0.8969)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (99.56896)
Epoch: [66][30/60]	Time 0.06575 (0.35920)	Data 0.00044 (0.25359)	Loss 1.8896 (0.9300)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (99.58334)
Epoch: [66][31/60]	Time 0.08666 (0.35041)	Data 0.00042 (0.24543)	Loss 2.6091 (0.9842)	Prec@1 37.50000 (72.98387)	Prec@5 87.50000 (99.19354)
Epoch: [66][32/60]	Time 0.08592 (0.34215)	Data 0.00063 (0.23778)	Loss 0.8752 (0.9807)	Prec@1 75.00000 (73.04688)	Prec@5 100.00000 (99.21875)
Epoch: [66][33/60]	Time 0.07313 (0.33399)	Data 0.00045 (0.23058)	Loss 0.1830 (0.9566)	Prec@1 87.50000 (73.48485)	Prec@5 100.00000 (99.24242)
Epoch: [66][34/60]	Time 0.05410 (0.32576)	Data 0.01335 (0.22420)	Loss 1.2135 (0.9641)	Prec@1 62.50000 (73.16177)	Prec@5 100.00000 (99.26471)
Epoch: [66][35/60]	Time 0.04071 (0.31762)	Data 0.00046 (0.21780)	Loss 1.4087 (0.9768)	Prec@1 75.00000 (73.21429)	Prec@5 87.50000 (98.92857)
Epoch: [66][36/60]	Time 0.02915 (0.30960)	Data 0.00048 (0.21177)	Loss 1.3101 (0.9861)	Prec@1 62.50000 (72.91666)	Prec@5 100.00000 (98.95834)
Epoch: [66][37/60]	Time 0.02945 (0.30203)	Data 0.00064 (0.20606)	Loss 1.4892 (0.9997)	Prec@1 62.50000 (72.63514)	Prec@5 100.00000 (98.98649)
Epoch: [66][38/60]	Time 0.02756 (0.29481)	Data 0.00049 (0.20065)	Loss 2.2730 (1.0332)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (99.01316)
Epoch: [66][39/60]	Time 0.02680 (0.28794)	Data 0.00068 (0.19552)	Loss 0.2362 (1.0128)	Prec@1 87.50000 (72.43590)	Prec@5 100.00000 (99.03846)
Epoch: [66][40/60]	Time 0.02738 (0.28142)	Data 0.00088 (0.19066)	Loss 0.4029 (0.9975)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (99.06250)
Epoch: [66][41/60]	Time 0.02834 (0.27525)	Data 0.00075 (0.18602)	Loss 0.6692 (0.9895)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (99.08537)
Epoch: [66][42/60]	Time 0.02703 (0.26934)	Data 0.00049 (0.18161)	Loss 1.1278 (0.9928)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (99.10715)
Epoch: [66][43/60]	Time 0.02734 (0.26371)	Data 0.00089 (0.17740)	Loss 0.7716 (0.9877)	Prec@1 62.50000 (72.67442)	Prec@5 100.00000 (99.12791)
Epoch: [66][44/60]	Time 0.02902 (0.25838)	Data 0.00049 (0.17338)	Loss 0.9362 (0.9865)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.14773)
Epoch: [66][45/60]	Time 0.02810 (0.25326)	Data 0.00078 (0.16955)	Loss 0.7671 (0.9816)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (99.16667)
Epoch: [66][46/60]	Time 0.02733 (0.24835)	Data 0.00053 (0.16587)	Loss 1.0766 (0.9837)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (99.18478)
Epoch: [66][47/60]	Time 0.02687 (0.24364)	Data 0.00044 (0.16235)	Loss 0.9138 (0.9822)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (98.93616)
Epoch: [66][48/60]	Time 0.02232 (0.23903)	Data 0.00053 (0.15898)	Loss 0.4996 (0.9721)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [66][49/60]	Time 0.02237 (0.23461)	Data 0.00050 (0.15575)	Loss 0.3133 (0.9587)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (98.97959)
Epoch: [66][50/60]	Time 0.02298 (0.23037)	Data 0.00069 (0.15265)	Loss 0.7177 (0.9539)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (99.00000)
Epoch: [66][51/60]	Time 0.02203 (0.22629)	Data 0.00050 (0.14966)	Loss 0.2861 (0.9408)	Prec@1 75.00000 (73.28432)	Prec@5 100.00000 (99.01961)
Epoch: [66][52/60]	Time 0.02204 (0.22236)	Data 0.00043 (0.14679)	Loss 0.9729 (0.9414)	Prec@1 37.50000 (72.59615)	Prec@5 87.50000 (98.79808)
Epoch: [66][53/60]	Time 0.02188 (0.21858)	Data 0.00047 (0.14403)	Loss 0.6509 (0.9359)	Prec@1 75.00000 (72.64151)	Prec@5 100.00000 (98.82076)
Epoch: [66][54/60]	Time 0.02274 (0.21495)	Data 0.00045 (0.14137)	Loss 0.8847 (0.9350)	Prec@1 75.00000 (72.68519)	Prec@5 100.00000 (98.84259)
Epoch: [66][55/60]	Time 0.02441 (0.21149)	Data 0.00047 (0.13881)	Loss 1.1267 (0.9384)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (98.63636)
Epoch: [66][56/60]	Time 0.02954 (0.20824)	Data 0.00077 (0.13635)	Loss 0.7224 (0.9346)	Prec@1 75.00000 (72.54465)	Prec@5 100.00000 (98.66072)
Epoch: [66][57/60]	Time 0.03478 (0.20519)	Data 0.00042 (0.13396)	Loss 1.4391 (0.9434)	Prec@1 62.50000 (72.36842)	Prec@5 87.50000 (98.46491)
Epoch: [66][58/60]	Time 0.02951 (0.20217)	Data 0.00066 (0.13166)	Loss 0.6907 (0.9391)	Prec@1 75.00000 (72.41380)	Prec@5 100.00000 (98.49138)
Epoch: [66][59/60]	Time 0.02979 (0.19924)	Data 0.00049 (0.12944)	Loss 0.8611 (0.9378)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (98.51695)
Epoch: [66][60/60]	Time 0.02895 (0.19641)	Data 0.00058 (0.12729)	Loss 0.5137 (0.9307)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (98.54167)
train at epoch 67
train at epoch 67
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [67][0/272]	 lr: 0.00004	Time 9.326 (9.326)	Data 8.294 (8.294)	Loss 0.0134 (0.0134)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][10/272]	 lr: 0.00004	Time 0.393 (1.277)	Data 0.128 (0.864)	Loss 0.0094 (0.0201)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][20/272]	 lr: 0.00004	Time 0.325 (0.859)	Data 0.129 (0.515)	Loss 0.0166 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][30/272]	 lr: 0.00004	Time 0.458 (0.727)	Data 0.128 (0.390)	Loss 0.0219 (0.0144)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][40/272]	 lr: 0.00004	Time 0.482 (0.657)	Data 0.127 (0.327)	Loss 0.0133 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][50/272]	 lr: 0.00004	Time 0.442 (0.616)	Data 0.127 (0.288)	Loss 0.0107 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][60/272]	 lr: 0.00004	Time 0.378 (0.592)	Data 0.094 (0.261)	Loss 0.0140 (0.0170)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [67][70/272]	 lr: 0.00004	Time 0.473 (0.569)	Data 0.126 (0.243)	Loss 0.0045 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][80/272]	 lr: 0.00004	Time 0.417 (0.555)	Data 0.112 (0.228)	Loss 0.0197 (0.0158)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [67][90/272]	 lr: 0.00004	Time 0.460 (0.542)	Data 0.141 (0.217)	Loss 0.0063 (0.0154)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [67][100/272]	 lr: 0.00004	Time 0.491 (0.532)	Data 0.142 (0.209)	Loss 0.0064 (0.0153)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [67][110/272]	 lr: 0.00004	Time 0.465 (0.524)	Data 0.143 (0.202)	Loss 0.0150 (0.0156)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [67][120/272]	 lr: 0.00004	Time 0.426 (0.519)	Data 0.109 (0.195)	Loss 0.0085 (0.0150)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [67][130/272]	 lr: 0.00004	Time 0.381 (0.514)	Data 0.132 (0.190)	Loss 0.0054 (0.0148)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [67][140/272]	 lr: 0.00004	Time 0.410 (0.510)	Data 0.130 (0.186)	Loss 0.0056 (0.0150)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [67][150/272]	 lr: 0.00004	Time 0.493 (0.505)	Data 0.142 (0.182)	Loss 0.0103 (0.0150)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [67][160/272]	 lr: 0.00004	Time 0.421 (0.501)	Data 0.142 (0.179)	Loss 0.0183 (0.0154)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [67][170/272]	 lr: 0.00004	Time 0.522 (0.497)	Data 0.119 (0.176)	Loss 0.0194 (0.0155)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [67][180/272]	 lr: 0.00004	Time 0.483 (0.494)	Data 0.128 (0.173)	Loss 0.0320 (0.0157)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [67][190/272]	 lr: 0.00004	Time 0.433 (0.491)	Data 0.140 (0.171)	Loss 0.0197 (0.0156)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [67][200/272]	 lr: 0.00004	Time 0.430 (0.488)	Data 0.129 (0.169)	Loss 0.0206 (0.0155)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [67][210/272]	 lr: 0.00004	Time 0.453 (0.485)	Data 0.128 (0.167)	Loss 0.0227 (0.0153)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [67][220/272]	 lr: 0.00004	Time 0.418 (0.483)	Data 0.117 (0.165)	Loss 0.0168 (0.0151)	Prec@1 100.00000 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [67][230/272]	 lr: 0.00004	Time 0.412 (0.481)	Data 0.127 (0.164)	Loss 0.0356 (0.0152)	Prec@1 100.00000 (99.94588)	Prec@5 100.00000 (100.00000)
Epoch: [67][240/272]	 lr: 0.00004	Time 0.246 (0.478)	Data 0.129 (0.162)	Loss 0.0163 (0.0154)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [67][250/272]	 lr: 0.00004	Time 0.238 (0.468)	Data 0.129 (0.161)	Loss 0.0218 (0.0153)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [67][260/272]	 lr: 0.00004	Time 0.242 (0.460)	Data 0.127 (0.160)	Loss 0.0320 (0.0152)	Prec@1 100.00000 (99.94013)	Prec@5 100.00000 (100.00000)
Epoch: [67][270/272]	 lr: 0.00004	Time 0.239 (0.451)	Data 0.129 (0.159)	Loss 0.0208 (0.0154)	Prec@1 100.00000 (99.94234)	Prec@5 100.00000 (100.00000)
validation at epoch 67
validation at epoch 67
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [67][1/60]	Time 6.65459 (6.65459)	Data 6.56563 (6.56563)	Loss 0.4633 (0.4633)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [67][2/60]	Time 0.20470 (3.42964)	Data 0.13770 (3.35166)	Loss 0.5710 (0.5171)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [67][3/60]	Time 0.11332 (2.32420)	Data 0.00355 (2.23563)	Loss 1.3388 (0.7910)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [67][4/60]	Time 0.26097 (1.80840)	Data 0.08058 (1.69686)	Loss 0.2960 (0.6673)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [67][5/60]	Time 0.25369 (1.49745)	Data 0.02171 (1.36183)	Loss 0.3738 (0.6086)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [67][6/60]	Time 0.25229 (1.28993)	Data 0.03416 (1.14055)	Loss 0.5861 (0.6048)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [67][7/60]	Time 0.50829 (1.17826)	Data 0.46264 (1.04371)	Loss 1.5669 (0.7423)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [67][8/60]	Time 0.11214 (1.04500)	Data 0.00819 (0.91427)	Loss 1.3879 (0.8230)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][9/60]	Time 0.07199 (0.93689)	Data 0.00061 (0.81275)	Loss 0.7560 (0.8155)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][10/60]	Time 0.06894 (0.85009)	Data 0.00129 (0.73161)	Loss 0.6814 (0.8021)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][11/60]	Time 0.09162 (0.78114)	Data 0.00263 (0.66533)	Loss 0.6196 (0.7855)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [67][12/60]	Time 0.09978 (0.72436)	Data 0.01259 (0.61094)	Loss 1.5362 (0.8481)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][13/60]	Time 0.22370 (0.68585)	Data 0.05677 (0.56831)	Loss 2.2464 (0.9556)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [67][14/60]	Time 0.20125 (0.65123)	Data 0.02671 (0.52963)	Loss 0.1057 (0.8949)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [67][15/60]	Time 0.23749 (0.62365)	Data 0.00307 (0.49452)	Loss 1.3938 (0.9282)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [67][16/60]	Time 0.27362 (0.60177)	Data 0.06272 (0.46753)	Loss 1.0662 (0.9368)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [67][17/60]	Time 0.13835 (0.57451)	Data 0.00256 (0.44018)	Loss 0.3462 (0.9021)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [67][18/60]	Time 0.15723 (0.55133)	Data 0.01309 (0.41645)	Loss 2.4575 (0.9885)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [67][19/60]	Time 0.10971 (0.52809)	Data 0.00090 (0.39458)	Loss 0.1925 (0.9466)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [67][20/60]	Time 0.19294 (0.51133)	Data 0.03398 (0.37655)	Loss 2.3165 (1.0151)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (100.00000)
Epoch: [67][21/60]	Time 0.14407 (0.49384)	Data 0.03165 (0.36013)	Loss 0.6161 (0.9961)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [67][22/60]	Time 0.13290 (0.47744)	Data 0.00246 (0.34387)	Loss 0.5492 (0.9758)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [67][23/60]	Time 0.10568 (0.46127)	Data 0.00461 (0.32912)	Loss 1.0714 (0.9799)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (100.00000)
Epoch: [67][24/60]	Time 0.14497 (0.44809)	Data 0.03163 (0.31673)	Loss 0.6346 (0.9655)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [67][25/60]	Time 0.10036 (0.43418)	Data 0.04147 (0.30572)	Loss 0.4896 (0.9465)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (100.00000)
Epoch: [67][26/60]	Time 0.08170 (0.42063)	Data 0.00400 (0.29411)	Loss 0.0422 (0.9117)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (100.00000)
Epoch: [67][27/60]	Time 0.08948 (0.40836)	Data 0.00635 (0.28345)	Loss 0.7585 (0.9060)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (100.00000)
Epoch: [67][28/60]	Time 0.08044 (0.39665)	Data 0.00206 (0.27340)	Loss 0.4451 (0.8896)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (100.00001)
Epoch: [67][29/60]	Time 0.09017 (0.38608)	Data 0.00038 (0.26399)	Loss 0.7123 (0.8835)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (100.00000)
Epoch: [67][30/60]	Time 0.08292 (0.37598)	Data 0.00047 (0.25521)	Loss 1.8407 (0.9154)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [67][31/60]	Time 0.08871 (0.36671)	Data 0.00042 (0.24699)	Loss 2.6531 (0.9714)	Prec@1 37.50000 (72.98387)	Prec@5 87.50000 (99.59677)
Epoch: [67][32/60]	Time 0.07641 (0.35764)	Data 0.00042 (0.23928)	Loss 0.7852 (0.9656)	Prec@1 75.00000 (73.04688)	Prec@5 100.00000 (99.60938)
Epoch: [67][33/60]	Time 0.10101 (0.34986)	Data 0.01353 (0.23244)	Loss 0.1501 (0.9409)	Prec@1 87.50000 (73.48485)	Prec@5 100.00000 (99.62122)
Epoch: [67][34/60]	Time 0.08068 (0.34194)	Data 0.01348 (0.22600)	Loss 1.2055 (0.9487)	Prec@1 62.50000 (73.16177)	Prec@5 100.00000 (99.63235)
Epoch: [67][35/60]	Time 0.04915 (0.33358)	Data 0.00037 (0.21955)	Loss 1.4971 (0.9644)	Prec@1 75.00000 (73.21429)	Prec@5 87.50000 (99.28571)
Epoch: [67][36/60]	Time 0.04501 (0.32556)	Data 0.00253 (0.21353)	Loss 1.2180 (0.9714)	Prec@1 62.50000 (72.91666)	Prec@5 100.00000 (99.30556)
Epoch: [67][37/60]	Time 0.04238 (0.31791)	Data 0.00351 (0.20785)	Loss 1.5091 (0.9859)	Prec@1 62.50000 (72.63514)	Prec@5 100.00000 (99.32433)
Epoch: [67][38/60]	Time 0.03281 (0.31041)	Data 0.00090 (0.20240)	Loss 2.3036 (1.0206)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (99.34211)
Epoch: [67][39/60]	Time 0.03600 (0.30337)	Data 0.00155 (0.19725)	Loss 0.1831 (0.9991)	Prec@1 87.50000 (72.43590)	Prec@5 100.00000 (99.35898)
Epoch: [67][40/60]	Time 0.02522 (0.29642)	Data 0.00041 (0.19233)	Loss 0.3513 (0.9829)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (99.37500)
Epoch: [67][41/60]	Time 0.03800 (0.29011)	Data 0.00424 (0.18774)	Loss 0.6101 (0.9738)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (99.39024)
Epoch: [67][42/60]	Time 0.03322 (0.28400)	Data 0.00055 (0.18329)	Loss 1.1328 (0.9776)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (99.40476)
Epoch: [67][43/60]	Time 0.02727 (0.27803)	Data 0.00062 (0.17904)	Loss 0.7408 (0.9721)	Prec@1 62.50000 (72.67442)	Prec@5 100.00000 (99.41860)
Epoch: [67][44/60]	Time 0.02232 (0.27222)	Data 0.00079 (0.17499)	Loss 0.8544 (0.9695)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.43182)
Epoch: [67][45/60]	Time 0.02681 (0.26676)	Data 0.00115 (0.17113)	Loss 0.7956 (0.9656)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (99.44445)
Epoch: [67][46/60]	Time 0.02717 (0.26155)	Data 0.00063 (0.16742)	Loss 1.0724 (0.9679)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (99.45652)
Epoch: [67][47/60]	Time 0.02289 (0.25648)	Data 0.00084 (0.16387)	Loss 0.9495 (0.9675)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (99.20213)
Epoch: [67][48/60]	Time 0.02253 (0.25160)	Data 0.00044 (0.16047)	Loss 0.4274 (0.9563)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.21875)
Epoch: [67][49/60]	Time 0.02243 (0.24693)	Data 0.00042 (0.15720)	Loss 0.2838 (0.9425)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.23470)
Epoch: [67][50/60]	Time 0.02314 (0.24245)	Data 0.00044 (0.15407)	Loss 0.6336 (0.9364)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (99.25000)
Epoch: [67][51/60]	Time 0.02239 (0.23813)	Data 0.00045 (0.15106)	Loss 0.3390 (0.9246)	Prec@1 75.00000 (73.28432)	Prec@5 100.00000 (99.26471)
Epoch: [67][52/60]	Time 0.02256 (0.23399)	Data 0.00048 (0.14816)	Loss 0.8978 (0.9241)	Prec@1 37.50000 (72.59615)	Prec@5 87.50000 (99.03847)
Epoch: [67][53/60]	Time 0.02258 (0.23000)	Data 0.00041 (0.14537)	Loss 0.5707 (0.9175)	Prec@1 75.00000 (72.64151)	Prec@5 100.00000 (99.05660)
Epoch: [67][54/60]	Time 0.02515 (0.22621)	Data 0.00043 (0.14269)	Loss 0.8961 (0.9171)	Prec@1 75.00000 (72.68519)	Prec@5 100.00000 (99.07407)
Epoch: [67][55/60]	Time 0.02325 (0.22252)	Data 0.00062 (0.14011)	Loss 1.1580 (0.9214)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (98.86363)
Epoch: [67][56/60]	Time 0.02267 (0.21895)	Data 0.00049 (0.13761)	Loss 0.6843 (0.9172)	Prec@1 75.00000 (72.54465)	Prec@5 100.00000 (98.88393)
Epoch: [67][57/60]	Time 0.02277 (0.21551)	Data 0.00055 (0.13521)	Loss 1.4196 (0.9260)	Prec@1 62.50000 (72.36842)	Prec@5 87.50000 (98.68421)
Epoch: [67][58/60]	Time 0.02267 (0.21218)	Data 0.00044 (0.13288)	Loss 0.6697 (0.9216)	Prec@1 75.00000 (72.41380)	Prec@5 100.00000 (98.70689)
Epoch: [67][59/60]	Time 0.02326 (0.20898)	Data 0.00059 (0.13064)	Loss 0.8124 (0.9198)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (98.72881)
Epoch: [67][60/60]	Time 0.02303 (0.20588)	Data 0.00042 (0.12847)	Loss 0.5068 (0.9129)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (98.75001)
train at epoch 68
train at epoch 68
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [68][0/272]	 lr: 0.00004	Time 8.052 (8.052)	Data 6.500 (6.500)	Loss 0.0116 (0.0116)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][10/272]	 lr: 0.00004	Time 0.371 (1.305)	Data 0.127 (0.811)	Loss 0.0064 (0.0198)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][20/272]	 lr: 0.00004	Time 0.438 (0.889)	Data 0.118 (0.486)	Loss 0.0158 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][30/272]	 lr: 0.00004	Time 0.440 (0.742)	Data 0.129 (0.371)	Loss 0.0099 (0.0182)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][40/272]	 lr: 0.00004	Time 0.449 (0.670)	Data 0.128 (0.312)	Loss 0.0081 (0.0173)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][50/272]	 lr: 0.00004	Time 0.512 (0.629)	Data 0.120 (0.276)	Loss 0.0086 (0.0168)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][60/272]	 lr: 0.00004	Time 0.393 (0.598)	Data 0.141 (0.252)	Loss 0.0060 (0.0165)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [68][70/272]	 lr: 0.00004	Time 0.455 (0.574)	Data 0.132 (0.235)	Loss 0.0063 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][80/272]	 lr: 0.00004	Time 0.505 (0.557)	Data 0.124 (0.222)	Loss 0.0358 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][90/272]	 lr: 0.00004	Time 0.301 (0.545)	Data 0.103 (0.211)	Loss 0.0044 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][100/272]	 lr: 0.00004	Time 0.515 (0.535)	Data 0.128 (0.203)	Loss 0.0091 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][110/272]	 lr: 0.00004	Time 0.497 (0.527)	Data 0.152 (0.197)	Loss 0.0242 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][120/272]	 lr: 0.00004	Time 0.446 (0.520)	Data 0.127 (0.191)	Loss 0.0058 (0.0150)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [68][130/272]	 lr: 0.00004	Time 0.474 (0.513)	Data 0.129 (0.187)	Loss 0.0401 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][140/272]	 lr: 0.00004	Time 0.426 (0.508)	Data 0.141 (0.183)	Loss 0.0112 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][150/272]	 lr: 0.00004	Time 0.408 (0.504)	Data 0.130 (0.179)	Loss 0.0743 (0.0154)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][160/272]	 lr: 0.00004	Time 0.506 (0.501)	Data 0.135 (0.176)	Loss 0.0126 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][170/272]	 lr: 0.00004	Time 0.487 (0.497)	Data 0.144 (0.173)	Loss 0.0064 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][180/272]	 lr: 0.00004	Time 0.511 (0.494)	Data 0.127 (0.171)	Loss 0.0106 (0.0151)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [68][190/272]	 lr: 0.00004	Time 0.380 (0.491)	Data 0.125 (0.169)	Loss 0.0160 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][200/272]	 lr: 0.00004	Time 0.457 (0.489)	Data 0.147 (0.167)	Loss 0.0292 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][210/272]	 lr: 0.00004	Time 0.545 (0.488)	Data 0.127 (0.166)	Loss 0.0237 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][220/272]	 lr: 0.00004	Time 0.497 (0.487)	Data 0.137 (0.164)	Loss 0.0212 (0.0160)	Prec@1 100.00000 (99.97173)	Prec@5 100.00000 (100.00001)
Epoch: [68][230/272]	 lr: 0.00004	Time 0.476 (0.485)	Data 0.136 (0.162)	Loss 0.0095 (0.0160)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [68][240/272]	 lr: 0.00004	Time 0.247 (0.482)	Data 0.128 (0.161)	Loss 0.0069 (0.0158)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [68][250/272]	 lr: 0.00004	Time 0.238 (0.473)	Data 0.127 (0.160)	Loss 0.0680 (0.0159)	Prec@1 96.87500 (99.95020)	Prec@5 100.00000 (100.00000)
Epoch: [68][260/272]	 lr: 0.00004	Time 0.240 (0.464)	Data 0.129 (0.158)	Loss 0.0107 (0.0161)	Prec@1 100.00000 (99.95210)	Prec@5 100.00000 (100.00000)
Epoch: [68][270/272]	 lr: 0.00004	Time 0.239 (0.456)	Data 0.128 (0.157)	Loss 0.0088 (0.0162)	Prec@1 100.00000 (99.95387)	Prec@5 100.00000 (100.00000)
validation at epoch 68
validation at epoch 68
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [68][1/60]	Time 6.80117 (6.80117)	Data 6.67679 (6.67679)	Loss 0.4192 (0.4192)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][2/60]	Time 0.29627 (3.54872)	Data 0.08361 (3.38020)	Loss 0.4672 (0.4432)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [68][3/60]	Time 0.12270 (2.40671)	Data 0.02202 (2.26080)	Loss 1.2364 (0.7076)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][4/60]	Time 0.18965 (1.85244)	Data 0.00648 (1.69722)	Loss 0.1899 (0.5782)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [68][5/60]	Time 0.20101 (1.52216)	Data 0.03261 (1.36430)	Loss 0.3097 (0.5245)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][6/60]	Time 0.75472 (1.39425)	Data 0.67372 (1.24920)	Loss 0.4513 (0.5123)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [68][7/60]	Time 0.04465 (1.20145)	Data 0.00751 (1.07182)	Loss 1.0454 (0.5884)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [68][8/60]	Time 0.06373 (1.05924)	Data 0.00085 (0.93795)	Loss 0.9580 (0.6346)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][9/60]	Time 0.12821 (0.95579)	Data 0.06723 (0.84120)	Loss 0.6911 (0.6409)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [68][10/60]	Time 0.23710 (0.88392)	Data 0.07268 (0.76435)	Loss 0.4792 (0.6247)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (100.00000)
Epoch: [68][11/60]	Time 0.17255 (0.81925)	Data 0.04825 (0.69925)	Loss 0.5200 (0.6152)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][12/60]	Time 0.11993 (0.76097)	Data 0.01356 (0.64211)	Loss 1.1324 (0.6583)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [68][13/60]	Time 0.11276 (0.71111)	Data 0.01625 (0.59396)	Loss 1.9168 (0.7551)	Prec@1 50.00000 (72.11539)	Prec@5 100.00000 (100.00000)
Epoch: [68][14/60]	Time 0.25264 (0.67836)	Data 0.07635 (0.55699)	Loss 0.0971 (0.7081)	Prec@1 100.00000 (74.10715)	Prec@5 100.00000 (100.00001)
Epoch: [68][15/60]	Time 0.15281 (0.64333)	Data 0.04595 (0.52292)	Loss 0.9011 (0.7210)	Prec@1 75.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [68][16/60]	Time 0.02605 (0.60475)	Data 0.00065 (0.49028)	Loss 1.0380 (0.7408)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [68][17/60]	Time 0.04441 (0.57178)	Data 0.00061 (0.46148)	Loss 0.3889 (0.7201)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][18/60]	Time 0.23981 (0.55334)	Data 0.06987 (0.43972)	Loss 2.3627 (0.8113)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][19/60]	Time 0.11924 (0.53049)	Data 0.00470 (0.41682)	Loss 0.1988 (0.7791)	Prec@1 87.50000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [68][20/60]	Time 0.09986 (0.50896)	Data 0.01014 (0.39649)	Loss 2.2457 (0.8524)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][21/60]	Time 0.19365 (0.49395)	Data 0.02604 (0.37885)	Loss 0.4712 (0.8343)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][22/60]	Time 0.16840 (0.47915)	Data 0.00492 (0.36185)	Loss 0.5588 (0.8218)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][23/60]	Time 0.15260 (0.46495)	Data 0.01281 (0.34668)	Loss 1.0411 (0.8313)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [68][24/60]	Time 0.08752 (0.44923)	Data 0.00378 (0.33239)	Loss 0.7465 (0.8278)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [68][25/60]	Time 0.07960 (0.43444)	Data 0.01507 (0.31970)	Loss 0.4914 (0.8143)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][26/60]	Time 0.20049 (0.42544)	Data 0.08920 (0.31083)	Loss 0.0947 (0.7866)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [68][27/60]	Time 0.07517 (0.41247)	Data 0.01993 (0.30006)	Loss 0.7829 (0.7865)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (100.00000)
Epoch: [68][28/60]	Time 0.20919 (0.40521)	Data 0.01595 (0.28991)	Loss 0.4913 (0.7760)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (100.00001)
Epoch: [68][29/60]	Time 0.14085 (0.39609)	Data 0.00055 (0.27993)	Loss 0.7707 (0.7758)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (100.00000)
Epoch: [68][30/60]	Time 0.05602 (0.38476)	Data 0.00048 (0.27062)	Loss 1.8062 (0.8101)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [68][31/60]	Time 0.04198 (0.37370)	Data 0.00045 (0.26190)	Loss 2.1829 (0.8544)	Prec@1 37.50000 (72.98387)	Prec@5 100.00000 (100.00000)
Epoch: [68][32/60]	Time 0.02852 (0.36291)	Data 0.00037 (0.25373)	Loss 0.6987 (0.8495)	Prec@1 75.00000 (73.04688)	Prec@5 100.00000 (100.00000)
Epoch: [68][33/60]	Time 0.04496 (0.35328)	Data 0.00061 (0.24606)	Loss 0.1051 (0.8270)	Prec@1 87.50000 (73.48485)	Prec@5 100.00000 (100.00000)
Epoch: [68][34/60]	Time 0.05102 (0.34439)	Data 0.00055 (0.23884)	Loss 1.1225 (0.8357)	Prec@1 62.50000 (73.16177)	Prec@5 100.00000 (100.00000)
Epoch: [68][35/60]	Time 0.06128 (0.33630)	Data 0.00195 (0.23207)	Loss 1.2918 (0.8487)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (100.00000)
Epoch: [68][36/60]	Time 0.05279 (0.32842)	Data 0.00039 (0.22564)	Loss 1.0476 (0.8542)	Prec@1 62.50000 (72.91666)	Prec@5 100.00000 (100.00000)
Epoch: [68][37/60]	Time 0.02908 (0.32033)	Data 0.00047 (0.21955)	Loss 1.3913 (0.8687)	Prec@1 62.50000 (72.63514)	Prec@5 100.00000 (100.00000)
Epoch: [68][38/60]	Time 0.02871 (0.31266)	Data 0.00052 (0.21379)	Loss 2.0834 (0.9007)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (100.00000)
Epoch: [68][39/60]	Time 0.02698 (0.30533)	Data 0.00050 (0.20832)	Loss 0.1541 (0.8816)	Prec@1 87.50000 (72.43590)	Prec@5 100.00000 (100.00000)
Epoch: [68][40/60]	Time 0.02298 (0.29828)	Data 0.00073 (0.20313)	Loss 0.2685 (0.8662)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (100.00000)
Epoch: [68][41/60]	Time 0.02279 (0.29156)	Data 0.00090 (0.19819)	Loss 0.5702 (0.8590)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (100.00000)
Epoch: [68][42/60]	Time 0.02571 (0.28523)	Data 0.00088 (0.19350)	Loss 1.0617 (0.8638)	Prec@1 75.00000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [68][43/60]	Time 0.02266 (0.27912)	Data 0.00062 (0.18901)	Loss 0.6212 (0.8582)	Prec@1 75.00000 (72.96512)	Prec@5 100.00000 (100.00000)
Epoch: [68][44/60]	Time 0.02287 (0.27330)	Data 0.00097 (0.18474)	Loss 0.7291 (0.8553)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (100.00000)
Epoch: [68][45/60]	Time 0.02211 (0.26772)	Data 0.00073 (0.18065)	Loss 0.7320 (0.8525)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (100.00000)
Epoch: [68][46/60]	Time 0.02258 (0.26239)	Data 0.00109 (0.17675)	Loss 0.7397 (0.8501)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (100.00000)
Epoch: [68][47/60]	Time 0.02404 (0.25732)	Data 0.00109 (0.17301)	Loss 1.1357 (0.8562)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.73404)
Epoch: [68][48/60]	Time 0.02158 (0.25240)	Data 0.00044 (0.16941)	Loss 0.5587 (0.8500)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.73959)
Epoch: [68][49/60]	Time 0.02194 (0.24770)	Data 0.00045 (0.16596)	Loss 0.1658 (0.8360)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.74490)
Epoch: [68][50/60]	Time 0.02185 (0.24318)	Data 0.00048 (0.16265)	Loss 0.9191 (0.8377)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.75000)
Epoch: [68][51/60]	Time 0.02197 (0.23885)	Data 0.00046 (0.15947)	Loss 0.3092 (0.8273)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.75491)
Epoch: [68][52/60]	Time 0.02244 (0.23468)	Data 0.00050 (0.15642)	Loss 1.1256 (0.8330)	Prec@1 50.00000 (73.07693)	Prec@5 87.50000 (99.51923)
Epoch: [68][53/60]	Time 0.02158 (0.23066)	Data 0.00046 (0.15347)	Loss 0.7075 (0.8307)	Prec@1 75.00000 (73.11320)	Prec@5 100.00000 (99.52831)
Epoch: [68][54/60]	Time 0.02195 (0.22680)	Data 0.00046 (0.15064)	Loss 0.9752 (0.8333)	Prec@1 75.00000 (73.14815)	Prec@5 100.00000 (99.53704)
Epoch: [68][55/60]	Time 0.02145 (0.22306)	Data 0.00043 (0.14791)	Loss 1.4454 (0.8445)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (99.31818)
Epoch: [68][56/60]	Time 0.02213 (0.21948)	Data 0.00051 (0.14528)	Loss 0.6941 (0.8418)	Prec@1 62.50000 (72.76786)	Prec@5 100.00000 (99.33036)
Epoch: [68][57/60]	Time 0.02423 (0.21605)	Data 0.00045 (0.14274)	Loss 1.4537 (0.8525)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (99.12281)
Epoch: [68][58/60]	Time 0.02682 (0.21279)	Data 0.00067 (0.14029)	Loss 0.6820 (0.8496)	Prec@1 62.50000 (72.41380)	Prec@5 100.00000 (99.13793)
Epoch: [68][59/60]	Time 0.02254 (0.20956)	Data 0.00053 (0.13792)	Loss 0.9540 (0.8514)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (99.15254)
Epoch: [68][60/60]	Time 0.02251 (0.20645)	Data 0.00043 (0.13563)	Loss 0.6711 (0.8484)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (99.16667)
train at epoch 69
train at epoch 69
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [69][0/272]	 lr: 0.00004	Time 8.160 (8.160)	Data 6.776 (6.776)	Loss 0.0545 (0.0545)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][10/272]	 lr: 0.00004	Time 0.413 (1.339)	Data 0.128 (0.887)	Loss 0.0515 (0.0208)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][20/272]	 lr: 0.00004	Time 0.432 (0.903)	Data 0.120 (0.527)	Loss 0.0427 (0.0200)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][30/272]	 lr: 0.00004	Time 0.430 (0.747)	Data 0.127 (0.398)	Loss 0.0201 (0.0179)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][40/272]	 lr: 0.00004	Time 0.380 (0.669)	Data 0.121 (0.333)	Loss 0.0078 (0.0200)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][50/272]	 lr: 0.00004	Time 0.566 (0.625)	Data 0.127 (0.293)	Loss 0.0154 (0.0194)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][60/272]	 lr: 0.00004	Time 0.347 (0.591)	Data 0.125 (0.265)	Loss 0.0232 (0.0183)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [69][70/272]	 lr: 0.00004	Time 0.475 (0.570)	Data 0.133 (0.246)	Loss 0.0101 (0.0180)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][80/272]	 lr: 0.00004	Time 0.468 (0.554)	Data 0.129 (0.231)	Loss 0.0069 (0.0177)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][90/272]	 lr: 0.00004	Time 0.430 (0.543)	Data 0.124 (0.219)	Loss 0.0569 (0.0184)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][100/272]	 lr: 0.00004	Time 0.351 (0.533)	Data 0.129 (0.210)	Loss 0.0061 (0.0179)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][110/272]	 lr: 0.00004	Time 0.493 (0.526)	Data 0.120 (0.202)	Loss 0.0132 (0.0176)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][120/272]	 lr: 0.00004	Time 0.324 (0.518)	Data 0.129 (0.195)	Loss 0.0060 (0.0176)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [69][130/272]	 lr: 0.00004	Time 0.501 (0.512)	Data 0.124 (0.190)	Loss 0.0127 (0.0176)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][140/272]	 lr: 0.00004	Time 0.444 (0.507)	Data 0.131 (0.186)	Loss 0.0076 (0.0172)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][150/272]	 lr: 0.00004	Time 0.399 (0.502)	Data 0.139 (0.182)	Loss 0.0158 (0.0170)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][160/272]	 lr: 0.00004	Time 0.466 (0.498)	Data 0.130 (0.179)	Loss 0.0333 (0.0167)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][170/272]	 lr: 0.00004	Time 0.380 (0.495)	Data 0.128 (0.176)	Loss 0.0193 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][180/272]	 lr: 0.00004	Time 0.370 (0.493)	Data 0.124 (0.173)	Loss 0.0189 (0.0166)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [69][190/272]	 lr: 0.00004	Time 0.384 (0.491)	Data 0.127 (0.171)	Loss 0.0041 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][200/272]	 lr: 0.00004	Time 0.434 (0.488)	Data 0.125 (0.169)	Loss 0.0099 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][210/272]	 lr: 0.00004	Time 0.555 (0.486)	Data 0.127 (0.167)	Loss 0.0093 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][220/272]	 lr: 0.00004	Time 0.492 (0.484)	Data 0.128 (0.165)	Loss 0.0113 (0.0164)	Prec@1 100.00000 (99.98586)	Prec@5 100.00000 (100.00001)
Epoch: [69][230/272]	 lr: 0.00004	Time 0.378 (0.482)	Data 0.129 (0.164)	Loss 0.0322 (0.0168)	Prec@1 100.00000 (99.97295)	Prec@5 100.00000 (100.00000)
Epoch: [69][240/272]	 lr: 0.00004	Time 0.293 (0.480)	Data 0.130 (0.163)	Loss 0.0314 (0.0166)	Prec@1 100.00000 (99.97408)	Prec@5 100.00000 (100.00001)
Epoch: [69][250/272]	 lr: 0.00004	Time 0.240 (0.470)	Data 0.127 (0.161)	Loss 0.0028 (0.0177)	Prec@1 100.00000 (99.93775)	Prec@5 100.00000 (100.00000)
Epoch: [69][260/272]	 lr: 0.00004	Time 0.239 (0.461)	Data 0.128 (0.160)	Loss 0.0025 (0.0174)	Prec@1 100.00000 (99.94013)	Prec@5 100.00000 (100.00000)
Epoch: [69][270/272]	 lr: 0.00004	Time 0.237 (0.453)	Data 0.126 (0.159)	Loss 0.0105 (0.0174)	Prec@1 100.00000 (99.94234)	Prec@5 100.00000 (100.00000)
validation at epoch 69
validation at epoch 69
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [69][1/60]	Time 3.75164 (3.75164)	Data 3.62963 (3.62963)	Loss 0.4620 (0.4620)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [69][2/60]	Time 0.19478 (1.97321)	Data 0.02267 (1.82615)	Loss 0.5478 (0.5049)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [69][3/60]	Time 1.67852 (1.87498)	Data 1.55981 (1.73737)	Loss 1.3016 (0.7705)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [69][4/60]	Time 2.13796 (1.94073)	Data 2.05053 (1.81566)	Loss 0.2894 (0.6502)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [69][5/60]	Time 0.13158 (1.57890)	Data 0.01295 (1.45512)	Loss 0.3575 (0.5917)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][6/60]	Time 0.11361 (1.33468)	Data 0.05179 (1.22123)	Loss 0.4264 (0.5641)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [69][7/60]	Time 0.09313 (1.15732)	Data 0.01269 (1.04858)	Loss 1.6199 (0.7150)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [69][8/60]	Time 0.19362 (1.03686)	Data 0.02770 (0.92097)	Loss 1.5361 (0.8176)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [69][9/60]	Time 0.20349 (0.94426)	Data 0.04004 (0.82309)	Loss 0.7190 (0.8066)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [69][10/60]	Time 0.17782 (0.86762)	Data 0.01806 (0.74259)	Loss 0.7116 (0.7971)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [69][11/60]	Time 0.20941 (0.80778)	Data 0.01461 (0.67641)	Loss 0.6384 (0.7827)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [69][12/60]	Time 0.22138 (0.75891)	Data 0.00062 (0.62009)	Loss 1.6216 (0.8526)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [69][13/60]	Time 0.20078 (0.71598)	Data 0.03570 (0.57514)	Loss 2.2663 (0.9614)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [69][14/60]	Time 0.21818 (0.68042)	Data 0.02185 (0.53562)	Loss 0.0764 (0.8982)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [69][15/60]	Time 0.20928 (0.64901)	Data 0.00049 (0.49994)	Loss 1.6428 (0.9478)	Prec@1 50.00000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [69][16/60]	Time 0.08800 (0.61395)	Data 0.01826 (0.46984)	Loss 0.9888 (0.9504)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (100.00000)
Epoch: [69][17/60]	Time 0.15402 (0.58689)	Data 0.02710 (0.44379)	Loss 0.3478 (0.9149)	Prec@1 87.50000 (76.47059)	Prec@5 100.00000 (100.00000)
Epoch: [69][18/60]	Time 0.12977 (0.56150)	Data 0.00499 (0.41942)	Loss 2.3999 (0.9974)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [69][19/60]	Time 0.10804 (0.53763)	Data 0.00705 (0.39771)	Loss 0.1291 (0.9517)	Prec@1 100.00000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [69][20/60]	Time 0.08887 (0.51519)	Data 0.00663 (0.37816)	Loss 2.2729 (1.0178)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (100.00000)
Epoch: [69][21/60]	Time 0.10045 (0.49544)	Data 0.02551 (0.36137)	Loss 0.6211 (0.9989)	Prec@1 75.00000 (76.78571)	Prec@5 100.00000 (100.00000)
Epoch: [69][22/60]	Time 0.10138 (0.47753)	Data 0.00778 (0.34529)	Loss 0.5429 (0.9782)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (100.00000)
Epoch: [69][23/60]	Time 0.25738 (0.46796)	Data 0.09367 (0.33435)	Loss 1.0280 (0.9803)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (100.00000)
Epoch: [69][24/60]	Time 0.13912 (0.45426)	Data 0.00405 (0.32059)	Loss 0.6291 (0.9657)	Prec@1 62.50000 (75.52084)	Prec@5 100.00000 (100.00000)
Epoch: [69][25/60]	Time 0.17173 (0.44296)	Data 0.00563 (0.30799)	Loss 0.4322 (0.9444)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (100.00000)
Epoch: [69][26/60]	Time 0.19397 (0.43338)	Data 0.00282 (0.29626)	Loss 0.0359 (0.9094)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [69][27/60]	Time 0.10718 (0.42130)	Data 0.00412 (0.28544)	Loss 0.6932 (0.9014)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [69][28/60]	Time 0.11268 (0.41028)	Data 0.01334 (0.27572)	Loss 0.4263 (0.8844)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [69][29/60]	Time 0.12428 (0.40042)	Data 0.00037 (0.26622)	Loss 0.5505 (0.8729)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (100.00000)
Epoch: [69][30/60]	Time 0.08948 (0.39005)	Data 0.00717 (0.25759)	Loss 1.7218 (0.9012)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (100.00001)
Epoch: [69][31/60]	Time 0.04089 (0.37879)	Data 0.00046 (0.24929)	Loss 2.8038 (0.9626)	Prec@1 25.00000 (74.59677)	Prec@5 87.50000 (99.59677)
Epoch: [69][32/60]	Time 0.07661 (0.36935)	Data 0.00515 (0.24166)	Loss 0.7342 (0.9555)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (99.60938)
Epoch: [69][33/60]	Time 0.06656 (0.36017)	Data 0.00042 (0.23435)	Loss 0.1332 (0.9305)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [69][34/60]	Time 0.06490 (0.35149)	Data 0.00049 (0.22747)	Loss 1.1317 (0.9365)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (99.63235)
Epoch: [69][35/60]	Time 0.04566 (0.34275)	Data 0.00058 (0.22099)	Loss 1.5616 (0.9543)	Prec@1 75.00000 (74.64286)	Prec@5 87.50000 (99.28571)
Epoch: [69][36/60]	Time 0.03791 (0.33428)	Data 0.00046 (0.21487)	Loss 1.1841 (0.9607)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [69][37/60]	Time 0.03914 (0.32630)	Data 0.00383 (0.20916)	Loss 1.4339 (0.9735)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (99.32433)
Epoch: [69][38/60]	Time 0.02855 (0.31847)	Data 0.00072 (0.20368)	Loss 2.2652 (1.0075)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (99.34211)
Epoch: [69][39/60]	Time 0.02748 (0.31101)	Data 0.00119 (0.19849)	Loss 0.1657 (0.9859)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (99.35898)
Epoch: [69][40/60]	Time 0.02345 (0.30382)	Data 0.00042 (0.19353)	Loss 0.3260 (0.9694)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (99.37500)
Epoch: [69][41/60]	Time 0.02261 (0.29696)	Data 0.00074 (0.18883)	Loss 0.5408 (0.9589)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (99.39024)
Epoch: [69][42/60]	Time 0.02374 (0.29045)	Data 0.00085 (0.18436)	Loss 1.0728 (0.9617)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (99.40476)
Epoch: [69][43/60]	Time 0.02356 (0.28425)	Data 0.00080 (0.18009)	Loss 0.8154 (0.9583)	Prec@1 62.50000 (73.83721)	Prec@5 100.00000 (99.41860)
Epoch: [69][44/60]	Time 0.02297 (0.27831)	Data 0.00080 (0.17601)	Loss 0.7918 (0.9545)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [69][45/60]	Time 0.02278 (0.27263)	Data 0.00070 (0.17212)	Loss 0.7571 (0.9501)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.44445)
Epoch: [69][46/60]	Time 0.02338 (0.26721)	Data 0.00079 (0.16839)	Loss 1.2799 (0.9573)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (99.45652)
Epoch: [69][47/60]	Time 0.02317 (0.26202)	Data 0.00072 (0.16482)	Loss 0.8075 (0.9541)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.20213)
Epoch: [69][48/60]	Time 0.02303 (0.25704)	Data 0.00049 (0.16140)	Loss 0.3443 (0.9414)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.21875)
Epoch: [69][49/60]	Time 0.02272 (0.25226)	Data 0.00044 (0.15812)	Loss 0.4038 (0.9304)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.23470)
Epoch: [69][50/60]	Time 0.02284 (0.24767)	Data 0.00044 (0.15496)	Loss 0.5642 (0.9231)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.25000)
Epoch: [69][51/60]	Time 0.02211 (0.24325)	Data 0.00041 (0.15193)	Loss 0.2565 (0.9100)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [69][52/60]	Time 0.02295 (0.23901)	Data 0.00039 (0.14902)	Loss 0.6977 (0.9059)	Prec@1 62.50000 (74.03847)	Prec@5 100.00000 (99.27885)
Epoch: [69][53/60]	Time 0.02299 (0.23494)	Data 0.00042 (0.14621)	Loss 0.5691 (0.8996)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (99.29246)
Epoch: [69][54/60]	Time 0.02448 (0.23104)	Data 0.00048 (0.14352)	Loss 0.7434 (0.8967)	Prec@1 75.00000 (74.07407)	Prec@5 100.00000 (99.30556)
Epoch: [69][55/60]	Time 0.02254 (0.22725)	Data 0.00056 (0.14092)	Loss 0.9477 (0.8976)	Prec@1 62.50000 (73.86363)	Prec@5 87.50000 (99.09090)
Epoch: [69][56/60]	Time 0.02230 (0.22359)	Data 0.00048 (0.13841)	Loss 0.7818 (0.8955)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (99.10715)
Epoch: [69][57/60]	Time 0.02237 (0.22006)	Data 0.00046 (0.13599)	Loss 1.4288 (0.9049)	Prec@1 62.50000 (73.90351)	Prec@5 100.00000 (99.12281)
Epoch: [69][58/60]	Time 0.02302 (0.21666)	Data 0.00043 (0.13365)	Loss 0.7702 (0.9026)	Prec@1 75.00000 (73.92242)	Prec@5 100.00000 (99.13793)
Epoch: [69][59/60]	Time 0.02313 (0.21338)	Data 0.00058 (0.13140)	Loss 0.6508 (0.8983)	Prec@1 87.50000 (74.15254)	Prec@5 100.00000 (99.15254)
Epoch: [69][60/60]	Time 0.02250 (0.21020)	Data 0.00042 (0.12921)	Loss 0.4116 (0.8902)	Prec@1 87.50000 (74.37501)	Prec@5 100.00000 (99.16667)
train at epoch 70
train at epoch 70
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [70][0/272]	 lr: 0.00000	Time 10.025 (10.025)	Data 8.781 (8.781)	Loss 0.0125 (0.0125)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][10/272]	 lr: 0.00000	Time 0.394 (1.323)	Data 0.117 (0.914)	Loss 0.0326 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][20/272]	 lr: 0.00000	Time 0.503 (0.899)	Data 0.141 (0.542)	Loss 0.0071 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][30/272]	 lr: 0.00000	Time 0.418 (0.748)	Data 0.139 (0.411)	Loss 0.0262 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][40/272]	 lr: 0.00000	Time 0.615 (0.677)	Data 0.128 (0.342)	Loss 0.0094 (0.0164)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][50/272]	 lr: 0.00000	Time 0.425 (0.631)	Data 0.122 (0.299)	Loss 0.0172 (0.0167)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][60/272]	 lr: 0.00000	Time 0.550 (0.601)	Data 0.123 (0.271)	Loss 0.0119 (0.0172)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [70][70/272]	 lr: 0.00000	Time 0.478 (0.578)	Data 0.129 (0.251)	Loss 0.0112 (0.0167)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][80/272]	 lr: 0.00000	Time 0.445 (0.561)	Data 0.116 (0.236)	Loss 0.0078 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][90/272]	 lr: 0.00000	Time 0.495 (0.548)	Data 0.145 (0.224)	Loss 0.0134 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][100/272]	 lr: 0.00000	Time 0.412 (0.538)	Data 0.117 (0.215)	Loss 0.0122 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][110/272]	 lr: 0.00000	Time 0.431 (0.530)	Data 0.130 (0.207)	Loss 0.0116 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][120/272]	 lr: 0.00000	Time 0.380 (0.523)	Data 0.128 (0.200)	Loss 0.0145 (0.0163)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [70][130/272]	 lr: 0.00000	Time 0.451 (0.516)	Data 0.129 (0.194)	Loss 0.0159 (0.0160)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [70][140/272]	 lr: 0.00000	Time 0.418 (0.510)	Data 0.129 (0.189)	Loss 0.0095 (0.0160)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [70][150/272]	 lr: 0.00000	Time 0.379 (0.506)	Data 0.113 (0.185)	Loss 0.0204 (0.0160)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [70][160/272]	 lr: 0.00000	Time 0.466 (0.502)	Data 0.134 (0.182)	Loss 0.0109 (0.0164)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [70][170/272]	 lr: 0.00000	Time 0.452 (0.499)	Data 0.128 (0.179)	Loss 0.0055 (0.0166)	Prec@1 100.00000 (99.92690)	Prec@5 100.00000 (100.00000)
Epoch: [70][180/272]	 lr: 0.00000	Time 0.426 (0.495)	Data 0.124 (0.176)	Loss 0.0102 (0.0175)	Prec@1 100.00000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [70][190/272]	 lr: 0.00000	Time 0.465 (0.491)	Data 0.154 (0.174)	Loss 0.0096 (0.0172)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [70][200/272]	 lr: 0.00000	Time 0.495 (0.489)	Data 0.124 (0.171)	Loss 0.0161 (0.0168)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [70][210/272]	 lr: 0.00000	Time 0.318 (0.486)	Data 0.139 (0.169)	Loss 0.0231 (0.0165)	Prec@1 100.00000 (99.91114)	Prec@5 100.00000 (100.00000)
Epoch: [70][220/272]	 lr: 0.00000	Time 0.460 (0.485)	Data 0.128 (0.167)	Loss 0.0249 (0.0164)	Prec@1 100.00000 (99.91516)	Prec@5 100.00000 (100.00001)
Epoch: [70][230/272]	 lr: 0.00000	Time 0.419 (0.483)	Data 0.126 (0.166)	Loss 0.0217 (0.0163)	Prec@1 100.00000 (99.91883)	Prec@5 100.00000 (100.00000)
Epoch: [70][240/272]	 lr: 0.00000	Time 0.331 (0.481)	Data 0.123 (0.165)	Loss 0.0092 (0.0163)	Prec@1 100.00000 (99.92220)	Prec@5 100.00000 (100.00001)
Epoch: [70][250/272]	 lr: 0.00000	Time 0.238 (0.472)	Data 0.127 (0.163)	Loss 0.0197 (0.0162)	Prec@1 100.00000 (99.92530)	Prec@5 100.00000 (100.00000)
Epoch: [70][260/272]	 lr: 0.00000	Time 0.236 (0.463)	Data 0.128 (0.162)	Loss 0.0121 (0.0163)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [70][270/272]	 lr: 0.00000	Time 0.240 (0.454)	Data 0.129 (0.160)	Loss 0.0175 (0.0163)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 70
validation at epoch 70
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [70][1/60]	Time 3.40096 (3.40096)	Data 3.24583 (3.24583)	Loss 0.3612 (0.3612)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [70][2/60]	Time 3.94176 (3.67136)	Data 3.88145 (3.56364)	Loss 0.4440 (0.4026)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [70][3/60]	Time 0.35122 (2.56465)	Data 0.14085 (2.42271)	Loss 1.1713 (0.6589)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [70][4/60]	Time 0.18531 (1.96981)	Data 0.00949 (1.81941)	Loss 0.2320 (0.5522)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [70][5/60]	Time 0.12589 (1.60103)	Data 0.02099 (1.45972)	Loss 0.2772 (0.4972)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [70][6/60]	Time 0.19095 (1.36602)	Data 0.00049 (1.21652)	Loss 0.3960 (0.4803)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [70][7/60]	Time 0.18002 (1.19659)	Data 0.01164 (1.04439)	Loss 1.3524 (0.6049)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [70][8/60]	Time 0.12060 (1.06209)	Data 0.00773 (0.91481)	Loss 1.1239 (0.6698)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][9/60]	Time 0.11794 (0.95718)	Data 0.08087 (0.82215)	Loss 0.6472 (0.6673)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][10/60]	Time 0.16433 (0.87790)	Data 0.00180 (0.74011)	Loss 0.6306 (0.6636)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][11/60]	Time 0.14595 (0.81136)	Data 0.00605 (0.67338)	Loss 0.6239 (0.6600)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [70][12/60]	Time 0.12743 (0.75436)	Data 0.02124 (0.61904)	Loss 1.2058 (0.7055)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][13/60]	Time 0.14940 (0.70783)	Data 0.00230 (0.57159)	Loss 1.7325 (0.7845)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [70][14/60]	Time 0.24424 (0.67471)	Data 0.03769 (0.53346)	Loss 0.0626 (0.7329)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [70][15/60]	Time 0.15905 (0.64034)	Data 0.01364 (0.49880)	Loss 1.1685 (0.7620)	Prec@1 75.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [70][16/60]	Time 0.19604 (0.61257)	Data 0.08027 (0.47265)	Loss 1.0924 (0.7826)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][17/60]	Time 0.10178 (0.58252)	Data 0.01534 (0.44575)	Loss 0.3661 (0.7581)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [70][18/60]	Time 0.10958 (0.55625)	Data 0.03124 (0.42272)	Loss 2.3632 (0.8473)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][19/60]	Time 0.24377 (0.53980)	Data 0.07839 (0.40459)	Loss 0.1449 (0.8103)	Prec@1 87.50000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [70][20/60]	Time 0.07352 (0.51649)	Data 0.00067 (0.38440)	Loss 2.2739 (0.8835)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][21/60]	Time 0.09826 (0.49657)	Data 0.04380 (0.36818)	Loss 0.6358 (0.8717)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][22/60]	Time 0.06742 (0.47706)	Data 0.00049 (0.35147)	Loss 0.6043 (0.8595)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][23/60]	Time 0.08402 (0.45998)	Data 0.00233 (0.33629)	Loss 1.0046 (0.8658)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [70][24/60]	Time 0.10974 (0.44538)	Data 0.01797 (0.32302)	Loss 0.7823 (0.8624)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [70][25/60]	Time 0.11544 (0.43219)	Data 0.00140 (0.31016)	Loss 0.4600 (0.8463)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [70][26/60]	Time 0.25948 (0.42554)	Data 0.05878 (0.30049)	Loss 0.0535 (0.8158)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [70][27/60]	Time 0.14886 (0.41530)	Data 0.04540 (0.29104)	Loss 0.8627 (0.8175)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (100.00000)
Epoch: [70][28/60]	Time 0.07987 (0.40332)	Data 0.02589 (0.28157)	Loss 0.4629 (0.8048)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [70][29/60]	Time 0.05893 (0.39144)	Data 0.00042 (0.27188)	Loss 0.5625 (0.7965)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [70][30/60]	Time 0.06281 (0.38049)	Data 0.00060 (0.26283)	Loss 1.7371 (0.8278)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (100.00001)
Epoch: [70][31/60]	Time 0.06717 (0.37038)	Data 0.00040 (0.25437)	Loss 2.3903 (0.8782)	Prec@1 37.50000 (73.38709)	Prec@5 100.00000 (100.00000)
Epoch: [70][32/60]	Time 0.06437 (0.36082)	Data 0.00049 (0.24644)	Loss 0.6999 (0.8727)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [70][33/60]	Time 0.05461 (0.35154)	Data 0.00280 (0.23905)	Loss 0.1464 (0.8507)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [70][34/60]	Time 0.04944 (0.34265)	Data 0.00037 (0.23203)	Loss 1.3054 (0.8640)	Prec@1 50.00000 (73.16177)	Prec@5 100.00000 (100.00000)
Epoch: [70][35/60]	Time 0.03078 (0.33374)	Data 0.00180 (0.22545)	Loss 1.3993 (0.8793)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (100.00000)
Epoch: [70][36/60]	Time 0.02753 (0.32524)	Data 0.00053 (0.21921)	Loss 0.9909 (0.8824)	Prec@1 62.50000 (72.91666)	Prec@5 100.00000 (100.00000)
Epoch: [70][37/60]	Time 0.03357 (0.31735)	Data 0.00049 (0.21330)	Loss 1.5598 (0.9007)	Prec@1 62.50000 (72.63514)	Prec@5 100.00000 (100.00000)
Epoch: [70][38/60]	Time 0.03478 (0.30992)	Data 0.00049 (0.20770)	Loss 2.4407 (0.9413)	Prec@1 50.00000 (72.03947)	Prec@5 100.00000 (100.00000)
Epoch: [70][39/60]	Time 0.03258 (0.30281)	Data 0.00524 (0.20250)	Loss 0.1735 (0.9216)	Prec@1 87.50000 (72.43590)	Prec@5 100.00000 (100.00000)
Epoch: [70][40/60]	Time 0.02774 (0.29593)	Data 0.00048 (0.19745)	Loss 0.3481 (0.9072)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (100.00000)
Epoch: [70][41/60]	Time 0.02319 (0.28928)	Data 0.00047 (0.19265)	Loss 0.5519 (0.8986)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (100.00000)
Epoch: [70][42/60]	Time 0.02423 (0.28297)	Data 0.00049 (0.18807)	Loss 1.2567 (0.9071)	Prec@1 62.50000 (72.61905)	Prec@5 100.00000 (100.00000)
Epoch: [70][43/60]	Time 0.02396 (0.27694)	Data 0.00054 (0.18371)	Loss 0.5923 (0.8998)	Prec@1 75.00000 (72.67442)	Prec@5 100.00000 (100.00000)
Epoch: [70][44/60]	Time 0.02296 (0.27117)	Data 0.00042 (0.17955)	Loss 0.8417 (0.8985)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (100.00000)
Epoch: [70][45/60]	Time 0.02281 (0.26565)	Data 0.00050 (0.17557)	Loss 0.8146 (0.8966)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (100.00000)
Epoch: [70][46/60]	Time 0.02312 (0.26038)	Data 0.00047 (0.17176)	Loss 1.2663 (0.9046)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (100.00000)
Epoch: [70][47/60]	Time 0.02443 (0.25536)	Data 0.00049 (0.16812)	Loss 1.0819 (0.9084)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (99.73404)
Epoch: [70][48/60]	Time 0.02310 (0.25052)	Data 0.00041 (0.16462)	Loss 0.4505 (0.8989)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.73959)
Epoch: [70][49/60]	Time 0.02278 (0.24587)	Data 0.00051 (0.16127)	Loss 0.3430 (0.8875)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.74490)
Epoch: [70][50/60]	Time 0.02302 (0.24141)	Data 0.00044 (0.15806)	Loss 0.6887 (0.8835)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (99.75000)
Epoch: [70][51/60]	Time 0.02322 (0.23714)	Data 0.00044 (0.15497)	Loss 0.5297 (0.8766)	Prec@1 75.00000 (73.28432)	Prec@5 100.00000 (99.75491)
Epoch: [70][52/60]	Time 0.02575 (0.23307)	Data 0.00055 (0.15200)	Loss 1.0374 (0.8797)	Prec@1 50.00000 (72.83654)	Prec@5 87.50000 (99.51923)
Epoch: [70][53/60]	Time 0.02294 (0.22911)	Data 0.00045 (0.14914)	Loss 0.5769 (0.8740)	Prec@1 87.50000 (73.11320)	Prec@5 100.00000 (99.52831)
Epoch: [70][54/60]	Time 0.02298 (0.22529)	Data 0.00043 (0.14638)	Loss 0.9837 (0.8760)	Prec@1 75.00000 (73.14815)	Prec@5 100.00000 (99.53704)
Epoch: [70][55/60]	Time 0.02277 (0.22161)	Data 0.00049 (0.14373)	Loss 1.2806 (0.8834)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (99.31818)
Epoch: [70][56/60]	Time 0.02337 (0.21807)	Data 0.00048 (0.14117)	Loss 0.7420 (0.8808)	Prec@1 75.00000 (72.99107)	Prec@5 100.00000 (99.33036)
Epoch: [70][57/60]	Time 0.02361 (0.21466)	Data 0.00047 (0.13871)	Loss 1.5171 (0.8920)	Prec@1 62.50000 (72.80701)	Prec@5 87.50000 (99.12281)
Epoch: [70][58/60]	Time 0.02284 (0.21135)	Data 0.00045 (0.13632)	Loss 0.7308 (0.8892)	Prec@1 62.50000 (72.62931)	Prec@5 100.00000 (99.13793)
Epoch: [70][59/60]	Time 0.02304 (0.20816)	Data 0.00059 (0.13402)	Loss 0.7825 (0.8874)	Prec@1 87.50000 (72.88136)	Prec@5 100.00000 (99.15254)
Epoch: [70][60/60]	Time 0.02274 (0.20507)	Data 0.00042 (0.13179)	Loss 0.4928 (0.8808)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (99.16667)
train at epoch 71
train at epoch 71
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [71][0/272]	 lr: 0.00000	Time 9.430 (9.430)	Data 8.784 (8.784)	Loss 0.0509 (0.0509)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][10/272]	 lr: 0.00000	Time 0.499 (1.334)	Data 0.142 (0.925)	Loss 0.0131 (0.0175)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][20/272]	 lr: 0.00000	Time 0.376 (0.898)	Data 0.127 (0.545)	Loss 0.0050 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][30/272]	 lr: 0.00000	Time 0.485 (0.743)	Data 0.129 (0.412)	Loss 0.0408 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][40/272]	 lr: 0.00000	Time 0.359 (0.665)	Data 0.127 (0.343)	Loss 0.0252 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][50/272]	 lr: 0.00000	Time 0.317 (0.617)	Data 0.129 (0.301)	Loss 0.0244 (0.0163)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [71][60/272]	 lr: 0.00000	Time 0.429 (0.588)	Data 0.126 (0.273)	Loss 0.0094 (0.0164)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [71][70/272]	 lr: 0.00000	Time 0.476 (0.569)	Data 0.128 (0.253)	Loss 0.0097 (0.0171)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [71][80/272]	 lr: 0.00000	Time 0.397 (0.554)	Data 0.130 (0.238)	Loss 0.0109 (0.0184)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [71][90/272]	 lr: 0.00000	Time 0.429 (0.542)	Data 0.127 (0.226)	Loss 0.0311 (0.0182)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [71][100/272]	 lr: 0.00000	Time 0.522 (0.533)	Data 0.138 (0.217)	Loss 0.0156 (0.0175)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [71][110/272]	 lr: 0.00000	Time 0.474 (0.524)	Data 0.129 (0.209)	Loss 0.0106 (0.0190)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [71][120/272]	 lr: 0.00000	Time 0.495 (0.517)	Data 0.128 (0.202)	Loss 0.0086 (0.0182)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [71][130/272]	 lr: 0.00000	Time 0.407 (0.512)	Data 0.129 (0.196)	Loss 0.0279 (0.0186)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [71][140/272]	 lr: 0.00000	Time 0.352 (0.506)	Data 0.128 (0.192)	Loss 0.0172 (0.0185)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [71][150/272]	 lr: 0.00000	Time 0.452 (0.503)	Data 0.129 (0.187)	Loss 0.0135 (0.0184)	Prec@1 100.00000 (99.91722)	Prec@5 100.00000 (100.00000)
Epoch: [71][160/272]	 lr: 0.00000	Time 0.442 (0.498)	Data 0.128 (0.184)	Loss 0.0082 (0.0181)	Prec@1 100.00000 (99.92236)	Prec@5 100.00000 (100.00000)
Epoch: [71][170/272]	 lr: 0.00000	Time 0.432 (0.497)	Data 0.129 (0.181)	Loss 0.0063 (0.0181)	Prec@1 100.00000 (99.92690)	Prec@5 100.00000 (100.00000)
Epoch: [71][180/272]	 lr: 0.00000	Time 0.508 (0.495)	Data 0.145 (0.178)	Loss 0.0062 (0.0178)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [71][190/272]	 lr: 0.00000	Time 0.466 (0.492)	Data 0.129 (0.176)	Loss 0.0113 (0.0185)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [71][200/272]	 lr: 0.00000	Time 0.424 (0.489)	Data 0.126 (0.173)	Loss 0.0137 (0.0181)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [71][210/272]	 lr: 0.00000	Time 0.422 (0.486)	Data 0.129 (0.171)	Loss 0.0127 (0.0180)	Prec@1 100.00000 (99.88152)	Prec@5 100.00000 (100.00000)
Epoch: [71][220/272]	 lr: 0.00000	Time 0.431 (0.484)	Data 0.134 (0.169)	Loss 0.0231 (0.0178)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [71][230/272]	 lr: 0.00000	Time 0.439 (0.482)	Data 0.141 (0.168)	Loss 0.0049 (0.0175)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [71][240/272]	 lr: 0.00000	Time 0.266 (0.480)	Data 0.129 (0.166)	Loss 0.0043 (0.0174)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [71][250/272]	 lr: 0.00000	Time 0.238 (0.471)	Data 0.128 (0.165)	Loss 0.0082 (0.0173)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [71][260/272]	 lr: 0.00000	Time 0.238 (0.462)	Data 0.129 (0.163)	Loss 0.0066 (0.0172)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [71][270/272]	 lr: 0.00000	Time 0.239 (0.453)	Data 0.129 (0.162)	Loss 0.0204 (0.0175)	Prec@1 100.00000 (99.89622)	Prec@5 100.00000 (100.00000)
validation at epoch 71
validation at epoch 71
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [71][1/60]	Time 6.56313 (6.56313)	Data 6.21960 (6.21960)	Loss 0.4095 (0.4095)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][2/60]	Time 0.70211 (3.63262)	Data 0.55016 (3.38488)	Loss 0.4828 (0.4461)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [71][3/60]	Time 0.29249 (2.51924)	Data 0.02514 (2.26497)	Loss 1.0992 (0.6638)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [71][4/60]	Time 0.29185 (1.96240)	Data 0.03080 (1.70642)	Loss 0.2234 (0.5537)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [71][5/60]	Time 0.21520 (1.61296)	Data 0.01574 (1.36829)	Loss 0.2972 (0.5024)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [71][6/60]	Time 0.18888 (1.37561)	Data 0.02486 (1.14438)	Loss 0.3375 (0.4749)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [71][7/60]	Time 0.21441 (1.20972)	Data 0.11045 (0.99668)	Loss 1.4514 (0.6144)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [71][8/60]	Time 0.23297 (1.08763)	Data 0.00059 (0.87217)	Loss 1.2341 (0.6919)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [71][9/60]	Time 0.13424 (0.98170)	Data 0.01603 (0.77704)	Loss 0.6302 (0.6850)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [71][10/60]	Time 0.19328 (0.90286)	Data 0.11143 (0.71048)	Loss 0.6425 (0.6808)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [71][11/60]	Time 0.09517 (0.82943)	Data 0.02393 (0.64807)	Loss 0.6130 (0.6746)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [71][12/60]	Time 0.22003 (0.77865)	Data 0.09928 (0.60233)	Loss 1.3501 (0.7309)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [71][13/60]	Time 0.12926 (0.72869)	Data 0.01410 (0.55708)	Loss 1.8505 (0.8170)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][14/60]	Time 0.16172 (0.68820)	Data 0.00564 (0.51770)	Loss 0.0645 (0.7633)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [71][15/60]	Time 0.13445 (0.65128)	Data 0.01271 (0.48403)	Loss 1.2834 (0.7980)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [71][16/60]	Time 0.16151 (0.62067)	Data 0.03784 (0.45614)	Loss 0.9873 (0.8098)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][17/60]	Time 0.15264 (0.59314)	Data 0.09763 (0.43505)	Loss 0.3194 (0.7809)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [71][18/60]	Time 0.16311 (0.56925)	Data 0.04811 (0.41356)	Loss 2.4039 (0.8711)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (100.00000)
Epoch: [71][19/60]	Time 0.11170 (0.54517)	Data 0.01013 (0.39232)	Loss 0.1344 (0.8323)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (100.00000)
Epoch: [71][20/60]	Time 0.05941 (0.52088)	Data 0.00064 (0.37274)	Loss 2.3173 (0.9066)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [71][21/60]	Time 0.08824 (0.50028)	Data 0.00976 (0.35546)	Loss 0.5492 (0.8896)	Prec@1 62.50000 (75.59524)	Prec@5 100.00000 (100.00000)
Epoch: [71][22/60]	Time 0.11467 (0.48275)	Data 0.00503 (0.33953)	Loss 0.5776 (0.8754)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (100.00000)
Epoch: [71][23/60]	Time 0.11778 (0.46688)	Data 0.00226 (0.32486)	Loss 0.9813 (0.8800)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][24/60]	Time 0.10867 (0.45195)	Data 0.01087 (0.31178)	Loss 0.6049 (0.8685)	Prec@1 62.50000 (74.47917)	Prec@5 100.00000 (100.00000)
Epoch: [71][25/60]	Time 0.10223 (0.43797)	Data 0.01212 (0.29979)	Loss 0.4182 (0.8505)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][26/60]	Time 0.10846 (0.42529)	Data 0.01072 (0.28868)	Loss 0.0359 (0.8192)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [71][27/60]	Time 0.10904 (0.41358)	Data 0.02999 (0.27909)	Loss 0.8870 (0.8217)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [71][28/60]	Time 0.31367 (0.41001)	Data 0.00686 (0.26937)	Loss 0.3353 (0.8043)	Prec@1 87.50000 (75.44643)	Prec@5 100.00000 (100.00001)
Epoch: [71][29/60]	Time 0.10911 (0.39964)	Data 0.00042 (0.26010)	Loss 0.6634 (0.7995)	Prec@1 75.00000 (75.43104)	Prec@5 100.00000 (100.00000)
Epoch: [71][30/60]	Time 0.07283 (0.38874)	Data 0.00036 (0.25144)	Loss 1.7511 (0.8312)	Prec@1 62.50000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [71][31/60]	Time 0.07764 (0.37871)	Data 0.00046 (0.24334)	Loss 2.4713 (0.8841)	Prec@1 37.50000 (73.79032)	Prec@5 87.50000 (99.59677)
Epoch: [71][32/60]	Time 0.04718 (0.36835)	Data 0.00042 (0.23575)	Loss 0.7265 (0.8792)	Prec@1 75.00000 (73.82812)	Prec@5 100.00000 (99.60938)
Epoch: [71][33/60]	Time 0.04490 (0.35854)	Data 0.00051 (0.22862)	Loss 0.1507 (0.8571)	Prec@1 87.50000 (74.24242)	Prec@5 100.00000 (99.62122)
Epoch: [71][34/60]	Time 0.06528 (0.34992)	Data 0.00063 (0.22192)	Loss 1.1967 (0.8671)	Prec@1 62.50000 (73.89706)	Prec@5 100.00000 (99.63235)
Epoch: [71][35/60]	Time 0.04960 (0.34134)	Data 0.00062 (0.21560)	Loss 1.3894 (0.8820)	Prec@1 75.00000 (73.92857)	Prec@5 87.50000 (99.28571)
Epoch: [71][36/60]	Time 0.03024 (0.33270)	Data 0.00060 (0.20962)	Loss 1.1426 (0.8892)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [71][37/60]	Time 0.02793 (0.32446)	Data 0.00048 (0.20397)	Loss 1.4446 (0.9043)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (99.32433)
Epoch: [71][38/60]	Time 0.02942 (0.31670)	Data 0.00083 (0.19863)	Loss 2.2750 (0.9403)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (99.34211)
Epoch: [71][39/60]	Time 0.02615 (0.30925)	Data 0.00053 (0.19355)	Loss 0.1700 (0.9206)	Prec@1 87.50000 (73.07693)	Prec@5 100.00000 (99.35898)
Epoch: [71][40/60]	Time 0.03075 (0.30228)	Data 0.00272 (0.18877)	Loss 0.3337 (0.9059)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.37500)
Epoch: [71][41/60]	Time 0.02842 (0.29560)	Data 0.00238 (0.18423)	Loss 0.5851 (0.8981)	Prec@1 75.00000 (73.47561)	Prec@5 100.00000 (99.39024)
Epoch: [71][42/60]	Time 0.02293 (0.28911)	Data 0.00105 (0.17987)	Loss 1.0847 (0.9025)	Prec@1 75.00000 (73.51191)	Prec@5 100.00000 (99.40476)
Epoch: [71][43/60]	Time 0.02391 (0.28294)	Data 0.00096 (0.17571)	Loss 0.6553 (0.8968)	Prec@1 62.50000 (73.25581)	Prec@5 100.00000 (99.41860)
Epoch: [71][44/60]	Time 0.02370 (0.27705)	Data 0.00076 (0.17173)	Loss 0.7723 (0.8939)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (99.43182)
Epoch: [71][45/60]	Time 0.02313 (0.27141)	Data 0.00077 (0.16793)	Loss 0.7415 (0.8906)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (99.44445)
Epoch: [71][46/60]	Time 0.02291 (0.26601)	Data 0.00041 (0.16429)	Loss 0.9810 (0.8925)	Prec@1 50.00000 (73.09782)	Prec@5 100.00000 (99.45652)
Epoch: [71][47/60]	Time 0.02275 (0.26083)	Data 0.00043 (0.16080)	Loss 0.8769 (0.8922)	Prec@1 75.00000 (73.13830)	Prec@5 100.00000 (99.46808)
Epoch: [71][48/60]	Time 0.02363 (0.25589)	Data 0.00044 (0.15746)	Loss 0.3413 (0.8807)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [71][49/60]	Time 0.02308 (0.25114)	Data 0.00054 (0.15426)	Loss 0.2459 (0.8678)	Prec@1 87.50000 (73.72449)	Prec@5 100.00000 (99.48979)
Epoch: [71][50/60]	Time 0.02617 (0.24664)	Data 0.00040 (0.15118)	Loss 0.4627 (0.8597)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (99.50000)
Epoch: [71][51/60]	Time 0.02311 (0.24226)	Data 0.00072 (0.14823)	Loss 0.3067 (0.8488)	Prec@1 75.00000 (73.77451)	Prec@5 100.00000 (99.50980)
Epoch: [71][52/60]	Time 0.02307 (0.23804)	Data 0.00051 (0.14539)	Loss 0.7009 (0.8460)	Prec@1 62.50000 (73.55769)	Prec@5 100.00000 (99.51923)
Epoch: [71][53/60]	Time 0.02387 (0.23400)	Data 0.00045 (0.14266)	Loss 0.3621 (0.8368)	Prec@1 87.50000 (73.82076)	Prec@5 100.00000 (99.52831)
Epoch: [71][54/60]	Time 0.02293 (0.23009)	Data 0.00044 (0.14002)	Loss 0.8366 (0.8368)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (99.53704)
Epoch: [71][55/60]	Time 0.02301 (0.22633)	Data 0.00051 (0.13749)	Loss 1.0723 (0.8411)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (99.31818)
Epoch: [71][56/60]	Time 0.02282 (0.22269)	Data 0.00058 (0.13504)	Loss 0.6780 (0.8382)	Prec@1 75.00000 (73.66072)	Prec@5 100.00000 (99.33036)
Epoch: [71][57/60]	Time 0.02291 (0.21919)	Data 0.00053 (0.13268)	Loss 1.2776 (0.8459)	Prec@1 62.50000 (73.46491)	Prec@5 87.50000 (99.12281)
Epoch: [71][58/60]	Time 0.02403 (0.21582)	Data 0.00051 (0.13040)	Loss 0.6777 (0.8430)	Prec@1 75.00000 (73.49138)	Prec@5 100.00000 (99.13793)
Epoch: [71][59/60]	Time 0.02315 (0.21256)	Data 0.00066 (0.12820)	Loss 0.7318 (0.8411)	Prec@1 87.50000 (73.72881)	Prec@5 100.00000 (99.15254)
Epoch: [71][60/60]	Time 0.02587 (0.20945)	Data 0.00049 (0.12608)	Loss 0.4630 (0.8348)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.16667)
train at epoch 72
train at epoch 72
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [72][0/272]	 lr: 0.00000	Time 4.711 (4.711)	Data 3.956 (3.956)	Loss 0.0238 (0.0238)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][10/272]	 lr: 0.00000	Time 0.406 (1.292)	Data 0.142 (0.756)	Loss 0.0325 (0.0246)	Prec@1 100.00000 (99.71591)	Prec@5 100.00000 (100.00000)
Epoch: [72][20/272]	 lr: 0.00000	Time 0.501 (0.883)	Data 0.127 (0.457)	Loss 0.0180 (0.0216)	Prec@1 100.00000 (99.70238)	Prec@5 100.00000 (100.00000)
Epoch: [72][30/272]	 lr: 0.00000	Time 0.486 (0.739)	Data 0.137 (0.353)	Loss 0.0046 (0.0192)	Prec@1 100.00000 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [72][40/272]	 lr: 0.00000	Time 0.398 (0.669)	Data 0.143 (0.298)	Loss 0.0136 (0.0175)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [72][50/272]	 lr: 0.00000	Time 0.479 (0.627)	Data 0.130 (0.265)	Loss 0.0068 (0.0167)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [72][60/272]	 lr: 0.00000	Time 0.369 (0.596)	Data 0.109 (0.243)	Loss 0.0100 (0.0160)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [72][70/272]	 lr: 0.00000	Time 0.450 (0.573)	Data 0.131 (0.227)	Loss 0.0075 (0.0152)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [72][80/272]	 lr: 0.00000	Time 0.426 (0.559)	Data 0.129 (0.214)	Loss 0.0137 (0.0167)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [72][90/272]	 lr: 0.00000	Time 0.370 (0.546)	Data 0.127 (0.204)	Loss 0.0096 (0.0206)	Prec@1 100.00000 (99.75962)	Prec@5 100.00000 (100.00000)
Epoch: [72][100/272]	 lr: 0.00000	Time 0.360 (0.538)	Data 0.123 (0.196)	Loss 0.0133 (0.0205)	Prec@1 100.00000 (99.78342)	Prec@5 100.00000 (100.00000)
Epoch: [72][110/272]	 lr: 0.00000	Time 0.489 (0.531)	Data 0.138 (0.190)	Loss 0.0218 (0.0200)	Prec@1 100.00000 (99.80293)	Prec@5 100.00000 (100.00000)
Epoch: [72][120/272]	 lr: 0.00000	Time 0.411 (0.521)	Data 0.128 (0.185)	Loss 0.0111 (0.0201)	Prec@1 100.00000 (99.79338)	Prec@5 100.00000 (99.99999)
Epoch: [72][130/272]	 lr: 0.00000	Time 0.467 (0.515)	Data 0.131 (0.180)	Loss 0.0056 (0.0195)	Prec@1 100.00000 (99.80916)	Prec@5 100.00000 (100.00000)
Epoch: [72][140/272]	 lr: 0.00000	Time 0.476 (0.510)	Data 0.129 (0.177)	Loss 0.0202 (0.0192)	Prec@1 100.00000 (99.82269)	Prec@5 100.00000 (100.00000)
Epoch: [72][150/272]	 lr: 0.00000	Time 0.399 (0.505)	Data 0.128 (0.173)	Loss 0.0037 (0.0191)	Prec@1 100.00000 (99.83443)	Prec@5 100.00000 (100.00000)
Epoch: [72][160/272]	 lr: 0.00000	Time 0.543 (0.504)	Data 0.141 (0.170)	Loss 0.0226 (0.0188)	Prec@1 100.00000 (99.84472)	Prec@5 100.00000 (100.00000)
Epoch: [72][170/272]	 lr: 0.00000	Time 0.471 (0.502)	Data 0.117 (0.168)	Loss 0.0163 (0.0184)	Prec@1 100.00000 (99.85381)	Prec@5 100.00000 (100.00000)
Epoch: [72][180/272]	 lr: 0.00000	Time 0.355 (0.499)	Data 0.129 (0.166)	Loss 0.0217 (0.0185)	Prec@1 100.00000 (99.86189)	Prec@5 100.00000 (100.00001)
Epoch: [72][190/272]	 lr: 0.00000	Time 0.542 (0.497)	Data 0.132 (0.164)	Loss 0.0047 (0.0180)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [72][200/272]	 lr: 0.00000	Time 0.458 (0.495)	Data 0.132 (0.162)	Loss 0.0128 (0.0179)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [72][210/272]	 lr: 0.00000	Time 0.351 (0.494)	Data 0.127 (0.161)	Loss 0.0077 (0.0181)	Prec@1 100.00000 (99.85190)	Prec@5 100.00000 (100.00000)
Epoch: [72][220/272]	 lr: 0.00000	Time 0.427 (0.491)	Data 0.129 (0.159)	Loss 0.0207 (0.0194)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00001)
Epoch: [72][230/272]	 lr: 0.00000	Time 0.329 (0.488)	Data 0.128 (0.158)	Loss 0.0288 (0.0199)	Prec@1 100.00000 (99.79708)	Prec@5 100.00000 (100.00000)
Epoch: [72][240/272]	 lr: 0.00000	Time 0.324 (0.486)	Data 0.121 (0.157)	Loss 0.0149 (0.0198)	Prec@1 100.00000 (99.80550)	Prec@5 100.00000 (100.00001)
Epoch: [72][250/272]	 lr: 0.00000	Time 0.242 (0.477)	Data 0.129 (0.155)	Loss 0.0072 (0.0198)	Prec@1 100.00000 (99.81325)	Prec@5 100.00000 (100.00000)
Epoch: [72][260/272]	 lr: 0.00000	Time 0.239 (0.468)	Data 0.128 (0.154)	Loss 0.0064 (0.0195)	Prec@1 100.00000 (99.82040)	Prec@5 100.00000 (100.00000)
Epoch: [72][270/272]	 lr: 0.00000	Time 0.240 (0.459)	Data 0.128 (0.153)	Loss 0.0155 (0.0192)	Prec@1 100.00000 (99.82703)	Prec@5 100.00000 (100.00000)
validation at epoch 72
validation at epoch 72
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [72][1/60]	Time 6.66009 (6.66009)	Data 6.57008 (6.57008)	Loss 0.4494 (0.4494)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [72][2/60]	Time 0.31624 (3.48817)	Data 0.26450 (3.41729)	Loss 0.5406 (0.4950)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [72][3/60]	Time 0.09574 (2.35736)	Data 0.02088 (2.28515)	Loss 1.2354 (0.7418)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [72][4/60]	Time 0.15780 (1.80747)	Data 0.00430 (1.71494)	Loss 0.2506 (0.6190)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [72][5/60]	Time 0.51793 (1.54956)	Data 0.45473 (1.46290)	Loss 0.2912 (0.5535)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [72][6/60]	Time 0.16683 (1.31911)	Data 0.00180 (1.21938)	Loss 0.4658 (0.5388)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [72][7/60]	Time 0.23220 (1.16383)	Data 0.09676 (1.05900)	Loss 1.3703 (0.6576)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [72][8/60]	Time 0.13310 (1.03499)	Data 0.01354 (0.92832)	Loss 1.2626 (0.7333)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][9/60]	Time 0.25988 (0.94887)	Data 0.07131 (0.83310)	Loss 0.6192 (0.7206)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][10/60]	Time 0.19953 (0.87394)	Data 0.12812 (0.76260)	Loss 0.6471 (0.7132)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][11/60]	Time 0.08619 (0.80232)	Data 0.00068 (0.69334)	Loss 0.6234 (0.7051)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [72][12/60]	Time 0.15316 (0.74823)	Data 0.02661 (0.63777)	Loss 1.2742 (0.7525)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][13/60]	Time 0.09863 (0.69826)	Data 0.01561 (0.58992)	Loss 2.1344 (0.8588)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [72][14/60]	Time 0.10044 (0.65555)	Data 0.01485 (0.54884)	Loss 0.0714 (0.8026)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [72][15/60]	Time 0.06254 (0.61602)	Data 0.00364 (0.51249)	Loss 1.3023 (0.8359)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [72][16/60]	Time 0.03212 (0.57953)	Data 0.00070 (0.48051)	Loss 1.0212 (0.8475)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [72][17/60]	Time 0.27797 (0.56179)	Data 0.07610 (0.45672)	Loss 0.3834 (0.8202)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [72][18/60]	Time 0.15556 (0.53922)	Data 0.00537 (0.43164)	Loss 2.3237 (0.9037)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [72][19/60]	Time 0.07195 (0.51463)	Data 0.02422 (0.41020)	Loss 0.1392 (0.8634)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [72][20/60]	Time 0.14698 (0.49624)	Data 0.00053 (0.38972)	Loss 2.2157 (0.9311)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][21/60]	Time 0.12684 (0.47865)	Data 0.01780 (0.37201)	Loss 0.6200 (0.9162)	Prec@1 62.50000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [72][22/60]	Time 0.17859 (0.46501)	Data 0.08018 (0.35874)	Loss 0.5889 (0.9014)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [72][23/60]	Time 0.15848 (0.45169)	Data 0.05789 (0.34566)	Loss 0.9974 (0.9055)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (100.00000)
Epoch: [72][24/60]	Time 0.21302 (0.44174)	Data 0.04585 (0.33317)	Loss 0.7000 (0.8970)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [72][25/60]	Time 0.06201 (0.42655)	Data 0.00573 (0.32007)	Loss 0.4550 (0.8793)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][26/60]	Time 0.16571 (0.41652)	Data 0.03893 (0.30926)	Loss 0.0618 (0.8479)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [72][27/60]	Time 0.05359 (0.40308)	Data 0.01112 (0.29822)	Loss 0.7747 (0.8451)	Prec@1 50.00000 (74.07407)	Prec@5 100.00000 (100.00000)
Epoch: [72][28/60]	Time 0.07246 (0.39127)	Data 0.00693 (0.28781)	Loss 0.4259 (0.8302)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (100.00001)
Epoch: [72][29/60]	Time 0.07245 (0.38028)	Data 0.00054 (0.27791)	Loss 0.6076 (0.8225)	Prec@1 75.00000 (74.56896)	Prec@5 100.00000 (100.00000)
Epoch: [72][30/60]	Time 0.07724 (0.37018)	Data 0.00046 (0.26866)	Loss 1.6840 (0.8512)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [72][31/60]	Time 0.07933 (0.36079)	Data 0.00048 (0.26001)	Loss 2.3543 (0.8997)	Prec@1 37.50000 (72.98387)	Prec@5 87.50000 (99.59677)
Epoch: [72][32/60]	Time 0.07839 (0.35197)	Data 0.00045 (0.25190)	Loss 0.7012 (0.8935)	Prec@1 75.00000 (73.04688)	Prec@5 100.00000 (99.60938)
Epoch: [72][33/60]	Time 0.05641 (0.34301)	Data 0.00270 (0.24434)	Loss 0.1001 (0.8695)	Prec@1 87.50000 (73.48485)	Prec@5 100.00000 (99.62122)
Epoch: [72][34/60]	Time 0.05693 (0.33460)	Data 0.00049 (0.23717)	Loss 1.1761 (0.8785)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.63235)
Epoch: [72][35/60]	Time 0.02690 (0.32581)	Data 0.00073 (0.23042)	Loss 1.4344 (0.8944)	Prec@1 75.00000 (73.57143)	Prec@5 87.50000 (99.28571)
Epoch: [72][36/60]	Time 0.02366 (0.31741)	Data 0.00078 (0.22404)	Loss 0.9757 (0.8966)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (99.30556)
Epoch: [72][37/60]	Time 0.02321 (0.30946)	Data 0.00049 (0.21800)	Loss 1.4423 (0.9114)	Prec@1 62.50000 (72.97298)	Prec@5 100.00000 (99.32433)
Epoch: [72][38/60]	Time 0.02275 (0.30192)	Data 0.00080 (0.21228)	Loss 2.2202 (0.9458)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (99.34211)
Epoch: [72][39/60]	Time 0.02272 (0.29476)	Data 0.00095 (0.20686)	Loss 0.1326 (0.9250)	Prec@1 87.50000 (72.75641)	Prec@5 100.00000 (99.35898)
Epoch: [72][40/60]	Time 0.02169 (0.28793)	Data 0.00105 (0.20172)	Loss 0.2305 (0.9076)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (99.37500)
Epoch: [72][41/60]	Time 0.02324 (0.28148)	Data 0.00097 (0.19682)	Loss 0.5725 (0.8994)	Prec@1 75.00000 (73.17073)	Prec@5 100.00000 (99.39024)
Epoch: [72][42/60]	Time 0.02268 (0.27531)	Data 0.00098 (0.19216)	Loss 1.0970 (0.9041)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (99.40476)
Epoch: [72][43/60]	Time 0.02279 (0.26944)	Data 0.00106 (0.18771)	Loss 0.6594 (0.8984)	Prec@1 62.50000 (72.96512)	Prec@5 100.00000 (99.41860)
Epoch: [72][44/60]	Time 0.02276 (0.26383)	Data 0.00103 (0.18347)	Loss 0.7763 (0.8957)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (99.43182)
Epoch: [72][45/60]	Time 0.02277 (0.25848)	Data 0.00105 (0.17942)	Loss 0.7734 (0.8929)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.44445)
Epoch: [72][46/60]	Time 0.02374 (0.25337)	Data 0.00122 (0.17554)	Loss 1.0510 (0.8964)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.45652)
Epoch: [72][47/60]	Time 0.02264 (0.24847)	Data 0.00100 (0.17183)	Loss 1.0125 (0.8988)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.20213)
Epoch: [72][48/60]	Time 0.02241 (0.24376)	Data 0.00040 (0.16826)	Loss 0.4598 (0.8897)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.21875)
Epoch: [72][49/60]	Time 0.02225 (0.23924)	Data 0.00049 (0.16483)	Loss 0.2705 (0.8771)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.23470)
Epoch: [72][50/60]	Time 0.02246 (0.23490)	Data 0.00043 (0.16155)	Loss 0.7994 (0.8755)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.25000)
Epoch: [72][51/60]	Time 0.02255 (0.23074)	Data 0.00046 (0.15839)	Loss 0.3342 (0.8649)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.26471)
Epoch: [72][52/60]	Time 0.02216 (0.22673)	Data 0.00040 (0.15535)	Loss 0.8921 (0.8654)	Prec@1 50.00000 (73.07693)	Prec@5 87.50000 (99.03847)
Epoch: [72][53/60]	Time 0.02211 (0.22286)	Data 0.00043 (0.15243)	Loss 0.6946 (0.8622)	Prec@1 75.00000 (73.11320)	Prec@5 100.00000 (99.05660)
Epoch: [72][54/60]	Time 0.02203 (0.21915)	Data 0.00039 (0.14961)	Loss 0.8991 (0.8629)	Prec@1 75.00000 (73.14815)	Prec@5 100.00000 (99.07407)
Epoch: [72][55/60]	Time 0.02249 (0.21557)	Data 0.00043 (0.14690)	Loss 1.2402 (0.8697)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (98.86363)
Epoch: [72][56/60]	Time 0.02274 (0.21213)	Data 0.00044 (0.14428)	Loss 0.7012 (0.8667)	Prec@1 75.00000 (72.99107)	Prec@5 100.00000 (98.88393)
Epoch: [72][57/60]	Time 0.02198 (0.20879)	Data 0.00042 (0.14176)	Loss 1.4256 (0.8765)	Prec@1 62.50000 (72.80701)	Prec@5 87.50000 (98.68421)
Epoch: [72][58/60]	Time 0.02218 (0.20557)	Data 0.00050 (0.13932)	Loss 0.7028 (0.8735)	Prec@1 62.50000 (72.62931)	Prec@5 100.00000 (98.70689)
Epoch: [72][59/60]	Time 0.02213 (0.20246)	Data 0.00050 (0.13697)	Loss 0.7950 (0.8722)	Prec@1 87.50000 (72.88136)	Prec@5 100.00000 (98.72881)
Epoch: [72][60/60]	Time 0.02279 (0.19947)	Data 0.00042 (0.13469)	Loss 0.5435 (0.8667)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (98.75001)
train at epoch 73
train at epoch 73
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [73][0/272]	 lr: 0.00000	Time 5.947 (5.947)	Data 4.606 (4.606)	Loss 0.0185 (0.0185)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [73][10/272]	 lr: 0.00000	Time 0.401 (1.295)	Data 0.129 (0.776)	Loss 0.0606 (0.0188)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [73][20/272]	 lr: 0.00000	Time 0.439 (0.872)	Data 0.130 (0.469)	Loss 0.3857 (0.0353)	Prec@1 87.50000 (99.40476)	Prec@5 100.00000 (100.00000)
Epoch: [73][30/272]	 lr: 0.00000	Time 0.478 (0.732)	Data 0.129 (0.361)	Loss 0.0054 (0.0281)	Prec@1 100.00000 (99.59677)	Prec@5 100.00000 (100.00000)
Epoch: [73][40/272]	 lr: 0.00000	Time 0.358 (0.654)	Data 0.129 (0.304)	Loss 0.0073 (0.0258)	Prec@1 100.00000 (99.69512)	Prec@5 100.00000 (100.00000)
Epoch: [73][50/272]	 lr: 0.00000	Time 0.533 (0.615)	Data 0.139 (0.270)	Loss 0.0051 (0.0232)	Prec@1 100.00000 (99.75491)	Prec@5 100.00000 (100.00000)
Epoch: [73][60/272]	 lr: 0.00000	Time 0.443 (0.587)	Data 0.140 (0.248)	Loss 0.0098 (0.0215)	Prec@1 100.00000 (99.79507)	Prec@5 100.00000 (99.99999)
Epoch: [73][70/272]	 lr: 0.00000	Time 0.445 (0.569)	Data 0.127 (0.231)	Loss 0.0449 (0.0211)	Prec@1 96.87500 (99.77993)	Prec@5 100.00000 (100.00000)
Epoch: [73][80/272]	 lr: 0.00000	Time 0.470 (0.554)	Data 0.128 (0.218)	Loss 0.0061 (0.0210)	Prec@1 100.00000 (99.76852)	Prec@5 100.00000 (100.00000)
Epoch: [73][90/272]	 lr: 0.00000	Time 0.403 (0.545)	Data 0.113 (0.208)	Loss 0.0112 (0.0201)	Prec@1 100.00000 (99.79396)	Prec@5 100.00000 (100.00000)
Epoch: [73][100/272]	 lr: 0.00000	Time 0.391 (0.536)	Data 0.129 (0.200)	Loss 0.0107 (0.0198)	Prec@1 100.00000 (99.81435)	Prec@5 100.00000 (100.00000)
Epoch: [73][110/272]	 lr: 0.00000	Time 0.480 (0.526)	Data 0.140 (0.194)	Loss 0.2215 (0.0215)	Prec@1 96.87500 (99.80293)	Prec@5 100.00000 (100.00000)
Epoch: [73][120/272]	 lr: 0.00000	Time 0.458 (0.520)	Data 0.107 (0.189)	Loss 0.0144 (0.0210)	Prec@1 100.00000 (99.81921)	Prec@5 100.00000 (99.99999)
Epoch: [73][130/272]	 lr: 0.00000	Time 0.400 (0.516)	Data 0.128 (0.184)	Loss 0.0181 (0.0202)	Prec@1 100.00000 (99.83302)	Prec@5 100.00000 (100.00000)
Epoch: [73][140/272]	 lr: 0.00000	Time 0.503 (0.510)	Data 0.129 (0.180)	Loss 0.0184 (0.0195)	Prec@1 100.00000 (99.84486)	Prec@5 100.00000 (100.00000)
Epoch: [73][150/272]	 lr: 0.00000	Time 0.501 (0.504)	Data 0.150 (0.177)	Loss 0.0386 (0.0191)	Prec@1 100.00000 (99.85513)	Prec@5 100.00000 (100.00000)
Epoch: [73][160/272]	 lr: 0.00000	Time 0.446 (0.501)	Data 0.128 (0.175)	Loss 0.0025 (0.0189)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [73][170/272]	 lr: 0.00000	Time 0.514 (0.498)	Data 0.142 (0.172)	Loss 0.0060 (0.0193)	Prec@1 100.00000 (99.85381)	Prec@5 100.00000 (100.00000)
Epoch: [73][180/272]	 lr: 0.00000	Time 0.456 (0.495)	Data 0.120 (0.170)	Loss 0.0196 (0.0190)	Prec@1 100.00000 (99.86189)	Prec@5 100.00000 (100.00001)
Epoch: [73][190/272]	 lr: 0.00000	Time 0.411 (0.492)	Data 0.128 (0.168)	Loss 0.0104 (0.0190)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [73][200/272]	 lr: 0.00000	Time 0.499 (0.490)	Data 0.129 (0.166)	Loss 0.0433 (0.0190)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [73][210/272]	 lr: 0.00000	Time 0.383 (0.488)	Data 0.101 (0.164)	Loss 0.0075 (0.0206)	Prec@1 100.00000 (99.80746)	Prec@5 100.00000 (100.00000)
Epoch: [73][220/272]	 lr: 0.00000	Time 0.445 (0.485)	Data 0.127 (0.163)	Loss 0.0150 (0.0202)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00001)
Epoch: [73][230/272]	 lr: 0.00000	Time 0.474 (0.483)	Data 0.129 (0.162)	Loss 0.0048 (0.0199)	Prec@1 100.00000 (99.82413)	Prec@5 100.00000 (100.00000)
Epoch: [73][240/272]	 lr: 0.00000	Time 0.295 (0.481)	Data 0.131 (0.161)	Loss 0.0094 (0.0195)	Prec@1 100.00000 (99.83144)	Prec@5 100.00000 (100.00001)
Epoch: [73][250/272]	 lr: 0.00000	Time 0.239 (0.471)	Data 0.128 (0.159)	Loss 0.0164 (0.0192)	Prec@1 100.00000 (99.83815)	Prec@5 100.00000 (100.00000)
Epoch: [73][260/272]	 lr: 0.00000	Time 0.237 (0.462)	Data 0.129 (0.158)	Loss 0.0168 (0.0193)	Prec@1 100.00000 (99.84435)	Prec@5 100.00000 (100.00000)
Epoch: [73][270/272]	 lr: 0.00000	Time 0.239 (0.454)	Data 0.129 (0.157)	Loss 0.0152 (0.0198)	Prec@1 100.00000 (99.81550)	Prec@5 100.00000 (100.00000)
validation at epoch 73
validation at epoch 73
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [73][1/60]	Time 4.27199 (4.27199)	Data 4.15238 (4.15238)	Loss 0.4135 (0.4135)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [73][2/60]	Time 1.84662 (3.05931)	Data 1.63899 (2.89568)	Loss 0.5223 (0.4679)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [73][3/60]	Time 0.24325 (2.12062)	Data 0.00060 (1.93066)	Loss 1.1906 (0.7088)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [73][4/60]	Time 1.12097 (1.87071)	Data 0.98583 (1.69445)	Loss 0.2076 (0.5835)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [73][5/60]	Time 0.25223 (1.54701)	Data 0.00473 (1.35651)	Loss 0.2574 (0.5183)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [73][6/60]	Time 0.18152 (1.31943)	Data 0.04497 (1.13792)	Loss 0.3622 (0.4923)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [73][7/60]	Time 0.22695 (1.16336)	Data 0.06739 (0.98498)	Loss 1.2098 (0.5948)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (100.00001)
Epoch: [73][8/60]	Time 0.14854 (1.03651)	Data 0.01120 (0.86326)	Loss 1.1451 (0.6636)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [73][9/60]	Time 0.25004 (0.94912)	Data 0.01163 (0.76864)	Loss 0.5750 (0.6537)	Prec@1 87.50000 (81.94444)	Prec@5 100.00000 (100.00000)
Epoch: [73][10/60]	Time 0.15728 (0.86994)	Data 0.01136 (0.69291)	Loss 0.5314 (0.6415)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [73][11/60]	Time 0.16649 (0.80599)	Data 0.01696 (0.63146)	Loss 0.5156 (0.6300)	Prec@1 87.50000 (81.81818)	Prec@5 100.00000 (100.00000)
Epoch: [73][12/60]	Time 0.22322 (0.75742)	Data 0.08477 (0.58590)	Loss 1.2967 (0.6856)	Prec@1 62.50000 (80.20834)	Prec@5 100.00000 (100.00000)
Epoch: [73][13/60]	Time 0.09348 (0.70635)	Data 0.00070 (0.54089)	Loss 2.1059 (0.7948)	Prec@1 50.00000 (77.88462)	Prec@5 100.00000 (100.00000)
Epoch: [73][14/60]	Time 0.17127 (0.66813)	Data 0.00505 (0.50261)	Loss 0.0542 (0.7419)	Prec@1 100.00000 (79.46429)	Prec@5 100.00000 (100.00001)
Epoch: [73][15/60]	Time 0.20650 (0.63736)	Data 0.07309 (0.47398)	Loss 1.1998 (0.7725)	Prec@1 50.00000 (77.50001)	Prec@5 100.00000 (100.00001)
Epoch: [73][16/60]	Time 0.18483 (0.60907)	Data 0.05558 (0.44783)	Loss 0.9198 (0.7817)	Prec@1 75.00000 (77.34375)	Prec@5 100.00000 (100.00000)
Epoch: [73][17/60]	Time 0.22776 (0.58664)	Data 0.07614 (0.42596)	Loss 0.3702 (0.7575)	Prec@1 87.50000 (77.94118)	Prec@5 100.00000 (100.00000)
Epoch: [73][18/60]	Time 0.08130 (0.55857)	Data 0.01860 (0.40333)	Loss 2.1760 (0.8363)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [73][19/60]	Time 0.08585 (0.53369)	Data 0.02627 (0.38349)	Loss 0.1384 (0.7996)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (100.00000)
Epoch: [73][20/60]	Time 0.06247 (0.51013)	Data 0.00108 (0.36437)	Loss 2.0036 (0.8598)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [73][21/60]	Time 0.07229 (0.48928)	Data 0.00593 (0.34730)	Loss 0.5709 (0.8460)	Prec@1 75.00000 (77.97619)	Prec@5 100.00000 (100.00000)
Epoch: [73][22/60]	Time 0.16404 (0.47449)	Data 0.03555 (0.33313)	Loss 0.5137 (0.8309)	Prec@1 75.00000 (77.84091)	Prec@5 100.00000 (100.00000)
Epoch: [73][23/60]	Time 0.15063 (0.46041)	Data 0.00221 (0.31874)	Loss 0.8468 (0.8316)	Prec@1 62.50000 (77.17391)	Prec@5 100.00000 (100.00000)
Epoch: [73][24/60]	Time 0.16181 (0.44797)	Data 0.01728 (0.30618)	Loss 0.7917 (0.8299)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [73][25/60]	Time 0.27336 (0.44099)	Data 0.07639 (0.29699)	Loss 0.4549 (0.8149)	Prec@1 87.50000 (77.00000)	Prec@5 100.00000 (100.00000)
Epoch: [73][26/60]	Time 0.20198 (0.43179)	Data 0.02011 (0.28634)	Loss 0.0543 (0.7857)	Prec@1 100.00000 (77.88462)	Prec@5 100.00000 (100.00000)
Epoch: [73][27/60]	Time 0.06714 (0.41829)	Data 0.01245 (0.27619)	Loss 0.5611 (0.7774)	Prec@1 50.00000 (76.85185)	Prec@5 100.00000 (100.00000)
Epoch: [73][28/60]	Time 0.15170 (0.40877)	Data 0.00922 (0.26666)	Loss 0.4722 (0.7665)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (100.00001)
Epoch: [73][29/60]	Time 0.04405 (0.39619)	Data 0.00050 (0.25748)	Loss 0.5534 (0.7591)	Prec@1 75.00000 (77.15517)	Prec@5 100.00000 (100.00000)
Epoch: [73][30/60]	Time 0.03809 (0.38425)	Data 0.00049 (0.24892)	Loss 1.6511 (0.7888)	Prec@1 62.50000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [73][31/60]	Time 0.03527 (0.37300)	Data 0.00043 (0.24090)	Loss 2.2843 (0.8371)	Prec@1 37.50000 (75.40322)	Prec@5 87.50000 (99.59677)
Epoch: [73][32/60]	Time 0.05443 (0.36304)	Data 0.01247 (0.23376)	Loss 0.4955 (0.8264)	Prec@1 87.50000 (75.78125)	Prec@5 100.00000 (99.60938)
Epoch: [73][33/60]	Time 0.04704 (0.35347)	Data 0.00040 (0.22669)	Loss 0.0756 (0.8037)	Prec@1 100.00000 (76.51515)	Prec@5 100.00000 (99.62122)
Epoch: [73][34/60]	Time 0.06159 (0.34488)	Data 0.00061 (0.22004)	Loss 1.0936 (0.8122)	Prec@1 75.00000 (76.47059)	Prec@5 100.00000 (99.63235)
Epoch: [73][35/60]	Time 0.04400 (0.33628)	Data 0.01345 (0.21414)	Loss 1.4907 (0.8316)	Prec@1 75.00000 (76.42857)	Prec@5 87.50000 (99.28571)
Epoch: [73][36/60]	Time 0.03506 (0.32792)	Data 0.00387 (0.20830)	Loss 0.8272 (0.8314)	Prec@1 62.50000 (76.04166)	Prec@5 100.00000 (99.30556)
Epoch: [73][37/60]	Time 0.02948 (0.31985)	Data 0.00038 (0.20268)	Loss 1.3909 (0.8466)	Prec@1 62.50000 (75.67567)	Prec@5 100.00000 (99.32433)
Epoch: [73][38/60]	Time 0.03329 (0.31231)	Data 0.00403 (0.19745)	Loss 2.1800 (0.8817)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.34211)
Epoch: [73][39/60]	Time 0.02629 (0.30498)	Data 0.00335 (0.19247)	Loss 0.1047 (0.8617)	Prec@1 100.00000 (75.64103)	Prec@5 100.00000 (99.35898)
Epoch: [73][40/60]	Time 0.02279 (0.29792)	Data 0.00044 (0.18767)	Loss 0.2177 (0.8456)	Prec@1 87.50000 (75.93750)	Prec@5 100.00000 (99.37500)
Epoch: [73][41/60]	Time 0.02264 (0.29121)	Data 0.00048 (0.18311)	Loss 0.4106 (0.8350)	Prec@1 87.50000 (76.21951)	Prec@5 100.00000 (99.39024)
Epoch: [73][42/60]	Time 0.02321 (0.28483)	Data 0.00067 (0.17876)	Loss 1.1075 (0.8415)	Prec@1 75.00000 (76.19048)	Prec@5 100.00000 (99.40476)
Epoch: [73][43/60]	Time 0.02195 (0.27871)	Data 0.00047 (0.17462)	Loss 0.5332 (0.8343)	Prec@1 75.00000 (76.16279)	Prec@5 100.00000 (99.41860)
Epoch: [73][44/60]	Time 0.02261 (0.27289)	Data 0.00061 (0.17066)	Loss 0.6334 (0.8298)	Prec@1 75.00000 (76.13637)	Prec@5 100.00000 (99.43182)
Epoch: [73][45/60]	Time 0.02199 (0.26732)	Data 0.00050 (0.16688)	Loss 0.7720 (0.8285)	Prec@1 87.50000 (76.38889)	Prec@5 100.00000 (99.44445)
Epoch: [73][46/60]	Time 0.02246 (0.26199)	Data 0.00069 (0.16327)	Loss 1.2261 (0.8371)	Prec@1 50.00000 (75.81522)	Prec@5 100.00000 (99.45652)
Epoch: [73][47/60]	Time 0.02248 (0.25690)	Data 0.00051 (0.15980)	Loss 1.0269 (0.8412)	Prec@1 75.00000 (75.79787)	Prec@5 87.50000 (99.20213)
Epoch: [73][48/60]	Time 0.02271 (0.25202)	Data 0.00049 (0.15649)	Loss 0.3133 (0.8302)	Prec@1 87.50000 (76.04167)	Prec@5 100.00000 (99.21875)
Epoch: [73][49/60]	Time 0.02248 (0.24733)	Data 0.00049 (0.15330)	Loss 0.3652 (0.8207)	Prec@1 87.50000 (76.27551)	Prec@5 100.00000 (99.23470)
Epoch: [73][50/60]	Time 0.02185 (0.24282)	Data 0.00044 (0.15024)	Loss 0.6355 (0.8170)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (99.25000)
Epoch: [73][51/60]	Time 0.02193 (0.23849)	Data 0.00043 (0.14731)	Loss 0.4219 (0.8092)	Prec@1 75.00000 (76.22549)	Prec@5 100.00000 (99.26471)
Epoch: [73][52/60]	Time 0.02172 (0.23432)	Data 0.00044 (0.14448)	Loss 0.8168 (0.8094)	Prec@1 62.50000 (75.96154)	Prec@5 87.50000 (99.03847)
Epoch: [73][53/60]	Time 0.02246 (0.23033)	Data 0.00041 (0.14176)	Loss 0.5480 (0.8044)	Prec@1 75.00000 (75.94340)	Prec@5 100.00000 (99.05660)
Epoch: [73][54/60]	Time 0.02182 (0.22647)	Data 0.00045 (0.13915)	Loss 0.8638 (0.8055)	Prec@1 75.00000 (75.92593)	Prec@5 100.00000 (99.07407)
Epoch: [73][55/60]	Time 0.02175 (0.22274)	Data 0.00044 (0.13662)	Loss 1.1993 (0.8127)	Prec@1 62.50000 (75.68182)	Prec@5 87.50000 (98.86363)
Epoch: [73][56/60]	Time 0.02214 (0.21916)	Data 0.00051 (0.13419)	Loss 0.7655 (0.8119)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (98.88393)
Epoch: [73][57/60]	Time 0.02191 (0.21570)	Data 0.00048 (0.13185)	Loss 1.4455 (0.8230)	Prec@1 62.50000 (75.65790)	Prec@5 87.50000 (98.68421)
Epoch: [73][58/60]	Time 0.02266 (0.21237)	Data 0.00043 (0.12958)	Loss 0.7374 (0.8215)	Prec@1 75.00000 (75.64655)	Prec@5 100.00000 (98.70689)
Epoch: [73][59/60]	Time 0.02245 (0.20915)	Data 0.00059 (0.12740)	Loss 0.7266 (0.8199)	Prec@1 87.50000 (75.84746)	Prec@5 100.00000 (98.72881)
Epoch: [73][60/60]	Time 0.02167 (0.20603)	Data 0.00043 (0.12528)	Loss 0.5053 (0.8147)	Prec@1 87.50000 (76.04167)	Prec@5 100.00000 (98.75001)
train at epoch 74
train at epoch 74
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [74][0/272]	 lr: 0.00000	Time 8.485 (8.485)	Data 6.887 (6.887)	Loss 0.0107 (0.0107)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][10/272]	 lr: 0.00000	Time 0.442 (1.323)	Data 0.115 (0.737)	Loss 0.0040 (0.0204)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][20/272]	 lr: 0.00000	Time 0.475 (0.910)	Data 0.131 (0.448)	Loss 0.0584 (0.0228)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][30/272]	 lr: 0.00000	Time 0.429 (0.755)	Data 0.129 (0.347)	Loss 0.0071 (0.0218)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][40/272]	 lr: 0.00000	Time 0.448 (0.677)	Data 0.127 (0.294)	Loss 0.0150 (0.0195)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][50/272]	 lr: 0.00000	Time 0.458 (0.634)	Data 0.132 (0.262)	Loss 0.0065 (0.0192)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][60/272]	 lr: 0.00000	Time 0.437 (0.602)	Data 0.141 (0.240)	Loss 0.0079 (0.0204)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [74][70/272]	 lr: 0.00000	Time 0.456 (0.579)	Data 0.118 (0.224)	Loss 0.0070 (0.0201)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][80/272]	 lr: 0.00000	Time 0.435 (0.561)	Data 0.162 (0.213)	Loss 0.0317 (0.0205)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][90/272]	 lr: 0.00000	Time 0.293 (0.546)	Data 0.128 (0.204)	Loss 0.0210 (0.0200)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][100/272]	 lr: 0.00000	Time 0.414 (0.537)	Data 0.113 (0.196)	Loss 0.0157 (0.0192)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][110/272]	 lr: 0.00000	Time 0.507 (0.530)	Data 0.147 (0.190)	Loss 0.0108 (0.0186)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][120/272]	 lr: 0.00000	Time 0.437 (0.521)	Data 0.129 (0.185)	Loss 0.0219 (0.0187)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [74][130/272]	 lr: 0.00000	Time 0.415 (0.515)	Data 0.118 (0.180)	Loss 0.0139 (0.0186)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [74][140/272]	 lr: 0.00000	Time 0.356 (0.510)	Data 0.119 (0.176)	Loss 0.0191 (0.0188)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [74][150/272]	 lr: 0.00000	Time 0.387 (0.506)	Data 0.128 (0.173)	Loss 0.0206 (0.0182)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [74][160/272]	 lr: 0.00000	Time 0.569 (0.505)	Data 0.149 (0.170)	Loss 0.0259 (0.0181)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [74][170/272]	 lr: 0.00000	Time 0.439 (0.500)	Data 0.129 (0.168)	Loss 0.0112 (0.0180)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [74][180/272]	 lr: 0.00000	Time 0.423 (0.498)	Data 0.129 (0.166)	Loss 0.0207 (0.0182)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [74][190/272]	 lr: 0.00000	Time 0.350 (0.495)	Data 0.093 (0.164)	Loss 0.0130 (0.0180)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [74][200/272]	 lr: 0.00000	Time 0.369 (0.492)	Data 0.106 (0.162)	Loss 0.0124 (0.0176)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [74][210/272]	 lr: 0.00000	Time 0.363 (0.489)	Data 0.128 (0.161)	Loss 0.0074 (0.0175)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [74][220/272]	 lr: 0.00000	Time 0.473 (0.486)	Data 0.121 (0.160)	Loss 0.0092 (0.0173)	Prec@1 100.00000 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [74][230/272]	 lr: 0.00000	Time 0.404 (0.485)	Data 0.127 (0.158)	Loss 0.0092 (0.0173)	Prec@1 100.00000 (99.94588)	Prec@5 100.00000 (100.00000)
Epoch: [74][240/272]	 lr: 0.00000	Time 0.257 (0.482)	Data 0.125 (0.157)	Loss 0.0104 (0.0173)	Prec@1 100.00000 (99.94814)	Prec@5 100.00000 (100.00001)
Epoch: [74][250/272]	 lr: 0.00000	Time 0.239 (0.473)	Data 0.129 (0.156)	Loss 0.0073 (0.0173)	Prec@1 100.00000 (99.95020)	Prec@5 100.00000 (100.00000)
Epoch: [74][260/272]	 lr: 0.00000	Time 0.239 (0.464)	Data 0.128 (0.155)	Loss 0.0318 (0.0174)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [74][270/272]	 lr: 0.00000	Time 0.239 (0.456)	Data 0.129 (0.154)	Loss 0.0180 (0.0176)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 74
validation at epoch 74
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [74][1/60]	Time 7.41748 (7.41748)	Data 7.33512 (7.33512)	Loss 0.4499 (0.4499)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][2/60]	Time 0.17849 (3.79798)	Data 0.03460 (3.68486)	Loss 0.4305 (0.4402)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [74][3/60]	Time 0.17616 (2.59071)	Data 0.03625 (2.46866)	Loss 1.3136 (0.7314)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][4/60]	Time 0.09681 (1.96723)	Data 0.00574 (1.85293)	Loss 0.2459 (0.6100)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [74][5/60]	Time 0.20176 (1.61414)	Data 0.00732 (1.48381)	Loss 0.5331 (0.5946)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [74][6/60]	Time 0.14605 (1.36946)	Data 0.04819 (1.24454)	Loss 0.5963 (0.5949)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [74][7/60]	Time 0.15600 (1.19611)	Data 0.00752 (1.06782)	Loss 1.2006 (0.6814)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [74][8/60]	Time 0.17327 (1.06825)	Data 0.01152 (0.93578)	Loss 1.2469 (0.7521)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [74][9/60]	Time 0.14331 (0.96548)	Data 0.00923 (0.83283)	Loss 0.8356 (0.7614)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [74][10/60]	Time 0.16025 (0.88496)	Data 0.08850 (0.75840)	Loss 0.5507 (0.7403)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (100.00000)
Epoch: [74][11/60]	Time 0.12673 (0.81603)	Data 0.00947 (0.69032)	Loss 0.5529 (0.7233)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [74][12/60]	Time 0.23991 (0.76802)	Data 0.07455 (0.63900)	Loss 1.1958 (0.7627)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [74][13/60]	Time 0.14718 (0.72026)	Data 0.02551 (0.59181)	Loss 1.9189 (0.8516)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (100.00000)
Epoch: [74][14/60]	Time 0.17816 (0.68154)	Data 0.01286 (0.55046)	Loss 0.1780 (0.8035)	Prec@1 87.50000 (72.32143)	Prec@5 100.00000 (100.00001)
Epoch: [74][15/60]	Time 0.09207 (0.64224)	Data 0.00957 (0.51440)	Loss 1.0721 (0.8214)	Prec@1 50.00000 (70.83334)	Prec@5 100.00000 (100.00001)
Epoch: [74][16/60]	Time 0.08443 (0.60738)	Data 0.00057 (0.48228)	Loss 1.1339 (0.8409)	Prec@1 75.00000 (71.09375)	Prec@5 100.00000 (100.00000)
Epoch: [74][17/60]	Time 0.06258 (0.57533)	Data 0.00501 (0.45421)	Loss 0.3667 (0.8130)	Prec@1 87.50000 (72.05882)	Prec@5 100.00000 (100.00000)
Epoch: [74][18/60]	Time 0.09334 (0.54855)	Data 0.01361 (0.42973)	Loss 2.4609 (0.9046)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (100.00000)
Epoch: [74][19/60]	Time 0.08062 (0.52393)	Data 0.00126 (0.40718)	Loss 0.2362 (0.8694)	Prec@1 87.50000 (73.02631)	Prec@5 100.00000 (100.00000)
Epoch: [74][20/60]	Time 0.07854 (0.50166)	Data 0.00152 (0.38690)	Loss 2.4614 (0.9490)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (99.37500)
Epoch: [74][21/60]	Time 0.19141 (0.48688)	Data 0.06501 (0.37157)	Loss 0.5508 (0.9300)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (99.40476)
Epoch: [74][22/60]	Time 0.12981 (0.47065)	Data 0.01789 (0.35549)	Loss 0.6254 (0.9162)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.43182)
Epoch: [74][23/60]	Time 0.14955 (0.45669)	Data 0.00725 (0.34035)	Loss 1.1731 (0.9274)	Prec@1 62.50000 (72.28261)	Prec@5 100.00000 (99.45652)
Epoch: [74][24/60]	Time 0.30114 (0.45021)	Data 0.07652 (0.32936)	Loss 0.6275 (0.9149)	Prec@1 75.00000 (72.39584)	Prec@5 100.00000 (99.47917)
Epoch: [74][25/60]	Time 0.19980 (0.44019)	Data 0.00059 (0.31621)	Loss 0.5240 (0.8992)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.50000)
Epoch: [74][26/60]	Time 0.13399 (0.42842)	Data 0.02335 (0.30494)	Loss 0.0608 (0.8670)	Prec@1 100.00000 (73.55769)	Prec@5 100.00000 (99.51923)
Epoch: [74][27/60]	Time 0.14125 (0.41778)	Data 0.03936 (0.29511)	Loss 0.8788 (0.8674)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (99.53704)
Epoch: [74][28/60]	Time 0.28886 (0.41318)	Data 0.01435 (0.28508)	Loss 0.4149 (0.8513)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (99.55357)
Epoch: [74][29/60]	Time 0.05881 (0.40096)	Data 0.00059 (0.27527)	Loss 0.8429 (0.8510)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (99.56896)
Epoch: [74][30/60]	Time 0.05114 (0.38930)	Data 0.00048 (0.26611)	Loss 1.9166 (0.8865)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (99.58334)
Epoch: [74][31/60]	Time 0.06292 (0.37877)	Data 0.00262 (0.25761)	Loss 2.6498 (0.9434)	Prec@1 25.00000 (71.77419)	Prec@5 100.00000 (99.59677)
Epoch: [74][32/60]	Time 0.03543 (0.36804)	Data 0.00052 (0.24958)	Loss 0.9023 (0.9421)	Prec@1 62.50000 (71.48438)	Prec@5 100.00000 (99.60938)
Epoch: [74][33/60]	Time 0.03375 (0.35791)	Data 0.00096 (0.24204)	Loss 0.1208 (0.9172)	Prec@1 87.50000 (71.96970)	Prec@5 100.00000 (99.62122)
Epoch: [74][34/60]	Time 0.02747 (0.34819)	Data 0.00065 (0.23494)	Loss 1.1901 (0.9252)	Prec@1 62.50000 (71.69118)	Prec@5 100.00000 (99.63235)
Epoch: [74][35/60]	Time 0.02397 (0.33893)	Data 0.00066 (0.22825)	Loss 1.4396 (0.9399)	Prec@1 75.00000 (71.78571)	Prec@5 87.50000 (99.28571)
Epoch: [74][36/60]	Time 0.02314 (0.33016)	Data 0.00049 (0.22192)	Loss 1.2773 (0.9493)	Prec@1 62.50000 (71.52778)	Prec@5 100.00000 (99.30556)
Epoch: [74][37/60]	Time 0.02282 (0.32185)	Data 0.00089 (0.21595)	Loss 1.5010 (0.9642)	Prec@1 62.50000 (71.28378)	Prec@5 100.00000 (99.32433)
Epoch: [74][38/60]	Time 0.02245 (0.31397)	Data 0.00077 (0.21029)	Loss 2.2842 (0.9989)	Prec@1 50.00000 (70.72369)	Prec@5 100.00000 (99.34211)
Epoch: [74][39/60]	Time 0.02267 (0.30650)	Data 0.00098 (0.20492)	Loss 0.1564 (0.9773)	Prec@1 87.50000 (71.15385)	Prec@5 100.00000 (99.35898)
Epoch: [74][40/60]	Time 0.02221 (0.29939)	Data 0.00046 (0.19981)	Loss 0.3025 (0.9605)	Prec@1 87.50000 (71.56250)	Prec@5 100.00000 (99.37500)
Epoch: [74][41/60]	Time 0.02311 (0.29265)	Data 0.00048 (0.19495)	Loss 0.6736 (0.9535)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (99.39024)
Epoch: [74][42/60]	Time 0.02218 (0.28621)	Data 0.00046 (0.19032)	Loss 1.0675 (0.9562)	Prec@1 75.00000 (71.72619)	Prec@5 100.00000 (99.40476)
Epoch: [74][43/60]	Time 0.02172 (0.28006)	Data 0.00041 (0.18590)	Loss 0.8524 (0.9538)	Prec@1 62.50000 (71.51163)	Prec@5 100.00000 (99.41860)
Epoch: [74][44/60]	Time 0.02208 (0.27420)	Data 0.00042 (0.18168)	Loss 0.9062 (0.9527)	Prec@1 75.00000 (71.59091)	Prec@5 100.00000 (99.43182)
Epoch: [74][45/60]	Time 0.02201 (0.26860)	Data 0.00047 (0.17766)	Loss 0.7526 (0.9482)	Prec@1 87.50000 (71.94444)	Prec@5 100.00000 (99.44445)
Epoch: [74][46/60]	Time 0.02280 (0.26325)	Data 0.00044 (0.17380)	Loss 0.7967 (0.9449)	Prec@1 50.00000 (71.46739)	Prec@5 100.00000 (99.45652)
Epoch: [74][47/60]	Time 0.02269 (0.25813)	Data 0.00054 (0.17012)	Loss 1.0625 (0.9475)	Prec@1 75.00000 (71.54255)	Prec@5 87.50000 (99.20213)
Epoch: [74][48/60]	Time 0.02187 (0.25321)	Data 0.00039 (0.16658)	Loss 0.5659 (0.9395)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (99.21875)
Epoch: [74][49/60]	Time 0.02208 (0.24850)	Data 0.00042 (0.16319)	Loss 0.1811 (0.9240)	Prec@1 100.00000 (72.44897)	Prec@5 100.00000 (99.23470)
Epoch: [74][50/60]	Time 0.02159 (0.24396)	Data 0.00043 (0.15994)	Loss 0.8576 (0.9227)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.25000)
Epoch: [74][51/60]	Time 0.02241 (0.23961)	Data 0.00043 (0.15681)	Loss 0.3945 (0.9123)	Prec@1 75.00000 (72.54902)	Prec@5 100.00000 (99.26471)
Epoch: [74][52/60]	Time 0.02223 (0.23543)	Data 0.00049 (0.15380)	Loss 1.2136 (0.9181)	Prec@1 25.00000 (71.63462)	Prec@5 100.00000 (99.27885)
Epoch: [74][53/60]	Time 0.02192 (0.23140)	Data 0.00044 (0.15091)	Loss 0.7469 (0.9149)	Prec@1 75.00000 (71.69811)	Prec@5 100.00000 (99.29246)
Epoch: [74][54/60]	Time 0.02180 (0.22752)	Data 0.00040 (0.14812)	Loss 1.0466 (0.9173)	Prec@1 75.00000 (71.75926)	Prec@5 100.00000 (99.30556)
Epoch: [74][55/60]	Time 0.02193 (0.22378)	Data 0.00042 (0.14544)	Loss 1.4116 (0.9263)	Prec@1 62.50000 (71.59090)	Prec@5 87.50000 (99.09090)
Epoch: [74][56/60]	Time 0.02263 (0.22019)	Data 0.00048 (0.14285)	Loss 0.6036 (0.9206)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (99.10715)
Epoch: [74][57/60]	Time 0.02234 (0.21672)	Data 0.00048 (0.14035)	Loss 1.3823 (0.9287)	Prec@1 62.50000 (71.27193)	Prec@5 87.50000 (98.90351)
Epoch: [74][58/60]	Time 0.02212 (0.21337)	Data 0.00042 (0.13794)	Loss 0.6201 (0.9233)	Prec@1 62.50000 (71.12069)	Prec@5 100.00000 (98.92242)
Epoch: [74][59/60]	Time 0.02185 (0.21012)	Data 0.00041 (0.13561)	Loss 0.9940 (0.9245)	Prec@1 75.00000 (71.18644)	Prec@5 100.00000 (98.94068)
Epoch: [74][60/60]	Time 0.02126 (0.20697)	Data 0.00052 (0.13335)	Loss 0.6495 (0.9200)	Prec@1 87.50000 (71.45834)	Prec@5 100.00000 (98.95834)
train at epoch 75
train at epoch 75
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [75][0/272]	 lr: 0.00000	Time 8.768 (8.768)	Data 8.198 (8.198)	Loss 0.0099 (0.0099)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][10/272]	 lr: 0.00000	Time 0.498 (1.316)	Data 0.126 (0.857)	Loss 0.0090 (0.0229)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][20/272]	 lr: 0.00000	Time 0.339 (0.878)	Data 0.127 (0.510)	Loss 0.0081 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][30/272]	 lr: 0.00000	Time 0.418 (0.736)	Data 0.114 (0.387)	Loss 0.0287 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][40/272]	 lr: 0.00000	Time 0.519 (0.663)	Data 0.129 (0.324)	Loss 0.0183 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][50/272]	 lr: 0.00000	Time 0.468 (0.619)	Data 0.127 (0.287)	Loss 0.0080 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][60/272]	 lr: 0.00000	Time 0.428 (0.588)	Data 0.123 (0.261)	Loss 0.0086 (0.0158)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [75][70/272]	 lr: 0.00000	Time 0.453 (0.569)	Data 0.123 (0.242)	Loss 0.0302 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][80/272]	 lr: 0.00000	Time 0.404 (0.553)	Data 0.128 (0.228)	Loss 0.0204 (0.0170)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [75][90/272]	 lr: 0.00000	Time 0.368 (0.540)	Data 0.129 (0.217)	Loss 0.0178 (0.0164)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [75][100/272]	 lr: 0.00000	Time 0.357 (0.532)	Data 0.110 (0.208)	Loss 0.0394 (0.0163)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [75][110/272]	 lr: 0.00000	Time 0.412 (0.523)	Data 0.125 (0.201)	Loss 0.0131 (0.0162)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [75][120/272]	 lr: 0.00000	Time 0.480 (0.518)	Data 0.139 (0.194)	Loss 0.0246 (0.0158)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [75][130/272]	 lr: 0.00000	Time 0.494 (0.512)	Data 0.142 (0.189)	Loss 0.0234 (0.0170)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [75][140/272]	 lr: 0.00000	Time 0.474 (0.507)	Data 0.127 (0.185)	Loss 0.0099 (0.0167)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [75][150/272]	 lr: 0.00000	Time 0.454 (0.503)	Data 0.124 (0.181)	Loss 0.0277 (0.0174)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [75][160/272]	 lr: 0.00000	Time 0.533 (0.500)	Data 0.128 (0.178)	Loss 0.0060 (0.0171)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [75][170/272]	 lr: 0.00000	Time 0.462 (0.495)	Data 0.126 (0.175)	Loss 0.0041 (0.0170)	Prec@1 100.00000 (99.96345)	Prec@5 100.00000 (100.00000)
Epoch: [75][180/272]	 lr: 0.00000	Time 0.410 (0.493)	Data 0.123 (0.172)	Loss 0.0084 (0.0169)	Prec@1 100.00000 (99.96548)	Prec@5 100.00000 (100.00001)
Epoch: [75][190/272]	 lr: 0.00000	Time 0.378 (0.491)	Data 0.139 (0.170)	Loss 0.0077 (0.0168)	Prec@1 100.00000 (99.96728)	Prec@5 100.00000 (100.00000)
Epoch: [75][200/272]	 lr: 0.00000	Time 0.391 (0.489)	Data 0.103 (0.168)	Loss 0.0123 (0.0175)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [75][210/272]	 lr: 0.00000	Time 0.513 (0.488)	Data 0.124 (0.166)	Loss 0.0069 (0.0173)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [75][220/272]	 lr: 0.00000	Time 0.450 (0.487)	Data 0.132 (0.164)	Loss 0.0103 (0.0174)	Prec@1 100.00000 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [75][230/272]	 lr: 0.00000	Time 0.358 (0.485)	Data 0.116 (0.162)	Loss 0.0116 (0.0171)	Prec@1 100.00000 (99.94588)	Prec@5 100.00000 (100.00000)
Epoch: [75][240/272]	 lr: 0.00000	Time 0.261 (0.483)	Data 0.128 (0.161)	Loss 0.0235 (0.0170)	Prec@1 100.00000 (99.94814)	Prec@5 100.00000 (100.00001)
Epoch: [75][250/272]	 lr: 0.00000	Time 0.238 (0.473)	Data 0.126 (0.159)	Loss 0.0339 (0.0169)	Prec@1 100.00000 (99.95020)	Prec@5 100.00000 (100.00000)
Epoch: [75][260/272]	 lr: 0.00000	Time 0.239 (0.464)	Data 0.129 (0.158)	Loss 0.0403 (0.0167)	Prec@1 100.00000 (99.95210)	Prec@5 100.00000 (100.00000)
Epoch: [75][270/272]	 lr: 0.00000	Time 0.240 (0.456)	Data 0.128 (0.157)	Loss 0.0127 (0.0167)	Prec@1 100.00000 (99.95387)	Prec@5 100.00000 (100.00000)
validation at epoch 75
validation at epoch 75
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [75][1/60]	Time 6.12161 (6.12161)	Data 5.92893 (5.92893)	Loss 0.3887 (0.3887)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][2/60]	Time 1.32273 (3.72217)	Data 1.28090 (3.60492)	Loss 0.4458 (0.4172)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [75][3/60]	Time 0.15225 (2.53220)	Data 0.09472 (2.43485)	Loss 1.1639 (0.6661)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [75][4/60]	Time 0.07876 (1.91884)	Data 0.01426 (1.82970)	Loss 0.1957 (0.5485)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [75][5/60]	Time 0.09073 (1.55322)	Data 0.00073 (1.46391)	Loss 0.4240 (0.5236)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [75][6/60]	Time 0.06322 (1.30488)	Data 0.00046 (1.22000)	Loss 0.4388 (0.5095)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [75][7/60]	Time 0.18464 (1.14485)	Data 0.04471 (1.05210)	Loss 1.2931 (0.6214)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [75][8/60]	Time 0.08972 (1.01296)	Data 0.00372 (0.92105)	Loss 1.2217 (0.6965)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [75][9/60]	Time 0.10970 (0.91260)	Data 0.00516 (0.81929)	Loss 0.7170 (0.6987)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][10/60]	Time 0.11204 (0.83254)	Data 0.01208 (0.73857)	Loss 0.6052 (0.6894)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][11/60]	Time 0.10578 (0.76647)	Data 0.01221 (0.67254)	Loss 0.5848 (0.6799)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [75][12/60]	Time 0.07466 (0.70882)	Data 0.00268 (0.61671)	Loss 1.2169 (0.7246)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [75][13/60]	Time 0.11853 (0.66341)	Data 0.00078 (0.56933)	Loss 1.7678 (0.8049)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [75][14/60]	Time 0.13914 (0.62597)	Data 0.00770 (0.52922)	Loss 0.1254 (0.7563)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [75][15/60]	Time 0.32103 (0.60564)	Data 0.10372 (0.50085)	Loss 1.1258 (0.7810)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [75][16/60]	Time 0.20591 (0.58065)	Data 0.00095 (0.46961)	Loss 1.1391 (0.8034)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [75][17/60]	Time 0.21371 (0.55907)	Data 0.02271 (0.44332)	Loss 0.3231 (0.7751)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [75][18/60]	Time 0.08202 (0.53257)	Data 0.02483 (0.42007)	Loss 2.5874 (0.8758)	Prec@1 75.00000 (74.30556)	Prec@5 87.50000 (99.30556)
Epoch: [75][19/60]	Time 0.09957 (0.50978)	Data 0.03774 (0.39995)	Loss 0.1919 (0.8398)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.34211)
Epoch: [75][20/60]	Time 0.11410 (0.48999)	Data 0.00422 (0.38016)	Loss 2.5783 (0.9267)	Prec@1 62.50000 (74.37500)	Prec@5 87.50000 (98.75000)
Epoch: [75][21/60]	Time 0.09660 (0.47126)	Data 0.01475 (0.36276)	Loss 0.5586 (0.9092)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (98.80952)
Epoch: [75][22/60]	Time 0.07650 (0.45332)	Data 0.00185 (0.34636)	Loss 0.6546 (0.8976)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (98.86364)
Epoch: [75][23/60]	Time 0.13636 (0.43954)	Data 0.00895 (0.33169)	Loss 1.1468 (0.9084)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (98.91305)
Epoch: [75][24/60]	Time 0.16759 (0.42820)	Data 0.04953 (0.31993)	Loss 0.5901 (0.8952)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (98.95834)
Epoch: [75][25/60]	Time 0.10434 (0.41525)	Data 0.00882 (0.30748)	Loss 0.4832 (0.8787)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.00000)
Epoch: [75][26/60]	Time 0.24779 (0.40881)	Data 0.04819 (0.29751)	Loss 0.0252 (0.8459)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (99.03847)
Epoch: [75][27/60]	Time 0.16333 (0.39972)	Data 0.03288 (0.28771)	Loss 0.9780 (0.8508)	Prec@1 62.50000 (74.07407)	Prec@5 100.00000 (99.07407)
Epoch: [75][28/60]	Time 0.10883 (0.38933)	Data 0.01107 (0.27783)	Loss 0.3162 (0.8317)	Prec@1 87.50000 (74.55357)	Prec@5 100.00000 (99.10715)
Epoch: [75][29/60]	Time 0.14628 (0.38095)	Data 0.00042 (0.26826)	Loss 0.8041 (0.8307)	Prec@1 62.50000 (74.13793)	Prec@5 100.00000 (99.13793)
Epoch: [75][30/60]	Time 0.06759 (0.37050)	Data 0.00039 (0.25934)	Loss 1.9313 (0.8674)	Prec@1 62.50000 (73.75001)	Prec@5 100.00000 (99.16667)
Epoch: [75][31/60]	Time 0.03225 (0.35959)	Data 0.00043 (0.25098)	Loss 2.7050 (0.9267)	Prec@1 37.50000 (72.58064)	Prec@5 87.50000 (98.79032)
Epoch: [75][32/60]	Time 0.03380 (0.34941)	Data 0.00040 (0.24315)	Loss 0.9543 (0.9276)	Prec@1 62.50000 (72.26562)	Prec@5 100.00000 (98.82812)
Epoch: [75][33/60]	Time 0.06199 (0.34070)	Data 0.00117 (0.23582)	Loss 0.1554 (0.9042)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (98.86364)
Epoch: [75][34/60]	Time 0.06079 (0.33247)	Data 0.00048 (0.22890)	Loss 1.2835 (0.9153)	Prec@1 62.50000 (72.42647)	Prec@5 100.00000 (98.89706)
Epoch: [75][35/60]	Time 0.04879 (0.32436)	Data 0.00055 (0.22237)	Loss 1.4066 (0.9294)	Prec@1 75.00000 (72.50000)	Prec@5 87.50000 (98.57143)
Epoch: [75][36/60]	Time 0.04074 (0.31648)	Data 0.00540 (0.21635)	Loss 1.4007 (0.9424)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [75][37/60]	Time 0.02751 (0.30867)	Data 0.00415 (0.21061)	Loss 1.5566 (0.9590)	Prec@1 62.50000 (71.95946)	Prec@5 100.00000 (98.64865)
Epoch: [75][38/60]	Time 0.02874 (0.30131)	Data 0.00049 (0.20508)	Loss 2.4066 (0.9971)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (98.68421)
Epoch: [75][39/60]	Time 0.02582 (0.29424)	Data 0.00059 (0.19984)	Loss 0.1715 (0.9760)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (98.71795)
Epoch: [75][40/60]	Time 0.02931 (0.28762)	Data 0.00583 (0.19499)	Loss 0.3314 (0.9599)	Prec@1 87.50000 (72.18750)	Prec@5 100.00000 (98.75000)
Epoch: [75][41/60]	Time 0.02322 (0.28117)	Data 0.00065 (0.19025)	Loss 0.7482 (0.9547)	Prec@1 75.00000 (72.25610)	Prec@5 100.00000 (98.78049)
Epoch: [75][42/60]	Time 0.02304 (0.27503)	Data 0.00074 (0.18574)	Loss 1.0690 (0.9574)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (98.80952)
Epoch: [75][43/60]	Time 0.02349 (0.26918)	Data 0.00081 (0.18144)	Loss 0.8567 (0.9551)	Prec@1 62.50000 (72.09303)	Prec@5 100.00000 (98.83721)
Epoch: [75][44/60]	Time 0.02379 (0.26360)	Data 0.00067 (0.17733)	Loss 0.9064 (0.9540)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.86364)
Epoch: [75][45/60]	Time 0.02344 (0.25826)	Data 0.00078 (0.17340)	Loss 0.7560 (0.9496)	Prec@1 87.50000 (72.22222)	Prec@5 100.00000 (98.88889)
Epoch: [75][46/60]	Time 0.02314 (0.25315)	Data 0.00078 (0.16965)	Loss 0.7680 (0.9456)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (98.91305)
Epoch: [75][47/60]	Time 0.02305 (0.24826)	Data 0.00072 (0.16606)	Loss 0.8591 (0.9438)	Prec@1 75.00000 (71.80851)	Prec@5 100.00000 (98.93616)
Epoch: [75][48/60]	Time 0.02386 (0.24358)	Data 0.00076 (0.16261)	Loss 0.3498 (0.9314)	Prec@1 87.50000 (72.13542)	Prec@5 100.00000 (98.95834)
Epoch: [75][49/60]	Time 0.02326 (0.23908)	Data 0.00050 (0.15931)	Loss 0.1774 (0.9160)	Prec@1 87.50000 (72.44897)	Prec@5 100.00000 (98.97959)
Epoch: [75][50/60]	Time 0.02294 (0.23476)	Data 0.00048 (0.15613)	Loss 0.4727 (0.9071)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.00000)
Epoch: [75][51/60]	Time 0.02271 (0.23060)	Data 0.00045 (0.15308)	Loss 0.3258 (0.8957)	Prec@1 75.00000 (72.54902)	Prec@5 100.00000 (99.01961)
Epoch: [75][52/60]	Time 0.02295 (0.22661)	Data 0.00047 (0.15014)	Loss 0.8312 (0.8945)	Prec@1 62.50000 (72.35577)	Prec@5 100.00000 (99.03847)
Epoch: [75][53/60]	Time 0.02358 (0.22278)	Data 0.00046 (0.14732)	Loss 0.3788 (0.8848)	Prec@1 87.50000 (72.64151)	Prec@5 100.00000 (99.05660)
Epoch: [75][54/60]	Time 0.02272 (0.21907)	Data 0.00046 (0.14460)	Loss 0.9236 (0.8855)	Prec@1 75.00000 (72.68519)	Prec@5 100.00000 (99.07407)
Epoch: [75][55/60]	Time 0.02267 (0.21550)	Data 0.00045 (0.14198)	Loss 1.1433 (0.8902)	Prec@1 62.50000 (72.50000)	Prec@5 87.50000 (98.86363)
Epoch: [75][56/60]	Time 0.02301 (0.21207)	Data 0.00059 (0.13945)	Loss 0.6266 (0.8855)	Prec@1 62.50000 (72.32143)	Prec@5 100.00000 (98.88393)
Epoch: [75][57/60]	Time 0.02307 (0.20875)	Data 0.00047 (0.13701)	Loss 1.2144 (0.8912)	Prec@1 62.50000 (72.14912)	Prec@5 100.00000 (98.90351)
Epoch: [75][58/60]	Time 0.02345 (0.20556)	Data 0.00053 (0.13466)	Loss 0.6289 (0.8867)	Prec@1 62.50000 (71.98276)	Prec@5 100.00000 (98.92242)
Epoch: [75][59/60]	Time 0.02276 (0.20246)	Data 0.00048 (0.13239)	Loss 0.8770 (0.8866)	Prec@1 75.00000 (72.03390)	Prec@5 100.00000 (98.94068)
Epoch: [75][60/60]	Time 0.02263 (0.19946)	Data 0.00059 (0.13019)	Loss 0.5730 (0.8813)	Prec@1 87.50000 (72.29167)	Prec@5 100.00000 (98.95834)
train at epoch 76
train at epoch 76
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [76][0/272]	 lr: 0.00000	Time 9.020 (9.020)	Data 7.631 (7.631)	Loss 0.0395 (0.0395)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][10/272]	 lr: 0.00000	Time 0.405 (1.284)	Data 0.128 (0.817)	Loss 0.0060 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][20/272]	 lr: 0.00000	Time 0.474 (0.871)	Data 0.131 (0.490)	Loss 0.0193 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][30/272]	 lr: 0.00000	Time 0.554 (0.732)	Data 0.128 (0.374)	Loss 0.0079 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][40/272]	 lr: 0.00000	Time 0.467 (0.661)	Data 0.126 (0.314)	Loss 0.0175 (0.0163)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [76][50/272]	 lr: 0.00000	Time 0.404 (0.616)	Data 0.129 (0.277)	Loss 0.0067 (0.0170)	Prec@1 100.00000 (99.75491)	Prec@5 100.00000 (100.00000)
Epoch: [76][60/272]	 lr: 0.00000	Time 0.454 (0.588)	Data 0.140 (0.253)	Loss 0.0097 (0.0175)	Prec@1 100.00000 (99.74384)	Prec@5 100.00000 (99.99999)
Epoch: [76][70/272]	 lr: 0.00000	Time 0.473 (0.567)	Data 0.139 (0.236)	Loss 0.0040 (0.0174)	Prec@1 100.00000 (99.77993)	Prec@5 100.00000 (100.00000)
Epoch: [76][80/272]	 lr: 0.00000	Time 0.375 (0.549)	Data 0.127 (0.222)	Loss 0.0180 (0.0197)	Prec@1 100.00000 (99.72994)	Prec@5 100.00000 (100.00000)
Epoch: [76][90/272]	 lr: 0.00000	Time 0.372 (0.539)	Data 0.124 (0.212)	Loss 0.0130 (0.0192)	Prec@1 100.00000 (99.75962)	Prec@5 100.00000 (100.00000)
Epoch: [76][100/272]	 lr: 0.00000	Time 0.424 (0.530)	Data 0.138 (0.203)	Loss 0.0198 (0.0192)	Prec@1 100.00000 (99.78342)	Prec@5 100.00000 (100.00000)
Epoch: [76][110/272]	 lr: 0.00000	Time 0.441 (0.521)	Data 0.129 (0.197)	Loss 0.0151 (0.0186)	Prec@1 100.00000 (99.80293)	Prec@5 100.00000 (100.00000)
Epoch: [76][120/272]	 lr: 0.00000	Time 0.575 (0.515)	Data 0.122 (0.191)	Loss 0.0274 (0.0184)	Prec@1 100.00000 (99.81921)	Prec@5 100.00000 (99.99999)
Epoch: [76][130/272]	 lr: 0.00000	Time 0.494 (0.509)	Data 0.128 (0.186)	Loss 0.0707 (0.0183)	Prec@1 100.00000 (99.83302)	Prec@5 100.00000 (100.00000)
Epoch: [76][140/272]	 lr: 0.00000	Time 0.406 (0.503)	Data 0.127 (0.182)	Loss 0.0193 (0.0186)	Prec@1 100.00000 (99.84486)	Prec@5 100.00000 (100.00000)
Epoch: [76][150/272]	 lr: 0.00000	Time 0.425 (0.498)	Data 0.128 (0.179)	Loss 0.0174 (0.0181)	Prec@1 100.00000 (99.85513)	Prec@5 100.00000 (100.00000)
Epoch: [76][160/272]	 lr: 0.00000	Time 0.501 (0.495)	Data 0.117 (0.176)	Loss 0.0041 (0.0182)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [76][170/272]	 lr: 0.00000	Time 0.477 (0.491)	Data 0.130 (0.173)	Loss 0.0260 (0.0186)	Prec@1 100.00000 (99.85381)	Prec@5 100.00000 (100.00000)
Epoch: [76][180/272]	 lr: 0.00000	Time 0.499 (0.488)	Data 0.131 (0.170)	Loss 0.0252 (0.0186)	Prec@1 100.00000 (99.86189)	Prec@5 100.00000 (100.00001)
Epoch: [76][190/272]	 lr: 0.00000	Time 0.485 (0.487)	Data 0.125 (0.168)	Loss 0.0119 (0.0182)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [76][200/272]	 lr: 0.00000	Time 0.500 (0.485)	Data 0.116 (0.166)	Loss 0.0557 (0.0189)	Prec@1 100.00000 (99.84453)	Prec@5 100.00000 (100.00000)
Epoch: [76][210/272]	 lr: 0.00000	Time 0.436 (0.482)	Data 0.129 (0.164)	Loss 0.0144 (0.0187)	Prec@1 100.00000 (99.85190)	Prec@5 100.00000 (100.00000)
Epoch: [76][220/272]	 lr: 0.00000	Time 0.497 (0.480)	Data 0.127 (0.163)	Loss 0.0431 (0.0185)	Prec@1 100.00000 (99.85860)	Prec@5 100.00000 (100.00001)
Epoch: [76][230/272]	 lr: 0.00000	Time 0.537 (0.478)	Data 0.120 (0.161)	Loss 0.0059 (0.0182)	Prec@1 100.00000 (99.86472)	Prec@5 100.00000 (100.00000)
Epoch: [76][240/272]	 lr: 0.00000	Time 0.293 (0.476)	Data 0.128 (0.160)	Loss 0.0092 (0.0180)	Prec@1 100.00000 (99.87034)	Prec@5 100.00000 (100.00001)
Epoch: [76][250/272]	 lr: 0.00000	Time 0.247 (0.467)	Data 0.127 (0.159)	Loss 0.0127 (0.0181)	Prec@1 100.00000 (99.87550)	Prec@5 100.00000 (100.00000)
Epoch: [76][260/272]	 lr: 0.00000	Time 0.238 (0.458)	Data 0.126 (0.158)	Loss 0.0091 (0.0179)	Prec@1 100.00000 (99.88026)	Prec@5 100.00000 (100.00000)
Epoch: [76][270/272]	 lr: 0.00000	Time 0.241 (0.450)	Data 0.128 (0.156)	Loss 0.0091 (0.0178)	Prec@1 100.00000 (99.88469)	Prec@5 100.00000 (100.00000)
validation at epoch 76
validation at epoch 76
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [76][1/60]	Time 6.92860 (6.92860)	Data 6.84929 (6.84929)	Loss 0.3915 (0.3915)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][2/60]	Time 0.09621 (3.51240)	Data 0.01096 (3.43012)	Loss 0.4557 (0.4236)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [76][3/60]	Time 0.15409 (2.39297)	Data 0.06915 (2.30980)	Loss 1.2164 (0.6879)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [76][4/60]	Time 0.20958 (1.84712)	Data 0.01803 (1.73686)	Loss 0.1478 (0.5529)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [76][5/60]	Time 0.13589 (1.50487)	Data 0.00098 (1.38968)	Loss 0.3227 (0.5068)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][6/60]	Time 0.28280 (1.30120)	Data 0.05432 (1.16712)	Loss 0.2981 (0.4720)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [76][7/60]	Time 0.21294 (1.14573)	Data 0.00390 (1.00095)	Loss 1.2408 (0.5818)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [76][8/60]	Time 0.15661 (1.02209)	Data 0.00067 (0.87591)	Loss 1.1557 (0.6536)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [76][9/60]	Time 0.15947 (0.92624)	Data 0.00803 (0.77948)	Loss 0.6026 (0.6479)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [76][10/60]	Time 0.05689 (0.83931)	Data 0.00277 (0.70181)	Loss 0.5414 (0.6373)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [76][11/60]	Time 0.07259 (0.76961)	Data 0.00808 (0.63874)	Loss 0.5556 (0.6298)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [76][12/60]	Time 0.07292 (0.71155)	Data 0.00489 (0.58592)	Loss 1.1602 (0.6740)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [76][13/60]	Time 0.07380 (0.66249)	Data 0.00224 (0.54102)	Loss 1.9151 (0.7695)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][14/60]	Time 0.17869 (0.62794)	Data 0.05396 (0.50623)	Loss 0.0616 (0.7189)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [76][15/60]	Time 0.30092 (0.60613)	Data 0.06615 (0.47689)	Loss 1.1345 (0.7466)	Prec@1 50.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [76][16/60]	Time 0.23645 (0.58303)	Data 0.00051 (0.44712)	Loss 0.9625 (0.7601)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][17/60]	Time 0.11423 (0.55545)	Data 0.00626 (0.42119)	Loss 0.3357 (0.7352)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [76][18/60]	Time 0.11954 (0.53124)	Data 0.04530 (0.40030)	Loss 2.3056 (0.8224)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (100.00000)
Epoch: [76][19/60]	Time 0.12379 (0.50979)	Data 0.00450 (0.37947)	Loss 0.1538 (0.7872)	Prec@1 100.00000 (76.97369)	Prec@5 100.00000 (100.00000)
Epoch: [76][20/60]	Time 0.08193 (0.48840)	Data 0.00588 (0.36079)	Loss 2.1921 (0.8575)	Prec@1 62.50000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [76][21/60]	Time 0.06024 (0.46801)	Data 0.00106 (0.34366)	Loss 0.4833 (0.8396)	Prec@1 87.50000 (76.78571)	Prec@5 100.00000 (100.00000)
Epoch: [76][22/60]	Time 0.09347 (0.45099)	Data 0.03741 (0.32974)	Loss 0.5637 (0.8271)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (100.00000)
Epoch: [76][23/60]	Time 0.07242 (0.43453)	Data 0.00881 (0.31579)	Loss 0.9613 (0.8329)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (100.00000)
Epoch: [76][24/60]	Time 0.07063 (0.41936)	Data 0.00071 (0.30266)	Loss 0.6659 (0.8260)	Prec@1 62.50000 (75.52084)	Prec@5 100.00000 (100.00000)
Epoch: [76][25/60]	Time 0.23122 (0.41184)	Data 0.07657 (0.29362)	Loss 0.4336 (0.8103)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][26/60]	Time 0.27712 (0.40666)	Data 0.06382 (0.28478)	Loss 0.0574 (0.7813)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [76][27/60]	Time 0.05660 (0.39369)	Data 0.00080 (0.27426)	Loss 0.7176 (0.7790)	Prec@1 50.00000 (75.92593)	Prec@5 100.00000 (100.00000)
Epoch: [76][28/60]	Time 0.08129 (0.38253)	Data 0.00704 (0.26472)	Loss 0.4633 (0.7677)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (100.00001)
Epoch: [76][29/60]	Time 0.07202 (0.37183)	Data 0.00041 (0.25560)	Loss 0.6025 (0.7620)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (100.00000)
Epoch: [76][30/60]	Time 0.07109 (0.36180)	Data 0.00038 (0.24710)	Loss 1.6842 (0.7927)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [76][31/60]	Time 0.07121 (0.35243)	Data 0.00042 (0.23914)	Loss 2.3147 (0.8418)	Prec@1 37.50000 (74.59677)	Prec@5 100.00000 (100.00000)
Epoch: [76][32/60]	Time 0.08387 (0.34404)	Data 0.00045 (0.23168)	Loss 0.6749 (0.8366)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (100.00000)
Epoch: [76][33/60]	Time 0.08608 (0.33622)	Data 0.00367 (0.22477)	Loss 0.1048 (0.8144)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [76][34/60]	Time 0.08905 (0.32895)	Data 0.00040 (0.21817)	Loss 1.1233 (0.8235)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (100.00000)
Epoch: [76][35/60]	Time 0.06762 (0.32148)	Data 0.00055 (0.21195)	Loss 1.3329 (0.8381)	Prec@1 75.00000 (74.64286)	Prec@5 100.00000 (100.00000)
Epoch: [76][36/60]	Time 0.05047 (0.31395)	Data 0.00041 (0.20608)	Loss 1.0169 (0.8430)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [76][37/60]	Time 0.03144 (0.30632)	Data 0.00073 (0.20053)	Loss 1.3996 (0.8581)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (100.00000)
Epoch: [76][38/60]	Time 0.03011 (0.29905)	Data 0.00049 (0.19526)	Loss 2.1918 (0.8932)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (100.00000)
Epoch: [76][39/60]	Time 0.02956 (0.29214)	Data 0.00052 (0.19027)	Loss 0.1366 (0.8738)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (100.00000)
Epoch: [76][40/60]	Time 0.02810 (0.28554)	Data 0.00059 (0.18553)	Loss 0.2572 (0.8584)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (100.00000)
Epoch: [76][41/60]	Time 0.02774 (0.27925)	Data 0.00048 (0.18101)	Loss 0.5552 (0.8510)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (100.00000)
Epoch: [76][42/60]	Time 0.02421 (0.27318)	Data 0.00050 (0.17672)	Loss 1.0380 (0.8554)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (100.00000)
Epoch: [76][43/60]	Time 0.03114 (0.26755)	Data 0.00093 (0.17263)	Loss 0.6342 (0.8503)	Prec@1 62.50000 (73.83721)	Prec@5 100.00000 (100.00000)
Epoch: [76][44/60]	Time 0.02848 (0.26212)	Data 0.00044 (0.16871)	Loss 0.7413 (0.8478)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [76][45/60]	Time 0.02858 (0.25693)	Data 0.00038 (0.16497)	Loss 0.7282 (0.8452)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (100.00000)
Epoch: [76][46/60]	Time 0.02830 (0.25196)	Data 0.00038 (0.16140)	Loss 1.0742 (0.8501)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (100.00000)
Epoch: [76][47/60]	Time 0.02886 (0.24721)	Data 0.00040 (0.15797)	Loss 1.0659 (0.8547)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.73404)
Epoch: [76][48/60]	Time 0.02762 (0.24264)	Data 0.00041 (0.15469)	Loss 0.4236 (0.8457)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.73959)
Epoch: [76][49/60]	Time 0.02816 (0.23826)	Data 0.00038 (0.15154)	Loss 0.2822 (0.8342)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.74490)
Epoch: [76][50/60]	Time 0.02707 (0.23403)	Data 0.00053 (0.14852)	Loss 0.7875 (0.8333)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.75000)
Epoch: [76][51/60]	Time 0.03035 (0.23004)	Data 0.00425 (0.14569)	Loss 0.3739 (0.8243)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.75491)
Epoch: [76][52/60]	Time 0.02723 (0.22614)	Data 0.00041 (0.14290)	Loss 0.9033 (0.8258)	Prec@1 50.00000 (73.79808)	Prec@5 87.50000 (99.51923)
Epoch: [76][53/60]	Time 0.02675 (0.22238)	Data 0.00057 (0.14021)	Loss 0.6609 (0.8227)	Prec@1 75.00000 (73.82076)	Prec@5 100.00000 (99.52831)
Epoch: [76][54/60]	Time 0.02612 (0.21874)	Data 0.00038 (0.13762)	Loss 0.8717 (0.8236)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (99.53704)
Epoch: [76][55/60]	Time 0.02715 (0.21526)	Data 0.00038 (0.13513)	Loss 1.2856 (0.8320)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (99.31818)
Epoch: [76][56/60]	Time 0.02620 (0.21188)	Data 0.00052 (0.13272)	Loss 0.7670 (0.8309)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (99.33036)
Epoch: [76][57/60]	Time 0.02662 (0.20863)	Data 0.00042 (0.13040)	Loss 1.4405 (0.8415)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (99.12281)
Epoch: [76][58/60]	Time 0.02608 (0.20549)	Data 0.00044 (0.12816)	Loss 0.7199 (0.8394)	Prec@1 62.50000 (73.06034)	Prec@5 100.00000 (99.13793)
Epoch: [76][59/60]	Time 0.02747 (0.20247)	Data 0.00057 (0.12600)	Loss 0.7556 (0.8380)	Prec@1 87.50000 (73.30508)	Prec@5 100.00000 (99.15254)
Epoch: [76][60/60]	Time 0.02732 (0.19955)	Data 0.00049 (0.12391)	Loss 0.5828 (0.8338)	Prec@1 87.50000 (73.54167)	Prec@5 100.00000 (99.16667)
train at epoch 77
train at epoch 77
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [77][0/272]	 lr: 0.00000	Time 5.803 (5.803)	Data 4.410 (4.410)	Loss 0.0117 (0.0117)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][10/272]	 lr: 0.00000	Time 0.354 (1.294)	Data 0.121 (0.720)	Loss 0.0057 (0.0117)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][20/272]	 lr: 0.00000	Time 0.398 (0.891)	Data 0.128 (0.439)	Loss 0.0099 (0.0098)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][30/272]	 lr: 0.00000	Time 0.567 (0.761)	Data 0.126 (0.340)	Loss 0.0296 (0.0146)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [77][40/272]	 lr: 0.00000	Time 0.329 (0.686)	Data 0.119 (0.287)	Loss 0.0091 (0.0128)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [77][50/272]	 lr: 0.00000	Time 0.402 (0.640)	Data 0.128 (0.256)	Loss 0.0064 (0.0123)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [77][60/272]	 lr: 0.00000	Time 0.395 (0.611)	Data 0.117 (0.235)	Loss 0.0067 (0.0129)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [77][70/272]	 lr: 0.00000	Time 0.540 (0.588)	Data 0.128 (0.220)	Loss 0.0086 (0.0133)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [77][80/272]	 lr: 0.00000	Time 0.462 (0.570)	Data 0.124 (0.207)	Loss 0.0088 (0.0135)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [77][90/272]	 lr: 0.00000	Time 0.385 (0.558)	Data 0.129 (0.198)	Loss 0.0106 (0.0137)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [77][100/272]	 lr: 0.00000	Time 0.407 (0.547)	Data 0.149 (0.191)	Loss 0.0125 (0.0147)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [77][110/272]	 lr: 0.00000	Time 0.464 (0.537)	Data 0.124 (0.185)	Loss 0.0054 (0.0152)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [77][120/272]	 lr: 0.00000	Time 0.404 (0.531)	Data 0.130 (0.181)	Loss 0.0051 (0.0147)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [77][130/272]	 lr: 0.00000	Time 0.455 (0.522)	Data 0.121 (0.177)	Loss 0.0410 (0.0152)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [77][140/272]	 lr: 0.00000	Time 0.467 (0.516)	Data 0.138 (0.173)	Loss 0.0122 (0.0164)	Prec@1 100.00000 (99.88918)	Prec@5 100.00000 (100.00000)
Epoch: [77][150/272]	 lr: 0.00000	Time 0.467 (0.512)	Data 0.121 (0.170)	Loss 0.0099 (0.0160)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [77][160/272]	 lr: 0.00000	Time 0.508 (0.508)	Data 0.127 (0.167)	Loss 0.0409 (0.0159)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [77][170/272]	 lr: 0.00000	Time 0.380 (0.503)	Data 0.128 (0.165)	Loss 0.0992 (0.0181)	Prec@1 93.75000 (99.78070)	Prec@5 100.00000 (100.00000)
Epoch: [77][180/272]	 lr: 0.00000	Time 0.473 (0.499)	Data 0.134 (0.163)	Loss 0.0054 (0.0176)	Prec@1 100.00000 (99.79282)	Prec@5 100.00000 (100.00001)
Epoch: [77][190/272]	 lr: 0.00000	Time 0.443 (0.497)	Data 0.124 (0.161)	Loss 0.0258 (0.0174)	Prec@1 100.00000 (99.80367)	Prec@5 100.00000 (100.00000)
Epoch: [77][200/272]	 lr: 0.00000	Time 0.416 (0.493)	Data 0.127 (0.160)	Loss 0.0058 (0.0180)	Prec@1 100.00000 (99.81343)	Prec@5 100.00000 (100.00000)
Epoch: [77][210/272]	 lr: 0.00000	Time 0.458 (0.490)	Data 0.128 (0.158)	Loss 0.0126 (0.0178)	Prec@1 100.00000 (99.82228)	Prec@5 100.00000 (100.00000)
Epoch: [77][220/272]	 lr: 0.00000	Time 0.386 (0.488)	Data 0.133 (0.157)	Loss 0.0086 (0.0175)	Prec@1 100.00000 (99.83032)	Prec@5 100.00000 (100.00001)
Epoch: [77][230/272]	 lr: 0.00000	Time 0.580 (0.487)	Data 0.145 (0.156)	Loss 0.0103 (0.0175)	Prec@1 100.00000 (99.83766)	Prec@5 100.00000 (100.00000)
Epoch: [77][240/272]	 lr: 0.00000	Time 0.358 (0.484)	Data 0.125 (0.154)	Loss 0.0131 (0.0173)	Prec@1 100.00000 (99.84441)	Prec@5 100.00000 (100.00001)
Epoch: [77][250/272]	 lr: 0.00000	Time 0.239 (0.475)	Data 0.128 (0.153)	Loss 0.0318 (0.0172)	Prec@1 100.00000 (99.85060)	Prec@5 100.00000 (100.00000)
Epoch: [77][260/272]	 lr: 0.00000	Time 0.239 (0.466)	Data 0.127 (0.152)	Loss 0.0522 (0.0173)	Prec@1 100.00000 (99.85632)	Prec@5 100.00000 (100.00000)
Epoch: [77][270/272]	 lr: 0.00000	Time 0.240 (0.458)	Data 0.129 (0.151)	Loss 0.0264 (0.0172)	Prec@1 100.00000 (99.86163)	Prec@5 100.00000 (100.00000)
validation at epoch 77
validation at epoch 77
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [77][1/60]	Time 6.06267 (6.06267)	Data 5.88533 (5.88533)	Loss 0.3850 (0.3850)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][2/60]	Time 0.33826 (3.20047)	Data 0.08825 (2.98679)	Loss 0.4745 (0.4298)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][3/60]	Time 0.22515 (2.20869)	Data 0.00060 (1.99139)	Loss 1.1348 (0.6648)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [77][4/60]	Time 0.80186 (1.85698)	Data 0.71877 (1.67324)	Loss 0.1642 (0.5396)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][5/60]	Time 0.34393 (1.55437)	Data 0.30292 (1.39917)	Loss 0.2623 (0.4842)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][6/60]	Time 0.10166 (1.31225)	Data 0.00063 (1.16608)	Loss 0.3156 (0.4561)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][7/60]	Time 0.06843 (1.13457)	Data 0.01012 (1.00094)	Loss 1.2028 (0.5627)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (100.00001)
Epoch: [77][8/60]	Time 0.08945 (1.00393)	Data 0.00975 (0.87705)	Loss 1.0872 (0.6283)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [77][9/60]	Time 0.09798 (0.90327)	Data 0.00187 (0.77980)	Loss 0.5845 (0.6234)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [77][10/60]	Time 0.10578 (0.82352)	Data 0.01285 (0.70311)	Loss 0.5466 (0.6157)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][11/60]	Time 0.09277 (0.75709)	Data 0.00482 (0.63963)	Loss 0.5316 (0.6081)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [77][12/60]	Time 0.19402 (0.71016)	Data 0.01577 (0.58764)	Loss 1.1806 (0.6558)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [77][13/60]	Time 0.22534 (0.67287)	Data 0.04182 (0.54565)	Loss 1.9102 (0.7523)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [77][14/60]	Time 0.18300 (0.63788)	Data 0.03450 (0.50914)	Loss 0.0575 (0.7027)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [77][15/60]	Time 0.29636 (0.61511)	Data 0.08028 (0.48055)	Loss 1.0716 (0.7273)	Prec@1 50.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [77][16/60]	Time 0.08808 (0.58217)	Data 0.01541 (0.45148)	Loss 0.9837 (0.7433)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [77][17/60]	Time 0.09299 (0.55340)	Data 0.00697 (0.42533)	Loss 0.3422 (0.7197)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [77][18/60]	Time 0.20375 (0.53397)	Data 0.05582 (0.40480)	Loss 2.2955 (0.8072)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [77][19/60]	Time 0.10234 (0.51125)	Data 0.04034 (0.38562)	Loss 0.1570 (0.7730)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [77][20/60]	Time 0.17072 (0.49423)	Data 0.03388 (0.36803)	Loss 2.1827 (0.8435)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (100.00000)
Epoch: [77][21/60]	Time 0.21984 (0.48116)	Data 0.05736 (0.35324)	Loss 0.4873 (0.8265)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (100.00000)
Epoch: [77][22/60]	Time 0.21305 (0.46897)	Data 0.08314 (0.34096)	Loss 0.5306 (0.8131)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [77][23/60]	Time 0.08311 (0.45220)	Data 0.01149 (0.32664)	Loss 0.9548 (0.8192)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (100.00000)
Epoch: [77][24/60]	Time 0.09398 (0.43727)	Data 0.01593 (0.31369)	Loss 0.7125 (0.8148)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [77][25/60]	Time 0.18733 (0.42727)	Data 0.05252 (0.30325)	Loss 0.4347 (0.7996)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (100.00000)
Epoch: [77][26/60]	Time 0.16064 (0.41702)	Data 0.02063 (0.29238)	Loss 0.0646 (0.7713)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (100.00000)
Epoch: [77][27/60]	Time 0.15924 (0.40747)	Data 0.01199 (0.28199)	Loss 0.7178 (0.7693)	Prec@1 50.00000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [77][28/60]	Time 0.21656 (0.40065)	Data 0.02518 (0.27282)	Loss 0.4759 (0.7589)	Prec@1 87.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [77][29/60]	Time 0.07205 (0.38932)	Data 0.00048 (0.26343)	Loss 0.6119 (0.7538)	Prec@1 75.00000 (76.72414)	Prec@5 100.00000 (100.00000)
Epoch: [77][30/60]	Time 0.06590 (0.37854)	Data 0.00047 (0.25466)	Loss 1.7120 (0.7857)	Prec@1 62.50000 (76.25001)	Prec@5 100.00000 (100.00001)
Epoch: [77][31/60]	Time 0.05460 (0.36809)	Data 0.00048 (0.24646)	Loss 2.2615 (0.8333)	Prec@1 37.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][32/60]	Time 0.10174 (0.35977)	Data 0.00043 (0.23877)	Loss 0.5942 (0.8259)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][33/60]	Time 0.10279 (0.35198)	Data 0.00039 (0.23155)	Loss 0.1189 (0.8044)	Prec@1 87.50000 (75.37879)	Prec@5 100.00000 (100.00000)
Epoch: [77][34/60]	Time 0.03966 (0.34279)	Data 0.00108 (0.22477)	Loss 1.1246 (0.8139)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][35/60]	Time 0.03060 (0.33387)	Data 0.00314 (0.21844)	Loss 1.3230 (0.8284)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [77][36/60]	Time 0.03943 (0.32570)	Data 0.00437 (0.21249)	Loss 0.9655 (0.8322)	Prec@1 62.50000 (74.65278)	Prec@5 100.00000 (100.00000)
Epoch: [77][37/60]	Time 0.02420 (0.31755)	Data 0.00087 (0.20677)	Loss 1.3527 (0.8463)	Prec@1 62.50000 (74.32433)	Prec@5 100.00000 (100.00000)
Epoch: [77][38/60]	Time 0.03589 (0.31013)	Data 0.00419 (0.20144)	Loss 2.1712 (0.8811)	Prec@1 50.00000 (73.68421)	Prec@5 100.00000 (100.00000)
Epoch: [77][39/60]	Time 0.02892 (0.30292)	Data 0.00074 (0.19630)	Loss 0.1604 (0.8627)	Prec@1 87.50000 (74.03846)	Prec@5 100.00000 (100.00000)
Epoch: [77][40/60]	Time 0.02890 (0.29607)	Data 0.00050 (0.19140)	Loss 0.3083 (0.8488)	Prec@1 87.50000 (74.37500)	Prec@5 100.00000 (100.00000)
Epoch: [77][41/60]	Time 0.02890 (0.28956)	Data 0.00044 (0.18674)	Loss 0.4862 (0.8400)	Prec@1 75.00000 (74.39024)	Prec@5 100.00000 (100.00000)
Epoch: [77][42/60]	Time 0.02973 (0.28337)	Data 0.00045 (0.18231)	Loss 1.1116 (0.8464)	Prec@1 62.50000 (74.10715)	Prec@5 100.00000 (100.00000)
Epoch: [77][43/60]	Time 0.02723 (0.27741)	Data 0.00046 (0.17808)	Loss 0.5539 (0.8396)	Prec@1 87.50000 (74.41860)	Prec@5 100.00000 (100.00000)
Epoch: [77][44/60]	Time 0.02262 (0.27162)	Data 0.00044 (0.17404)	Loss 0.6939 (0.8363)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [77][45/60]	Time 0.02489 (0.26614)	Data 0.00048 (0.17019)	Loss 0.7197 (0.8337)	Prec@1 87.50000 (74.72222)	Prec@5 100.00000 (100.00000)
Epoch: [77][46/60]	Time 0.02265 (0.26085)	Data 0.00061 (0.16650)	Loss 1.2060 (0.8418)	Prec@1 50.00000 (74.18478)	Prec@5 100.00000 (100.00000)
Epoch: [77][47/60]	Time 0.02344 (0.25580)	Data 0.00046 (0.16297)	Loss 1.0379 (0.8460)	Prec@1 75.00000 (74.20213)	Prec@5 87.50000 (99.73404)
Epoch: [77][48/60]	Time 0.02273 (0.25094)	Data 0.00056 (0.15958)	Loss 0.3495 (0.8356)	Prec@1 87.50000 (74.47917)	Prec@5 100.00000 (99.73959)
Epoch: [77][49/60]	Time 0.02279 (0.24628)	Data 0.00044 (0.15634)	Loss 0.3642 (0.8260)	Prec@1 87.50000 (74.74490)	Prec@5 100.00000 (99.74490)
Epoch: [77][50/60]	Time 0.02250 (0.24181)	Data 0.00045 (0.15322)	Loss 0.6972 (0.8234)	Prec@1 75.00000 (74.75000)	Prec@5 100.00000 (99.75000)
Epoch: [77][51/60]	Time 0.02305 (0.23752)	Data 0.00043 (0.15022)	Loss 0.4234 (0.8156)	Prec@1 75.00000 (74.75491)	Prec@5 100.00000 (99.75491)
Epoch: [77][52/60]	Time 0.02309 (0.23340)	Data 0.00047 (0.14734)	Loss 0.8639 (0.8165)	Prec@1 62.50000 (74.51923)	Prec@5 87.50000 (99.51923)
Epoch: [77][53/60]	Time 0.02267 (0.22942)	Data 0.00041 (0.14457)	Loss 0.5876 (0.8122)	Prec@1 75.00000 (74.52831)	Prec@5 100.00000 (99.52831)
Epoch: [77][54/60]	Time 0.02323 (0.22560)	Data 0.00053 (0.14190)	Loss 0.8394 (0.8127)	Prec@1 75.00000 (74.53704)	Prec@5 100.00000 (99.53704)
Epoch: [77][55/60]	Time 0.02258 (0.22191)	Data 0.00042 (0.13933)	Loss 1.2338 (0.8204)	Prec@1 62.50000 (74.31818)	Prec@5 87.50000 (99.31818)
Epoch: [77][56/60]	Time 0.02300 (0.21836)	Data 0.00056 (0.13685)	Loss 0.7913 (0.8199)	Prec@1 75.00000 (74.33036)	Prec@5 100.00000 (99.33036)
Epoch: [77][57/60]	Time 0.02307 (0.21493)	Data 0.00050 (0.13446)	Loss 1.4423 (0.8308)	Prec@1 62.50000 (74.12281)	Prec@5 87.50000 (99.12281)
Epoch: [77][58/60]	Time 0.02258 (0.21162)	Data 0.00047 (0.13215)	Loss 0.7184 (0.8288)	Prec@1 62.50000 (73.92242)	Prec@5 100.00000 (99.13793)
Epoch: [77][59/60]	Time 0.02262 (0.20841)	Data 0.00056 (0.12992)	Loss 0.7180 (0.8270)	Prec@1 87.50000 (74.15254)	Prec@5 100.00000 (99.15254)
Epoch: [77][60/60]	Time 0.02253 (0.20531)	Data 0.00045 (0.12776)	Loss 0.5135 (0.8217)	Prec@1 87.50000 (74.37501)	Prec@5 100.00000 (99.16667)
train at epoch 78
train at epoch 78
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [78][0/272]	 lr: 0.00000	Time 9.696 (9.696)	Data 8.864 (8.864)	Loss 0.0172 (0.0172)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][10/272]	 lr: 0.00000	Time 0.508 (1.316)	Data 0.148 (0.926)	Loss 0.0146 (0.0117)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][20/272]	 lr: 0.00000	Time 0.511 (0.892)	Data 0.135 (0.547)	Loss 0.0119 (0.0145)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][30/272]	 lr: 0.00000	Time 0.501 (0.748)	Data 0.129 (0.412)	Loss 0.0109 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][40/272]	 lr: 0.00000	Time 0.489 (0.673)	Data 0.129 (0.342)	Loss 0.0251 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][50/272]	 lr: 0.00000	Time 0.462 (0.625)	Data 0.127 (0.301)	Loss 0.0155 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][60/272]	 lr: 0.00000	Time 0.463 (0.595)	Data 0.150 (0.273)	Loss 0.0195 (0.0154)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [78][70/272]	 lr: 0.00000	Time 0.539 (0.575)	Data 0.127 (0.252)	Loss 0.0085 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][80/272]	 lr: 0.00000	Time 0.352 (0.558)	Data 0.108 (0.237)	Loss 0.0077 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][90/272]	 lr: 0.00000	Time 0.455 (0.547)	Data 0.121 (0.225)	Loss 0.0430 (0.0179)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [78][100/272]	 lr: 0.00000	Time 0.427 (0.536)	Data 0.128 (0.215)	Loss 0.0065 (0.0174)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [78][110/272]	 lr: 0.00000	Time 0.411 (0.527)	Data 0.103 (0.207)	Loss 0.0119 (0.0170)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [78][120/272]	 lr: 0.00000	Time 0.410 (0.520)	Data 0.106 (0.200)	Loss 0.0099 (0.0166)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [78][130/272]	 lr: 0.00000	Time 0.407 (0.514)	Data 0.127 (0.195)	Loss 0.0150 (0.0164)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [78][140/272]	 lr: 0.00000	Time 0.330 (0.509)	Data 0.119 (0.190)	Loss 0.0052 (0.0163)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [78][150/272]	 lr: 0.00000	Time 0.468 (0.505)	Data 0.128 (0.186)	Loss 0.0335 (0.0171)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [78][160/272]	 lr: 0.00000	Time 0.532 (0.502)	Data 0.130 (0.182)	Loss 0.0109 (0.0169)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [78][170/272]	 lr: 0.00000	Time 0.340 (0.499)	Data 0.126 (0.179)	Loss 0.0103 (0.0172)	Prec@1 100.00000 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [78][180/272]	 lr: 0.00000	Time 0.388 (0.497)	Data 0.123 (0.176)	Loss 0.0041 (0.0176)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [78][190/272]	 lr: 0.00000	Time 0.505 (0.494)	Data 0.149 (0.173)	Loss 0.0099 (0.0174)	Prec@1 100.00000 (99.88548)	Prec@5 100.00000 (100.00000)
Epoch: [78][200/272]	 lr: 0.00000	Time 0.423 (0.492)	Data 0.129 (0.171)	Loss 0.0090 (0.0171)	Prec@1 100.00000 (99.89117)	Prec@5 100.00000 (100.00000)
Epoch: [78][210/272]	 lr: 0.00000	Time 0.429 (0.490)	Data 0.126 (0.169)	Loss 0.0087 (0.0169)	Prec@1 100.00000 (99.89633)	Prec@5 100.00000 (100.00000)
Epoch: [78][220/272]	 lr: 0.00000	Time 0.429 (0.488)	Data 0.141 (0.167)	Loss 0.0076 (0.0168)	Prec@1 100.00000 (99.90102)	Prec@5 100.00000 (100.00001)
Epoch: [78][230/272]	 lr: 0.00000	Time 0.436 (0.486)	Data 0.141 (0.165)	Loss 0.0122 (0.0167)	Prec@1 100.00000 (99.90530)	Prec@5 100.00000 (100.00000)
Epoch: [78][240/272]	 lr: 0.00000	Time 0.262 (0.484)	Data 0.127 (0.164)	Loss 0.0041 (0.0165)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [78][250/272]	 lr: 0.00000	Time 0.238 (0.474)	Data 0.129 (0.162)	Loss 0.0087 (0.0167)	Prec@1 100.00000 (99.91285)	Prec@5 100.00000 (100.00000)
Epoch: [78][260/272]	 lr: 0.00000	Time 0.240 (0.465)	Data 0.129 (0.161)	Loss 0.0329 (0.0166)	Prec@1 96.87500 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [78][270/272]	 lr: 0.00000	Time 0.238 (0.457)	Data 0.129 (0.160)	Loss 0.0107 (0.0173)	Prec@1 100.00000 (99.86163)	Prec@5 100.00000 (100.00000)
validation at epoch 78
validation at epoch 78
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [78][1/60]	Time 3.36390 (3.36390)	Data 3.28851 (3.28851)	Loss 0.4048 (0.4048)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][2/60]	Time 3.73878 (3.55134)	Data 3.67457 (3.48154)	Loss 0.4629 (0.4338)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [78][3/60]	Time 0.12952 (2.41073)	Data 0.01449 (2.32585)	Loss 1.2996 (0.7224)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][4/60]	Time 0.24034 (1.86813)	Data 0.14118 (1.77969)	Loss 0.2713 (0.6096)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [78][5/60]	Time 0.10375 (1.51526)	Data 0.01439 (1.42663)	Loss 0.4635 (0.5804)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [78][6/60]	Time 0.06766 (1.27399)	Data 0.00254 (1.18928)	Loss 0.4901 (0.5653)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [78][7/60]	Time 0.20157 (1.12079)	Data 0.07538 (1.03015)	Loss 1.5133 (0.7008)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [78][8/60]	Time 0.18654 (1.00401)	Data 0.00621 (0.90216)	Loss 1.4393 (0.7931)	Prec@1 62.50000 (73.43750)	Prec@5 87.50000 (98.43750)
Epoch: [78][9/60]	Time 0.17588 (0.91199)	Data 0.00988 (0.80302)	Loss 0.7603 (0.7894)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [78][10/60]	Time 0.04683 (0.82548)	Data 0.00069 (0.72278)	Loss 0.7065 (0.7812)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [78][11/60]	Time 0.17795 (0.76661)	Data 0.00400 (0.65744)	Loss 0.6732 (0.7713)	Prec@1 87.50000 (73.86364)	Prec@5 87.50000 (97.72727)
Epoch: [78][12/60]	Time 0.09512 (0.71065)	Data 0.00263 (0.60287)	Loss 1.3953 (0.8233)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (97.91667)
Epoch: [78][13/60]	Time 0.19621 (0.67108)	Data 0.05678 (0.56086)	Loss 1.8338 (0.9011)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (98.07693)
Epoch: [78][14/60]	Time 0.11554 (0.63140)	Data 0.01140 (0.52162)	Loss 0.1136 (0.8448)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (98.21429)
Epoch: [78][15/60]	Time 0.12373 (0.59756)	Data 0.00388 (0.48710)	Loss 1.3463 (0.8782)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (98.33334)
Epoch: [78][16/60]	Time 0.10068 (0.56650)	Data 0.00154 (0.45675)	Loss 1.2246 (0.8999)	Prec@1 75.00000 (71.87500)	Prec@5 87.50000 (97.65625)
Epoch: [78][17/60]	Time 0.05816 (0.53660)	Data 0.00202 (0.43000)	Loss 0.3671 (0.8686)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (97.79412)
Epoch: [78][18/60]	Time 0.14175 (0.51466)	Data 0.04954 (0.40887)	Loss 2.5742 (0.9633)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (97.91666)
Epoch: [78][19/60]	Time 0.09738 (0.49270)	Data 0.01555 (0.38817)	Loss 0.1575 (0.9209)	Prec@1 87.50000 (73.68421)	Prec@5 100.00000 (98.02631)
Epoch: [78][20/60]	Time 0.25147 (0.48064)	Data 0.08752 (0.37313)	Loss 2.5761 (1.0037)	Prec@1 62.50000 (73.12500)	Prec@5 87.50000 (97.50000)
Epoch: [78][21/60]	Time 0.22985 (0.46870)	Data 0.00851 (0.35577)	Loss 0.7327 (0.9908)	Prec@1 62.50000 (72.61905)	Prec@5 100.00000 (97.61905)
Epoch: [78][22/60]	Time 0.12469 (0.45306)	Data 0.05197 (0.34196)	Loss 0.6462 (0.9751)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (97.72727)
Epoch: [78][23/60]	Time 0.25964 (0.44465)	Data 0.03673 (0.32869)	Loss 1.1129 (0.9811)	Prec@1 62.50000 (72.28261)	Prec@5 100.00000 (97.82609)
Epoch: [78][24/60]	Time 0.07700 (0.42933)	Data 0.01959 (0.31581)	Loss 0.6595 (0.9677)	Prec@1 75.00000 (72.39584)	Prec@5 100.00000 (97.91667)
Epoch: [78][25/60]	Time 0.13247 (0.41746)	Data 0.03757 (0.30468)	Loss 0.4904 (0.9486)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.00000)
Epoch: [78][26/60]	Time 0.12923 (0.40637)	Data 0.02730 (0.29401)	Loss 0.0248 (0.9131)	Prec@1 100.00000 (73.55769)	Prec@5 100.00000 (98.07693)
Epoch: [78][27/60]	Time 0.16591 (0.39747)	Data 0.00634 (0.28336)	Loss 0.9610 (0.9148)	Prec@1 62.50000 (73.14815)	Prec@5 100.00000 (98.14815)
Epoch: [78][28/60]	Time 0.13898 (0.38823)	Data 0.00432 (0.27339)	Loss 0.3452 (0.8945)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (98.21429)
Epoch: [78][29/60]	Time 0.10692 (0.37853)	Data 0.01683 (0.26455)	Loss 0.6402 (0.8857)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (98.27586)
Epoch: [78][30/60]	Time 0.06652 (0.36813)	Data 0.00054 (0.25575)	Loss 1.8874 (0.9191)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (98.33334)
Epoch: [78][31/60]	Time 0.06809 (0.35845)	Data 0.01352 (0.24793)	Loss 2.8970 (0.9829)	Prec@1 37.50000 (72.17741)	Prec@5 87.50000 (97.98387)
Epoch: [78][32/60]	Time 0.04515 (0.34866)	Data 0.00038 (0.24020)	Loss 0.9792 (0.9828)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (98.04688)
Epoch: [78][33/60]	Time 0.04525 (0.33947)	Data 0.00064 (0.23294)	Loss 0.1693 (0.9582)	Prec@1 87.50000 (72.34849)	Prec@5 100.00000 (98.10606)
Epoch: [78][34/60]	Time 0.04637 (0.33085)	Data 0.00053 (0.22610)	Loss 1.3613 (0.9700)	Prec@1 62.50000 (72.05882)	Prec@5 100.00000 (98.16177)
Epoch: [78][35/60]	Time 0.02949 (0.32224)	Data 0.00049 (0.21966)	Loss 1.5987 (0.9880)	Prec@1 75.00000 (72.14286)	Prec@5 87.50000 (97.85715)
Epoch: [78][36/60]	Time 0.02315 (0.31393)	Data 0.00072 (0.21357)	Loss 1.3580 (0.9983)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (97.91666)
Epoch: [78][37/60]	Time 0.02289 (0.30606)	Data 0.00067 (0.20782)	Loss 1.7028 (1.0173)	Prec@1 62.50000 (71.62162)	Prec@5 100.00000 (97.97298)
Epoch: [78][38/60]	Time 0.02287 (0.29861)	Data 0.00070 (0.20237)	Loss 2.6202 (1.0595)	Prec@1 50.00000 (71.05264)	Prec@5 100.00000 (98.02631)
Epoch: [78][39/60]	Time 0.02380 (0.29156)	Data 0.00069 (0.19720)	Loss 0.2052 (1.0376)	Prec@1 87.50000 (71.47436)	Prec@5 100.00000 (98.07693)
Epoch: [78][40/60]	Time 0.02321 (0.28486)	Data 0.00051 (0.19228)	Loss 0.3791 (1.0211)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (98.12500)
Epoch: [78][41/60]	Time 0.02257 (0.27846)	Data 0.00043 (0.18760)	Loss 0.7248 (1.0139)	Prec@1 75.00000 (71.95122)	Prec@5 100.00000 (98.17073)
Epoch: [78][42/60]	Time 0.02245 (0.27236)	Data 0.00043 (0.18314)	Loss 1.2394 (1.0193)	Prec@1 75.00000 (72.02381)	Prec@5 100.00000 (98.21429)
Epoch: [78][43/60]	Time 0.02252 (0.26655)	Data 0.00043 (0.17890)	Loss 0.8947 (1.0164)	Prec@1 62.50000 (71.80232)	Prec@5 100.00000 (98.25581)
Epoch: [78][44/60]	Time 0.02358 (0.26103)	Data 0.00045 (0.17484)	Loss 1.0319 (1.0167)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (98.29546)
Epoch: [78][45/60]	Time 0.02260 (0.25573)	Data 0.00050 (0.17097)	Loss 0.8547 (1.0131)	Prec@1 87.50000 (72.22222)	Prec@5 100.00000 (98.33334)
Epoch: [78][46/60]	Time 0.02259 (0.25066)	Data 0.00042 (0.16726)	Loss 1.1723 (1.0166)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (98.36957)
Epoch: [78][47/60]	Time 0.02249 (0.24581)	Data 0.00046 (0.16371)	Loss 0.9194 (1.0145)	Prec@1 75.00000 (71.80851)	Prec@5 87.50000 (98.13830)
Epoch: [78][48/60]	Time 0.02305 (0.24117)	Data 0.00046 (0.16031)	Loss 0.4771 (1.0033)	Prec@1 87.50000 (72.13542)	Prec@5 100.00000 (98.17709)
Epoch: [78][49/60]	Time 0.02354 (0.23673)	Data 0.00043 (0.15705)	Loss 0.3194 (0.9894)	Prec@1 75.00000 (72.19388)	Prec@5 100.00000 (98.21429)
Epoch: [78][50/60]	Time 0.02259 (0.23244)	Data 0.00043 (0.15391)	Loss 0.5737 (0.9810)	Prec@1 75.00000 (72.25000)	Prec@5 100.00000 (98.25000)
Epoch: [78][51/60]	Time 0.02262 (0.22833)	Data 0.00042 (0.15090)	Loss 0.4711 (0.9710)	Prec@1 75.00000 (72.30392)	Prec@5 100.00000 (98.28432)
Epoch: [78][52/60]	Time 0.02265 (0.22438)	Data 0.00046 (0.14801)	Loss 0.9528 (0.9707)	Prec@1 50.00000 (71.87500)	Prec@5 100.00000 (98.31731)
Epoch: [78][53/60]	Time 0.02302 (0.22058)	Data 0.00040 (0.14523)	Loss 0.5031 (0.9619)	Prec@1 75.00000 (71.93396)	Prec@5 100.00000 (98.34906)
Epoch: [78][54/60]	Time 0.02321 (0.21692)	Data 0.00048 (0.14254)	Loss 1.0315 (0.9632)	Prec@1 75.00000 (71.99074)	Prec@5 100.00000 (98.37963)
Epoch: [78][55/60]	Time 0.02291 (0.21339)	Data 0.00045 (0.13996)	Loss 1.1265 (0.9661)	Prec@1 62.50000 (71.81818)	Prec@5 87.50000 (98.18182)
Epoch: [78][56/60]	Time 0.02277 (0.20999)	Data 0.00049 (0.13747)	Loss 0.6506 (0.9605)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (98.21429)
Epoch: [78][57/60]	Time 0.02252 (0.20670)	Data 0.00046 (0.13507)	Loss 1.4267 (0.9687)	Prec@1 62.50000 (71.71053)	Prec@5 100.00000 (98.24561)
Epoch: [78][58/60]	Time 0.02320 (0.20354)	Data 0.00049 (0.13275)	Loss 0.6860 (0.9638)	Prec@1 75.00000 (71.76724)	Prec@5 100.00000 (98.27586)
Epoch: [78][59/60]	Time 0.02303 (0.20048)	Data 0.00043 (0.13050)	Loss 0.8370 (0.9616)	Prec@1 75.00000 (71.82204)	Prec@5 100.00000 (98.30508)
Epoch: [78][60/60]	Time 0.02258 (0.19751)	Data 0.00058 (0.12834)	Loss 0.5130 (0.9542)	Prec@1 87.50000 (72.08334)	Prec@5 100.00000 (98.33334)
train at epoch 79
train at epoch 79
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [79][0/272]	 lr: 0.00000	Time 9.581 (9.581)	Data 8.981 (8.981)	Loss 0.0132 (0.0132)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][10/272]	 lr: 0.00000	Time 0.418 (1.306)	Data 0.111 (0.932)	Loss 0.0206 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][20/272]	 lr: 0.00000	Time 0.403 (0.869)	Data 0.128 (0.551)	Loss 0.0069 (0.0176)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][30/272]	 lr: 0.00000	Time 0.397 (0.733)	Data 0.138 (0.416)	Loss 0.0327 (0.0171)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][40/272]	 lr: 0.00000	Time 0.388 (0.660)	Data 0.128 (0.346)	Loss 0.0051 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][50/272]	 lr: 0.00000	Time 0.399 (0.620)	Data 0.134 (0.304)	Loss 0.0293 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][60/272]	 lr: 0.00000	Time 0.564 (0.594)	Data 0.126 (0.275)	Loss 0.0853 (0.0173)	Prec@1 96.87500 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [79][70/272]	 lr: 0.00000	Time 0.421 (0.570)	Data 0.127 (0.254)	Loss 0.0249 (0.0176)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [79][80/272]	 lr: 0.00000	Time 0.515 (0.555)	Data 0.128 (0.238)	Loss 0.0067 (0.0170)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [79][90/272]	 lr: 0.00000	Time 0.461 (0.542)	Data 0.140 (0.227)	Loss 0.0109 (0.0190)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [79][100/272]	 lr: 0.00000	Time 0.487 (0.531)	Data 0.138 (0.217)	Loss 0.0102 (0.0191)	Prec@1 100.00000 (99.87624)	Prec@5 100.00000 (100.00000)
Epoch: [79][110/272]	 lr: 0.00000	Time 0.509 (0.523)	Data 0.140 (0.209)	Loss 0.0081 (0.0185)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [79][120/272]	 lr: 0.00000	Time 0.428 (0.517)	Data 0.128 (0.202)	Loss 0.0169 (0.0189)	Prec@1 100.00000 (99.84504)	Prec@5 100.00000 (99.99999)
Epoch: [79][130/272]	 lr: 0.00000	Time 0.410 (0.511)	Data 0.129 (0.197)	Loss 0.0059 (0.0186)	Prec@1 100.00000 (99.85687)	Prec@5 100.00000 (100.00000)
Epoch: [79][140/272]	 lr: 0.00000	Time 0.519 (0.507)	Data 0.109 (0.192)	Loss 0.0054 (0.0188)	Prec@1 100.00000 (99.82269)	Prec@5 100.00000 (100.00000)
Epoch: [79][150/272]	 lr: 0.00000	Time 0.394 (0.503)	Data 0.128 (0.188)	Loss 0.0173 (0.0190)	Prec@1 100.00000 (99.83443)	Prec@5 100.00000 (100.00000)
Epoch: [79][160/272]	 lr: 0.00000	Time 0.516 (0.499)	Data 0.135 (0.184)	Loss 0.0341 (0.0189)	Prec@1 100.00000 (99.84472)	Prec@5 100.00000 (100.00000)
Epoch: [79][170/272]	 lr: 0.00000	Time 0.454 (0.495)	Data 0.142 (0.181)	Loss 0.0062 (0.0189)	Prec@1 100.00000 (99.85381)	Prec@5 100.00000 (100.00000)
Epoch: [79][180/272]	 lr: 0.00000	Time 0.396 (0.492)	Data 0.128 (0.178)	Loss 0.0063 (0.0186)	Prec@1 100.00000 (99.86189)	Prec@5 100.00000 (100.00001)
Epoch: [79][190/272]	 lr: 0.00000	Time 0.430 (0.490)	Data 0.131 (0.175)	Loss 0.0066 (0.0181)	Prec@1 100.00000 (99.86911)	Prec@5 100.00000 (100.00000)
Epoch: [79][200/272]	 lr: 0.00000	Time 0.471 (0.487)	Data 0.142 (0.173)	Loss 0.0111 (0.0180)	Prec@1 100.00000 (99.87562)	Prec@5 100.00000 (100.00000)
Epoch: [79][210/272]	 lr: 0.00000	Time 0.492 (0.485)	Data 0.128 (0.171)	Loss 0.0164 (0.0179)	Prec@1 100.00000 (99.88152)	Prec@5 100.00000 (100.00000)
Epoch: [79][220/272]	 lr: 0.00000	Time 0.496 (0.483)	Data 0.141 (0.170)	Loss 0.0019 (0.0175)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [79][230/272]	 lr: 0.00000	Time 0.402 (0.482)	Data 0.125 (0.168)	Loss 0.0131 (0.0176)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [79][240/272]	 lr: 0.00000	Time 0.402 (0.479)	Data 0.128 (0.166)	Loss 0.0084 (0.0174)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [79][250/272]	 lr: 0.00000	Time 0.240 (0.470)	Data 0.128 (0.165)	Loss 0.0297 (0.0176)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [79][260/272]	 lr: 0.00000	Time 0.240 (0.461)	Data 0.128 (0.163)	Loss 0.0402 (0.0177)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [79][270/272]	 lr: 0.00000	Time 0.239 (0.453)	Data 0.128 (0.162)	Loss 0.0222 (0.0176)	Prec@1 100.00000 (99.89622)	Prec@5 100.00000 (100.00000)
validation at epoch 79
validation at epoch 79
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [79][1/60]	Time 3.04761 (3.04761)	Data 2.99911 (2.99911)	Loss 0.4101 (0.4101)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [79][2/60]	Time 4.21818 (3.63290)	Data 4.11985 (3.55948)	Loss 0.4743 (0.4422)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [79][3/60]	Time 0.19637 (2.48739)	Data 0.05512 (2.39136)	Loss 1.2187 (0.7011)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [79][4/60]	Time 0.16286 (1.90626)	Data 0.09541 (1.81737)	Loss 0.2255 (0.5822)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [79][5/60]	Time 0.20447 (1.56590)	Data 0.01749 (1.45739)	Loss 0.3008 (0.5259)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [79][6/60]	Time 0.16843 (1.33299)	Data 0.06420 (1.22519)	Loss 0.4405 (0.5117)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [79][7/60]	Time 0.07473 (1.15324)	Data 0.00066 (1.05026)	Loss 1.2293 (0.6142)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [79][8/60]	Time 0.12778 (1.02505)	Data 0.00673 (0.91982)	Loss 1.1054 (0.6756)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][9/60]	Time 0.24357 (0.93822)	Data 0.07842 (0.82633)	Loss 0.6861 (0.6768)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][10/60]	Time 0.20947 (0.86535)	Data 0.07489 (0.75119)	Loss 0.5596 (0.6650)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][11/60]	Time 0.09388 (0.79521)	Data 0.00974 (0.68378)	Loss 0.5395 (0.6536)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [79][12/60]	Time 0.07322 (0.73505)	Data 0.01160 (0.62777)	Loss 1.2760 (0.7055)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][13/60]	Time 0.13768 (0.68910)	Data 0.00086 (0.57954)	Loss 1.9398 (0.8004)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [79][14/60]	Time 0.06692 (0.64465)	Data 0.00368 (0.53841)	Loss 0.0708 (0.7483)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [79][15/60]	Time 0.13315 (0.61055)	Data 0.00084 (0.50257)	Loss 1.1482 (0.7750)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [79][16/60]	Time 0.10489 (0.57895)	Data 0.02432 (0.47268)	Loss 0.9852 (0.7881)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [79][17/60]	Time 0.07337 (0.54921)	Data 0.00056 (0.44491)	Loss 0.3496 (0.7623)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [79][18/60]	Time 0.27588 (0.53403)	Data 0.07703 (0.42447)	Loss 2.2108 (0.8428)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [79][19/60]	Time 0.17614 (0.51519)	Data 0.03397 (0.40392)	Loss 0.1623 (0.8070)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][20/60]	Time 0.12663 (0.49576)	Data 0.01736 (0.38459)	Loss 2.1011 (0.8717)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (100.00000)
Epoch: [79][21/60]	Time 0.12255 (0.47799)	Data 0.04489 (0.36842)	Loss 0.5127 (0.8546)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][22/60]	Time 0.29510 (0.46968)	Data 0.06993 (0.35485)	Loss 0.5477 (0.8406)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][23/60]	Time 0.10960 (0.45402)	Data 0.00050 (0.33944)	Loss 0.9600 (0.8458)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [79][24/60]	Time 0.24131 (0.44516)	Data 0.07431 (0.32839)	Loss 0.7087 (0.8401)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [79][25/60]	Time 0.14626 (0.43320)	Data 0.01038 (0.31567)	Loss 0.4390 (0.8241)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [79][26/60]	Time 0.12734 (0.42144)	Data 0.00771 (0.30383)	Loss 0.0733 (0.7952)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [79][27/60]	Time 0.12070 (0.41030)	Data 0.01638 (0.29318)	Loss 0.6792 (0.7909)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (100.00000)
Epoch: [79][28/60]	Time 0.08238 (0.39859)	Data 0.00461 (0.28288)	Loss 0.4905 (0.7802)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [79][29/60]	Time 0.04946 (0.38655)	Data 0.00039 (0.27314)	Loss 0.6027 (0.7741)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [79][30/60]	Time 0.07959 (0.37632)	Data 0.00045 (0.26405)	Loss 1.6577 (0.8035)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (100.00001)
Epoch: [79][31/60]	Time 0.05783 (0.36604)	Data 0.00329 (0.25564)	Loss 2.2419 (0.8499)	Prec@1 37.50000 (73.38709)	Prec@5 100.00000 (100.00000)
Epoch: [79][32/60]	Time 0.05141 (0.35621)	Data 0.00042 (0.24766)	Loss 0.6058 (0.8423)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [79][33/60]	Time 0.04612 (0.34681)	Data 0.00050 (0.24017)	Loss 0.1085 (0.8200)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [79][34/60]	Time 0.04179 (0.33784)	Data 0.00039 (0.23312)	Loss 1.1176 (0.8288)	Prec@1 62.50000 (73.52941)	Prec@5 100.00000 (100.00000)
Epoch: [79][35/60]	Time 0.04215 (0.32939)	Data 0.00062 (0.22647)	Loss 1.3281 (0.8431)	Prec@1 75.00000 (73.57143)	Prec@5 100.00000 (100.00000)
Epoch: [79][36/60]	Time 0.05531 (0.32178)	Data 0.00044 (0.22020)	Loss 0.9337 (0.8456)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (100.00000)
Epoch: [79][37/60]	Time 0.03085 (0.31392)	Data 0.00056 (0.21426)	Loss 1.3637 (0.8596)	Prec@1 62.50000 (72.97298)	Prec@5 100.00000 (100.00000)
Epoch: [79][38/60]	Time 0.02903 (0.30642)	Data 0.00066 (0.20864)	Loss 2.1781 (0.8943)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (100.00000)
Epoch: [79][39/60]	Time 0.02711 (0.29926)	Data 0.00100 (0.20331)	Loss 0.1226 (0.8745)	Prec@1 87.50000 (72.75641)	Prec@5 100.00000 (100.00000)
Epoch: [79][40/60]	Time 0.02291 (0.29235)	Data 0.00088 (0.19825)	Loss 0.2629 (0.8592)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (100.00000)
Epoch: [79][41/60]	Time 0.02338 (0.28579)	Data 0.00082 (0.19344)	Loss 0.4885 (0.8502)	Prec@1 75.00000 (73.17073)	Prec@5 100.00000 (100.00000)
Epoch: [79][42/60]	Time 0.02245 (0.27952)	Data 0.00045 (0.18884)	Loss 1.0780 (0.8556)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (100.00000)
Epoch: [79][43/60]	Time 0.02263 (0.27355)	Data 0.00045 (0.18446)	Loss 0.5828 (0.8492)	Prec@1 87.50000 (73.54651)	Prec@5 100.00000 (100.00000)
Epoch: [79][44/60]	Time 0.02245 (0.26784)	Data 0.00045 (0.18028)	Loss 0.6985 (0.8458)	Prec@1 75.00000 (73.57954)	Prec@5 100.00000 (100.00000)
Epoch: [79][45/60]	Time 0.02331 (0.26241)	Data 0.00040 (0.17628)	Loss 0.7265 (0.8432)	Prec@1 87.50000 (73.88889)	Prec@5 100.00000 (100.00000)
Epoch: [79][46/60]	Time 0.02369 (0.25722)	Data 0.00048 (0.17246)	Loss 1.1279 (0.8494)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [79][47/60]	Time 0.02256 (0.25222)	Data 0.00042 (0.16880)	Loss 1.1076 (0.8548)	Prec@1 75.00000 (73.40425)	Prec@5 87.50000 (99.73404)
Epoch: [79][48/60]	Time 0.02261 (0.24744)	Data 0.00044 (0.16529)	Loss 0.4595 (0.8466)	Prec@1 87.50000 (73.69792)	Prec@5 100.00000 (99.73959)
Epoch: [79][49/60]	Time 0.02269 (0.24285)	Data 0.00050 (0.16193)	Loss 0.3042 (0.8355)	Prec@1 87.50000 (73.97959)	Prec@5 100.00000 (99.74490)
Epoch: [79][50/60]	Time 0.02292 (0.23845)	Data 0.00043 (0.15870)	Loss 0.8606 (0.8360)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (99.75000)
Epoch: [79][51/60]	Time 0.02293 (0.23423)	Data 0.00045 (0.15560)	Loss 0.4070 (0.8276)	Prec@1 75.00000 (74.01961)	Prec@5 100.00000 (99.75491)
Epoch: [79][52/60]	Time 0.02251 (0.23016)	Data 0.00045 (0.15261)	Loss 0.9838 (0.8306)	Prec@1 50.00000 (73.55769)	Prec@5 87.50000 (99.51923)
Epoch: [79][53/60]	Time 0.02253 (0.22624)	Data 0.00040 (0.14974)	Loss 0.7122 (0.8284)	Prec@1 75.00000 (73.58491)	Prec@5 100.00000 (99.52831)
Epoch: [79][54/60]	Time 0.02252 (0.22247)	Data 0.00045 (0.14698)	Loss 0.9555 (0.8307)	Prec@1 75.00000 (73.61111)	Prec@5 100.00000 (99.53704)
Epoch: [79][55/60]	Time 0.02310 (0.21884)	Data 0.00044 (0.14431)	Loss 1.3472 (0.8401)	Prec@1 62.50000 (73.40909)	Prec@5 87.50000 (99.31818)
Epoch: [79][56/60]	Time 0.02284 (0.21534)	Data 0.00053 (0.14174)	Loss 0.7521 (0.8386)	Prec@1 62.50000 (73.21429)	Prec@5 100.00000 (99.33036)
Epoch: [79][57/60]	Time 0.02308 (0.21197)	Data 0.00049 (0.13927)	Loss 1.5066 (0.8503)	Prec@1 62.50000 (73.02631)	Prec@5 87.50000 (99.12281)
Epoch: [79][58/60]	Time 0.02257 (0.20870)	Data 0.00043 (0.13687)	Loss 0.7270 (0.8482)	Prec@1 62.50000 (72.84483)	Prec@5 100.00000 (99.13793)
Epoch: [79][59/60]	Time 0.02269 (0.20555)	Data 0.00056 (0.13456)	Loss 0.8166 (0.8476)	Prec@1 87.50000 (73.09322)	Prec@5 100.00000 (99.15254)
Epoch: [79][60/60]	Time 0.02269 (0.20250)	Data 0.00049 (0.13233)	Loss 0.6080 (0.8436)	Prec@1 75.00000 (73.12500)	Prec@5 100.00000 (99.16667)
train at epoch 80
train at epoch 80
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [80][0/272]	 lr: 0.00000	Time 7.278 (7.278)	Data 5.898 (5.898)	Loss 0.0109 (0.0109)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][10/272]	 lr: 0.00000	Time 0.383 (1.248)	Data 0.129 (0.652)	Loss 0.0075 (0.0858)	Prec@1 100.00000 (97.72727)	Prec@5 100.00000 (100.00000)
Epoch: [80][20/272]	 lr: 0.00000	Time 0.461 (0.854)	Data 0.127 (0.404)	Loss 0.1039 (0.0564)	Prec@1 96.87500 (98.66071)	Prec@5 100.00000 (100.00000)
Epoch: [80][30/272]	 lr: 0.00000	Time 0.450 (0.720)	Data 0.121 (0.315)	Loss 0.0093 (0.0423)	Prec@1 100.00000 (99.09274)	Prec@5 100.00000 (100.00000)
Epoch: [80][40/272]	 lr: 0.00000	Time 0.486 (0.653)	Data 0.129 (0.270)	Loss 0.0095 (0.0361)	Prec@1 100.00000 (99.31402)	Prec@5 100.00000 (100.00000)
Epoch: [80][50/272]	 lr: 0.00000	Time 0.392 (0.609)	Data 0.129 (0.242)	Loss 0.0096 (0.0317)	Prec@1 100.00000 (99.44853)	Prec@5 100.00000 (100.00000)
Epoch: [80][60/272]	 lr: 0.00000	Time 0.455 (0.582)	Data 0.128 (0.224)	Loss 0.0091 (0.0289)	Prec@1 100.00000 (99.53893)	Prec@5 100.00000 (99.99999)
Epoch: [80][70/272]	 lr: 0.00000	Time 0.487 (0.561)	Data 0.127 (0.211)	Loss 0.0178 (0.0269)	Prec@1 100.00000 (99.55986)	Prec@5 100.00000 (100.00000)
Epoch: [80][80/272]	 lr: 0.00000	Time 0.391 (0.548)	Data 0.128 (0.201)	Loss 0.0091 (0.0258)	Prec@1 100.00000 (99.61420)	Prec@5 100.00000 (100.00000)
Epoch: [80][90/272]	 lr: 0.00000	Time 0.373 (0.536)	Data 0.129 (0.192)	Loss 0.0085 (0.0242)	Prec@1 100.00000 (99.65659)	Prec@5 100.00000 (100.00000)
Epoch: [80][100/272]	 lr: 0.00000	Time 0.427 (0.526)	Data 0.144 (0.186)	Loss 0.0202 (0.0238)	Prec@1 100.00000 (99.69059)	Prec@5 100.00000 (100.00000)
Epoch: [80][110/272]	 lr: 0.00000	Time 0.422 (0.518)	Data 0.099 (0.181)	Loss 0.0302 (0.0235)	Prec@1 100.00000 (99.71847)	Prec@5 100.00000 (100.00000)
Epoch: [80][120/272]	 lr: 0.00000	Time 0.543 (0.511)	Data 0.143 (0.177)	Loss 0.0405 (0.0229)	Prec@1 100.00000 (99.74173)	Prec@5 100.00000 (99.99999)
Epoch: [80][130/272]	 lr: 0.00000	Time 0.517 (0.506)	Data 0.142 (0.173)	Loss 0.0366 (0.0247)	Prec@1 100.00000 (99.66603)	Prec@5 100.00000 (100.00000)
Epoch: [80][140/272]	 lr: 0.00000	Time 0.428 (0.499)	Data 0.129 (0.170)	Loss 0.0125 (0.0238)	Prec@1 100.00000 (99.68971)	Prec@5 100.00000 (100.00000)
Epoch: [80][150/272]	 lr: 0.00000	Time 0.446 (0.496)	Data 0.129 (0.168)	Loss 0.0186 (0.0231)	Prec@1 100.00000 (99.71027)	Prec@5 100.00000 (100.00000)
Epoch: [80][160/272]	 lr: 0.00000	Time 0.451 (0.492)	Data 0.114 (0.165)	Loss 0.0178 (0.0228)	Prec@1 100.00000 (99.72826)	Prec@5 100.00000 (100.00000)
Epoch: [80][170/272]	 lr: 0.00000	Time 0.477 (0.490)	Data 0.122 (0.163)	Loss 0.0139 (0.0223)	Prec@1 100.00000 (99.74416)	Prec@5 100.00000 (100.00000)
Epoch: [80][180/272]	 lr: 0.00000	Time 0.407 (0.488)	Data 0.127 (0.161)	Loss 0.0163 (0.0220)	Prec@1 100.00000 (99.75829)	Prec@5 100.00000 (100.00001)
Epoch: [80][190/272]	 lr: 0.00000	Time 0.345 (0.485)	Data 0.118 (0.159)	Loss 0.0336 (0.0217)	Prec@1 100.00000 (99.77094)	Prec@5 100.00000 (100.00000)
Epoch: [80][200/272]	 lr: 0.00000	Time 0.535 (0.484)	Data 0.141 (0.158)	Loss 0.0048 (0.0213)	Prec@1 100.00000 (99.78233)	Prec@5 100.00000 (100.00000)
Epoch: [80][210/272]	 lr: 0.00000	Time 0.436 (0.482)	Data 0.110 (0.156)	Loss 0.0063 (0.0211)	Prec@1 100.00000 (99.79266)	Prec@5 100.00000 (100.00000)
Epoch: [80][220/272]	 lr: 0.00000	Time 0.486 (0.480)	Data 0.130 (0.155)	Loss 0.0212 (0.0212)	Prec@1 100.00000 (99.80204)	Prec@5 100.00000 (100.00001)
Epoch: [80][230/272]	 lr: 0.00000	Time 0.418 (0.479)	Data 0.123 (0.154)	Loss 0.0054 (0.0210)	Prec@1 100.00000 (99.81061)	Prec@5 100.00000 (100.00000)
Epoch: [80][240/272]	 lr: 0.00000	Time 0.437 (0.477)	Data 0.110 (0.153)	Loss 0.0296 (0.0206)	Prec@1 100.00000 (99.81847)	Prec@5 100.00000 (100.00001)
Epoch: [80][250/272]	 lr: 0.00000	Time 0.240 (0.468)	Data 0.129 (0.152)	Loss 0.0125 (0.0210)	Prec@1 100.00000 (99.77590)	Prec@5 100.00000 (100.00000)
Epoch: [80][260/272]	 lr: 0.00000	Time 0.239 (0.459)	Data 0.129 (0.151)	Loss 0.0072 (0.0209)	Prec@1 100.00000 (99.78448)	Prec@5 100.00000 (100.00000)
Epoch: [80][270/272]	 lr: 0.00000	Time 0.239 (0.451)	Data 0.128 (0.150)	Loss 0.0080 (0.0205)	Prec@1 100.00000 (99.79243)	Prec@5 100.00000 (100.00000)
validation at epoch 80
validation at epoch 80
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [80][1/60]	Time 6.68232 (6.68232)	Data 6.57735 (6.57735)	Loss 0.4106 (0.4106)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][2/60]	Time 0.69310 (3.68771)	Data 0.61620 (3.59678)	Loss 0.4590 (0.4348)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [80][3/60]	Time 0.12598 (2.50046)	Data 0.02900 (2.40752)	Loss 1.2804 (0.7167)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [80][4/60]	Time 0.10668 (1.90202)	Data 0.01824 (1.81020)	Loss 0.2020 (0.5880)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [80][5/60]	Time 0.08627 (1.53887)	Data 0.00057 (1.44827)	Loss 0.4506 (0.5605)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [80][6/60]	Time 0.14271 (1.30617)	Data 0.00059 (1.20699)	Loss 0.4051 (0.5346)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [80][7/60]	Time 0.15302 (1.14144)	Data 0.00631 (1.03547)	Loss 1.3793 (0.6553)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [80][8/60]	Time 0.23376 (1.02798)	Data 0.01083 (0.90739)	Loss 1.3886 (0.7469)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [80][9/60]	Time 0.22614 (0.93888)	Data 0.15972 (0.82431)	Loss 0.7004 (0.7418)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [80][10/60]	Time 0.11596 (0.85659)	Data 0.00300 (0.74218)	Loss 0.6031 (0.7279)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [80][11/60]	Time 0.12339 (0.78994)	Data 0.07485 (0.68152)	Loss 0.5821 (0.7147)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [80][12/60]	Time 0.08980 (0.73159)	Data 0.02050 (0.62643)	Loss 1.2801 (0.7618)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [80][13/60]	Time 0.12181 (0.68469)	Data 0.01836 (0.57966)	Loss 1.9496 (0.8531)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [80][14/60]	Time 0.11573 (0.64405)	Data 0.00590 (0.53867)	Loss 0.1137 (0.8003)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [80][15/60]	Time 0.23330 (0.61666)	Data 0.07575 (0.50781)	Loss 1.3278 (0.8355)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [80][16/60]	Time 0.25016 (0.59376)	Data 0.09847 (0.48223)	Loss 1.0350 (0.8480)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [80][17/60]	Time 0.05485 (0.56206)	Data 0.00100 (0.45392)	Loss 0.3300 (0.8175)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][18/60]	Time 0.10658 (0.53675)	Data 0.00197 (0.42881)	Loss 2.4093 (0.9059)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][19/60]	Time 0.10680 (0.51412)	Data 0.00179 (0.40634)	Loss 0.1679 (0.8671)	Prec@1 87.50000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [80][20/60]	Time 0.09006 (0.49292)	Data 0.00430 (0.38624)	Loss 2.3844 (0.9429)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][21/60]	Time 0.14252 (0.47623)	Data 0.07095 (0.37122)	Loss 0.5501 (0.9242)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][22/60]	Time 0.14589 (0.46122)	Data 0.01159 (0.35487)	Loss 0.5901 (0.9091)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][23/60]	Time 0.14023 (0.44726)	Data 0.01671 (0.34017)	Loss 1.0816 (0.9166)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [80][24/60]	Time 0.12965 (0.43403)	Data 0.01675 (0.32670)	Loss 0.5430 (0.9010)	Prec@1 75.00000 (74.47917)	Prec@5 100.00000 (100.00000)
Epoch: [80][25/60]	Time 0.24039 (0.42628)	Data 0.02368 (0.31458)	Loss 0.4546 (0.8831)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [80][26/60]	Time 0.16694 (0.41631)	Data 0.00081 (0.30251)	Loss 0.0396 (0.8507)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [80][27/60]	Time 0.13848 (0.40602)	Data 0.01324 (0.29179)	Loss 0.8054 (0.8490)	Prec@1 62.50000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [80][28/60]	Time 0.09779 (0.39501)	Data 0.00339 (0.28149)	Loss 0.3627 (0.8316)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [80][29/60]	Time 0.05166 (0.38317)	Data 0.00046 (0.27180)	Loss 0.6949 (0.8269)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (100.00000)
Epoch: [80][30/60]	Time 0.03907 (0.37170)	Data 0.00567 (0.26293)	Loss 1.7955 (0.8592)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (100.00001)
Epoch: [80][31/60]	Time 0.06276 (0.36173)	Data 0.00045 (0.25446)	Loss 2.8118 (0.9222)	Prec@1 25.00000 (73.79032)	Prec@5 87.50000 (99.59677)
Epoch: [80][32/60]	Time 0.09417 (0.35337)	Data 0.00041 (0.24653)	Loss 0.8595 (0.9202)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (99.60938)
Epoch: [80][33/60]	Time 0.09857 (0.34565)	Data 0.00902 (0.23933)	Loss 0.1251 (0.8961)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (99.62122)
Epoch: [80][34/60]	Time 0.05578 (0.33713)	Data 0.00060 (0.23231)	Loss 1.2022 (0.9051)	Prec@1 62.50000 (73.52941)	Prec@5 100.00000 (99.63235)
Epoch: [80][35/60]	Time 0.04583 (0.32880)	Data 0.00044 (0.22568)	Loss 1.5255 (0.9229)	Prec@1 75.00000 (73.57143)	Prec@5 87.50000 (99.28571)
Epoch: [80][36/60]	Time 0.05739 (0.32126)	Data 0.00051 (0.21943)	Loss 1.2857 (0.9330)	Prec@1 62.50000 (73.26389)	Prec@5 100.00000 (99.30556)
Epoch: [80][37/60]	Time 0.03296 (0.31347)	Data 0.00062 (0.21351)	Loss 1.5218 (0.9489)	Prec@1 62.50000 (72.97298)	Prec@5 100.00000 (99.32433)
Epoch: [80][38/60]	Time 0.03207 (0.30607)	Data 0.00445 (0.20801)	Loss 2.3816 (0.9866)	Prec@1 50.00000 (72.36842)	Prec@5 100.00000 (99.34211)
Epoch: [80][39/60]	Time 0.03378 (0.29908)	Data 0.00450 (0.20279)	Loss 0.1622 (0.9654)	Prec@1 87.50000 (72.75641)	Prec@5 100.00000 (99.35898)
Epoch: [80][40/60]	Time 0.03001 (0.29236)	Data 0.00103 (0.19775)	Loss 0.3097 (0.9490)	Prec@1 87.50000 (73.12500)	Prec@5 100.00000 (99.37500)
Epoch: [80][41/60]	Time 0.02875 (0.28593)	Data 0.00052 (0.19294)	Loss 0.6417 (0.9415)	Prec@1 75.00000 (73.17073)	Prec@5 100.00000 (99.39024)
Epoch: [80][42/60]	Time 0.02956 (0.27982)	Data 0.00170 (0.18839)	Loss 1.0827 (0.9449)	Prec@1 75.00000 (73.21429)	Prec@5 100.00000 (99.40476)
Epoch: [80][43/60]	Time 0.02906 (0.27399)	Data 0.00171 (0.18404)	Loss 0.8644 (0.9430)	Prec@1 62.50000 (72.96512)	Prec@5 100.00000 (99.41860)
Epoch: [80][44/60]	Time 0.02807 (0.26840)	Data 0.00182 (0.17990)	Loss 0.8639 (0.9412)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (99.43182)
Epoch: [80][45/60]	Time 0.02268 (0.26294)	Data 0.00040 (0.17591)	Loss 0.7689 (0.9374)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.44445)
Epoch: [80][46/60]	Time 0.02216 (0.25771)	Data 0.00042 (0.17210)	Loss 1.1493 (0.9420)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.45652)
Epoch: [80][47/60]	Time 0.02266 (0.25271)	Data 0.00044 (0.16845)	Loss 0.9615 (0.9424)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.20213)
Epoch: [80][48/60]	Time 0.02334 (0.24793)	Data 0.00047 (0.16495)	Loss 0.4205 (0.9316)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.21875)
Epoch: [80][49/60]	Time 0.02254 (0.24333)	Data 0.00043 (0.16159)	Loss 0.3346 (0.9194)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.23470)
Epoch: [80][50/60]	Time 0.02233 (0.23891)	Data 0.00043 (0.15837)	Loss 0.6851 (0.9147)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.25000)
Epoch: [80][51/60]	Time 0.02371 (0.23469)	Data 0.00040 (0.15527)	Loss 0.3867 (0.9043)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.26471)
Epoch: [80][52/60]	Time 0.02310 (0.23062)	Data 0.00042 (0.15229)	Loss 0.9039 (0.9043)	Prec@1 37.50000 (72.83654)	Prec@5 87.50000 (99.03847)
Epoch: [80][53/60]	Time 0.02200 (0.22668)	Data 0.00045 (0.14943)	Loss 0.6439 (0.8994)	Prec@1 75.00000 (72.87736)	Prec@5 100.00000 (99.05660)
Epoch: [80][54/60]	Time 0.02262 (0.22291)	Data 0.00042 (0.14667)	Loss 0.8422 (0.8984)	Prec@1 75.00000 (72.91666)	Prec@5 100.00000 (99.07407)
Epoch: [80][55/60]	Time 0.02261 (0.21926)	Data 0.00040 (0.14401)	Loss 1.1795 (0.9035)	Prec@1 62.50000 (72.72727)	Prec@5 87.50000 (98.86363)
Epoch: [80][56/60]	Time 0.02244 (0.21575)	Data 0.00047 (0.14144)	Loss 0.7662 (0.9010)	Prec@1 75.00000 (72.76786)	Prec@5 100.00000 (98.88393)
Epoch: [80][57/60]	Time 0.02219 (0.21235)	Data 0.00045 (0.13897)	Loss 1.4507 (0.9107)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (98.68421)
Epoch: [80][58/60]	Time 0.02314 (0.20909)	Data 0.00042 (0.13658)	Loss 0.7713 (0.9083)	Prec@1 62.50000 (72.41380)	Prec@5 100.00000 (98.70689)
Epoch: [80][59/60]	Time 0.02285 (0.20593)	Data 0.00060 (0.13428)	Loss 0.7805 (0.9061)	Prec@1 87.50000 (72.66949)	Prec@5 100.00000 (98.72881)
Epoch: [80][60/60]	Time 0.02558 (0.20293)	Data 0.00044 (0.13205)	Loss 0.5435 (0.9000)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (98.75001)
train at epoch 81
train at epoch 81
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [81][0/272]	 lr: 0.00000	Time 9.662 (9.662)	Data 8.688 (8.688)	Loss 0.0173 (0.0173)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][10/272]	 lr: 0.00000	Time 0.412 (1.289)	Data 0.131 (0.907)	Loss 0.0235 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][20/272]	 lr: 0.00000	Time 0.476 (0.883)	Data 0.128 (0.539)	Loss 0.0062 (0.0130)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][30/272]	 lr: 0.00000	Time 0.425 (0.733)	Data 0.134 (0.409)	Loss 0.0031 (0.0142)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][40/272]	 lr: 0.00000	Time 0.399 (0.663)	Data 0.127 (0.341)	Loss 0.0325 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][50/272]	 lr: 0.00000	Time 0.463 (0.619)	Data 0.131 (0.300)	Loss 0.0095 (0.0145)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][60/272]	 lr: 0.00000	Time 0.415 (0.587)	Data 0.127 (0.272)	Loss 0.0236 (0.0150)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [81][70/272]	 lr: 0.00000	Time 0.467 (0.564)	Data 0.127 (0.252)	Loss 0.0055 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][80/272]	 lr: 0.00000	Time 0.390 (0.548)	Data 0.143 (0.237)	Loss 0.0195 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][90/272]	 lr: 0.00000	Time 0.377 (0.535)	Data 0.129 (0.225)	Loss 0.0050 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][100/272]	 lr: 0.00000	Time 0.346 (0.523)	Data 0.128 (0.216)	Loss 0.0210 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][110/272]	 lr: 0.00000	Time 0.502 (0.515)	Data 0.129 (0.208)	Loss 0.0104 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][120/272]	 lr: 0.00000	Time 0.457 (0.510)	Data 0.140 (0.202)	Loss 0.0159 (0.0152)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [81][130/272]	 lr: 0.00000	Time 0.450 (0.504)	Data 0.129 (0.196)	Loss 0.0121 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][140/272]	 lr: 0.00000	Time 0.463 (0.499)	Data 0.130 (0.192)	Loss 0.0178 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][150/272]	 lr: 0.00000	Time 0.434 (0.495)	Data 0.122 (0.187)	Loss 0.0058 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][160/272]	 lr: 0.00000	Time 0.404 (0.491)	Data 0.128 (0.184)	Loss 0.0072 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][170/272]	 lr: 0.00000	Time 0.434 (0.489)	Data 0.125 (0.181)	Loss 0.0064 (0.0164)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [81][180/272]	 lr: 0.00000	Time 0.298 (0.486)	Data 0.128 (0.178)	Loss 0.0066 (0.0165)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [81][190/272]	 lr: 0.00000	Time 0.471 (0.485)	Data 0.140 (0.175)	Loss 0.0369 (0.0168)	Prec@1 100.00000 (99.98364)	Prec@5 100.00000 (100.00000)
Epoch: [81][200/272]	 lr: 0.00000	Time 0.393 (0.483)	Data 0.115 (0.173)	Loss 0.0094 (0.0166)	Prec@1 100.00000 (99.98445)	Prec@5 100.00000 (100.00000)
Epoch: [81][210/272]	 lr: 0.00000	Time 0.446 (0.480)	Data 0.128 (0.171)	Loss 0.0089 (0.0166)	Prec@1 100.00000 (99.98519)	Prec@5 100.00000 (100.00000)
Epoch: [81][220/272]	 lr: 0.00000	Time 0.479 (0.478)	Data 0.129 (0.169)	Loss 0.0063 (0.0169)	Prec@1 100.00000 (99.98586)	Prec@5 100.00000 (100.00001)
Epoch: [81][230/272]	 lr: 0.00000	Time 0.450 (0.477)	Data 0.117 (0.168)	Loss 0.0094 (0.0172)	Prec@1 100.00000 (99.97295)	Prec@5 100.00000 (100.00000)
Epoch: [81][240/272]	 lr: 0.00000	Time 0.331 (0.474)	Data 0.129 (0.166)	Loss 0.0205 (0.0170)	Prec@1 100.00000 (99.97408)	Prec@5 100.00000 (100.00001)
Epoch: [81][250/272]	 lr: 0.00000	Time 0.239 (0.464)	Data 0.128 (0.164)	Loss 0.0048 (0.0172)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [81][260/272]	 lr: 0.00000	Time 0.238 (0.456)	Data 0.128 (0.163)	Loss 0.0152 (0.0172)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [81][270/272]	 lr: 0.00000	Time 0.239 (0.448)	Data 0.129 (0.162)	Loss 0.0141 (0.0170)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 81
validation at epoch 81
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [81][1/60]	Time 4.36348 (4.36348)	Data 4.26859 (4.26859)	Loss 0.3962 (0.3962)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [81][2/60]	Time 0.47799 (2.42073)	Data 0.36682 (2.31770)	Loss 0.5249 (0.4606)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [81][3/60]	Time 2.43311 (2.42486)	Data 2.36299 (2.33280)	Loss 1.1285 (0.6832)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [81][4/60]	Time 0.09837 (1.84324)	Data 0.00401 (1.75060)	Loss 0.2028 (0.5631)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [81][5/60]	Time 0.27839 (1.53027)	Data 0.08229 (1.41694)	Loss 0.2662 (0.5037)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [81][6/60]	Time 0.19415 (1.30758)	Data 0.04380 (1.18808)	Loss 0.3285 (0.4745)	Prec@1 100.00000 (89.58334)	Prec@5 100.00000 (100.00000)
Epoch: [81][7/60]	Time 0.17424 (1.14568)	Data 0.01239 (1.02013)	Loss 1.2500 (0.5853)	Prec@1 62.50000 (85.71429)	Prec@5 100.00000 (100.00001)
Epoch: [81][8/60]	Time 0.10462 (1.01554)	Data 0.00442 (0.89316)	Loss 1.0994 (0.6496)	Prec@1 62.50000 (82.81250)	Prec@5 100.00000 (100.00000)
Epoch: [81][9/60]	Time 0.25849 (0.93143)	Data 0.07334 (0.80207)	Loss 0.5994 (0.6440)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [81][10/60]	Time 0.20820 (0.85910)	Data 0.00801 (0.72267)	Loss 0.5555 (0.6351)	Prec@1 75.00000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [81][11/60]	Time 0.09743 (0.78986)	Data 0.00402 (0.65733)	Loss 0.5194 (0.6246)	Prec@1 87.50000 (82.95455)	Prec@5 100.00000 (100.00000)
Epoch: [81][12/60]	Time 0.15858 (0.73725)	Data 0.02007 (0.60423)	Loss 1.3603 (0.6859)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [81][13/60]	Time 0.16718 (0.69340)	Data 0.01274 (0.55873)	Loss 1.9409 (0.7825)	Prec@1 50.00000 (78.84615)	Prec@5 100.00000 (100.00000)
Epoch: [81][14/60]	Time 0.18418 (0.65703)	Data 0.00051 (0.51886)	Loss 0.0474 (0.7300)	Prec@1 100.00000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [81][15/60]	Time 0.30574 (0.63361)	Data 0.06728 (0.48875)	Loss 1.1281 (0.7565)	Prec@1 50.00000 (78.33334)	Prec@5 100.00000 (100.00001)
Epoch: [81][16/60]	Time 0.27967 (0.61149)	Data 0.04355 (0.46093)	Loss 0.8772 (0.7641)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [81][17/60]	Time 0.26318 (0.59100)	Data 0.04312 (0.43635)	Loss 0.3178 (0.7378)	Prec@1 87.50000 (78.67647)	Prec@5 100.00000 (100.00000)
Epoch: [81][18/60]	Time 0.09548 (0.56347)	Data 0.00056 (0.41214)	Loss 2.2094 (0.8196)	Prec@1 75.00000 (78.47222)	Prec@5 100.00000 (100.00000)
Epoch: [81][19/60]	Time 0.08049 (0.53805)	Data 0.00083 (0.39049)	Loss 0.1247 (0.7830)	Prec@1 100.00000 (79.60526)	Prec@5 100.00000 (100.00000)
Epoch: [81][20/60]	Time 0.08028 (0.51516)	Data 0.01275 (0.37160)	Loss 2.0875 (0.8482)	Prec@1 62.50000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [81][21/60]	Time 0.11597 (0.49615)	Data 0.02045 (0.35488)	Loss 0.4463 (0.8291)	Prec@1 87.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [81][22/60]	Time 0.12512 (0.47929)	Data 0.00272 (0.33888)	Loss 0.4825 (0.8133)	Prec@1 75.00000 (78.97727)	Prec@5 100.00000 (100.00000)
Epoch: [81][23/60]	Time 0.11386 (0.46340)	Data 0.02019 (0.32502)	Loss 0.8632 (0.8155)	Prec@1 62.50000 (78.26087)	Prec@5 100.00000 (100.00000)
Epoch: [81][24/60]	Time 0.13443 (0.44969)	Data 0.00651 (0.31175)	Loss 0.6409 (0.8082)	Prec@1 62.50000 (77.60417)	Prec@5 100.00000 (100.00000)
Epoch: [81][25/60]	Time 0.09953 (0.43569)	Data 0.00798 (0.29960)	Loss 0.4006 (0.7919)	Prec@1 87.50000 (78.00000)	Prec@5 100.00000 (100.00000)
Epoch: [81][26/60]	Time 0.26101 (0.42897)	Data 0.08232 (0.29124)	Loss 0.0435 (0.7631)	Prec@1 100.00000 (78.84615)	Prec@5 100.00000 (100.00000)
Epoch: [81][27/60]	Time 0.21628 (0.42109)	Data 0.06077 (0.28271)	Loss 0.6032 (0.7572)	Prec@1 50.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [81][28/60]	Time 0.09852 (0.40957)	Data 0.00055 (0.27263)	Loss 0.3752 (0.7436)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00001)
Epoch: [81][29/60]	Time 0.10429 (0.39904)	Data 0.00047 (0.26324)	Loss 0.5601 (0.7372)	Prec@1 75.00000 (78.01724)	Prec@5 100.00000 (100.00000)
Epoch: [81][30/60]	Time 0.09554 (0.38893)	Data 0.00068 (0.25449)	Loss 1.5992 (0.7660)	Prec@1 62.50000 (77.50001)	Prec@5 100.00000 (100.00001)
Epoch: [81][31/60]	Time 0.07042 (0.37865)	Data 0.00347 (0.24639)	Loss 2.2078 (0.8125)	Prec@1 37.50000 (76.20968)	Prec@5 87.50000 (99.59677)
Epoch: [81][32/60]	Time 0.09346 (0.36974)	Data 0.00038 (0.23871)	Loss 0.5491 (0.8042)	Prec@1 75.00000 (76.17188)	Prec@5 100.00000 (99.60938)
Epoch: [81][33/60]	Time 0.04323 (0.35985)	Data 0.00054 (0.23149)	Loss 0.1064 (0.7831)	Prec@1 87.50000 (76.51515)	Prec@5 100.00000 (99.62122)
Epoch: [81][34/60]	Time 0.06078 (0.35105)	Data 0.00042 (0.22469)	Loss 1.0634 (0.7913)	Prec@1 75.00000 (76.47059)	Prec@5 100.00000 (99.63235)
Epoch: [81][35/60]	Time 0.04245 (0.34223)	Data 0.00042 (0.21829)	Loss 1.2674 (0.8049)	Prec@1 75.00000 (76.42857)	Prec@5 87.50000 (99.28571)
Epoch: [81][36/60]	Time 0.05257 (0.33419)	Data 0.00481 (0.21236)	Loss 0.9823 (0.8099)	Prec@1 62.50000 (76.04166)	Prec@5 100.00000 (99.30556)
Epoch: [81][37/60]	Time 0.04291 (0.32631)	Data 0.00044 (0.20663)	Loss 1.2835 (0.8227)	Prec@1 62.50000 (75.67567)	Prec@5 100.00000 (99.32433)
Epoch: [81][38/60]	Time 0.03543 (0.31866)	Data 0.00249 (0.20126)	Loss 2.0607 (0.8553)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.34211)
Epoch: [81][39/60]	Time 0.02873 (0.31123)	Data 0.00047 (0.19611)	Loss 0.1231 (0.8365)	Prec@1 87.50000 (75.32051)	Prec@5 100.00000 (99.35898)
Epoch: [81][40/60]	Time 0.02957 (0.30418)	Data 0.00042 (0.19122)	Loss 0.2557 (0.8220)	Prec@1 87.50000 (75.62500)	Prec@5 100.00000 (99.37500)
Epoch: [81][41/60]	Time 0.02758 (0.29744)	Data 0.00113 (0.18658)	Loss 0.4376 (0.8126)	Prec@1 75.00000 (75.60976)	Prec@5 100.00000 (99.39024)
Epoch: [81][42/60]	Time 0.03036 (0.29108)	Data 0.00377 (0.18223)	Loss 1.0105 (0.8173)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (99.40476)
Epoch: [81][43/60]	Time 0.02301 (0.28484)	Data 0.00078 (0.17801)	Loss 0.5517 (0.8111)	Prec@1 62.50000 (75.58140)	Prec@5 100.00000 (99.41860)
Epoch: [81][44/60]	Time 0.02338 (0.27890)	Data 0.00089 (0.17398)	Loss 0.6033 (0.8064)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (99.43182)
Epoch: [81][45/60]	Time 0.02361 (0.27323)	Data 0.00099 (0.17014)	Loss 0.6725 (0.8034)	Prec@1 87.50000 (75.83334)	Prec@5 100.00000 (99.44445)
Epoch: [81][46/60]	Time 0.02211 (0.26777)	Data 0.00038 (0.16645)	Loss 0.9354 (0.8063)	Prec@1 50.00000 (75.27174)	Prec@5 100.00000 (99.45652)
Epoch: [81][47/60]	Time 0.02222 (0.26255)	Data 0.00045 (0.16292)	Loss 0.9397 (0.8091)	Prec@1 75.00000 (75.26595)	Prec@5 100.00000 (99.46808)
Epoch: [81][48/60]	Time 0.02204 (0.25753)	Data 0.00038 (0.15953)	Loss 0.3104 (0.7987)	Prec@1 87.50000 (75.52084)	Prec@5 100.00000 (99.47917)
Epoch: [81][49/60]	Time 0.02266 (0.25274)	Data 0.00040 (0.15628)	Loss 0.2508 (0.7876)	Prec@1 87.50000 (75.76530)	Prec@5 100.00000 (99.48979)
Epoch: [81][50/60]	Time 0.02255 (0.24814)	Data 0.00046 (0.15317)	Loss 0.5540 (0.7829)	Prec@1 75.00000 (75.75000)	Prec@5 100.00000 (99.50000)
Epoch: [81][51/60]	Time 0.02211 (0.24371)	Data 0.00041 (0.15017)	Loss 0.3422 (0.7742)	Prec@1 75.00000 (75.73530)	Prec@5 100.00000 (99.50980)
Epoch: [81][52/60]	Time 0.02206 (0.23944)	Data 0.00039 (0.14729)	Loss 0.7526 (0.7738)	Prec@1 62.50000 (75.48077)	Prec@5 100.00000 (99.51923)
Epoch: [81][53/60]	Time 0.02242 (0.23535)	Data 0.00043 (0.14452)	Loss 0.4197 (0.7671)	Prec@1 87.50000 (75.70755)	Prec@5 100.00000 (99.52831)
Epoch: [81][54/60]	Time 0.02286 (0.23141)	Data 0.00040 (0.14185)	Loss 0.8615 (0.7689)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (99.53704)
Epoch: [81][55/60]	Time 0.02284 (0.22762)	Data 0.00046 (0.13928)	Loss 1.1597 (0.7760)	Prec@1 62.50000 (75.45454)	Prec@5 87.50000 (99.31818)
Epoch: [81][56/60]	Time 0.02212 (0.22395)	Data 0.00051 (0.13680)	Loss 0.6844 (0.7744)	Prec@1 75.00000 (75.44643)	Prec@5 100.00000 (99.33036)
Epoch: [81][57/60]	Time 0.02202 (0.22041)	Data 0.00038 (0.13441)	Loss 1.3181 (0.7839)	Prec@1 62.50000 (75.21930)	Prec@5 100.00000 (99.34211)
Epoch: [81][58/60]	Time 0.02204 (0.21699)	Data 0.00040 (0.13210)	Loss 0.6364 (0.7814)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.35345)
Epoch: [81][59/60]	Time 0.02266 (0.21369)	Data 0.00052 (0.12987)	Loss 0.7298 (0.7805)	Prec@1 87.50000 (75.21187)	Prec@5 100.00000 (99.36441)
Epoch: [81][60/60]	Time 0.02283 (0.21051)	Data 0.00050 (0.12771)	Loss 0.5675 (0.7769)	Prec@1 87.50000 (75.41667)	Prec@5 100.00000 (99.37501)
train at epoch 82
train at epoch 82
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [82][0/272]	 lr: 0.00000	Time 4.630 (4.630)	Data 3.857 (3.857)	Loss 0.0226 (0.0226)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][10/272]	 lr: 0.00000	Time 0.409 (1.310)	Data 0.128 (0.917)	Loss 0.0186 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][20/272]	 lr: 0.00000	Time 0.499 (0.893)	Data 0.139 (0.543)	Loss 0.0163 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][30/272]	 lr: 0.00000	Time 0.463 (0.743)	Data 0.116 (0.411)	Loss 0.0072 (0.0168)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][40/272]	 lr: 0.00000	Time 0.433 (0.667)	Data 0.128 (0.342)	Loss 0.0076 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][50/272]	 lr: 0.00000	Time 0.414 (0.620)	Data 0.148 (0.302)	Loss 0.0094 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][60/272]	 lr: 0.00000	Time 0.479 (0.591)	Data 0.138 (0.274)	Loss 0.0074 (0.0147)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [82][70/272]	 lr: 0.00000	Time 0.478 (0.570)	Data 0.134 (0.253)	Loss 0.0168 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][80/272]	 lr: 0.00000	Time 0.343 (0.553)	Data 0.127 (0.237)	Loss 0.0112 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][90/272]	 lr: 0.00000	Time 0.437 (0.540)	Data 0.132 (0.225)	Loss 0.0413 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][100/272]	 lr: 0.00000	Time 0.414 (0.531)	Data 0.128 (0.216)	Loss 0.0856 (0.0160)	Prec@1 96.87500 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [82][110/272]	 lr: 0.00000	Time 0.484 (0.522)	Data 0.137 (0.208)	Loss 0.0065 (0.0155)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [82][120/272]	 lr: 0.00000	Time 0.441 (0.515)	Data 0.141 (0.201)	Loss 0.0047 (0.0155)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [82][130/272]	 lr: 0.00000	Time 0.457 (0.510)	Data 0.143 (0.196)	Loss 0.0091 (0.0153)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [82][140/272]	 lr: 0.00000	Time 0.455 (0.505)	Data 0.128 (0.192)	Loss 0.0193 (0.0150)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [82][150/272]	 lr: 0.00000	Time 0.459 (0.500)	Data 0.142 (0.187)	Loss 0.0044 (0.0150)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [82][160/272]	 lr: 0.00000	Time 0.469 (0.496)	Data 0.114 (0.183)	Loss 0.0060 (0.0146)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [82][170/272]	 lr: 0.00000	Time 0.492 (0.494)	Data 0.133 (0.181)	Loss 0.0091 (0.0145)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [82][180/272]	 lr: 0.00000	Time 0.393 (0.492)	Data 0.128 (0.178)	Loss 0.0126 (0.0142)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [82][190/272]	 lr: 0.00000	Time 0.525 (0.490)	Data 0.129 (0.175)	Loss 0.0581 (0.0145)	Prec@1 100.00000 (99.98364)	Prec@5 100.00000 (100.00000)
Epoch: [82][200/272]	 lr: 0.00000	Time 0.468 (0.488)	Data 0.128 (0.173)	Loss 0.0096 (0.0144)	Prec@1 100.00000 (99.98445)	Prec@5 100.00000 (100.00000)
Epoch: [82][210/272]	 lr: 0.00000	Time 0.481 (0.488)	Data 0.153 (0.171)	Loss 0.0076 (0.0145)	Prec@1 100.00000 (99.98519)	Prec@5 100.00000 (100.00000)
Epoch: [82][220/272]	 lr: 0.00000	Time 0.434 (0.485)	Data 0.127 (0.169)	Loss 0.0128 (0.0144)	Prec@1 100.00000 (99.98586)	Prec@5 100.00000 (100.00001)
Epoch: [82][230/272]	 lr: 0.00000	Time 0.474 (0.483)	Data 0.128 (0.168)	Loss 0.0141 (0.0144)	Prec@1 100.00000 (99.98647)	Prec@5 100.00000 (100.00000)
Epoch: [82][240/272]	 lr: 0.00000	Time 0.310 (0.481)	Data 0.121 (0.166)	Loss 0.0091 (0.0147)	Prec@1 100.00000 (99.98704)	Prec@5 100.00000 (100.00001)
Epoch: [82][250/272]	 lr: 0.00000	Time 0.239 (0.472)	Data 0.129 (0.165)	Loss 0.0161 (0.0147)	Prec@1 100.00000 (99.98756)	Prec@5 100.00000 (100.00000)
Epoch: [82][260/272]	 lr: 0.00000	Time 0.239 (0.463)	Data 0.128 (0.163)	Loss 0.0407 (0.0153)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [82][270/272]	 lr: 0.00000	Time 0.238 (0.454)	Data 0.128 (0.162)	Loss 0.0085 (0.0154)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 82
validation at epoch 82
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [82][1/60]	Time 5.57009 (5.57009)	Data 5.42833 (5.42833)	Loss 0.4435 (0.4435)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [82][2/60]	Time 1.56257 (3.56633)	Data 1.39715 (3.41274)	Loss 0.5391 (0.4913)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [82][3/60]	Time 0.47949 (2.53738)	Data 0.37891 (2.40146)	Loss 1.2597 (0.7474)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [82][4/60]	Time 0.04018 (1.91308)	Data 0.00062 (1.80125)	Loss 0.2134 (0.6139)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [82][5/60]	Time 0.07781 (1.54603)	Data 0.00096 (1.44119)	Loss 0.3406 (0.5593)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [82][6/60]	Time 0.06844 (1.29976)	Data 0.00056 (1.20109)	Loss 0.5231 (0.5533)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [82][7/60]	Time 0.10012 (1.12838)	Data 0.01231 (1.03126)	Loss 1.3216 (0.6630)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [82][8/60]	Time 0.23059 (1.01616)	Data 0.06692 (0.91072)	Loss 1.2659 (0.7384)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][9/60]	Time 0.22056 (0.92776)	Data 0.02306 (0.81209)	Loss 0.7030 (0.7344)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][10/60]	Time 0.19905 (0.85489)	Data 0.01396 (0.73228)	Loss 0.6169 (0.7227)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][11/60]	Time 0.11589 (0.78771)	Data 0.00764 (0.66640)	Loss 0.5600 (0.7079)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [82][12/60]	Time 0.07510 (0.72832)	Data 0.00866 (0.61159)	Loss 1.2840 (0.7559)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][13/60]	Time 0.15012 (0.68385)	Data 0.08974 (0.57145)	Loss 2.2280 (0.8692)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [82][14/60]	Time 0.09016 (0.64144)	Data 0.02238 (0.53223)	Loss 0.1159 (0.8153)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [82][15/60]	Time 0.21294 (0.61287)	Data 0.00057 (0.49678)	Loss 1.2185 (0.8422)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [82][16/60]	Time 0.09582 (0.58056)	Data 0.00355 (0.46596)	Loss 1.0749 (0.8568)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [82][17/60]	Time 0.13134 (0.55413)	Data 0.00460 (0.43882)	Loss 0.3904 (0.8293)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [82][18/60]	Time 0.11408 (0.52968)	Data 0.00210 (0.41456)	Loss 2.3390 (0.9132)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [82][19/60]	Time 0.16660 (0.51058)	Data 0.02035 (0.39381)	Loss 0.2239 (0.8769)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][20/60]	Time 0.07628 (0.48886)	Data 0.00554 (0.37440)	Loss 2.2360 (0.9449)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (100.00000)
Epoch: [82][21/60]	Time 0.08631 (0.46969)	Data 0.00054 (0.35659)	Loss 0.5859 (0.9278)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [82][22/60]	Time 0.09877 (0.45283)	Data 0.00055 (0.34041)	Loss 0.6392 (0.9147)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [82][23/60]	Time 0.09972 (0.43748)	Data 0.01557 (0.32629)	Loss 1.0605 (0.9210)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [82][24/60]	Time 0.20121 (0.42763)	Data 0.03350 (0.31409)	Loss 0.7454 (0.9137)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (100.00000)
Epoch: [82][25/60]	Time 0.24694 (0.42041)	Data 0.06970 (0.30431)	Loss 0.5456 (0.8990)	Prec@1 75.00000 (73.00000)	Prec@5 100.00000 (100.00000)
Epoch: [82][26/60]	Time 0.20992 (0.41231)	Data 0.04965 (0.29452)	Loss 0.0637 (0.8668)	Prec@1 100.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [82][27/60]	Time 0.10499 (0.40093)	Data 0.00059 (0.28363)	Loss 0.7097 (0.8610)	Prec@1 50.00000 (73.14815)	Prec@5 100.00000 (100.00000)
Epoch: [82][28/60]	Time 0.12773 (0.39117)	Data 0.01763 (0.27413)	Loss 0.4748 (0.8472)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (100.00001)
Epoch: [82][29/60]	Time 0.07011 (0.38010)	Data 0.00040 (0.26469)	Loss 0.7321 (0.8433)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (100.00000)
Epoch: [82][30/60]	Time 0.05728 (0.36934)	Data 0.00048 (0.25588)	Loss 1.8285 (0.8761)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [82][31/60]	Time 0.05821 (0.35930)	Data 0.00047 (0.24764)	Loss 2.4852 (0.9280)	Prec@1 25.00000 (71.77419)	Prec@5 87.50000 (99.59677)
Epoch: [82][32/60]	Time 0.05093 (0.34967)	Data 0.00045 (0.23992)	Loss 0.7234 (0.9216)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.60938)
Epoch: [82][33/60]	Time 0.05679 (0.34079)	Data 0.00400 (0.23277)	Loss 0.0901 (0.8964)	Prec@1 100.00000 (72.72727)	Prec@5 100.00000 (99.62122)
Epoch: [82][34/60]	Time 0.06290 (0.33262)	Data 0.00179 (0.22598)	Loss 1.1767 (0.9047)	Prec@1 75.00000 (72.79412)	Prec@5 100.00000 (99.63235)
Epoch: [82][35/60]	Time 0.04059 (0.32427)	Data 0.00052 (0.21954)	Loss 1.4621 (0.9206)	Prec@1 75.00000 (72.85714)	Prec@5 87.50000 (99.28571)
Epoch: [82][36/60]	Time 0.04018 (0.31638)	Data 0.00430 (0.21356)	Loss 1.0409 (0.9239)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (99.30556)
Epoch: [82][37/60]	Time 0.03242 (0.30871)	Data 0.00131 (0.20782)	Loss 1.5071 (0.9397)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (99.32433)
Epoch: [82][38/60]	Time 0.03262 (0.30144)	Data 0.00065 (0.20237)	Loss 2.2772 (0.9749)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.34211)
Epoch: [82][39/60]	Time 0.03623 (0.29464)	Data 0.00293 (0.19725)	Loss 0.1018 (0.9525)	Prec@1 100.00000 (72.43590)	Prec@5 100.00000 (99.35898)
Epoch: [82][40/60]	Time 0.03397 (0.28813)	Data 0.00101 (0.19235)	Loss 0.2100 (0.9339)	Prec@1 87.50000 (72.81250)	Prec@5 100.00000 (99.37500)
Epoch: [82][41/60]	Time 0.02894 (0.28180)	Data 0.00048 (0.18767)	Loss 0.5956 (0.9257)	Prec@1 75.00000 (72.86585)	Prec@5 100.00000 (99.39024)
Epoch: [82][42/60]	Time 0.02376 (0.27566)	Data 0.00051 (0.18321)	Loss 1.0684 (0.9291)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.40476)
Epoch: [82][43/60]	Time 0.03228 (0.27000)	Data 0.00437 (0.17905)	Loss 0.7303 (0.9245)	Prec@1 62.50000 (72.96512)	Prec@5 100.00000 (99.41860)
Epoch: [82][44/60]	Time 0.03495 (0.26466)	Data 0.00351 (0.17506)	Loss 0.8172 (0.9220)	Prec@1 75.00000 (73.01137)	Prec@5 100.00000 (99.43182)
Epoch: [82][45/60]	Time 0.03221 (0.25949)	Data 0.00053 (0.17119)	Loss 0.7655 (0.9185)	Prec@1 87.50000 (73.33334)	Prec@5 100.00000 (99.44445)
Epoch: [82][46/60]	Time 0.02716 (0.25444)	Data 0.00049 (0.16747)	Loss 1.0028 (0.9204)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.45652)
Epoch: [82][47/60]	Time 0.02660 (0.24959)	Data 0.00045 (0.16392)	Loss 1.1434 (0.9251)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.20213)
Epoch: [82][48/60]	Time 0.02827 (0.24498)	Data 0.00043 (0.16051)	Loss 0.4018 (0.9142)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.21875)
Epoch: [82][49/60]	Time 0.02731 (0.24054)	Data 0.00067 (0.15725)	Loss 0.2430 (0.9005)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.23470)
Epoch: [82][50/60]	Time 0.02198 (0.23617)	Data 0.00047 (0.15412)	Loss 0.7803 (0.8981)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.25000)
Epoch: [82][51/60]	Time 0.02216 (0.23197)	Data 0.00046 (0.15110)	Loss 0.3959 (0.8883)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.26471)
Epoch: [82][52/60]	Time 0.02205 (0.22794)	Data 0.00041 (0.14821)	Loss 0.9567 (0.8896)	Prec@1 50.00000 (73.07693)	Prec@5 87.50000 (99.03847)
Epoch: [82][53/60]	Time 0.02276 (0.22407)	Data 0.00044 (0.14542)	Loss 0.6583 (0.8852)	Prec@1 75.00000 (73.11320)	Prec@5 100.00000 (99.05660)
Epoch: [82][54/60]	Time 0.02180 (0.22032)	Data 0.00047 (0.14273)	Loss 0.9070 (0.8856)	Prec@1 75.00000 (73.14815)	Prec@5 100.00000 (99.07407)
Epoch: [82][55/60]	Time 0.02169 (0.21671)	Data 0.00041 (0.14015)	Loss 1.4095 (0.8951)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (98.86363)
Epoch: [82][56/60]	Time 0.02211 (0.21323)	Data 0.00050 (0.13765)	Loss 0.7148 (0.8919)	Prec@1 62.50000 (72.76786)	Prec@5 100.00000 (98.88393)
Epoch: [82][57/60]	Time 0.02155 (0.20987)	Data 0.00045 (0.13525)	Loss 1.4007 (0.9009)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (98.68421)
Epoch: [82][58/60]	Time 0.02549 (0.20669)	Data 0.00043 (0.13292)	Loss 0.6808 (0.8971)	Prec@1 62.50000 (72.41380)	Prec@5 100.00000 (98.70689)
Epoch: [82][59/60]	Time 0.02261 (0.20357)	Data 0.00096 (0.13068)	Loss 0.8459 (0.8962)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (98.72881)
Epoch: [82][60/60]	Time 0.02193 (0.20054)	Data 0.00043 (0.12851)	Loss 0.6034 (0.8913)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (98.75001)
train at epoch 83
train at epoch 83
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [83][0/272]	 lr: 0.00000	Time 5.743 (5.743)	Data 4.365 (4.365)	Loss 0.0311 (0.0311)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [83][10/272]	 lr: 0.00000	Time 0.457 (1.281)	Data 0.137 (0.639)	Loss 0.0163 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [83][20/272]	 lr: 0.00000	Time 0.300 (0.864)	Data 0.113 (0.396)	Loss 0.0137 (0.0231)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [83][30/272]	 lr: 0.00000	Time 0.388 (0.733)	Data 0.128 (0.309)	Loss 0.0249 (0.0213)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [83][40/272]	 lr: 0.00000	Time 0.379 (0.660)	Data 0.135 (0.265)	Loss 0.0416 (0.0202)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [83][50/272]	 lr: 0.00000	Time 0.528 (0.620)	Data 0.128 (0.239)	Loss 0.0202 (0.0184)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [83][60/272]	 lr: 0.00000	Time 0.499 (0.591)	Data 0.123 (0.220)	Loss 0.0185 (0.0181)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [83][70/272]	 lr: 0.00000	Time 0.424 (0.572)	Data 0.125 (0.207)	Loss 0.0077 (0.0175)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [83][80/272]	 lr: 0.00000	Time 0.483 (0.557)	Data 0.128 (0.197)	Loss 0.0127 (0.0175)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [83][90/272]	 lr: 0.00000	Time 0.494 (0.545)	Data 0.136 (0.189)	Loss 0.0103 (0.0170)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [83][100/272]	 lr: 0.00000	Time 0.500 (0.536)	Data 0.127 (0.184)	Loss 0.0083 (0.0177)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [83][110/272]	 lr: 0.00000	Time 0.519 (0.529)	Data 0.126 (0.179)	Loss 0.0369 (0.0177)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [83][120/272]	 lr: 0.00000	Time 0.427 (0.523)	Data 0.124 (0.175)	Loss 0.0058 (0.0171)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [83][130/272]	 lr: 0.00000	Time 0.517 (0.516)	Data 0.129 (0.171)	Loss 0.0094 (0.0172)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [83][140/272]	 lr: 0.00000	Time 0.377 (0.511)	Data 0.114 (0.168)	Loss 0.0044 (0.0168)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [83][150/272]	 lr: 0.00000	Time 0.383 (0.507)	Data 0.129 (0.166)	Loss 0.0076 (0.0167)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [83][160/272]	 lr: 0.00000	Time 0.431 (0.502)	Data 0.123 (0.164)	Loss 0.0082 (0.0166)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [83][170/272]	 lr: 0.00000	Time 0.462 (0.499)	Data 0.142 (0.162)	Loss 0.0142 (0.0177)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [83][180/272]	 lr: 0.00000	Time 0.455 (0.495)	Data 0.123 (0.160)	Loss 0.0268 (0.0174)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [83][190/272]	 lr: 0.00000	Time 0.479 (0.494)	Data 0.140 (0.158)	Loss 0.0201 (0.0176)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [83][200/272]	 lr: 0.00000	Time 0.404 (0.491)	Data 0.135 (0.156)	Loss 0.0131 (0.0175)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [83][210/272]	 lr: 0.00000	Time 0.483 (0.488)	Data 0.129 (0.155)	Loss 0.0048 (0.0171)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [83][220/272]	 lr: 0.00000	Time 0.488 (0.486)	Data 0.128 (0.154)	Loss 0.0656 (0.0176)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [83][230/272]	 lr: 0.00000	Time 0.461 (0.483)	Data 0.134 (0.153)	Loss 0.0370 (0.0190)	Prec@1 100.00000 (99.93236)	Prec@5 100.00000 (100.00000)
Epoch: [83][240/272]	 lr: 0.00000	Time 0.268 (0.481)	Data 0.128 (0.152)	Loss 0.0119 (0.0188)	Prec@1 100.00000 (99.93517)	Prec@5 100.00000 (100.00001)
Epoch: [83][250/272]	 lr: 0.00000	Time 0.240 (0.471)	Data 0.128 (0.151)	Loss 0.0546 (0.0188)	Prec@1 96.87500 (99.92530)	Prec@5 100.00000 (100.00000)
Epoch: [83][260/272]	 lr: 0.00000	Time 0.239 (0.462)	Data 0.129 (0.150)	Loss 0.0200 (0.0188)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [83][270/272]	 lr: 0.00000	Time 0.237 (0.454)	Data 0.128 (0.149)	Loss 0.0183 (0.0187)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 83
validation at epoch 83
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [83][1/60]	Time 3.68391 (3.68391)	Data 3.61902 (3.61902)	Loss 0.4066 (0.4066)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [83][2/60]	Time 3.54211 (3.61301)	Data 3.37197 (3.49550)	Loss 0.5017 (0.4542)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [83][3/60]	Time 0.39018 (2.53873)	Data 0.00068 (2.33056)	Loss 1.1340 (0.6808)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [83][4/60]	Time 0.21676 (1.95824)	Data 0.13101 (1.78067)	Loss 0.2313 (0.5684)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [83][5/60]	Time 0.07055 (1.58070)	Data 0.00065 (1.42466)	Loss 0.2530 (0.5053)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [83][6/60]	Time 0.13548 (1.33983)	Data 0.01286 (1.18936)	Loss 0.3668 (0.4822)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [83][7/60]	Time 0.16523 (1.17203)	Data 0.02099 (1.02245)	Loss 1.3978 (0.6130)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [83][8/60]	Time 0.12926 (1.04168)	Data 0.01394 (0.89639)	Loss 1.2633 (0.6943)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [83][9/60]	Time 0.11875 (0.93914)	Data 0.01742 (0.79873)	Loss 0.5329 (0.6764)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [83][10/60]	Time 0.10131 (0.85535)	Data 0.00364 (0.71922)	Loss 0.6602 (0.6748)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [83][11/60]	Time 0.09119 (0.78588)	Data 0.02522 (0.65613)	Loss 0.6332 (0.6710)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [83][12/60]	Time 0.10659 (0.72928)	Data 0.00845 (0.60215)	Loss 1.1852 (0.7138)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [83][13/60]	Time 0.10196 (0.68102)	Data 0.00197 (0.55599)	Loss 2.0148 (0.8139)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [83][14/60]	Time 0.11602 (0.64066)	Data 0.01260 (0.51717)	Loss 0.0658 (0.7605)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [83][15/60]	Time 0.16065 (0.60866)	Data 0.00598 (0.48309)	Loss 1.2921 (0.7959)	Prec@1 50.00000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [83][16/60]	Time 0.20685 (0.58355)	Data 0.00449 (0.45318)	Loss 1.0185 (0.8098)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (100.00000)
Epoch: [83][17/60]	Time 0.07023 (0.55335)	Data 0.00120 (0.42659)	Loss 0.3681 (0.7838)	Prec@1 87.50000 (76.47059)	Prec@5 100.00000 (100.00000)
Epoch: [83][18/60]	Time 0.06352 (0.52614)	Data 0.00916 (0.40340)	Loss 2.3690 (0.8719)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [83][19/60]	Time 0.11244 (0.50437)	Data 0.01083 (0.38274)	Loss 0.1117 (0.8319)	Prec@1 100.00000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [83][20/60]	Time 0.20096 (0.48920)	Data 0.01438 (0.36432)	Loss 2.2568 (0.9031)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (100.00000)
Epoch: [83][21/60]	Time 0.13593 (0.47237)	Data 0.01274 (0.34758)	Loss 0.6163 (0.8895)	Prec@1 62.50000 (76.19048)	Prec@5 100.00000 (100.00000)
Epoch: [83][22/60]	Time 0.10403 (0.45563)	Data 0.01555 (0.33249)	Loss 0.6607 (0.8791)	Prec@1 75.00000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [83][23/60]	Time 0.11178 (0.44068)	Data 0.00838 (0.31840)	Loss 0.9484 (0.8821)	Prec@1 62.50000 (75.54348)	Prec@5 100.00000 (100.00000)
Epoch: [83][24/60]	Time 0.11399 (0.42707)	Data 0.00807 (0.30547)	Loss 0.7483 (0.8765)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [83][25/60]	Time 0.28157 (0.42125)	Data 0.00951 (0.29363)	Loss 0.4370 (0.8589)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (100.00000)
Epoch: [83][26/60]	Time 0.08251 (0.40822)	Data 0.00059 (0.28236)	Loss 0.0441 (0.8276)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (100.00000)
Epoch: [83][27/60]	Time 0.11871 (0.39750)	Data 0.00066 (0.27192)	Loss 0.8307 (0.8277)	Prec@1 50.00000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [83][28/60]	Time 0.11299 (0.38734)	Data 0.00834 (0.26251)	Loss 0.3628 (0.8111)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [83][29/60]	Time 0.13671 (0.37869)	Data 0.00042 (0.25347)	Loss 0.5972 (0.8037)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (100.00000)
Epoch: [83][30/60]	Time 0.09066 (0.36909)	Data 0.00039 (0.24504)	Loss 1.6850 (0.8331)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (100.00001)
Epoch: [83][31/60]	Time 0.09134 (0.36013)	Data 0.01656 (0.23767)	Loss 2.3690 (0.8827)	Prec@1 37.50000 (74.19354)	Prec@5 87.50000 (99.59677)
Epoch: [83][32/60]	Time 0.05151 (0.35049)	Data 0.00297 (0.23033)	Loss 0.6886 (0.8766)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (99.60938)
Epoch: [83][33/60]	Time 0.03288 (0.34086)	Data 0.00434 (0.22348)	Loss 0.0745 (0.8523)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (99.62122)
Epoch: [83][34/60]	Time 0.02940 (0.33170)	Data 0.00053 (0.21693)	Loss 1.1521 (0.8611)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.63235)
Epoch: [83][35/60]	Time 0.03507 (0.32323)	Data 0.00050 (0.21074)	Loss 1.4321 (0.8774)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.28571)
Epoch: [83][36/60]	Time 0.02967 (0.31507)	Data 0.00152 (0.20493)	Loss 0.9830 (0.8803)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.30556)
Epoch: [83][37/60]	Time 0.02845 (0.30733)	Data 0.00389 (0.19950)	Loss 1.4747 (0.8964)	Prec@1 62.50000 (74.66216)	Prec@5 100.00000 (99.32433)
Epoch: [83][38/60]	Time 0.02835 (0.29999)	Data 0.00048 (0.19426)	Loss 2.2039 (0.9308)	Prec@1 50.00000 (74.01316)	Prec@5 100.00000 (99.34211)
Epoch: [83][39/60]	Time 0.02980 (0.29306)	Data 0.00046 (0.18929)	Loss 0.0939 (0.9094)	Prec@1 100.00000 (74.67949)	Prec@5 100.00000 (99.35898)
Epoch: [83][40/60]	Time 0.02931 (0.28646)	Data 0.00050 (0.18457)	Loss 0.1886 (0.8913)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.37500)
Epoch: [83][41/60]	Time 0.02800 (0.28016)	Data 0.00051 (0.18008)	Loss 0.5710 (0.8835)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.39024)
Epoch: [83][42/60]	Time 0.02798 (0.27416)	Data 0.00047 (0.17581)	Loss 1.0433 (0.8873)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.40476)
Epoch: [83][43/60]	Time 0.02815 (0.26844)	Data 0.00047 (0.17173)	Loss 0.6624 (0.8821)	Prec@1 62.50000 (74.70930)	Prec@5 100.00000 (99.41860)
Epoch: [83][44/60]	Time 0.02806 (0.26297)	Data 0.00049 (0.16784)	Loss 0.7411 (0.8789)	Prec@1 75.00000 (74.71591)	Prec@5 100.00000 (99.43182)
Epoch: [83][45/60]	Time 0.02952 (0.25778)	Data 0.00049 (0.16412)	Loss 0.7479 (0.8760)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.44445)
Epoch: [83][46/60]	Time 0.02974 (0.25283)	Data 0.00040 (0.16056)	Loss 0.9449 (0.8775)	Prec@1 50.00000 (74.45652)	Prec@5 100.00000 (99.45652)
Epoch: [83][47/60]	Time 0.03309 (0.24815)	Data 0.00043 (0.15715)	Loss 0.9081 (0.8781)	Prec@1 75.00000 (74.46809)	Prec@5 100.00000 (99.46808)
Epoch: [83][48/60]	Time 0.02976 (0.24360)	Data 0.00050 (0.15389)	Loss 0.4146 (0.8685)	Prec@1 87.50000 (74.73959)	Prec@5 100.00000 (99.47917)
Epoch: [83][49/60]	Time 0.03576 (0.23936)	Data 0.00468 (0.15084)	Loss 0.2176 (0.8552)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.48979)
Epoch: [83][50/60]	Time 0.02898 (0.23515)	Data 0.00165 (0.14786)	Loss 0.5722 (0.8495)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.50000)
Epoch: [83][51/60]	Time 0.02745 (0.23108)	Data 0.00051 (0.14497)	Loss 0.2117 (0.8370)	Prec@1 87.50000 (75.24510)	Prec@5 100.00000 (99.50980)
Epoch: [83][52/60]	Time 0.02797 (0.22717)	Data 0.00066 (0.14219)	Loss 0.7074 (0.8345)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.51923)
Epoch: [83][53/60]	Time 0.02751 (0.22341)	Data 0.00046 (0.13952)	Loss 0.4242 (0.8268)	Prec@1 87.50000 (75.23585)	Prec@5 100.00000 (99.52831)
Epoch: [83][54/60]	Time 0.02659 (0.21976)	Data 0.00041 (0.13694)	Loss 0.8459 (0.8271)	Prec@1 75.00000 (75.23148)	Prec@5 100.00000 (99.53704)
Epoch: [83][55/60]	Time 0.02660 (0.21625)	Data 0.00045 (0.13446)	Loss 1.1074 (0.8322)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (99.31818)
Epoch: [83][56/60]	Time 0.02630 (0.21286)	Data 0.00046 (0.13207)	Loss 0.7127 (0.8301)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.33036)
Epoch: [83][57/60]	Time 0.02812 (0.20962)	Data 0.00045 (0.12976)	Loss 1.3256 (0.8388)	Prec@1 62.50000 (74.78070)	Prec@5 87.50000 (99.12281)
Epoch: [83][58/60]	Time 0.02654 (0.20646)	Data 0.00042 (0.12753)	Loss 0.7032 (0.8365)	Prec@1 62.50000 (74.56896)	Prec@5 100.00000 (99.13793)
Epoch: [83][59/60]	Time 0.02649 (0.20341)	Data 0.00052 (0.12538)	Loss 0.7595 (0.8352)	Prec@1 87.50000 (74.78814)	Prec@5 100.00000 (99.15254)
Epoch: [83][60/60]	Time 0.02646 (0.20046)	Data 0.00041 (0.12329)	Loss 0.4998 (0.8296)	Prec@1 87.50000 (75.00001)	Prec@5 100.00000 (99.16667)
train at epoch 84
train at epoch 84
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [84][0/272]	 lr: 0.00000	Time 6.978 (6.978)	Data 5.353 (5.353)	Loss 0.0320 (0.0320)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [84][10/272]	 lr: 0.00000	Time 0.368 (1.272)	Data 0.128 (0.663)	Loss 0.0126 (0.0128)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [84][20/272]	 lr: 0.00000	Time 0.418 (0.859)	Data 0.128 (0.410)	Loss 0.0145 (0.0153)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [84][30/272]	 lr: 0.00000	Time 0.490 (0.727)	Data 0.128 (0.319)	Loss 0.0048 (0.0144)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [84][40/272]	 lr: 0.00000	Time 0.615 (0.658)	Data 0.129 (0.272)	Loss 0.0078 (0.0185)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [84][50/272]	 lr: 0.00000	Time 0.488 (0.618)	Data 0.135 (0.244)	Loss 0.0044 (0.0172)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [84][60/272]	 lr: 0.00000	Time 0.381 (0.589)	Data 0.128 (0.225)	Loss 0.0058 (0.0169)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [84][70/272]	 lr: 0.00000	Time 0.630 (0.570)	Data 0.139 (0.211)	Loss 0.0461 (0.0164)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [84][80/272]	 lr: 0.00000	Time 0.409 (0.554)	Data 0.105 (0.200)	Loss 0.0266 (0.0168)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [84][90/272]	 lr: 0.00000	Time 0.439 (0.541)	Data 0.129 (0.192)	Loss 0.0056 (0.0160)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [84][100/272]	 lr: 0.00000	Time 0.457 (0.531)	Data 0.122 (0.186)	Loss 0.0111 (0.0160)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [84][110/272]	 lr: 0.00000	Time 0.512 (0.522)	Data 0.119 (0.180)	Loss 0.0104 (0.0163)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [84][120/272]	 lr: 0.00000	Time 0.453 (0.516)	Data 0.128 (0.176)	Loss 0.0172 (0.0161)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [84][130/272]	 lr: 0.00000	Time 0.483 (0.510)	Data 0.142 (0.172)	Loss 0.0071 (0.0158)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [84][140/272]	 lr: 0.00000	Time 0.409 (0.506)	Data 0.129 (0.169)	Loss 0.0127 (0.0158)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [84][150/272]	 lr: 0.00000	Time 0.481 (0.503)	Data 0.112 (0.166)	Loss 0.0228 (0.0160)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [84][160/272]	 lr: 0.00000	Time 0.469 (0.499)	Data 0.129 (0.163)	Loss 0.0615 (0.0163)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [84][170/272]	 lr: 0.00000	Time 0.469 (0.497)	Data 0.131 (0.161)	Loss 0.0131 (0.0161)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [84][180/272]	 lr: 0.00000	Time 0.442 (0.494)	Data 0.129 (0.160)	Loss 0.0100 (0.0159)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [84][190/272]	 lr: 0.00000	Time 0.427 (0.492)	Data 0.130 (0.158)	Loss 0.0280 (0.0159)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [84][200/272]	 lr: 0.00000	Time 0.601 (0.490)	Data 0.141 (0.157)	Loss 0.0375 (0.0162)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [84][210/272]	 lr: 0.00000	Time 0.381 (0.489)	Data 0.100 (0.156)	Loss 0.0049 (0.0160)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [84][220/272]	 lr: 0.00000	Time 0.425 (0.487)	Data 0.130 (0.155)	Loss 0.0094 (0.0162)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [84][230/272]	 lr: 0.00000	Time 0.403 (0.487)	Data 0.132 (0.153)	Loss 0.0062 (0.0164)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [84][240/272]	 lr: 0.00000	Time 0.459 (0.485)	Data 0.131 (0.152)	Loss 0.0087 (0.0163)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [84][250/272]	 lr: 0.00000	Time 0.239 (0.475)	Data 0.129 (0.151)	Loss 0.0080 (0.0160)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [84][260/272]	 lr: 0.00000	Time 0.240 (0.466)	Data 0.128 (0.151)	Loss 0.0050 (0.0161)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [84][270/272]	 lr: 0.00000	Time 0.239 (0.458)	Data 0.128 (0.150)	Loss 0.0094 (0.0160)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 84
validation at epoch 84
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [84][1/60]	Time 5.04754 (5.04754)	Data 4.94686 (4.94686)	Loss 0.3799 (0.3799)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [84][2/60]	Time 2.06231 (3.55493)	Data 1.99419 (3.47053)	Loss 0.4863 (0.4331)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [84][3/60]	Time 0.64717 (2.58567)	Data 0.59151 (2.51086)	Loss 1.0896 (0.6519)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [84][4/60]	Time 0.14162 (1.97466)	Data 0.03213 (1.89118)	Loss 0.1821 (0.5345)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [84][5/60]	Time 0.08540 (1.59681)	Data 0.00519 (1.51398)	Loss 0.2779 (0.4832)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [84][6/60]	Time 0.10207 (1.34769)	Data 0.01394 (1.26397)	Loss 0.3406 (0.4594)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [84][7/60]	Time 0.10023 (1.16948)	Data 0.00634 (1.08431)	Loss 1.2338 (0.5700)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [84][8/60]	Time 0.17938 (1.04572)	Data 0.00696 (0.94964)	Loss 1.0160 (0.6258)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [84][9/60]	Time 0.14118 (0.94521)	Data 0.00180 (0.84433)	Loss 0.6009 (0.6230)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [84][10/60]	Time 0.07773 (0.85846)	Data 0.00050 (0.75994)	Loss 0.5564 (0.6164)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [84][11/60]	Time 0.06326 (0.78617)	Data 0.01500 (0.69222)	Loss 0.5514 (0.6105)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [84][12/60]	Time 0.12145 (0.73078)	Data 0.00693 (0.63511)	Loss 1.2065 (0.6601)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [84][13/60]	Time 0.28648 (0.69660)	Data 0.10319 (0.59420)	Loss 1.7419 (0.7433)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [84][14/60]	Time 0.12900 (0.65606)	Data 0.00723 (0.55227)	Loss 0.0696 (0.6952)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [84][15/60]	Time 0.16473 (0.62330)	Data 0.01943 (0.51675)	Loss 1.0060 (0.7159)	Prec@1 75.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [84][16/60]	Time 0.13393 (0.59272)	Data 0.00069 (0.48449)	Loss 1.0260 (0.7353)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [84][17/60]	Time 0.06644 (0.56176)	Data 0.00841 (0.45649)	Loss 0.2960 (0.7095)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [84][18/60]	Time 0.18584 (0.54088)	Data 0.07062 (0.43505)	Loss 2.4236 (0.8047)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [84][19/60]	Time 0.09720 (0.51752)	Data 0.01729 (0.41306)	Loss 0.1746 (0.7715)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [84][20/60]	Time 0.15139 (0.49922)	Data 0.06158 (0.39549)	Loss 2.3099 (0.8485)	Prec@1 62.50000 (76.87500)	Prec@5 87.50000 (99.37500)
Epoch: [84][21/60]	Time 0.10252 (0.48033)	Data 0.01647 (0.37744)	Loss 0.4467 (0.8293)	Prec@1 75.00000 (76.78571)	Prec@5 100.00000 (99.40476)
Epoch: [84][22/60]	Time 0.23823 (0.46932)	Data 0.04530 (0.36234)	Loss 0.5369 (0.8160)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (99.43182)
Epoch: [84][23/60]	Time 0.08697 (0.45270)	Data 0.00431 (0.34678)	Loss 0.9607 (0.8223)	Prec@1 62.50000 (76.08696)	Prec@5 100.00000 (99.45652)
Epoch: [84][24/60]	Time 0.07559 (0.43699)	Data 0.01686 (0.33303)	Loss 0.6316 (0.8144)	Prec@1 62.50000 (75.52084)	Prec@5 100.00000 (99.47917)
Epoch: [84][25/60]	Time 0.06432 (0.42208)	Data 0.00746 (0.32001)	Loss 0.4297 (0.7990)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (99.50000)
Epoch: [84][26/60]	Time 0.21931 (0.41428)	Data 0.07706 (0.31066)	Loss 0.0458 (0.7700)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (99.51923)
Epoch: [84][27/60]	Time 0.10615 (0.40287)	Data 0.01558 (0.29973)	Loss 0.8413 (0.7727)	Prec@1 50.00000 (75.92593)	Prec@5 100.00000 (99.53704)
Epoch: [84][28/60]	Time 0.08460 (0.39150)	Data 0.00726 (0.28929)	Loss 0.3582 (0.7579)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (99.55357)
Epoch: [84][29/60]	Time 0.09134 (0.38115)	Data 0.01045 (0.27967)	Loss 0.7160 (0.7564)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (99.56896)
Epoch: [84][30/60]	Time 0.08350 (0.37123)	Data 0.00041 (0.27036)	Loss 1.7829 (0.7906)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (99.58334)
Epoch: [84][31/60]	Time 0.09798 (0.36242)	Data 0.00959 (0.26195)	Loss 2.3281 (0.8402)	Prec@1 37.50000 (74.59677)	Prec@5 100.00000 (99.59677)
Epoch: [84][32/60]	Time 0.07643 (0.35348)	Data 0.00043 (0.25378)	Loss 0.8045 (0.8391)	Prec@1 62.50000 (74.21875)	Prec@5 100.00000 (99.60938)
Epoch: [84][33/60]	Time 0.05213 (0.34435)	Data 0.00045 (0.24610)	Loss 0.1401 (0.8179)	Prec@1 87.50000 (74.62122)	Prec@5 100.00000 (99.62122)
Epoch: [84][34/60]	Time 0.03930 (0.33537)	Data 0.00060 (0.23888)	Loss 1.2257 (0.8299)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (99.63235)
Epoch: [84][35/60]	Time 0.05402 (0.32734)	Data 0.00061 (0.23207)	Loss 1.2716 (0.8425)	Prec@1 75.00000 (74.28571)	Prec@5 87.50000 (99.28571)
Epoch: [84][36/60]	Time 0.04916 (0.31961)	Data 0.00059 (0.22564)	Loss 1.1652 (0.8515)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (99.30556)
Epoch: [84][37/60]	Time 0.06434 (0.31271)	Data 0.00050 (0.21956)	Loss 1.4594 (0.8679)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (99.32433)
Epoch: [84][38/60]	Time 0.03457 (0.30539)	Data 0.00048 (0.21379)	Loss 2.2457 (0.9042)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (99.34211)
Epoch: [84][39/60]	Time 0.03453 (0.29845)	Data 0.00048 (0.20832)	Loss 0.1900 (0.8859)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (99.35898)
Epoch: [84][40/60]	Time 0.03238 (0.29179)	Data 0.00146 (0.20315)	Loss 0.3179 (0.8717)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (99.37500)
Epoch: [84][41/60]	Time 0.02744 (0.28535)	Data 0.00055 (0.19821)	Loss 0.6774 (0.8669)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (99.39024)
Epoch: [84][42/60]	Time 0.02339 (0.27911)	Data 0.00083 (0.19351)	Loss 1.0882 (0.8722)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [84][43/60]	Time 0.02272 (0.27315)	Data 0.00059 (0.18903)	Loss 0.6755 (0.8676)	Prec@1 75.00000 (73.83721)	Prec@5 100.00000 (99.41860)
Epoch: [84][44/60]	Time 0.02330 (0.26747)	Data 0.00087 (0.18475)	Loss 0.8167 (0.8665)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [84][45/60]	Time 0.02561 (0.26209)	Data 0.00074 (0.18066)	Loss 0.7377 (0.8636)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.44445)
Epoch: [84][46/60]	Time 0.02284 (0.25689)	Data 0.00047 (0.17674)	Loss 0.7319 (0.8607)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (99.45652)
Epoch: [84][47/60]	Time 0.02298 (0.25192)	Data 0.00081 (0.17300)	Loss 0.9482 (0.8626)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.20213)
Epoch: [84][48/60]	Time 0.02291 (0.24714)	Data 0.00073 (0.16941)	Loss 0.4022 (0.8530)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.21875)
Epoch: [84][49/60]	Time 0.02473 (0.24261)	Data 0.00048 (0.16596)	Loss 0.1471 (0.8386)	Prec@1 100.00000 (74.48979)	Prec@5 100.00000 (99.23470)
Epoch: [84][50/60]	Time 0.02335 (0.23822)	Data 0.00047 (0.16265)	Loss 0.5443 (0.8327)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (99.25000)
Epoch: [84][51/60]	Time 0.02279 (0.23400)	Data 0.00043 (0.15947)	Loss 0.3517 (0.8233)	Prec@1 75.00000 (74.50980)	Prec@5 100.00000 (99.26471)
Epoch: [84][52/60]	Time 0.02284 (0.22994)	Data 0.00049 (0.15642)	Loss 0.9075 (0.8249)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (99.27885)
Epoch: [84][53/60]	Time 0.02311 (0.22603)	Data 0.00045 (0.15347)	Loss 0.3959 (0.8168)	Prec@1 87.50000 (74.29246)	Prec@5 100.00000 (99.29246)
Epoch: [84][54/60]	Time 0.02345 (0.22228)	Data 0.00048 (0.15064)	Loss 0.9331 (0.8190)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [84][55/60]	Time 0.02363 (0.21867)	Data 0.00058 (0.14791)	Loss 1.2510 (0.8268)	Prec@1 62.50000 (74.09090)	Prec@5 87.50000 (99.09090)
Epoch: [84][56/60]	Time 0.02256 (0.21517)	Data 0.00045 (0.14528)	Loss 0.6097 (0.8229)	Prec@1 62.50000 (73.88393)	Prec@5 100.00000 (99.10715)
Epoch: [84][57/60]	Time 0.02290 (0.21179)	Data 0.00049 (0.14274)	Loss 1.2736 (0.8309)	Prec@1 62.50000 (73.68421)	Prec@5 87.50000 (98.90351)
Epoch: [84][58/60]	Time 0.02697 (0.20861)	Data 0.00044 (0.14028)	Loss 0.6063 (0.8270)	Prec@1 62.50000 (73.49138)	Prec@5 100.00000 (98.92242)
Epoch: [84][59/60]	Time 0.02427 (0.20548)	Data 0.00074 (0.13792)	Loss 0.8396 (0.8272)	Prec@1 87.50000 (73.72881)	Prec@5 100.00000 (98.94068)
Epoch: [84][60/60]	Time 0.02325 (0.20245)	Data 0.00056 (0.13563)	Loss 0.6152 (0.8237)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (98.95834)
train at epoch 85
train at epoch 85
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [85][0/272]	 lr: 0.00000	Time 6.964 (6.964)	Data 5.579 (5.579)	Loss 0.0183 (0.0183)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [85][10/272]	 lr: 0.00000	Time 0.414 (1.347)	Data 0.146 (0.812)	Loss 0.0100 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [85][20/272]	 lr: 0.00000	Time 0.411 (0.900)	Data 0.138 (0.489)	Loss 0.0051 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [85][30/272]	 lr: 0.00000	Time 0.330 (0.747)	Data 0.113 (0.373)	Loss 0.0223 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [85][40/272]	 lr: 0.00000	Time 0.470 (0.672)	Data 0.128 (0.313)	Loss 0.0053 (0.0182)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [85][50/272]	 lr: 0.00000	Time 0.505 (0.626)	Data 0.121 (0.278)	Loss 0.0069 (0.0163)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00000)
Epoch: [85][60/272]	 lr: 0.00000	Time 0.407 (0.593)	Data 0.121 (0.253)	Loss 0.0306 (0.0175)	Prec@1 100.00000 (99.79507)	Prec@5 100.00000 (99.99999)
Epoch: [85][70/272]	 lr: 0.00000	Time 0.431 (0.571)	Data 0.146 (0.235)	Loss 0.0109 (0.0179)	Prec@1 100.00000 (99.77993)	Prec@5 100.00000 (100.00000)
Epoch: [85][80/272]	 lr: 0.00000	Time 0.447 (0.556)	Data 0.122 (0.221)	Loss 0.0169 (0.0175)	Prec@1 100.00000 (99.80710)	Prec@5 100.00000 (100.00000)
Epoch: [85][90/272]	 lr: 0.00000	Time 0.485 (0.543)	Data 0.127 (0.211)	Loss 0.0107 (0.0169)	Prec@1 100.00000 (99.82830)	Prec@5 100.00000 (100.00000)
Epoch: [85][100/272]	 lr: 0.00000	Time 0.383 (0.534)	Data 0.114 (0.203)	Loss 0.0206 (0.0165)	Prec@1 100.00000 (99.84530)	Prec@5 100.00000 (100.00000)
Epoch: [85][110/272]	 lr: 0.00000	Time 0.398 (0.527)	Data 0.127 (0.196)	Loss 0.0252 (0.0167)	Prec@1 100.00000 (99.85924)	Prec@5 100.00000 (100.00000)
Epoch: [85][120/272]	 lr: 0.00000	Time 0.486 (0.522)	Data 0.121 (0.190)	Loss 0.0175 (0.0171)	Prec@1 100.00000 (99.84504)	Prec@5 100.00000 (99.99999)
Epoch: [85][130/272]	 lr: 0.00000	Time 0.440 (0.518)	Data 0.124 (0.185)	Loss 0.0049 (0.0170)	Prec@1 100.00000 (99.85687)	Prec@5 100.00000 (100.00000)
Epoch: [85][140/272]	 lr: 0.00000	Time 0.507 (0.512)	Data 0.131 (0.181)	Loss 0.0135 (0.0166)	Prec@1 100.00000 (99.86702)	Prec@5 100.00000 (100.00000)
Epoch: [85][150/272]	 lr: 0.00000	Time 0.422 (0.508)	Data 0.150 (0.178)	Loss 0.0176 (0.0166)	Prec@1 100.00000 (99.87582)	Prec@5 100.00000 (100.00000)
Epoch: [85][160/272]	 lr: 0.00000	Time 0.378 (0.504)	Data 0.132 (0.175)	Loss 0.0096 (0.0163)	Prec@1 100.00000 (99.88354)	Prec@5 100.00000 (100.00000)
Epoch: [85][170/272]	 lr: 0.00000	Time 0.441 (0.499)	Data 0.129 (0.172)	Loss 0.0064 (0.0163)	Prec@1 100.00000 (99.89035)	Prec@5 100.00000 (100.00000)
Epoch: [85][180/272]	 lr: 0.00000	Time 0.398 (0.496)	Data 0.130 (0.170)	Loss 0.0027 (0.0162)	Prec@1 100.00000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [85][190/272]	 lr: 0.00000	Time 0.447 (0.493)	Data 0.126 (0.167)	Loss 0.0076 (0.0163)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [85][200/272]	 lr: 0.00000	Time 0.403 (0.490)	Data 0.128 (0.165)	Loss 0.0230 (0.0165)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [85][210/272]	 lr: 0.00000	Time 0.469 (0.489)	Data 0.150 (0.164)	Loss 0.0119 (0.0165)	Prec@1 100.00000 (99.91114)	Prec@5 100.00000 (100.00000)
Epoch: [85][220/272]	 lr: 0.00000	Time 0.516 (0.487)	Data 0.108 (0.162)	Loss 0.0060 (0.0164)	Prec@1 100.00000 (99.91516)	Prec@5 100.00000 (100.00001)
Epoch: [85][230/272]	 lr: 0.00000	Time 0.432 (0.484)	Data 0.136 (0.161)	Loss 0.0097 (0.0162)	Prec@1 100.00000 (99.91883)	Prec@5 100.00000 (100.00000)
Epoch: [85][240/272]	 lr: 0.00000	Time 0.279 (0.483)	Data 0.110 (0.160)	Loss 0.0372 (0.0162)	Prec@1 100.00000 (99.92220)	Prec@5 100.00000 (100.00001)
Epoch: [85][250/272]	 lr: 0.00000	Time 0.239 (0.474)	Data 0.127 (0.159)	Loss 0.0114 (0.0160)	Prec@1 100.00000 (99.92530)	Prec@5 100.00000 (100.00000)
Epoch: [85][260/272]	 lr: 0.00000	Time 0.240 (0.465)	Data 0.129 (0.157)	Loss 0.0142 (0.0160)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [85][270/272]	 lr: 0.00000	Time 0.241 (0.456)	Data 0.129 (0.156)	Loss 0.0278 (0.0160)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 85
validation at epoch 85
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [85][1/60]	Time 7.83044 (7.83044)	Data 7.75378 (7.75378)	Loss 0.4270 (0.4270)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [85][2/60]	Time 0.10993 (3.97019)	Data 0.00819 (3.88099)	Loss 0.4377 (0.4324)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [85][3/60]	Time 0.08324 (2.67454)	Data 0.00985 (2.59061)	Loss 1.2528 (0.7059)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [85][4/60]	Time 0.13788 (2.04037)	Data 0.00906 (1.94522)	Loss 0.2225 (0.5850)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [85][5/60]	Time 0.13884 (1.66007)	Data 0.00882 (1.55794)	Loss 0.3483 (0.5377)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [85][6/60]	Time 0.17393 (1.41238)	Data 0.00866 (1.29973)	Loss 0.4558 (0.5240)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [85][7/60]	Time 0.29195 (1.25232)	Data 0.10654 (1.12927)	Loss 1.0340 (0.5969)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [85][8/60]	Time 0.15217 (1.11480)	Data 0.04091 (0.99323)	Loss 1.0343 (0.6516)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.43750)
Epoch: [85][9/60]	Time 0.08357 (1.00022)	Data 0.00120 (0.88300)	Loss 0.6834 (0.6551)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [85][10/60]	Time 0.08433 (0.90863)	Data 0.00500 (0.79520)	Loss 0.4709 (0.6367)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [85][11/60]	Time 0.14124 (0.83887)	Data 0.00817 (0.72365)	Loss 0.5262 (0.6266)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [85][12/60]	Time 0.13846 (0.78050)	Data 0.00157 (0.66348)	Loss 0.9992 (0.6577)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [85][13/60]	Time 0.09942 (0.72811)	Data 0.01108 (0.61330)	Loss 1.7901 (0.7448)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (99.03847)
Epoch: [85][14/60]	Time 0.16093 (0.68760)	Data 0.01318 (0.57043)	Loss 0.0816 (0.6974)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [85][15/60]	Time 0.12744 (0.65025)	Data 0.01083 (0.53312)	Loss 0.9906 (0.7170)	Prec@1 50.00000 (71.66667)	Prec@5 100.00000 (99.16667)
Epoch: [85][16/60]	Time 0.11678 (0.61691)	Data 0.01683 (0.50086)	Loss 1.1455 (0.7438)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.21875)
Epoch: [85][17/60]	Time 0.20399 (0.59262)	Data 0.00222 (0.47152)	Loss 0.4240 (0.7249)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (99.26471)
Epoch: [85][18/60]	Time 0.11779 (0.56624)	Data 0.00275 (0.44548)	Loss 2.3196 (0.8135)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (99.30556)
Epoch: [85][19/60]	Time 0.12534 (0.54304)	Data 0.03952 (0.42411)	Loss 0.1575 (0.7790)	Prec@1 87.50000 (73.02631)	Prec@5 100.00000 (99.34211)
Epoch: [85][20/60]	Time 0.24671 (0.52822)	Data 0.05062 (0.40544)	Loss 2.2995 (0.8550)	Prec@1 62.50000 (72.50000)	Prec@5 100.00000 (99.37500)
Epoch: [85][21/60]	Time 0.08898 (0.50730)	Data 0.00526 (0.38638)	Loss 0.6824 (0.8468)	Prec@1 62.50000 (72.02381)	Prec@5 100.00000 (99.40476)
Epoch: [85][22/60]	Time 0.17044 (0.49199)	Data 0.08915 (0.37287)	Loss 0.6845 (0.8394)	Prec@1 75.00000 (72.15910)	Prec@5 100.00000 (99.43182)
Epoch: [85][23/60]	Time 0.09201 (0.47460)	Data 0.00713 (0.35697)	Loss 1.0561 (0.8489)	Prec@1 62.50000 (71.73913)	Prec@5 100.00000 (99.45652)
Epoch: [85][24/60]	Time 0.04249 (0.45660)	Data 0.00138 (0.34215)	Loss 0.8348 (0.8483)	Prec@1 62.50000 (71.35417)	Prec@5 100.00000 (99.47917)
Epoch: [85][25/60]	Time 0.07197 (0.44121)	Data 0.00826 (0.32880)	Loss 0.5052 (0.8345)	Prec@1 75.00000 (71.50000)	Prec@5 100.00000 (99.50000)
Epoch: [85][26/60]	Time 0.10057 (0.42811)	Data 0.01194 (0.31661)	Loss 0.0767 (0.8054)	Prec@1 100.00000 (72.59615)	Prec@5 100.00000 (99.51923)
Epoch: [85][27/60]	Time 0.11494 (0.41651)	Data 0.00302 (0.30500)	Loss 0.8234 (0.8061)	Prec@1 50.00000 (71.75926)	Prec@5 100.00000 (99.53704)
Epoch: [85][28/60]	Time 0.06948 (0.40412)	Data 0.00171 (0.29417)	Loss 0.4749 (0.7942)	Prec@1 87.50000 (72.32143)	Prec@5 100.00000 (99.55357)
Epoch: [85][29/60]	Time 0.06845 (0.39254)	Data 0.00039 (0.28404)	Loss 0.5953 (0.7874)	Prec@1 75.00000 (72.41380)	Prec@5 100.00000 (99.56896)
Epoch: [85][30/60]	Time 0.06398 (0.38159)	Data 0.00060 (0.27459)	Loss 1.7274 (0.8187)	Prec@1 62.50000 (72.08334)	Prec@5 100.00000 (99.58334)
Epoch: [85][31/60]	Time 0.09015 (0.37219)	Data 0.00045 (0.26574)	Loss 2.4400 (0.8710)	Prec@1 37.50000 (70.96774)	Prec@5 100.00000 (99.59677)
Epoch: [85][32/60]	Time 0.07272 (0.36283)	Data 0.00038 (0.25745)	Loss 0.7370 (0.8668)	Prec@1 75.00000 (71.09375)	Prec@5 100.00000 (99.60938)
Epoch: [85][33/60]	Time 0.06292 (0.35374)	Data 0.00053 (0.24967)	Loss 0.0914 (0.8433)	Prec@1 87.50000 (71.59091)	Prec@5 100.00000 (99.62122)
Epoch: [85][34/60]	Time 0.08605 (0.34587)	Data 0.00049 (0.24234)	Loss 1.2718 (0.8559)	Prec@1 75.00000 (71.69118)	Prec@5 100.00000 (99.63235)
Epoch: [85][35/60]	Time 0.05193 (0.33747)	Data 0.00058 (0.23543)	Loss 1.4961 (0.8742)	Prec@1 75.00000 (71.78571)	Prec@5 100.00000 (99.64286)
Epoch: [85][36/60]	Time 0.03651 (0.32911)	Data 0.00049 (0.22890)	Loss 0.9893 (0.8774)	Prec@1 62.50000 (71.52778)	Prec@5 100.00000 (99.65278)
Epoch: [85][37/60]	Time 0.04578 (0.32145)	Data 0.00070 (0.22274)	Loss 1.6137 (0.8973)	Prec@1 62.50000 (71.28378)	Prec@5 100.00000 (99.66216)
Epoch: [85][38/60]	Time 0.05187 (0.31436)	Data 0.00496 (0.21701)	Loss 2.4275 (0.9376)	Prec@1 50.00000 (70.72369)	Prec@5 100.00000 (99.67105)
Epoch: [85][39/60]	Time 0.07559 (0.30824)	Data 0.00352 (0.21153)	Loss 0.1173 (0.9166)	Prec@1 87.50000 (71.15385)	Prec@5 100.00000 (99.67949)
Epoch: [85][40/60]	Time 0.04595 (0.30168)	Data 0.00049 (0.20626)	Loss 0.2430 (0.8997)	Prec@1 87.50000 (71.56250)	Prec@5 100.00000 (99.68750)
Epoch: [85][41/60]	Time 0.03662 (0.29521)	Data 0.00043 (0.20124)	Loss 0.5952 (0.8923)	Prec@1 75.00000 (71.64634)	Prec@5 100.00000 (99.69512)
Epoch: [85][42/60]	Time 0.03053 (0.28891)	Data 0.00047 (0.19646)	Loss 1.2047 (0.8997)	Prec@1 87.50000 (72.02381)	Prec@5 100.00000 (99.70238)
Epoch: [85][43/60]	Time 0.02336 (0.28274)	Data 0.00085 (0.19191)	Loss 0.6866 (0.8948)	Prec@1 62.50000 (71.80232)	Prec@5 100.00000 (99.70930)
Epoch: [85][44/60]	Time 0.02333 (0.27684)	Data 0.00087 (0.18756)	Loss 0.8729 (0.8943)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.71591)
Epoch: [85][45/60]	Time 0.02316 (0.27120)	Data 0.00084 (0.18342)	Loss 0.8263 (0.8928)	Prec@1 87.50000 (72.22222)	Prec@5 100.00000 (99.72222)
Epoch: [85][46/60]	Time 0.02313 (0.26581)	Data 0.00093 (0.17945)	Loss 1.0855 (0.8970)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (99.72826)
Epoch: [85][47/60]	Time 0.02341 (0.26065)	Data 0.00085 (0.17565)	Loss 1.1532 (0.9024)	Prec@1 75.00000 (71.80851)	Prec@5 87.50000 (99.46808)
Epoch: [85][48/60]	Time 0.02315 (0.25571)	Data 0.00049 (0.17200)	Loss 0.5516 (0.8951)	Prec@1 87.50000 (72.13542)	Prec@5 100.00000 (99.47917)
Epoch: [85][49/60]	Time 0.02385 (0.25097)	Data 0.00042 (0.16850)	Loss 0.2725 (0.8824)	Prec@1 75.00000 (72.19388)	Prec@5 100.00000 (99.48979)
Epoch: [85][50/60]	Time 0.02358 (0.24643)	Data 0.00050 (0.16514)	Loss 0.9646 (0.8840)	Prec@1 75.00000 (72.25000)	Prec@5 100.00000 (99.50000)
Epoch: [85][51/60]	Time 0.02284 (0.24204)	Data 0.00050 (0.16191)	Loss 0.5448 (0.8774)	Prec@1 75.00000 (72.30392)	Prec@5 100.00000 (99.50980)
Epoch: [85][52/60]	Time 0.02288 (0.23783)	Data 0.00048 (0.15880)	Loss 1.1345 (0.8823)	Prec@1 37.50000 (71.63462)	Prec@5 87.50000 (99.27885)
Epoch: [85][53/60]	Time 0.02279 (0.23377)	Data 0.00044 (0.15582)	Loss 0.8005 (0.8808)	Prec@1 75.00000 (71.69811)	Prec@5 100.00000 (99.29246)
Epoch: [85][54/60]	Time 0.02347 (0.22988)	Data 0.00047 (0.15294)	Loss 1.0595 (0.8841)	Prec@1 75.00000 (71.75926)	Prec@5 100.00000 (99.30556)
Epoch: [85][55/60]	Time 0.02335 (0.22612)	Data 0.00052 (0.15017)	Loss 1.3803 (0.8931)	Prec@1 62.50000 (71.59090)	Prec@5 87.50000 (99.09090)
Epoch: [85][56/60]	Time 0.02281 (0.22249)	Data 0.00058 (0.14750)	Loss 0.7139 (0.8899)	Prec@1 62.50000 (71.42857)	Prec@5 100.00000 (99.10715)
Epoch: [85][57/60]	Time 0.02338 (0.21900)	Data 0.00045 (0.14492)	Loss 1.5205 (0.9010)	Prec@1 62.50000 (71.27193)	Prec@5 87.50000 (98.90351)
Epoch: [85][58/60]	Time 0.02291 (0.21562)	Data 0.00044 (0.14243)	Loss 0.7448 (0.8983)	Prec@1 62.50000 (71.12069)	Prec@5 100.00000 (98.92242)
Epoch: [85][59/60]	Time 0.02348 (0.21236)	Data 0.00045 (0.14002)	Loss 0.8605 (0.8976)	Prec@1 87.50000 (71.39831)	Prec@5 100.00000 (98.94068)
Epoch: [85][60/60]	Time 0.02294 (0.20920)	Data 0.00056 (0.13770)	Loss 0.6374 (0.8933)	Prec@1 87.50000 (71.66667)	Prec@5 100.00000 (98.95834)
train at epoch 86
train at epoch 86
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [86][0/272]	 lr: 0.00000	Time 7.688 (7.688)	Data 5.974 (5.974)	Loss 0.0127 (0.0127)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [86][10/272]	 lr: 0.00000	Time 0.429 (1.280)	Data 0.129 (0.729)	Loss 0.0616 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [86][20/272]	 lr: 0.00000	Time 0.414 (0.860)	Data 0.127 (0.443)	Loss 0.0070 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [86][30/272]	 lr: 0.00000	Time 0.329 (0.715)	Data 0.129 (0.342)	Loss 0.0733 (0.0200)	Prec@1 96.87500 (99.79839)	Prec@5 100.00000 (100.00000)
Epoch: [86][40/272]	 lr: 0.00000	Time 0.415 (0.644)	Data 0.110 (0.289)	Loss 0.0083 (0.0182)	Prec@1 100.00000 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [86][50/272]	 lr: 0.00000	Time 0.493 (0.606)	Data 0.130 (0.258)	Loss 0.0124 (0.0175)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [86][60/272]	 lr: 0.00000	Time 0.390 (0.592)	Data 0.065 (0.235)	Loss 0.0083 (0.0165)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [86][70/272]	 lr: 0.00000	Time 0.518 (0.571)	Data 0.141 (0.220)	Loss 0.0134 (0.0163)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [86][80/272]	 lr: 0.00000	Time 0.432 (0.552)	Data 0.127 (0.208)	Loss 0.0135 (0.0162)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [86][90/272]	 lr: 0.00000	Time 0.462 (0.541)	Data 0.131 (0.200)	Loss 0.0163 (0.0164)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [86][100/272]	 lr: 0.00000	Time 0.391 (0.531)	Data 0.128 (0.192)	Loss 0.0081 (0.0168)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [86][110/272]	 lr: 0.00000	Time 0.420 (0.523)	Data 0.124 (0.186)	Loss 0.0159 (0.0162)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [86][120/272]	 lr: 0.00000	Time 0.469 (0.518)	Data 0.107 (0.182)	Loss 0.0081 (0.0161)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [86][130/272]	 lr: 0.00000	Time 0.525 (0.512)	Data 0.119 (0.177)	Loss 0.0116 (0.0161)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [86][140/272]	 lr: 0.00000	Time 0.478 (0.508)	Data 0.128 (0.174)	Loss 0.0127 (0.0164)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [86][150/272]	 lr: 0.00000	Time 0.459 (0.504)	Data 0.165 (0.171)	Loss 0.0071 (0.0167)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [86][160/272]	 lr: 0.00000	Time 0.452 (0.497)	Data 0.136 (0.169)	Loss 0.0071 (0.0165)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [86][170/272]	 lr: 0.00000	Time 0.457 (0.493)	Data 0.127 (0.166)	Loss 0.0096 (0.0168)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [86][180/272]	 lr: 0.00000	Time 0.397 (0.489)	Data 0.129 (0.164)	Loss 0.0152 (0.0168)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [86][190/272]	 lr: 0.00000	Time 0.412 (0.486)	Data 0.129 (0.162)	Loss 0.0203 (0.0174)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [86][200/272]	 lr: 0.00000	Time 0.380 (0.484)	Data 0.129 (0.161)	Loss 0.0420 (0.0174)	Prec@1 100.00000 (99.93781)	Prec@5 100.00000 (100.00000)
Epoch: [86][210/272]	 lr: 0.00000	Time 0.443 (0.481)	Data 0.126 (0.159)	Loss 0.0450 (0.0173)	Prec@1 100.00000 (99.94077)	Prec@5 100.00000 (100.00000)
Epoch: [86][220/272]	 lr: 0.00000	Time 0.313 (0.482)	Data 0.048 (0.158)	Loss 0.0083 (0.0183)	Prec@1 100.00000 (99.88688)	Prec@5 100.00000 (100.00001)
Epoch: [86][230/272]	 lr: 0.00000	Time 0.424 (0.480)	Data 0.129 (0.156)	Loss 0.0203 (0.0180)	Prec@1 100.00000 (99.89178)	Prec@5 100.00000 (100.00000)
Epoch: [86][240/272]	 lr: 0.00000	Time 0.223 (0.481)	Data 0.099 (0.155)	Loss 0.0095 (0.0179)	Prec@1 100.00000 (99.89627)	Prec@5 100.00000 (100.00001)
Epoch: [86][250/272]	 lr: 0.00000	Time 0.239 (0.471)	Data 0.128 (0.154)	Loss 0.0149 (0.0178)	Prec@1 100.00000 (99.90040)	Prec@5 100.00000 (100.00000)
Epoch: [86][260/272]	 lr: 0.00000	Time 0.239 (0.462)	Data 0.129 (0.153)	Loss 0.0216 (0.0176)	Prec@1 100.00000 (99.90421)	Prec@5 100.00000 (100.00000)
Epoch: [86][270/272]	 lr: 0.00000	Time 0.239 (0.454)	Data 0.128 (0.152)	Loss 0.0695 (0.0178)	Prec@1 100.00000 (99.90775)	Prec@5 100.00000 (100.00000)
validation at epoch 86
validation at epoch 86
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [86][1/60]	Time 3.94560 (3.94560)	Data 3.82366 (3.82366)	Loss 0.4138 (0.4138)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [86][2/60]	Time 3.40852 (3.67706)	Data 3.35676 (3.59021)	Loss 0.3835 (0.3986)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [86][3/60]	Time 0.11278 (2.48897)	Data 0.00589 (2.39544)	Loss 1.1725 (0.6566)	Prec@1 75.00000 (79.16667)	Prec@5 87.50000 (95.83334)
Epoch: [86][4/60]	Time 0.16776 (1.90867)	Data 0.01258 (1.79972)	Loss 0.1584 (0.5320)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (96.87500)
Epoch: [86][5/60]	Time 0.68313 (1.66356)	Data 0.61927 (1.56363)	Loss 0.3153 (0.4887)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (97.50000)
Epoch: [86][6/60]	Time 0.09471 (1.40208)	Data 0.01448 (1.30544)	Loss 0.3645 (0.4680)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (97.91667)
Epoch: [86][7/60]	Time 0.12010 (1.21894)	Data 0.00051 (1.11902)	Loss 1.1444 (0.5646)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (98.21429)
Epoch: [86][8/60]	Time 0.15529 (1.08599)	Data 0.01116 (0.98054)	Loss 0.9919 (0.6180)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (98.43750)
Epoch: [86][9/60]	Time 0.08632 (0.97491)	Data 0.00102 (0.87170)	Loss 0.7218 (0.6296)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (98.61111)
Epoch: [86][10/60]	Time 0.12284 (0.88970)	Data 0.01234 (0.78577)	Loss 0.4857 (0.6152)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (98.75000)
Epoch: [86][11/60]	Time 0.17392 (0.82463)	Data 0.05767 (0.71958)	Loss 0.5363 (0.6080)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (98.86364)
Epoch: [86][12/60]	Time 0.10038 (0.76428)	Data 0.00571 (0.66009)	Loss 1.1302 (0.6515)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (98.95834)
Epoch: [86][13/60]	Time 0.12823 (0.71535)	Data 0.00361 (0.60959)	Loss 1.6954 (0.7318)	Prec@1 50.00000 (75.00000)	Prec@5 87.50000 (98.07693)
Epoch: [86][14/60]	Time 0.14567 (0.67466)	Data 0.02343 (0.56772)	Loss 0.0878 (0.6858)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (98.21429)
Epoch: [86][15/60]	Time 0.18295 (0.64188)	Data 0.03744 (0.53237)	Loss 0.9532 (0.7037)	Prec@1 75.00000 (76.66667)	Prec@5 100.00000 (98.33334)
Epoch: [86][16/60]	Time 0.08850 (0.60729)	Data 0.01238 (0.49987)	Loss 0.9789 (0.7209)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [86][17/60]	Time 0.16315 (0.58117)	Data 0.04954 (0.47338)	Loss 0.3471 (0.6989)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (98.52941)
Epoch: [86][18/60]	Time 0.16997 (0.55832)	Data 0.00332 (0.44727)	Loss 2.3027 (0.7880)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (98.61111)
Epoch: [86][19/60]	Time 0.04372 (0.53124)	Data 0.00658 (0.42407)	Loss 0.2039 (0.7572)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (98.68421)
Epoch: [86][20/60]	Time 0.11015 (0.51018)	Data 0.00155 (0.40295)	Loss 2.2422 (0.8315)	Prec@1 62.50000 (76.87500)	Prec@5 87.50000 (98.12500)
Epoch: [86][21/60]	Time 0.11201 (0.49122)	Data 0.00962 (0.38422)	Loss 0.4112 (0.8115)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (98.21429)
Epoch: [86][22/60]	Time 0.09593 (0.47326)	Data 0.01307 (0.36735)	Loss 0.5448 (0.7993)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (98.29546)
Epoch: [86][23/60]	Time 0.13876 (0.45871)	Data 0.00170 (0.35145)	Loss 1.0381 (0.8097)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (98.36957)
Epoch: [86][24/60]	Time 0.19060 (0.44754)	Data 0.05143 (0.33895)	Loss 0.6591 (0.8035)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (98.43750)
Epoch: [86][25/60]	Time 0.11470 (0.43423)	Data 0.03678 (0.32686)	Loss 0.4586 (0.7897)	Prec@1 75.00000 (76.00000)	Prec@5 100.00000 (98.50000)
Epoch: [86][26/60]	Time 0.06672 (0.42009)	Data 0.01431 (0.31484)	Loss 0.0900 (0.7627)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (98.55769)
Epoch: [86][27/60]	Time 0.08110 (0.40754)	Data 0.00586 (0.30340)	Loss 0.7900 (0.7638)	Prec@1 50.00000 (75.92593)	Prec@5 100.00000 (98.61111)
Epoch: [86][28/60]	Time 0.14893 (0.39830)	Data 0.02111 (0.29331)	Loss 0.4917 (0.7540)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (98.66072)
Epoch: [86][29/60]	Time 0.07603 (0.38719)	Data 0.00053 (0.28322)	Loss 0.7447 (0.7537)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (98.70689)
Epoch: [86][30/60]	Time 0.05886 (0.37624)	Data 0.00046 (0.27379)	Loss 1.7797 (0.7879)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (98.75001)
Epoch: [86][31/60]	Time 0.07846 (0.36664)	Data 0.00627 (0.26516)	Loss 2.1412 (0.8316)	Prec@1 37.50000 (74.59677)	Prec@5 100.00000 (98.79032)
Epoch: [86][32/60]	Time 0.08870 (0.35795)	Data 0.00922 (0.25716)	Loss 0.6227 (0.8250)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (98.82812)
Epoch: [86][33/60]	Time 0.08155 (0.34958)	Data 0.00048 (0.24939)	Loss 0.1444 (0.8044)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (98.86364)
Epoch: [86][34/60]	Time 0.03477 (0.34032)	Data 0.00084 (0.24208)	Loss 1.0977 (0.8130)	Prec@1 62.50000 (74.63235)	Prec@5 100.00000 (98.89706)
Epoch: [86][35/60]	Time 0.04098 (0.33176)	Data 0.00052 (0.23517)	Loss 1.1954 (0.8240)	Prec@1 75.00000 (74.64286)	Prec@5 100.00000 (98.92857)
Epoch: [86][36/60]	Time 0.03045 (0.32339)	Data 0.00109 (0.22867)	Loss 1.0235 (0.8295)	Prec@1 62.50000 (74.30556)	Prec@5 100.00000 (98.95834)
Epoch: [86][37/60]	Time 0.02928 (0.31545)	Data 0.00088 (0.22251)	Loss 1.2679 (0.8414)	Prec@1 62.50000 (73.98649)	Prec@5 100.00000 (98.98649)
Epoch: [86][38/60]	Time 0.02899 (0.30791)	Data 0.00070 (0.21668)	Loss 2.0764 (0.8739)	Prec@1 50.00000 (73.35526)	Prec@5 100.00000 (99.01316)
Epoch: [86][39/60]	Time 0.02891 (0.30075)	Data 0.00080 (0.21114)	Loss 0.1899 (0.8563)	Prec@1 87.50000 (73.71795)	Prec@5 100.00000 (99.03846)
Epoch: [86][40/60]	Time 0.03255 (0.29405)	Data 0.00076 (0.20588)	Loss 0.3666 (0.8441)	Prec@1 87.50000 (74.06250)	Prec@5 100.00000 (99.06250)
Epoch: [86][41/60]	Time 0.02924 (0.28759)	Data 0.00047 (0.20087)	Loss 0.4908 (0.8355)	Prec@1 75.00000 (74.08537)	Prec@5 100.00000 (99.08537)
Epoch: [86][42/60]	Time 0.02728 (0.28139)	Data 0.00052 (0.19610)	Loss 1.0744 (0.8412)	Prec@1 62.50000 (73.80952)	Prec@5 100.00000 (99.10715)
Epoch: [86][43/60]	Time 0.02331 (0.27539)	Data 0.00083 (0.19156)	Loss 0.5495 (0.8344)	Prec@1 87.50000 (74.12791)	Prec@5 100.00000 (99.12791)
Epoch: [86][44/60]	Time 0.02313 (0.26966)	Data 0.00086 (0.18723)	Loss 0.6695 (0.8306)	Prec@1 75.00000 (74.14773)	Prec@5 100.00000 (99.14773)
Epoch: [86][45/60]	Time 0.02328 (0.26418)	Data 0.00090 (0.18309)	Loss 0.6899 (0.8275)	Prec@1 87.50000 (74.44444)	Prec@5 100.00000 (99.16667)
Epoch: [86][46/60]	Time 0.02406 (0.25896)	Data 0.00047 (0.17912)	Loss 0.9059 (0.8292)	Prec@1 50.00000 (73.91305)	Prec@5 100.00000 (99.18478)
Epoch: [86][47/60]	Time 0.02293 (0.25394)	Data 0.00049 (0.17532)	Loss 1.1963 (0.8370)	Prec@1 75.00000 (73.93616)	Prec@5 87.50000 (98.93616)
Epoch: [86][48/60]	Time 0.02300 (0.24913)	Data 0.00049 (0.17167)	Loss 0.5233 (0.8305)	Prec@1 87.50000 (74.21875)	Prec@5 100.00000 (98.95834)
Epoch: [86][49/60]	Time 0.02459 (0.24455)	Data 0.00050 (0.16818)	Loss 0.2330 (0.8183)	Prec@1 87.50000 (74.48979)	Prec@5 100.00000 (98.97959)
Epoch: [86][50/60]	Time 0.02315 (0.24012)	Data 0.00052 (0.16483)	Loss 0.9086 (0.8201)	Prec@1 75.00000 (74.50000)	Prec@5 100.00000 (99.00000)
Epoch: [86][51/60]	Time 0.02378 (0.23588)	Data 0.00052 (0.16161)	Loss 0.4099 (0.8120)	Prec@1 75.00000 (74.50980)	Prec@5 100.00000 (99.01961)
Epoch: [86][52/60]	Time 0.02284 (0.23178)	Data 0.00045 (0.15851)	Loss 1.1075 (0.8177)	Prec@1 50.00000 (74.03847)	Prec@5 87.50000 (98.79808)
Epoch: [86][53/60]	Time 0.02359 (0.22785)	Data 0.00048 (0.15553)	Loss 0.7032 (0.8156)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (98.82076)
Epoch: [86][54/60]	Time 0.02290 (0.22406)	Data 0.00044 (0.15265)	Loss 0.9259 (0.8176)	Prec@1 75.00000 (74.07407)	Prec@5 100.00000 (98.84259)
Epoch: [86][55/60]	Time 0.02335 (0.22041)	Data 0.00046 (0.14989)	Loss 1.4460 (0.8290)	Prec@1 62.50000 (73.86363)	Prec@5 87.50000 (98.63636)
Epoch: [86][56/60]	Time 0.02326 (0.21689)	Data 0.00053 (0.14722)	Loss 0.7558 (0.8277)	Prec@1 62.50000 (73.66072)	Prec@5 100.00000 (98.66072)
Epoch: [86][57/60]	Time 0.02284 (0.21348)	Data 0.00045 (0.14464)	Loss 1.4794 (0.8392)	Prec@1 62.50000 (73.46491)	Prec@5 87.50000 (98.46491)
Epoch: [86][58/60]	Time 0.02437 (0.21022)	Data 0.00050 (0.14216)	Loss 0.7195 (0.8371)	Prec@1 62.50000 (73.27586)	Prec@5 100.00000 (98.49138)
Epoch: [86][59/60]	Time 0.02292 (0.20705)	Data 0.00043 (0.13976)	Loss 0.8619 (0.8375)	Prec@1 75.00000 (73.30508)	Prec@5 100.00000 (98.51695)
Epoch: [86][60/60]	Time 0.02302 (0.20398)	Data 0.00056 (0.13744)	Loss 0.6090 (0.8337)	Prec@1 87.50000 (73.54167)	Prec@5 100.00000 (98.54167)
train at epoch 87
train at epoch 87
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [87][0/272]	 lr: 0.00000	Time 9.523 (9.523)	Data 8.649 (8.649)	Loss 0.0038 (0.0038)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][10/272]	 lr: 0.00000	Time 0.467 (1.305)	Data 0.126 (0.904)	Loss 0.0044 (0.0115)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][20/272]	 lr: 0.00000	Time 0.398 (0.875)	Data 0.128 (0.536)	Loss 0.0128 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][30/272]	 lr: 0.00000	Time 0.377 (0.740)	Data 0.129 (0.404)	Loss 0.0083 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][40/272]	 lr: 0.00000	Time 0.479 (0.677)	Data 0.150 (0.337)	Loss 0.0194 (0.0154)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][50/272]	 lr: 0.00000	Time 0.516 (0.631)	Data 0.138 (0.296)	Loss 0.0115 (0.0167)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [87][60/272]	 lr: 0.00000	Time 0.433 (0.599)	Data 0.127 (0.268)	Loss 0.0052 (0.0161)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [87][70/272]	 lr: 0.00000	Time 0.502 (0.576)	Data 0.128 (0.249)	Loss 0.0224 (0.0165)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [87][80/272]	 lr: 0.00000	Time 0.391 (0.558)	Data 0.119 (0.234)	Loss 0.0056 (0.0166)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [87][90/272]	 lr: 0.00000	Time 0.406 (0.545)	Data 0.047 (0.222)	Loss 0.0064 (0.0184)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [87][100/272]	 lr: 0.00000	Time 0.458 (0.535)	Data 0.127 (0.212)	Loss 0.0052 (0.0181)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [87][110/272]	 lr: 0.00000	Time 0.327 (0.525)	Data 0.129 (0.205)	Loss 0.0171 (0.0183)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [87][120/272]	 lr: 0.00000	Time 0.396 (0.519)	Data 0.102 (0.199)	Loss 0.0142 (0.0183)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [87][130/272]	 lr: 0.00000	Time 0.462 (0.515)	Data 0.133 (0.193)	Loss 0.0152 (0.0177)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [87][140/272]	 lr: 0.00000	Time 0.498 (0.510)	Data 0.128 (0.189)	Loss 0.0049 (0.0175)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [87][150/272]	 lr: 0.00000	Time 0.538 (0.503)	Data 0.129 (0.185)	Loss 0.0315 (0.0178)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [87][160/272]	 lr: 0.00000	Time 0.475 (0.499)	Data 0.129 (0.182)	Loss 0.0044 (0.0178)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [87][170/272]	 lr: 0.00000	Time 0.511 (0.495)	Data 0.129 (0.179)	Loss 0.0278 (0.0176)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [87][180/272]	 lr: 0.00000	Time 0.542 (0.492)	Data 0.142 (0.176)	Loss 0.0318 (0.0174)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [87][190/272]	 lr: 0.00000	Time 0.390 (0.489)	Data 0.127 (0.174)	Loss 0.0206 (0.0174)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [87][200/272]	 lr: 0.00000	Time 0.507 (0.488)	Data 0.127 (0.172)	Loss 0.0288 (0.0172)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [87][210/272]	 lr: 0.00000	Time 0.490 (0.486)	Data 0.140 (0.170)	Loss 0.0226 (0.0169)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [87][220/272]	 lr: 0.00000	Time 0.378 (0.485)	Data 0.128 (0.168)	Loss 0.0093 (0.0167)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [87][230/272]	 lr: 0.00000	Time 0.413 (0.485)	Data 0.130 (0.166)	Loss 0.0072 (0.0164)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [87][240/272]	 lr: 0.00000	Time 0.251 (0.482)	Data 0.117 (0.165)	Loss 0.0061 (0.0162)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [87][250/272]	 lr: 0.00000	Time 0.232 (0.472)	Data 0.122 (0.163)	Loss 0.0169 (0.0162)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [87][260/272]	 lr: 0.00000	Time 0.238 (0.463)	Data 0.129 (0.162)	Loss 0.0056 (0.0160)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [87][270/272]	 lr: 0.00000	Time 0.238 (0.455)	Data 0.129 (0.160)	Loss 0.0220 (0.0160)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 87
validation at epoch 87
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [87][1/60]	Time 6.87799 (6.87799)	Data 6.71147 (6.71147)	Loss 0.4086 (0.4086)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [87][2/60]	Time 0.23800 (3.55799)	Data 0.00071 (3.35609)	Loss 0.4383 (0.4235)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [87][3/60]	Time 0.26481 (2.46026)	Data 0.01891 (2.24370)	Loss 1.2234 (0.6901)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (95.83334)
Epoch: [87][4/60]	Time 0.23119 (1.90299)	Data 0.01015 (1.68531)	Loss 0.2026 (0.5682)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (96.87500)
Epoch: [87][5/60]	Time 0.13488 (1.54937)	Data 0.00085 (1.34842)	Loss 0.3171 (0.5180)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (97.50000)
Epoch: [87][6/60]	Time 0.27429 (1.33686)	Data 0.08219 (1.13738)	Loss 0.4350 (0.5042)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (97.91667)
Epoch: [87][7/60]	Time 0.07488 (1.15658)	Data 0.02078 (0.97787)	Loss 1.2365 (0.6088)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (98.21429)
Epoch: [87][8/60]	Time 0.16692 (1.03287)	Data 0.06829 (0.86417)	Loss 1.0964 (0.6697)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.43750)
Epoch: [87][9/60]	Time 0.09444 (0.92860)	Data 0.04728 (0.77340)	Loss 0.6604 (0.6687)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (98.61111)
Epoch: [87][10/60]	Time 0.11382 (0.84712)	Data 0.00071 (0.69614)	Loss 0.6032 (0.6622)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (98.75000)
Epoch: [87][11/60]	Time 0.20848 (0.78906)	Data 0.08330 (0.64042)	Loss 0.6394 (0.6601)	Prec@1 87.50000 (73.86364)	Prec@5 100.00000 (98.86364)
Epoch: [87][12/60]	Time 0.10501 (0.73206)	Data 0.05931 (0.59200)	Loss 1.0218 (0.6902)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (98.95834)
Epoch: [87][13/60]	Time 0.18881 (0.69027)	Data 0.01996 (0.54799)	Loss 1.8109 (0.7764)	Prec@1 50.00000 (71.15385)	Prec@5 100.00000 (99.03847)
Epoch: [87][14/60]	Time 0.10267 (0.64830)	Data 0.00811 (0.50943)	Loss 0.0993 (0.7281)	Prec@1 100.00000 (73.21429)	Prec@5 100.00000 (99.10715)
Epoch: [87][15/60]	Time 0.11895 (0.61301)	Data 0.00390 (0.47573)	Loss 1.0644 (0.7505)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (99.16667)
Epoch: [87][16/60]	Time 0.11468 (0.58186)	Data 0.00587 (0.44636)	Loss 1.1513 (0.7755)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (99.21875)
Epoch: [87][17/60]	Time 0.15063 (0.55650)	Data 0.00790 (0.42057)	Loss 0.4050 (0.7537)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [87][18/60]	Time 0.11375 (0.53190)	Data 0.00378 (0.39742)	Loss 2.4618 (0.8486)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [87][19/60]	Time 0.19880 (0.51437)	Data 0.00329 (0.37667)	Loss 0.1774 (0.8133)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.34211)
Epoch: [87][20/60]	Time 0.14691 (0.49599)	Data 0.02060 (0.35887)	Loss 2.4194 (0.8936)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (99.37500)
Epoch: [87][21/60]	Time 0.13263 (0.47869)	Data 0.00816 (0.34217)	Loss 0.6330 (0.8812)	Prec@1 62.50000 (73.80952)	Prec@5 100.00000 (99.40476)
Epoch: [87][22/60]	Time 0.15432 (0.46395)	Data 0.00588 (0.32688)	Loss 0.6766 (0.8719)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [87][23/60]	Time 0.05553 (0.44619)	Data 0.00665 (0.31296)	Loss 1.1349 (0.8833)	Prec@1 62.50000 (73.36957)	Prec@5 100.00000 (99.45652)
Epoch: [87][24/60]	Time 0.18957 (0.43550)	Data 0.06392 (0.30258)	Loss 0.7848 (0.8792)	Prec@1 62.50000 (72.91667)	Prec@5 100.00000 (99.47917)
Epoch: [87][25/60]	Time 0.14018 (0.42368)	Data 0.02921 (0.29165)	Loss 0.5138 (0.8646)	Prec@1 75.00000 (73.00000)	Prec@5 100.00000 (99.50000)
Epoch: [87][26/60]	Time 0.14454 (0.41295)	Data 0.02195 (0.28127)	Loss 0.0749 (0.8342)	Prec@1 100.00000 (74.03847)	Prec@5 100.00000 (99.51923)
Epoch: [87][27/60]	Time 0.08814 (0.40092)	Data 0.00058 (0.27088)	Loss 1.0021 (0.8405)	Prec@1 50.00000 (73.14815)	Prec@5 100.00000 (99.53704)
Epoch: [87][28/60]	Time 0.11167 (0.39059)	Data 0.01477 (0.26173)	Loss 0.4644 (0.8270)	Prec@1 87.50000 (73.66072)	Prec@5 100.00000 (99.55357)
Epoch: [87][29/60]	Time 0.09039 (0.38024)	Data 0.00080 (0.25273)	Loss 0.7337 (0.8238)	Prec@1 75.00000 (73.70689)	Prec@5 100.00000 (99.56896)
Epoch: [87][30/60]	Time 0.10285 (0.37099)	Data 0.00063 (0.24433)	Loss 1.8207 (0.8570)	Prec@1 62.50000 (73.33334)	Prec@5 100.00000 (99.58334)
Epoch: [87][31/60]	Time 0.08269 (0.36169)	Data 0.00044 (0.23646)	Loss 2.3311 (0.9046)	Prec@1 37.50000 (72.17741)	Prec@5 100.00000 (99.59677)
Epoch: [87][32/60]	Time 0.05174 (0.35200)	Data 0.00057 (0.22909)	Loss 0.7920 (0.9011)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (99.60938)
Epoch: [87][33/60]	Time 0.04437 (0.34268)	Data 0.00071 (0.22217)	Loss 0.1248 (0.8775)	Prec@1 87.50000 (72.34849)	Prec@5 100.00000 (99.62122)
Epoch: [87][34/60]	Time 0.03969 (0.33377)	Data 0.00065 (0.21566)	Loss 1.2303 (0.8879)	Prec@1 62.50000 (72.05882)	Prec@5 100.00000 (99.63235)
Epoch: [87][35/60]	Time 0.03819 (0.32532)	Data 0.00508 (0.20964)	Loss 1.3314 (0.9006)	Prec@1 75.00000 (72.14286)	Prec@5 100.00000 (99.64286)
Epoch: [87][36/60]	Time 0.02535 (0.31699)	Data 0.00053 (0.20383)	Loss 1.0839 (0.9057)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (99.65278)
Epoch: [87][37/60]	Time 0.03168 (0.30928)	Data 0.00326 (0.19841)	Loss 1.5083 (0.9220)	Prec@1 62.50000 (71.62162)	Prec@5 100.00000 (99.66216)
Epoch: [87][38/60]	Time 0.03949 (0.30218)	Data 0.00421 (0.19330)	Loss 2.2881 (0.9579)	Prec@1 50.00000 (71.05264)	Prec@5 100.00000 (99.67105)
Epoch: [87][39/60]	Time 0.02507 (0.29508)	Data 0.00054 (0.18836)	Loss 0.1485 (0.9372)	Prec@1 87.50000 (71.47436)	Prec@5 100.00000 (99.67949)
Epoch: [87][40/60]	Time 0.02803 (0.28840)	Data 0.00425 (0.18375)	Loss 0.2871 (0.9209)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (99.68750)
Epoch: [87][41/60]	Time 0.03395 (0.28219)	Data 0.00044 (0.17928)	Loss 0.6377 (0.9140)	Prec@1 75.00000 (71.95122)	Prec@5 100.00000 (99.69512)
Epoch: [87][42/60]	Time 0.03229 (0.27624)	Data 0.00103 (0.17504)	Loss 1.1237 (0.9190)	Prec@1 62.50000 (71.72619)	Prec@5 100.00000 (99.70238)
Epoch: [87][43/60]	Time 0.03102 (0.27054)	Data 0.00048 (0.17098)	Loss 0.6743 (0.9133)	Prec@1 75.00000 (71.80232)	Prec@5 100.00000 (99.70930)
Epoch: [87][44/60]	Time 0.03298 (0.26514)	Data 0.00418 (0.16719)	Loss 0.8315 (0.9115)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.71591)
Epoch: [87][45/60]	Time 0.02936 (0.25990)	Data 0.00456 (0.16357)	Loss 0.7716 (0.9083)	Prec@1 87.50000 (72.22222)	Prec@5 100.00000 (99.72222)
Epoch: [87][46/60]	Time 0.02262 (0.25474)	Data 0.00048 (0.16003)	Loss 0.8186 (0.9064)	Prec@1 50.00000 (71.73913)	Prec@5 100.00000 (99.72826)
Epoch: [87][47/60]	Time 0.02642 (0.24989)	Data 0.00040 (0.15663)	Loss 1.1170 (0.9109)	Prec@1 75.00000 (71.80851)	Prec@5 87.50000 (99.46808)
Epoch: [87][48/60]	Time 0.02209 (0.24514)	Data 0.00046 (0.15338)	Loss 0.5924 (0.9042)	Prec@1 87.50000 (72.13542)	Prec@5 100.00000 (99.47917)
Epoch: [87][49/60]	Time 0.02182 (0.24058)	Data 0.00042 (0.15026)	Loss 0.1763 (0.8894)	Prec@1 87.50000 (72.44897)	Prec@5 100.00000 (99.48979)
Epoch: [87][50/60]	Time 0.02306 (0.23623)	Data 0.00040 (0.14726)	Loss 0.9109 (0.8898)	Prec@1 75.00000 (72.50000)	Prec@5 100.00000 (99.50000)
Epoch: [87][51/60]	Time 0.02157 (0.23202)	Data 0.00044 (0.14438)	Loss 0.3231 (0.8787)	Prec@1 75.00000 (72.54902)	Prec@5 100.00000 (99.50980)
Epoch: [87][52/60]	Time 0.02185 (0.22798)	Data 0.00038 (0.14161)	Loss 1.1007 (0.8830)	Prec@1 50.00000 (72.11539)	Prec@5 87.50000 (99.27885)
Epoch: [87][53/60]	Time 0.02294 (0.22411)	Data 0.00045 (0.13895)	Loss 0.7067 (0.8796)	Prec@1 75.00000 (72.16982)	Prec@5 100.00000 (99.29246)
Epoch: [87][54/60]	Time 0.02251 (0.22038)	Data 0.00043 (0.13638)	Loss 0.9317 (0.8806)	Prec@1 75.00000 (72.22222)	Prec@5 100.00000 (99.30556)
Epoch: [87][55/60]	Time 0.02131 (0.21676)	Data 0.00044 (0.13391)	Loss 1.3587 (0.8893)	Prec@1 62.50000 (72.04546)	Prec@5 87.50000 (99.09090)
Epoch: [87][56/60]	Time 0.02175 (0.21328)	Data 0.00051 (0.13153)	Loss 0.6806 (0.8856)	Prec@1 62.50000 (71.87500)	Prec@5 100.00000 (99.10715)
Epoch: [87][57/60]	Time 0.02157 (0.20991)	Data 0.00041 (0.12923)	Loss 1.4160 (0.8949)	Prec@1 62.50000 (71.71053)	Prec@5 87.50000 (98.90351)
Epoch: [87][58/60]	Time 0.02191 (0.20667)	Data 0.00045 (0.12701)	Loss 0.6728 (0.8911)	Prec@1 62.50000 (71.55173)	Prec@5 100.00000 (98.92242)
Epoch: [87][59/60]	Time 0.02408 (0.20358)	Data 0.00063 (0.12487)	Loss 0.8877 (0.8910)	Prec@1 75.00000 (71.61017)	Prec@5 100.00000 (98.94068)
Epoch: [87][60/60]	Time 0.02191 (0.20055)	Data 0.00070 (0.12280)	Loss 0.5617 (0.8855)	Prec@1 87.50000 (71.87500)	Prec@5 100.00000 (98.95834)
train at epoch 88
train at epoch 88
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [88][0/272]	 lr: 0.00000	Time 7.635 (7.635)	Data 6.187 (6.187)	Loss 0.0424 (0.0424)	Prec@1 96.87500 (96.87500)	Prec@5 100.00000 (100.00000)
Epoch: [88][10/272]	 lr: 0.00000	Time 0.498 (1.299)	Data 0.128 (0.796)	Loss 0.0332 (0.0188)	Prec@1 100.00000 (99.71591)	Prec@5 100.00000 (100.00000)
Epoch: [88][20/272]	 lr: 0.00000	Time 0.509 (0.869)	Data 0.142 (0.480)	Loss 0.0142 (0.0163)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [88][30/272]	 lr: 0.00000	Time 0.392 (0.731)	Data 0.141 (0.369)	Loss 0.0130 (0.0143)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [88][40/272]	 lr: 0.00000	Time 0.482 (0.659)	Data 0.122 (0.310)	Loss 0.0136 (0.0141)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [88][50/272]	 lr: 0.00000	Time 0.395 (0.617)	Data 0.126 (0.275)	Loss 0.0062 (0.0154)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [88][60/272]	 lr: 0.00000	Time 0.538 (0.590)	Data 0.130 (0.251)	Loss 0.0349 (0.0157)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [88][70/272]	 lr: 0.00000	Time 0.505 (0.568)	Data 0.131 (0.234)	Loss 0.0481 (0.0159)	Prec@1 96.87500 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [88][80/272]	 lr: 0.00000	Time 0.536 (0.554)	Data 0.121 (0.221)	Loss 0.0076 (0.0159)	Prec@1 100.00000 (99.88426)	Prec@5 100.00000 (100.00000)
Epoch: [88][90/272]	 lr: 0.00000	Time 0.489 (0.544)	Data 0.127 (0.210)	Loss 0.0075 (0.0157)	Prec@1 100.00000 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [88][100/272]	 lr: 0.00000	Time 0.492 (0.534)	Data 0.132 (0.202)	Loss 0.0233 (0.0160)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [88][110/272]	 lr: 0.00000	Time 0.522 (0.526)	Data 0.127 (0.195)	Loss 0.0040 (0.0161)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [88][120/272]	 lr: 0.00000	Time 0.480 (0.519)	Data 0.130 (0.190)	Loss 0.0111 (0.0162)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [88][130/272]	 lr: 0.00000	Time 0.578 (0.514)	Data 0.147 (0.185)	Loss 0.0119 (0.0160)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [88][140/272]	 lr: 0.00000	Time 0.467 (0.510)	Data 0.115 (0.181)	Loss 0.0415 (0.0160)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [88][150/272]	 lr: 0.00000	Time 0.398 (0.505)	Data 0.129 (0.177)	Loss 0.0323 (0.0165)	Prec@1 100.00000 (99.91722)	Prec@5 100.00000 (100.00000)
Epoch: [88][160/272]	 lr: 0.00000	Time 0.365 (0.502)	Data 0.127 (0.174)	Loss 0.0144 (0.0167)	Prec@1 100.00000 (99.92236)	Prec@5 100.00000 (100.00000)
Epoch: [88][170/272]	 lr: 0.00000	Time 0.375 (0.499)	Data 0.120 (0.172)	Loss 0.0435 (0.0171)	Prec@1 100.00000 (99.90862)	Prec@5 100.00000 (100.00000)
Epoch: [88][180/272]	 lr: 0.00000	Time 0.412 (0.496)	Data 0.129 (0.169)	Loss 0.0111 (0.0170)	Prec@1 100.00000 (99.91368)	Prec@5 100.00000 (100.00001)
Epoch: [88][190/272]	 lr: 0.00000	Time 0.450 (0.493)	Data 0.127 (0.167)	Loss 0.0136 (0.0173)	Prec@1 100.00000 (99.91820)	Prec@5 100.00000 (100.00000)
Epoch: [88][200/272]	 lr: 0.00000	Time 0.437 (0.491)	Data 0.115 (0.165)	Loss 0.0041 (0.0176)	Prec@1 100.00000 (99.92226)	Prec@5 100.00000 (100.00000)
Epoch: [88][210/272]	 lr: 0.00000	Time 0.439 (0.489)	Data 0.129 (0.163)	Loss 0.0142 (0.0174)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [88][220/272]	 lr: 0.00000	Time 0.506 (0.487)	Data 0.130 (0.162)	Loss 0.0112 (0.0173)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [88][230/272]	 lr: 0.00000	Time 0.463 (0.485)	Data 0.123 (0.160)	Loss 0.0148 (0.0176)	Prec@1 100.00000 (99.90530)	Prec@5 100.00000 (100.00000)
Epoch: [88][240/272]	 lr: 0.00000	Time 0.282 (0.482)	Data 0.127 (0.159)	Loss 0.0157 (0.0178)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [88][250/272]	 lr: 0.00000	Time 0.238 (0.473)	Data 0.129 (0.158)	Loss 0.0183 (0.0177)	Prec@1 100.00000 (99.91285)	Prec@5 100.00000 (100.00000)
Epoch: [88][260/272]	 lr: 0.00000	Time 0.238 (0.464)	Data 0.129 (0.157)	Loss 0.0211 (0.0178)	Prec@1 100.00000 (99.91618)	Prec@5 100.00000 (100.00000)
Epoch: [88][270/272]	 lr: 0.00000	Time 0.239 (0.455)	Data 0.129 (0.156)	Loss 0.0121 (0.0177)	Prec@1 100.00000 (99.90775)	Prec@5 100.00000 (100.00000)
validation at epoch 88
validation at epoch 88
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [88][1/60]	Time 6.90847 (6.90847)	Data 6.78609 (6.78609)	Loss 0.3833 (0.3833)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [88][2/60]	Time 0.16957 (3.53902)	Data 0.01561 (3.40085)	Loss 0.4539 (0.4186)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [88][3/60]	Time 0.06462 (2.38089)	Data 0.00548 (2.26906)	Loss 1.0887 (0.6420)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [88][4/60]	Time 0.24512 (1.84694)	Data 0.07906 (1.72156)	Loss 0.1609 (0.5217)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [88][5/60]	Time 0.17062 (1.51168)	Data 0.01439 (1.38013)	Loss 0.3190 (0.4812)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [88][6/60]	Time 0.25219 (1.30177)	Data 0.04186 (1.15708)	Loss 0.2566 (0.4437)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [88][7/60]	Time 0.20293 (1.14479)	Data 0.10251 (1.00643)	Loss 1.2903 (0.5647)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (100.00001)
Epoch: [88][8/60]	Time 0.21531 (1.02861)	Data 0.13883 (0.89798)	Loss 1.0481 (0.6251)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [88][9/60]	Time 0.12029 (0.92768)	Data 0.07288 (0.80630)	Loss 0.6775 (0.6309)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [88][10/60]	Time 0.05492 (0.84041)	Data 0.00058 (0.72573)	Loss 0.5490 (0.6227)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [88][11/60]	Time 0.10807 (0.77383)	Data 0.00107 (0.65985)	Loss 0.5307 (0.6144)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [88][12/60]	Time 0.06230 (0.71454)	Data 0.01878 (0.60643)	Loss 1.3286 (0.6739)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [88][13/60]	Time 0.06632 (0.66467)	Data 0.01892 (0.56123)	Loss 1.5993 (0.7451)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [88][14/60]	Time 0.20383 (0.63175)	Data 0.01513 (0.52223)	Loss 0.0573 (0.6959)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [88][15/60]	Time 0.15961 (0.60028)	Data 0.06091 (0.49147)	Loss 1.0531 (0.7198)	Prec@1 75.00000 (78.33334)	Prec@5 100.00000 (100.00001)
Epoch: [88][16/60]	Time 0.10342 (0.56922)	Data 0.00223 (0.46089)	Loss 1.0167 (0.7383)	Prec@1 75.00000 (78.12500)	Prec@5 87.50000 (99.21875)
Epoch: [88][17/60]	Time 0.12272 (0.54296)	Data 0.00102 (0.43384)	Loss 0.2720 (0.7109)	Prec@1 87.50000 (78.67647)	Prec@5 100.00000 (99.26471)
Epoch: [88][18/60]	Time 0.14269 (0.52072)	Data 0.01218 (0.41042)	Loss 2.3909 (0.8042)	Prec@1 75.00000 (78.47222)	Prec@5 87.50000 (98.61111)
Epoch: [88][19/60]	Time 0.07995 (0.49752)	Data 0.04284 (0.39107)	Loss 0.1479 (0.7697)	Prec@1 100.00000 (79.60526)	Prec@5 100.00000 (98.68421)
Epoch: [88][20/60]	Time 0.08194 (0.47674)	Data 0.00094 (0.37157)	Loss 2.3910 (0.8507)	Prec@1 62.50000 (78.75000)	Prec@5 75.00000 (97.50000)
Epoch: [88][21/60]	Time 0.15421 (0.46139)	Data 0.00081 (0.35391)	Loss 0.4107 (0.8298)	Prec@1 87.50000 (79.16667)	Prec@5 100.00000 (97.61905)
Epoch: [88][22/60]	Time 0.13801 (0.44669)	Data 0.00782 (0.33818)	Loss 0.5682 (0.8179)	Prec@1 75.00000 (78.97727)	Prec@5 100.00000 (97.72727)
Epoch: [88][23/60]	Time 0.12235 (0.43259)	Data 0.03081 (0.32481)	Loss 0.9608 (0.8241)	Prec@1 62.50000 (78.26087)	Prec@5 100.00000 (97.82609)
Epoch: [88][24/60]	Time 0.19975 (0.42288)	Data 0.06303 (0.31391)	Loss 0.5507 (0.8127)	Prec@1 62.50000 (77.60417)	Prec@5 100.00000 (97.91667)
Epoch: [88][25/60]	Time 0.19500 (0.41377)	Data 0.01975 (0.30214)	Loss 0.3907 (0.7958)	Prec@1 87.50000 (78.00000)	Prec@5 100.00000 (98.00000)
Epoch: [88][26/60]	Time 0.11832 (0.40241)	Data 0.01193 (0.29098)	Loss 0.0329 (0.7665)	Prec@1 100.00000 (78.84615)	Prec@5 100.00000 (98.07693)
Epoch: [88][27/60]	Time 0.10646 (0.39144)	Data 0.00719 (0.28047)	Loss 0.8230 (0.7686)	Prec@1 62.50000 (78.24074)	Prec@5 100.00000 (98.14815)
Epoch: [88][28/60]	Time 0.16883 (0.38349)	Data 0.05068 (0.27226)	Loss 0.3177 (0.7525)	Prec@1 87.50000 (78.57143)	Prec@5 100.00000 (98.21429)
Epoch: [88][29/60]	Time 0.11031 (0.37407)	Data 0.01542 (0.26340)	Loss 0.6509 (0.7490)	Prec@1 75.00000 (78.44827)	Prec@5 100.00000 (98.27586)
Epoch: [88][30/60]	Time 0.06471 (0.36376)	Data 0.01400 (0.25509)	Loss 1.7305 (0.7817)	Prec@1 62.50000 (77.91667)	Prec@5 100.00000 (98.33334)
Epoch: [88][31/60]	Time 0.06150 (0.35401)	Data 0.00044 (0.24688)	Loss 2.4360 (0.8351)	Prec@1 37.50000 (76.61290)	Prec@5 100.00000 (98.38709)
Epoch: [88][32/60]	Time 0.05540 (0.34468)	Data 0.00059 (0.23918)	Loss 0.7537 (0.8325)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (98.43750)
Epoch: [88][33/60]	Time 0.05090 (0.33578)	Data 0.00042 (0.23195)	Loss 0.1827 (0.8128)	Prec@1 87.50000 (76.89394)	Prec@5 100.00000 (98.48485)
Epoch: [88][34/60]	Time 0.02844 (0.32674)	Data 0.00053 (0.22514)	Loss 1.2151 (0.8247)	Prec@1 62.50000 (76.47059)	Prec@5 100.00000 (98.52941)
Epoch: [88][35/60]	Time 0.03306 (0.31835)	Data 0.00493 (0.21885)	Loss 1.2572 (0.8370)	Prec@1 75.00000 (76.42857)	Prec@5 100.00000 (98.57143)
Epoch: [88][36/60]	Time 0.02691 (0.31025)	Data 0.00323 (0.21286)	Loss 1.2447 (0.8483)	Prec@1 62.50000 (76.04166)	Prec@5 100.00000 (98.61111)
Epoch: [88][37/60]	Time 0.02345 (0.30250)	Data 0.00045 (0.20712)	Loss 1.3983 (0.8632)	Prec@1 62.50000 (75.67567)	Prec@5 100.00000 (98.64865)
Epoch: [88][38/60]	Time 0.02791 (0.29527)	Data 0.00093 (0.20169)	Loss 2.3100 (0.9013)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (98.68421)
Epoch: [88][39/60]	Time 0.03212 (0.28853)	Data 0.00465 (0.19664)	Loss 0.2140 (0.8837)	Prec@1 87.50000 (75.32051)	Prec@5 100.00000 (98.71795)
Epoch: [88][40/60]	Time 0.02357 (0.28190)	Data 0.00068 (0.19174)	Loss 0.3826 (0.8711)	Prec@1 87.50000 (75.62500)	Prec@5 100.00000 (98.75000)
Epoch: [88][41/60]	Time 0.02316 (0.27559)	Data 0.00085 (0.18708)	Loss 0.6047 (0.8646)	Prec@1 75.00000 (75.60976)	Prec@5 100.00000 (98.78049)
Epoch: [88][42/60]	Time 0.02297 (0.26958)	Data 0.00071 (0.18265)	Loss 1.1062 (0.8704)	Prec@1 75.00000 (75.59524)	Prec@5 100.00000 (98.80952)
Epoch: [88][43/60]	Time 0.02300 (0.26384)	Data 0.00077 (0.17842)	Loss 0.6519 (0.8653)	Prec@1 75.00000 (75.58140)	Prec@5 100.00000 (98.83721)
Epoch: [88][44/60]	Time 0.02383 (0.25839)	Data 0.00078 (0.17438)	Loss 0.7676 (0.8631)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (98.86364)
Epoch: [88][45/60]	Time 0.02328 (0.25316)	Data 0.00043 (0.17051)	Loss 0.7003 (0.8595)	Prec@1 87.50000 (75.83334)	Prec@5 100.00000 (98.88889)
Epoch: [88][46/60]	Time 0.02259 (0.24815)	Data 0.00041 (0.16682)	Loss 0.8951 (0.8602)	Prec@1 50.00000 (75.27174)	Prec@5 100.00000 (98.91305)
Epoch: [88][47/60]	Time 0.02283 (0.24336)	Data 0.00044 (0.16328)	Loss 0.9467 (0.8621)	Prec@1 75.00000 (75.26595)	Prec@5 87.50000 (98.67021)
Epoch: [88][48/60]	Time 0.02294 (0.23877)	Data 0.00045 (0.15988)	Loss 0.3374 (0.8512)	Prec@1 87.50000 (75.52084)	Prec@5 100.00000 (98.69792)
Epoch: [88][49/60]	Time 0.02328 (0.23437)	Data 0.00045 (0.15663)	Loss 0.2352 (0.8386)	Prec@1 75.00000 (75.51020)	Prec@5 100.00000 (98.72449)
Epoch: [88][50/60]	Time 0.02329 (0.23015)	Data 0.00049 (0.15351)	Loss 0.5410 (0.8326)	Prec@1 75.00000 (75.50000)	Prec@5 100.00000 (98.75000)
Epoch: [88][51/60]	Time 0.02245 (0.22607)	Data 0.00045 (0.15051)	Loss 0.4558 (0.8252)	Prec@1 75.00000 (75.49020)	Prec@5 100.00000 (98.77451)
Epoch: [88][52/60]	Time 0.02243 (0.22216)	Data 0.00041 (0.14762)	Loss 0.8498 (0.8257)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (98.79808)
Epoch: [88][53/60]	Time 0.02243 (0.21839)	Data 0.00043 (0.14484)	Loss 0.4100 (0.8179)	Prec@1 87.50000 (75.23585)	Prec@5 100.00000 (98.82076)
Epoch: [88][54/60]	Time 0.02315 (0.21477)	Data 0.00045 (0.14217)	Loss 0.9169 (0.8197)	Prec@1 75.00000 (75.23148)	Prec@5 100.00000 (98.84259)
Epoch: [88][55/60]	Time 0.02242 (0.21128)	Data 0.00045 (0.13959)	Loss 1.2116 (0.8268)	Prec@1 62.50000 (75.00000)	Prec@5 87.50000 (98.63636)
Epoch: [88][56/60]	Time 0.02257 (0.20791)	Data 0.00050 (0.13711)	Loss 0.6782 (0.8242)	Prec@1 62.50000 (74.77679)	Prec@5 100.00000 (98.66072)
Epoch: [88][57/60]	Time 0.02274 (0.20466)	Data 0.00047 (0.13471)	Loss 1.2860 (0.8323)	Prec@1 62.50000 (74.56140)	Prec@5 100.00000 (98.68421)
Epoch: [88][58/60]	Time 0.02321 (0.20153)	Data 0.00048 (0.13240)	Loss 0.6401 (0.8290)	Prec@1 62.50000 (74.35345)	Prec@5 100.00000 (98.70689)
Epoch: [88][59/60]	Time 0.02377 (0.19852)	Data 0.00048 (0.13016)	Loss 0.7606 (0.8278)	Prec@1 87.50000 (74.57627)	Prec@5 100.00000 (98.72881)
Epoch: [88][60/60]	Time 0.02273 (0.19559)	Data 0.00057 (0.12800)	Loss 0.5969 (0.8240)	Prec@1 87.50000 (74.79167)	Prec@5 100.00000 (98.75001)
train at epoch 89
train at epoch 89
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [89][0/272]	 lr: 0.00000	Time 5.379 (5.379)	Data 4.391 (4.391)	Loss 0.0179 (0.0179)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][10/272]	 lr: 0.00000	Time 0.317 (1.290)	Data 0.127 (0.897)	Loss 0.0267 (0.0124)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][20/272]	 lr: 0.00000	Time 0.435 (0.882)	Data 0.127 (0.532)	Loss 0.0121 (0.0128)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][30/272]	 lr: 0.00000	Time 0.348 (0.739)	Data 0.134 (0.403)	Loss 0.0158 (0.0142)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][40/272]	 lr: 0.00000	Time 0.403 (0.669)	Data 0.123 (0.336)	Loss 0.0096 (0.0142)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][50/272]	 lr: 0.00000	Time 0.491 (0.625)	Data 0.141 (0.297)	Loss 0.0264 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][60/272]	 lr: 0.00000	Time 0.484 (0.596)	Data 0.129 (0.269)	Loss 0.0111 (0.0154)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [89][70/272]	 lr: 0.00000	Time 0.347 (0.575)	Data 0.128 (0.250)	Loss 0.0140 (0.0159)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [89][80/272]	 lr: 0.00000	Time 0.367 (0.561)	Data 0.104 (0.234)	Loss 0.0149 (0.0156)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [89][90/272]	 lr: 0.00000	Time 0.526 (0.549)	Data 0.148 (0.223)	Loss 0.0323 (0.0161)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [89][100/272]	 lr: 0.00000	Time 0.458 (0.540)	Data 0.133 (0.214)	Loss 0.0141 (0.0153)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [89][110/272]	 lr: 0.00000	Time 0.509 (0.531)	Data 0.113 (0.207)	Loss 0.0143 (0.0150)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [89][120/272]	 lr: 0.00000	Time 0.513 (0.524)	Data 0.132 (0.201)	Loss 0.0146 (0.0149)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [89][130/272]	 lr: 0.00000	Time 0.417 (0.515)	Data 0.120 (0.195)	Loss 0.0269 (0.0155)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [89][140/272]	 lr: 0.00000	Time 0.453 (0.510)	Data 0.133 (0.191)	Loss 0.0160 (0.0153)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [89][150/272]	 lr: 0.00000	Time 0.442 (0.506)	Data 0.102 (0.186)	Loss 0.0316 (0.0157)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [89][160/272]	 lr: 0.00000	Time 0.489 (0.502)	Data 0.135 (0.182)	Loss 0.0063 (0.0156)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [89][170/272]	 lr: 0.00000	Time 0.496 (0.499)	Data 0.123 (0.179)	Loss 0.0185 (0.0155)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [89][180/272]	 lr: 0.00000	Time 0.435 (0.496)	Data 0.128 (0.176)	Loss 0.1636 (0.0173)	Prec@1 93.75000 (99.89642)	Prec@5 100.00000 (100.00001)
Epoch: [89][190/272]	 lr: 0.00000	Time 0.410 (0.494)	Data 0.109 (0.174)	Loss 0.0079 (0.0173)	Prec@1 100.00000 (99.90183)	Prec@5 100.00000 (100.00000)
Epoch: [89][200/272]	 lr: 0.00000	Time 0.421 (0.490)	Data 0.124 (0.171)	Loss 0.0120 (0.0173)	Prec@1 100.00000 (99.90672)	Prec@5 100.00000 (100.00000)
Epoch: [89][210/272]	 lr: 0.00000	Time 0.448 (0.488)	Data 0.141 (0.170)	Loss 0.0050 (0.0170)	Prec@1 100.00000 (99.91114)	Prec@5 100.00000 (100.00000)
Epoch: [89][220/272]	 lr: 0.00000	Time 0.418 (0.486)	Data 0.129 (0.168)	Loss 0.0309 (0.0171)	Prec@1 100.00000 (99.91516)	Prec@5 100.00000 (100.00001)
Epoch: [89][230/272]	 lr: 0.00000	Time 0.382 (0.485)	Data 0.128 (0.166)	Loss 0.0348 (0.0170)	Prec@1 100.00000 (99.91883)	Prec@5 100.00000 (100.00000)
Epoch: [89][240/272]	 lr: 0.00000	Time 0.288 (0.482)	Data 0.127 (0.165)	Loss 0.0118 (0.0169)	Prec@1 100.00000 (99.92220)	Prec@5 100.00000 (100.00001)
Epoch: [89][250/272]	 lr: 0.00000	Time 0.245 (0.473)	Data 0.124 (0.163)	Loss 0.0033 (0.0168)	Prec@1 100.00000 (99.92530)	Prec@5 100.00000 (100.00000)
Epoch: [89][260/272]	 lr: 0.00000	Time 0.240 (0.464)	Data 0.127 (0.162)	Loss 0.0087 (0.0166)	Prec@1 100.00000 (99.92816)	Prec@5 100.00000 (100.00000)
Epoch: [89][270/272]	 lr: 0.00000	Time 0.238 (0.456)	Data 0.128 (0.161)	Loss 0.0132 (0.0164)	Prec@1 100.00000 (99.93082)	Prec@5 100.00000 (100.00000)
validation at epoch 89
validation at epoch 89
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [89][1/60]	Time 7.07645 (7.07645)	Data 6.97213 (6.97213)	Loss 0.3934 (0.3934)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][2/60]	Time 0.13256 (3.60450)	Data 0.00379 (3.48796)	Loss 0.4338 (0.4136)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [89][3/60]	Time 0.24830 (2.48577)	Data 0.04519 (2.34037)	Loss 1.1473 (0.6582)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [89][4/60]	Time 0.08144 (1.88469)	Data 0.01939 (1.76012)	Loss 0.1748 (0.5373)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [89][5/60]	Time 0.07607 (1.52296)	Data 0.00060 (1.40822)	Loss 0.3079 (0.4914)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [89][6/60]	Time 0.11038 (1.28753)	Data 0.05361 (1.18245)	Loss 0.3569 (0.4690)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [89][7/60]	Time 0.10571 (1.11870)	Data 0.00042 (1.01359)	Loss 1.0277 (0.5488)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [89][8/60]	Time 0.28347 (1.01430)	Data 0.00458 (0.88746)	Loss 0.9656 (0.6009)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [89][9/60]	Time 0.24835 (0.92919)	Data 0.06291 (0.79585)	Loss 0.5842 (0.5991)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [89][10/60]	Time 0.13932 (0.85021)	Data 0.01882 (0.71814)	Loss 0.4326 (0.5824)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [89][11/60]	Time 0.09168 (0.78125)	Data 0.00722 (0.65351)	Loss 0.4523 (0.5706)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [89][12/60]	Time 0.15784 (0.72930)	Data 0.00315 (0.59932)	Loss 0.9693 (0.6038)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [89][13/60]	Time 0.21339 (0.68961)	Data 0.00065 (0.55327)	Loss 1.7871 (0.6948)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [89][14/60]	Time 0.15042 (0.65110)	Data 0.00053 (0.51378)	Loss 0.0686 (0.6501)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [89][15/60]	Time 0.18078 (0.61974)	Data 0.07514 (0.48454)	Loss 0.9716 (0.6715)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [89][16/60]	Time 0.07246 (0.58554)	Data 0.01020 (0.45490)	Loss 0.9333 (0.6879)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [89][17/60]	Time 0.11108 (0.55763)	Data 0.00888 (0.42866)	Loss 0.3483 (0.6679)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][18/60]	Time 0.17146 (0.53618)	Data 0.03845 (0.40698)	Loss 2.1777 (0.7518)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][19/60]	Time 0.24753 (0.52098)	Data 0.04843 (0.38811)	Loss 0.1318 (0.7192)	Prec@1 100.00000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [89][20/60]	Time 0.06731 (0.49830)	Data 0.01697 (0.36955)	Loss 2.1189 (0.7892)	Prec@1 62.50000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [89][21/60]	Time 0.06385 (0.47761)	Data 0.01323 (0.35259)	Loss 0.4550 (0.7732)	Prec@1 87.50000 (76.19048)	Prec@5 100.00000 (100.00000)
Epoch: [89][22/60]	Time 0.18561 (0.46434)	Data 0.04950 (0.33881)	Loss 0.6025 (0.7655)	Prec@1 75.00000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [89][23/60]	Time 0.14389 (0.45041)	Data 0.00490 (0.32429)	Loss 0.8642 (0.7698)	Prec@1 62.50000 (75.54348)	Prec@5 100.00000 (100.00000)
Epoch: [89][24/60]	Time 0.15597 (0.43814)	Data 0.00047 (0.31080)	Loss 0.7689 (0.7697)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][25/60]	Time 0.15507 (0.42682)	Data 0.00384 (0.29852)	Loss 0.4198 (0.7557)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (100.00000)
Epoch: [89][26/60]	Time 0.15179 (0.41624)	Data 0.01990 (0.28780)	Loss 0.0625 (0.7291)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (100.00000)
Epoch: [89][27/60]	Time 0.16321 (0.40687)	Data 0.04053 (0.27865)	Loss 0.6620 (0.7266)	Prec@1 50.00000 (75.46297)	Prec@5 100.00000 (100.00000)
Epoch: [89][28/60]	Time 0.11215 (0.39634)	Data 0.01057 (0.26907)	Loss 0.3954 (0.7148)	Prec@1 87.50000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [89][29/60]	Time 0.10665 (0.38635)	Data 0.00040 (0.25981)	Loss 0.5832 (0.7102)	Prec@1 75.00000 (75.86207)	Prec@5 100.00000 (100.00000)
Epoch: [89][30/60]	Time 0.06450 (0.37562)	Data 0.01291 (0.25158)	Loss 1.6328 (0.7410)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (100.00001)
Epoch: [89][31/60]	Time 0.03331 (0.36458)	Data 0.00292 (0.24356)	Loss 2.1179 (0.7854)	Prec@1 37.50000 (74.19354)	Prec@5 100.00000 (100.00000)
Epoch: [89][32/60]	Time 0.04160 (0.35449)	Data 0.00050 (0.23596)	Loss 0.5656 (0.7785)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [89][33/60]	Time 0.04475 (0.34510)	Data 0.00062 (0.22883)	Loss 0.0794 (0.7573)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][34/60]	Time 0.05876 (0.33668)	Data 0.00067 (0.22212)	Loss 1.0725 (0.7666)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][35/60]	Time 0.05249 (0.32856)	Data 0.00052 (0.21579)	Loss 1.2657 (0.7809)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][36/60]	Time 0.05203 (0.32088)	Data 0.00041 (0.20980)	Loss 0.9025 (0.7843)	Prec@1 62.50000 (74.65278)	Prec@5 100.00000 (100.00000)
Epoch: [89][37/60]	Time 0.03403 (0.31313)	Data 0.00208 (0.20419)	Loss 1.3448 (0.7994)	Prec@1 62.50000 (74.32433)	Prec@5 100.00000 (100.00000)
Epoch: [89][38/60]	Time 0.03577 (0.30583)	Data 0.00058 (0.19883)	Loss 2.1073 (0.8338)	Prec@1 50.00000 (73.68421)	Prec@5 100.00000 (100.00000)
Epoch: [89][39/60]	Time 0.02291 (0.29857)	Data 0.00074 (0.19375)	Loss 0.0919 (0.8148)	Prec@1 100.00000 (74.35898)	Prec@5 100.00000 (100.00000)
Epoch: [89][40/60]	Time 0.02342 (0.29169)	Data 0.00063 (0.18892)	Loss 0.2076 (0.7996)	Prec@1 87.50000 (74.68750)	Prec@5 100.00000 (100.00000)
Epoch: [89][41/60]	Time 0.02305 (0.28514)	Data 0.00079 (0.18434)	Loss 0.4626 (0.7914)	Prec@1 75.00000 (74.69512)	Prec@5 100.00000 (100.00000)
Epoch: [89][42/60]	Time 0.02306 (0.27890)	Data 0.00077 (0.17997)	Loss 1.0335 (0.7972)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][43/60]	Time 0.02268 (0.27294)	Data 0.00081 (0.17580)	Loss 0.5403 (0.7912)	Prec@1 87.50000 (75.29070)	Prec@5 100.00000 (100.00000)
Epoch: [89][44/60]	Time 0.02341 (0.26727)	Data 0.00109 (0.17183)	Loss 0.6295 (0.7875)	Prec@1 75.00000 (75.28410)	Prec@5 100.00000 (100.00000)
Epoch: [89][45/60]	Time 0.02294 (0.26184)	Data 0.00104 (0.16803)	Loss 0.6984 (0.7855)	Prec@1 87.50000 (75.55556)	Prec@5 100.00000 (100.00000)
Epoch: [89][46/60]	Time 0.02320 (0.25665)	Data 0.00101 (0.16440)	Loss 0.8445 (0.7868)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [89][47/60]	Time 0.02376 (0.25170)	Data 0.00090 (0.16092)	Loss 1.1484 (0.7945)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (99.73404)
Epoch: [89][48/60]	Time 0.02238 (0.24692)	Data 0.00041 (0.15758)	Loss 0.4166 (0.7866)	Prec@1 87.50000 (75.26042)	Prec@5 100.00000 (99.73959)
Epoch: [89][49/60]	Time 0.02241 (0.24234)	Data 0.00044 (0.15437)	Loss 0.2022 (0.7747)	Prec@1 75.00000 (75.25510)	Prec@5 100.00000 (99.74490)
Epoch: [89][50/60]	Time 0.02198 (0.23793)	Data 0.00042 (0.15129)	Loss 0.8168 (0.7756)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.75000)
Epoch: [89][51/60]	Time 0.02212 (0.23370)	Data 0.00042 (0.14833)	Loss 0.4435 (0.7690)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.75491)
Epoch: [89][52/60]	Time 0.02228 (0.22964)	Data 0.00046 (0.14549)	Loss 1.0468 (0.7744)	Prec@1 50.00000 (74.51923)	Prec@5 87.50000 (99.51923)
Epoch: [89][53/60]	Time 0.02266 (0.22573)	Data 0.00044 (0.14275)	Loss 0.6332 (0.7717)	Prec@1 75.00000 (74.52831)	Prec@5 100.00000 (99.52831)
Epoch: [89][54/60]	Time 0.02242 (0.22197)	Data 0.00045 (0.14012)	Loss 1.0376 (0.7766)	Prec@1 75.00000 (74.53704)	Prec@5 100.00000 (99.53704)
Epoch: [89][55/60]	Time 0.02248 (0.21834)	Data 0.00037 (0.13758)	Loss 1.4788 (0.7894)	Prec@1 62.50000 (74.31818)	Prec@5 87.50000 (99.31818)
Epoch: [89][56/60]	Time 0.02533 (0.21489)	Data 0.00050 (0.13513)	Loss 0.7031 (0.7879)	Prec@1 62.50000 (74.10715)	Prec@5 100.00000 (99.33036)
Epoch: [89][57/60]	Time 0.02231 (0.21151)	Data 0.00058 (0.13277)	Loss 1.3478 (0.7977)	Prec@1 62.50000 (73.90351)	Prec@5 87.50000 (99.12281)
Epoch: [89][58/60]	Time 0.02212 (0.20825)	Data 0.00040 (0.13049)	Loss 0.6807 (0.7957)	Prec@1 62.50000 (73.70689)	Prec@5 100.00000 (99.13793)
Epoch: [89][59/60]	Time 0.02331 (0.20511)	Data 0.00048 (0.12828)	Loss 0.8765 (0.7970)	Prec@1 87.50000 (73.94068)	Prec@5 100.00000 (99.15254)
Epoch: [89][60/60]	Time 0.02219 (0.20206)	Data 0.00044 (0.12615)	Loss 0.7103 (0.7956)	Prec@1 75.00000 (73.95834)	Prec@5 100.00000 (99.16667)
train at epoch 90
train at epoch 90
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [90][0/272]	 lr: 0.00000	Time 4.156 (4.156)	Data 3.287 (3.287)	Loss 0.0052 (0.0052)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][10/272]	 lr: 0.00000	Time 0.372 (1.253)	Data 0.127 (0.679)	Loss 0.0063 (0.0230)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][20/272]	 lr: 0.00000	Time 0.594 (0.864)	Data 0.136 (0.419)	Loss 0.0147 (0.0188)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][30/272]	 lr: 0.00000	Time 0.492 (0.727)	Data 0.119 (0.325)	Loss 0.0072 (0.0181)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][40/272]	 lr: 0.00000	Time 0.410 (0.658)	Data 0.128 (0.276)	Loss 0.0166 (0.0174)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][50/272]	 lr: 0.00000	Time 0.401 (0.612)	Data 0.137 (0.246)	Loss 0.0079 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][60/272]	 lr: 0.00000	Time 0.431 (0.586)	Data 0.129 (0.228)	Loss 0.0124 (0.0167)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [90][70/272]	 lr: 0.00000	Time 0.426 (0.563)	Data 0.127 (0.214)	Loss 0.0062 (0.0184)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [90][80/272]	 lr: 0.00000	Time 0.457 (0.548)	Data 0.128 (0.203)	Loss 0.0123 (0.0180)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [90][90/272]	 lr: 0.00000	Time 0.471 (0.538)	Data 0.126 (0.195)	Loss 0.1513 (0.0187)	Prec@1 96.87500 (99.89698)	Prec@5 100.00000 (100.00000)
Epoch: [90][100/272]	 lr: 0.00000	Time 0.423 (0.595)	Data 0.143 (0.258)	Loss 0.0043 (0.0183)	Prec@1 100.00000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [90][110/272]	 lr: 0.00000	Time 0.411 (0.583)	Data 0.125 (0.246)	Loss 0.0081 (0.0180)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [90][120/272]	 lr: 0.00000	Time 0.528 (0.573)	Data 0.129 (0.236)	Loss 0.0054 (0.0177)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [90][130/272]	 lr: 0.00000	Time 0.398 (0.562)	Data 0.127 (0.227)	Loss 0.0118 (0.0178)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [90][140/272]	 lr: 0.00000	Time 0.600 (0.554)	Data 0.154 (0.220)	Loss 0.0100 (0.0177)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [90][150/272]	 lr: 0.00000	Time 0.469 (0.547)	Data 0.128 (0.214)	Loss 0.0157 (0.0171)	Prec@1 100.00000 (99.93791)	Prec@5 100.00000 (100.00000)
Epoch: [90][160/272]	 lr: 0.00000	Time 0.335 (0.539)	Data 0.122 (0.209)	Loss 0.0144 (0.0170)	Prec@1 100.00000 (99.94177)	Prec@5 100.00000 (100.00000)
Epoch: [90][170/272]	 lr: 0.00000	Time 0.466 (0.533)	Data 0.151 (0.205)	Loss 0.0168 (0.0171)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [90][180/272]	 lr: 0.00000	Time 0.394 (0.527)	Data 0.129 (0.201)	Loss 0.0149 (0.0168)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [90][190/272]	 lr: 0.00000	Time 0.397 (0.521)	Data 0.121 (0.197)	Loss 0.0056 (0.0165)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [90][200/272]	 lr: 0.00000	Time 0.415 (0.517)	Data 0.128 (0.194)	Loss 0.0070 (0.0163)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [90][210/272]	 lr: 0.00000	Time 0.381 (0.513)	Data 0.125 (0.191)	Loss 0.0164 (0.0161)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [90][220/272]	 lr: 0.00000	Time 0.524 (0.510)	Data 0.128 (0.188)	Loss 0.0101 (0.0162)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [90][230/272]	 lr: 0.00000	Time 0.498 (0.507)	Data 0.128 (0.185)	Loss 0.0092 (0.0161)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [90][240/272]	 lr: 0.00000	Time 0.272 (0.504)	Data 0.129 (0.183)	Loss 0.0178 (0.0159)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [90][250/272]	 lr: 0.00000	Time 0.239 (0.494)	Data 0.128 (0.181)	Loss 0.0193 (0.0158)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [90][260/272]	 lr: 0.00000	Time 0.240 (0.484)	Data 0.129 (0.179)	Loss 0.0216 (0.0157)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [90][270/272]	 lr: 0.00000	Time 0.238 (0.475)	Data 0.129 (0.177)	Loss 0.0205 (0.0161)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 90
validation at epoch 90
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [90][1/60]	Time 7.49386 (7.49386)	Data 7.43923 (7.43923)	Loss 0.4374 (0.4374)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [90][2/60]	Time 0.07330 (3.78358)	Data 0.00068 (3.71996)	Loss 0.5653 (0.5014)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [90][3/60]	Time 0.15113 (2.57276)	Data 0.07712 (2.50568)	Loss 1.0400 (0.6809)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [90][4/60]	Time 0.17838 (1.97417)	Data 0.00675 (1.88094)	Loss 0.2199 (0.5656)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [90][5/60]	Time 0.08628 (1.59659)	Data 0.01093 (1.50694)	Loss 0.2036 (0.4932)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [90][6/60]	Time 0.10378 (1.34779)	Data 0.00071 (1.25590)	Loss 0.3495 (0.4693)	Prec@1 100.00000 (89.58334)	Prec@5 100.00000 (100.00000)
Epoch: [90][7/60]	Time 0.08919 (1.16799)	Data 0.00071 (1.07659)	Loss 1.3040 (0.5885)	Prec@1 62.50000 (85.71429)	Prec@5 100.00000 (100.00001)
Epoch: [90][8/60]	Time 0.21007 (1.04825)	Data 0.00718 (0.94291)	Loss 1.1205 (0.6550)	Prec@1 75.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [90][9/60]	Time 0.16622 (0.95025)	Data 0.04090 (0.84269)	Loss 0.5341 (0.6416)	Prec@1 87.50000 (84.72222)	Prec@5 100.00000 (100.00000)
Epoch: [90][10/60]	Time 0.21683 (0.87690)	Data 0.02527 (0.76095)	Loss 0.6361 (0.6410)	Prec@1 75.00000 (83.75000)	Prec@5 100.00000 (100.00000)
Epoch: [90][11/60]	Time 0.07990 (0.80445)	Data 0.00218 (0.69197)	Loss 0.5731 (0.6349)	Prec@1 87.50000 (84.09091)	Prec@5 100.00000 (100.00000)
Epoch: [90][12/60]	Time 0.09060 (0.74496)	Data 0.01206 (0.63531)	Loss 1.2104 (0.6828)	Prec@1 62.50000 (82.29167)	Prec@5 100.00000 (100.00000)
Epoch: [90][13/60]	Time 0.14296 (0.69865)	Data 0.03716 (0.58930)	Loss 2.0180 (0.7855)	Prec@1 50.00000 (79.80769)	Prec@5 100.00000 (100.00000)
Epoch: [90][14/60]	Time 0.13204 (0.65818)	Data 0.01072 (0.54797)	Loss 0.0573 (0.7335)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (100.00001)
Epoch: [90][15/60]	Time 0.23764 (0.63014)	Data 0.00201 (0.51157)	Loss 1.1727 (0.7628)	Prec@1 50.00000 (79.16667)	Prec@5 100.00000 (100.00001)
Epoch: [90][16/60]	Time 0.14028 (0.59953)	Data 0.07905 (0.48454)	Loss 0.9996 (0.7776)	Prec@1 75.00000 (78.90625)	Prec@5 100.00000 (100.00000)
Epoch: [90][17/60]	Time 0.19365 (0.57565)	Data 0.07453 (0.46042)	Loss 0.3729 (0.7538)	Prec@1 87.50000 (79.41177)	Prec@5 100.00000 (100.00000)
Epoch: [90][18/60]	Time 0.17739 (0.55353)	Data 0.04140 (0.43714)	Loss 2.4201 (0.8464)	Prec@1 75.00000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [90][19/60]	Time 0.09670 (0.52948)	Data 0.00080 (0.41418)	Loss 0.1452 (0.8095)	Prec@1 100.00000 (80.26316)	Prec@5 100.00000 (100.00000)
Epoch: [90][20/60]	Time 0.16623 (0.51132)	Data 0.08687 (0.39781)	Loss 2.2977 (0.8839)	Prec@1 62.50000 (79.37500)	Prec@5 100.00000 (100.00000)
Epoch: [90][21/60]	Time 0.06390 (0.49002)	Data 0.00068 (0.37890)	Loss 0.5561 (0.8683)	Prec@1 62.50000 (78.57143)	Prec@5 100.00000 (100.00000)
Epoch: [90][22/60]	Time 0.17281 (0.47560)	Data 0.00724 (0.36201)	Loss 0.6815 (0.8598)	Prec@1 75.00000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [90][23/60]	Time 0.10206 (0.45936)	Data 0.00837 (0.34663)	Loss 0.9497 (0.8637)	Prec@1 50.00000 (77.17391)	Prec@5 100.00000 (100.00000)
Epoch: [90][24/60]	Time 0.12450 (0.44540)	Data 0.00072 (0.33222)	Loss 0.7717 (0.8599)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [90][25/60]	Time 0.20783 (0.43590)	Data 0.06323 (0.32146)	Loss 0.4707 (0.8443)	Prec@1 87.50000 (77.00000)	Prec@5 100.00000 (100.00000)
Epoch: [90][26/60]	Time 0.17621 (0.42591)	Data 0.07622 (0.31203)	Loss 0.0551 (0.8139)	Prec@1 100.00000 (77.88462)	Prec@5 100.00000 (100.00000)
Epoch: [90][27/60]	Time 0.10836 (0.41415)	Data 0.00815 (0.30077)	Loss 0.8777 (0.8163)	Prec@1 50.00000 (76.85185)	Prec@5 100.00000 (100.00000)
Epoch: [90][28/60]	Time 0.16981 (0.40543)	Data 0.00191 (0.29010)	Loss 0.3502 (0.7997)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (100.00001)
Epoch: [90][29/60]	Time 0.08212 (0.39428)	Data 0.00048 (0.28011)	Loss 0.6840 (0.7957)	Prec@1 75.00000 (77.15517)	Prec@5 100.00000 (100.00000)
Epoch: [90][30/60]	Time 0.07077 (0.38349)	Data 0.00053 (0.27079)	Loss 1.7237 (0.8266)	Prec@1 62.50000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [90][31/60]	Time 0.04924 (0.37271)	Data 0.00042 (0.26207)	Loss 2.2671 (0.8731)	Prec@1 37.50000 (75.40322)	Prec@5 87.50000 (99.59677)
Epoch: [90][32/60]	Time 0.05569 (0.36280)	Data 0.00061 (0.25390)	Loss 0.6892 (0.8673)	Prec@1 75.00000 (75.39062)	Prec@5 100.00000 (99.60938)
Epoch: [90][33/60]	Time 0.03064 (0.35274)	Data 0.00400 (0.24633)	Loss 0.0843 (0.8436)	Prec@1 100.00000 (76.13637)	Prec@5 100.00000 (99.62122)
Epoch: [90][34/60]	Time 0.02816 (0.34319)	Data 0.00107 (0.23911)	Loss 1.0821 (0.8506)	Prec@1 75.00000 (76.10294)	Prec@5 100.00000 (99.63235)
Epoch: [90][35/60]	Time 0.02694 (0.33416)	Data 0.00075 (0.23230)	Loss 1.2855 (0.8630)	Prec@1 75.00000 (76.07143)	Prec@5 87.50000 (99.28571)
Epoch: [90][36/60]	Time 0.02727 (0.32563)	Data 0.00107 (0.22588)	Loss 1.0641 (0.8686)	Prec@1 75.00000 (76.04166)	Prec@5 100.00000 (99.30556)
Epoch: [90][37/60]	Time 0.02676 (0.31755)	Data 0.00093 (0.21980)	Loss 1.3469 (0.8815)	Prec@1 75.00000 (76.01351)	Prec@5 100.00000 (99.32433)
Epoch: [90][38/60]	Time 0.02740 (0.30992)	Data 0.00113 (0.21405)	Loss 1.9541 (0.9098)	Prec@1 50.00000 (75.32895)	Prec@5 100.00000 (99.34211)
Epoch: [90][39/60]	Time 0.02741 (0.30267)	Data 0.00102 (0.20858)	Loss 0.1227 (0.8896)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (99.35898)
Epoch: [90][40/60]	Time 0.03146 (0.29589)	Data 0.00086 (0.20339)	Loss 0.1739 (0.8717)	Prec@1 87.50000 (76.25000)	Prec@5 100.00000 (99.37500)
Epoch: [90][41/60]	Time 0.02255 (0.28923)	Data 0.00056 (0.19844)	Loss 0.5774 (0.8645)	Prec@1 75.00000 (76.21951)	Prec@5 100.00000 (99.39024)
Epoch: [90][42/60]	Time 0.02282 (0.28288)	Data 0.00053 (0.19373)	Loss 0.9376 (0.8663)	Prec@1 75.00000 (76.19048)	Prec@5 100.00000 (99.40476)
Epoch: [90][43/60]	Time 0.02270 (0.27683)	Data 0.00044 (0.18924)	Loss 0.6525 (0.8613)	Prec@1 62.50000 (75.87209)	Prec@5 100.00000 (99.41860)
Epoch: [90][44/60]	Time 0.02334 (0.27107)	Data 0.00053 (0.18495)	Loss 0.6678 (0.8569)	Prec@1 75.00000 (75.85227)	Prec@5 100.00000 (99.43182)
Epoch: [90][45/60]	Time 0.02268 (0.26555)	Data 0.00049 (0.18085)	Loss 0.7066 (0.8536)	Prec@1 87.50000 (76.11111)	Prec@5 100.00000 (99.44445)
Epoch: [90][46/60]	Time 0.02275 (0.26027)	Data 0.00044 (0.17693)	Loss 0.7392 (0.8511)	Prec@1 62.50000 (75.81522)	Prec@5 100.00000 (99.45652)
Epoch: [90][47/60]	Time 0.02230 (0.25521)	Data 0.00046 (0.17317)	Loss 0.8208 (0.8504)	Prec@1 87.50000 (76.06383)	Prec@5 100.00000 (99.46808)
Epoch: [90][48/60]	Time 0.02188 (0.25035)	Data 0.00044 (0.16957)	Loss 0.3082 (0.8391)	Prec@1 87.50000 (76.30209)	Prec@5 100.00000 (99.47917)
Epoch: [90][49/60]	Time 0.02369 (0.24572)	Data 0.00050 (0.16612)	Loss 0.1654 (0.8254)	Prec@1 87.50000 (76.53061)	Prec@5 100.00000 (99.48979)
Epoch: [90][50/60]	Time 0.02233 (0.24126)	Data 0.00042 (0.16281)	Loss 0.4568 (0.8180)	Prec@1 75.00000 (76.50000)	Prec@5 100.00000 (99.50000)
Epoch: [90][51/60]	Time 0.02252 (0.23697)	Data 0.00044 (0.15963)	Loss 0.1170 (0.8043)	Prec@1 100.00000 (76.96078)	Prec@5 100.00000 (99.50980)
Epoch: [90][52/60]	Time 0.02523 (0.23290)	Data 0.00044 (0.15656)	Loss 0.6228 (0.8008)	Prec@1 62.50000 (76.68269)	Prec@5 100.00000 (99.51923)
Epoch: [90][53/60]	Time 0.02280 (0.22893)	Data 0.00071 (0.15362)	Loss 0.3310 (0.7919)	Prec@1 87.50000 (76.88680)	Prec@5 100.00000 (99.52831)
Epoch: [90][54/60]	Time 0.02320 (0.22512)	Data 0.00048 (0.15079)	Loss 0.8047 (0.7921)	Prec@1 87.50000 (77.08334)	Prec@5 100.00000 (99.53704)
Epoch: [90][55/60]	Time 0.02226 (0.22143)	Data 0.00047 (0.14805)	Loss 1.0184 (0.7963)	Prec@1 62.50000 (76.81818)	Prec@5 100.00000 (99.54545)
Epoch: [90][56/60]	Time 0.02235 (0.21788)	Data 0.00055 (0.14542)	Loss 0.6804 (0.7942)	Prec@1 75.00000 (76.78572)	Prec@5 100.00000 (99.55357)
Epoch: [90][57/60]	Time 0.02229 (0.21445)	Data 0.00044 (0.14288)	Loss 1.1992 (0.8013)	Prec@1 62.50000 (76.53509)	Prec@5 100.00000 (99.56140)
Epoch: [90][58/60]	Time 0.02319 (0.21115)	Data 0.00044 (0.14042)	Loss 0.6151 (0.7981)	Prec@1 62.50000 (76.29311)	Prec@5 100.00000 (99.56896)
Epoch: [90][59/60]	Time 0.02301 (0.20796)	Data 0.00054 (0.13805)	Loss 0.7531 (0.7973)	Prec@1 87.50000 (76.48305)	Prec@5 100.00000 (99.57627)
Epoch: [90][60/60]	Time 0.02307 (0.20488)	Data 0.00048 (0.13576)	Loss 0.5209 (0.7927)	Prec@1 87.50000 (76.66667)	Prec@5 100.00000 (99.58334)
train at epoch 91
train at epoch 91
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [91][0/272]	 lr: 0.00000	Time 9.412 (9.412)	Data 8.294 (8.294)	Loss 0.0411 (0.0411)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][10/272]	 lr: 0.00000	Time 0.494 (1.292)	Data 0.131 (0.868)	Loss 0.0133 (0.0183)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][20/272]	 lr: 0.00000	Time 0.403 (0.882)	Data 0.131 (0.517)	Loss 0.0503 (0.0192)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][30/272]	 lr: 0.00000	Time 0.402 (0.732)	Data 0.141 (0.393)	Loss 0.0072 (0.0185)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][40/272]	 lr: 0.00000	Time 0.355 (0.664)	Data 0.128 (0.329)	Loss 0.1007 (0.0195)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][50/272]	 lr: 0.00000	Time 0.392 (0.618)	Data 0.127 (0.290)	Loss 0.0068 (0.0208)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][60/272]	 lr: 0.00000	Time 0.383 (0.589)	Data 0.128 (0.263)	Loss 0.0202 (0.0214)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [91][70/272]	 lr: 0.00000	Time 0.391 (0.569)	Data 0.129 (0.245)	Loss 0.0107 (0.0200)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][80/272]	 lr: 0.00000	Time 0.467 (0.554)	Data 0.142 (0.229)	Loss 0.0130 (0.0209)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [91][90/272]	 lr: 0.00000	Time 0.524 (0.542)	Data 0.126 (0.218)	Loss 0.0044 (0.0204)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [91][100/272]	 lr: 0.00000	Time 0.574 (0.532)	Data 0.142 (0.209)	Loss 0.0108 (0.0194)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [91][110/272]	 lr: 0.00000	Time 0.378 (0.523)	Data 0.118 (0.202)	Loss 0.0126 (0.0186)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [91][120/272]	 lr: 0.00000	Time 0.522 (0.518)	Data 0.124 (0.196)	Loss 0.0096 (0.0188)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [91][130/272]	 lr: 0.00000	Time 0.416 (0.514)	Data 0.116 (0.191)	Loss 0.0134 (0.0183)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [91][140/272]	 lr: 0.00000	Time 0.379 (0.508)	Data 0.109 (0.186)	Loss 0.0079 (0.0182)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [91][150/272]	 lr: 0.00000	Time 0.420 (0.505)	Data 0.128 (0.182)	Loss 0.0127 (0.0182)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [91][160/272]	 lr: 0.00000	Time 0.433 (0.501)	Data 0.138 (0.179)	Loss 0.0244 (0.0178)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [91][170/272]	 lr: 0.00000	Time 0.542 (0.498)	Data 0.149 (0.176)	Loss 0.0070 (0.0176)	Prec@1 100.00000 (99.98173)	Prec@5 100.00000 (100.00000)
Epoch: [91][180/272]	 lr: 0.00000	Time 0.458 (0.495)	Data 0.149 (0.174)	Loss 0.0064 (0.0174)	Prec@1 100.00000 (99.98274)	Prec@5 100.00000 (100.00001)
Epoch: [91][190/272]	 lr: 0.00000	Time 0.370 (0.492)	Data 0.126 (0.171)	Loss 0.0209 (0.0178)	Prec@1 100.00000 (99.98364)	Prec@5 100.00000 (100.00000)
Epoch: [91][200/272]	 lr: 0.00000	Time 0.415 (0.488)	Data 0.130 (0.169)	Loss 0.0278 (0.0180)	Prec@1 100.00000 (99.98445)	Prec@5 100.00000 (100.00000)
Epoch: [91][210/272]	 lr: 0.00000	Time 0.394 (0.485)	Data 0.127 (0.167)	Loss 0.0045 (0.0179)	Prec@1 100.00000 (99.98519)	Prec@5 100.00000 (100.00000)
Epoch: [91][220/272]	 lr: 0.00000	Time 0.439 (0.483)	Data 0.132 (0.165)	Loss 0.1378 (0.0185)	Prec@1 90.62500 (99.94344)	Prec@5 100.00000 (100.00001)
Epoch: [91][230/272]	 lr: 0.00000	Time 0.509 (0.482)	Data 0.136 (0.164)	Loss 0.0076 (0.0184)	Prec@1 100.00000 (99.94588)	Prec@5 100.00000 (100.00000)
Epoch: [91][240/272]	 lr: 0.00000	Time 0.340 (0.479)	Data 0.117 (0.162)	Loss 0.0221 (0.0181)	Prec@1 100.00000 (99.94814)	Prec@5 100.00000 (100.00001)
Epoch: [91][250/272]	 lr: 0.00000	Time 0.240 (0.470)	Data 0.127 (0.161)	Loss 0.0390 (0.0180)	Prec@1 100.00000 (99.95020)	Prec@5 100.00000 (100.00000)
Epoch: [91][260/272]	 lr: 0.00000	Time 0.239 (0.461)	Data 0.129 (0.159)	Loss 0.0193 (0.0179)	Prec@1 100.00000 (99.95210)	Prec@5 100.00000 (100.00000)
Epoch: [91][270/272]	 lr: 0.00000	Time 0.239 (0.453)	Data 0.129 (0.158)	Loss 0.0146 (0.0177)	Prec@1 100.00000 (99.95387)	Prec@5 100.00000 (100.00000)
validation at epoch 91
validation at epoch 91
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [91][1/60]	Time 4.65374 (4.65374)	Data 4.53759 (4.53759)	Loss 0.4369 (0.4369)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [91][2/60]	Time 2.50122 (3.57748)	Data 2.35456 (3.44607)	Loss 0.5419 (0.4894)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [91][3/60]	Time 0.16862 (2.44119)	Data 0.02189 (2.30468)	Loss 1.2840 (0.7543)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [91][4/60]	Time 0.23294 (1.88913)	Data 0.04857 (1.74065)	Loss 0.2530 (0.6289)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [91][5/60]	Time 0.14822 (1.54095)	Data 0.00830 (1.39418)	Loss 0.3559 (0.5743)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [91][6/60]	Time 0.17141 (1.31269)	Data 0.09878 (1.17828)	Loss 0.4955 (0.5612)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [91][7/60]	Time 0.11942 (1.14222)	Data 0.04742 (1.01673)	Loss 1.2927 (0.6657)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [91][8/60]	Time 0.15894 (1.01931)	Data 0.01757 (0.89183)	Loss 1.2550 (0.7394)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][9/60]	Time 0.45374 (0.95647)	Data 0.36452 (0.83324)	Loss 0.6198 (0.7261)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][10/60]	Time 0.05819 (0.86664)	Data 0.00058 (0.74998)	Loss 0.5802 (0.7115)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][11/60]	Time 0.15254 (0.80172)	Data 0.03158 (0.68467)	Loss 0.5372 (0.6956)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [91][12/60]	Time 0.15988 (0.74824)	Data 0.01054 (0.62849)	Loss 1.2278 (0.7400)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][13/60]	Time 0.14321 (0.70170)	Data 0.01854 (0.58157)	Loss 2.1601 (0.8492)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [91][14/60]	Time 0.16759 (0.66355)	Data 0.03415 (0.54247)	Loss 0.0846 (0.7946)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [91][15/60]	Time 0.07799 (0.62451)	Data 0.00727 (0.50679)	Loss 1.3076 (0.8288)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [91][16/60]	Time 0.11550 (0.59270)	Data 0.06028 (0.47888)	Loss 1.0106 (0.8402)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [91][17/60]	Time 0.14768 (0.56652)	Data 0.01328 (0.45150)	Loss 0.3968 (0.8141)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [91][18/60]	Time 0.14873 (0.54331)	Data 0.01214 (0.42709)	Loss 2.2904 (0.8961)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [91][19/60]	Time 0.08169 (0.51901)	Data 0.00641 (0.40495)	Loss 0.1435 (0.8565)	Prec@1 100.00000 (75.65790)	Prec@5 100.00000 (100.00000)
Epoch: [91][20/60]	Time 0.16069 (0.50110)	Data 0.08072 (0.38873)	Loss 2.1536 (0.9214)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][21/60]	Time 0.13194 (0.48352)	Data 0.01165 (0.37078)	Loss 0.6454 (0.9082)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][22/60]	Time 0.16064 (0.46884)	Data 0.01029 (0.35439)	Loss 0.6208 (0.8952)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][23/60]	Time 0.14710 (0.45485)	Data 0.07479 (0.34224)	Loss 0.9329 (0.8968)	Prec@1 62.50000 (74.45652)	Prec@5 100.00000 (100.00000)
Epoch: [91][24/60]	Time 0.14740 (0.44204)	Data 0.03929 (0.32961)	Loss 0.8050 (0.8930)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [91][25/60]	Time 0.13082 (0.42959)	Data 0.00926 (0.31680)	Loss 0.4765 (0.8763)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [91][26/60]	Time 0.18581 (0.42022)	Data 0.02151 (0.30544)	Loss 0.0492 (0.8445)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [91][27/60]	Time 0.08052 (0.40764)	Data 0.00049 (0.29415)	Loss 0.6488 (0.8372)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (100.00000)
Epoch: [91][28/60]	Time 0.22743 (0.40120)	Data 0.02118 (0.28440)	Loss 0.4153 (0.8222)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [91][29/60]	Time 0.13433 (0.39200)	Data 0.00066 (0.27461)	Loss 0.5436 (0.8126)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [91][30/60]	Time 0.06133 (0.38097)	Data 0.00055 (0.26548)	Loss 1.7014 (0.8422)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (100.00001)
Epoch: [91][31/60]	Time 0.08836 (0.37154)	Data 0.00930 (0.25721)	Loss 2.5030 (0.8958)	Prec@1 25.00000 (72.98387)	Prec@5 87.50000 (99.59677)
Epoch: [91][32/60]	Time 0.04677 (0.36139)	Data 0.00048 (0.24919)	Loss 0.6107 (0.8869)	Prec@1 75.00000 (73.04688)	Prec@5 100.00000 (99.60938)
Epoch: [91][33/60]	Time 0.03025 (0.35135)	Data 0.00049 (0.24166)	Loss 0.0790 (0.8624)	Prec@1 100.00000 (73.86364)	Prec@5 100.00000 (99.62122)
Epoch: [91][34/60]	Time 0.03573 (0.34207)	Data 0.00049 (0.23456)	Loss 1.1448 (0.8707)	Prec@1 75.00000 (73.89706)	Prec@5 100.00000 (99.63235)
Epoch: [91][35/60]	Time 0.02433 (0.33299)	Data 0.00052 (0.22788)	Loss 1.5057 (0.8888)	Prec@1 75.00000 (73.92857)	Prec@5 87.50000 (99.28571)
Epoch: [91][36/60]	Time 0.02321 (0.32439)	Data 0.00039 (0.22156)	Loss 0.9888 (0.8916)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [91][37/60]	Time 0.02354 (0.31625)	Data 0.00052 (0.21558)	Loss 1.4911 (0.9078)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (99.32433)
Epoch: [91][38/60]	Time 0.02361 (0.30855)	Data 0.00057 (0.20992)	Loss 2.2651 (0.9435)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (99.34211)
Epoch: [91][39/60]	Time 0.02308 (0.30123)	Data 0.00075 (0.20456)	Loss 0.0890 (0.9216)	Prec@1 100.00000 (73.39744)	Prec@5 100.00000 (99.35898)
Epoch: [91][40/60]	Time 0.02262 (0.29427)	Data 0.00047 (0.19946)	Loss 0.1996 (0.9036)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (99.37500)
Epoch: [91][41/60]	Time 0.02454 (0.28769)	Data 0.00044 (0.19460)	Loss 0.5075 (0.8939)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (99.39024)
Epoch: [91][42/60]	Time 0.02301 (0.28139)	Data 0.00045 (0.18998)	Loss 1.0772 (0.8983)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (99.40476)
Epoch: [91][43/60]	Time 0.02346 (0.27539)	Data 0.00056 (0.18558)	Loss 0.6835 (0.8933)	Prec@1 62.50000 (73.83721)	Prec@5 100.00000 (99.41860)
Epoch: [91][44/60]	Time 0.02289 (0.26965)	Data 0.00045 (0.18137)	Loss 0.7148 (0.8892)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.43182)
Epoch: [91][45/60]	Time 0.02267 (0.26416)	Data 0.00041 (0.17735)	Loss 0.7606 (0.8864)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.44445)
Epoch: [91][46/60]	Time 0.02263 (0.25891)	Data 0.00050 (0.17350)	Loss 1.0262 (0.8894)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (99.45652)
Epoch: [91][47/60]	Time 0.02338 (0.25390)	Data 0.00042 (0.16982)	Loss 1.0542 (0.8929)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.20213)
Epoch: [91][48/60]	Time 0.02335 (0.24910)	Data 0.00046 (0.16629)	Loss 0.3535 (0.8817)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.21875)
Epoch: [91][49/60]	Time 0.02223 (0.24447)	Data 0.00042 (0.16291)	Loss 0.2486 (0.8688)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.23470)
Epoch: [91][50/60]	Time 0.02311 (0.24004)	Data 0.00038 (0.15966)	Loss 0.7103 (0.8656)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.25000)
Epoch: [91][51/60]	Time 0.02223 (0.23577)	Data 0.00049 (0.15654)	Loss 0.3858 (0.8562)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [91][52/60]	Time 0.02312 (0.23168)	Data 0.00043 (0.15353)	Loss 0.8683 (0.8564)	Prec@1 50.00000 (73.79808)	Prec@5 87.50000 (99.03847)
Epoch: [91][53/60]	Time 0.02318 (0.22775)	Data 0.00045 (0.15065)	Loss 0.6447 (0.8524)	Prec@1 75.00000 (73.82076)	Prec@5 100.00000 (99.05660)
Epoch: [91][54/60]	Time 0.02261 (0.22395)	Data 0.00043 (0.14786)	Loss 0.9613 (0.8544)	Prec@1 75.00000 (73.84259)	Prec@5 100.00000 (99.07407)
Epoch: [91][55/60]	Time 0.02258 (0.22029)	Data 0.00047 (0.14518)	Loss 1.2936 (0.8624)	Prec@1 62.50000 (73.63636)	Prec@5 87.50000 (98.86363)
Epoch: [91][56/60]	Time 0.02265 (0.21676)	Data 0.00055 (0.14260)	Loss 0.6644 (0.8589)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (98.88393)
Epoch: [91][57/60]	Time 0.02326 (0.21336)	Data 0.00041 (0.14011)	Loss 1.3711 (0.8679)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (98.68421)
Epoch: [91][58/60]	Time 0.02281 (0.21008)	Data 0.00044 (0.13770)	Loss 0.6597 (0.8643)	Prec@1 62.50000 (73.06034)	Prec@5 100.00000 (98.70689)
Epoch: [91][59/60]	Time 0.02284 (0.20690)	Data 0.00059 (0.13537)	Loss 0.7824 (0.8629)	Prec@1 87.50000 (73.30508)	Prec@5 100.00000 (98.72881)
Epoch: [91][60/60]	Time 0.02485 (0.20387)	Data 0.00044 (0.13313)	Loss 0.6013 (0.8585)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (98.75001)
train at epoch 92
train at epoch 92
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [92][0/272]	 lr: 0.00000	Time 9.049 (9.049)	Data 8.241 (8.241)	Loss 0.0113 (0.0113)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][10/272]	 lr: 0.00000	Time 0.416 (1.278)	Data 0.138 (0.868)	Loss 0.0141 (0.0139)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][20/272]	 lr: 0.00000	Time 0.399 (0.862)	Data 0.128 (0.516)	Loss 0.0356 (0.0177)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][30/272]	 lr: 0.00000	Time 0.375 (0.722)	Data 0.138 (0.391)	Loss 0.0035 (0.0146)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][40/272]	 lr: 0.00000	Time 0.591 (0.651)	Data 0.125 (0.327)	Loss 0.0181 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][50/272]	 lr: 0.00000	Time 0.442 (0.606)	Data 0.128 (0.289)	Loss 0.0287 (0.0151)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][60/272]	 lr: 0.00000	Time 0.565 (0.579)	Data 0.129 (0.264)	Loss 0.0062 (0.0150)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [92][70/272]	 lr: 0.00000	Time 0.426 (0.559)	Data 0.122 (0.245)	Loss 0.0102 (0.0152)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [92][80/272]	 lr: 0.00000	Time 0.454 (0.546)	Data 0.129 (0.231)	Loss 0.0114 (0.0159)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [92][90/272]	 lr: 0.00000	Time 0.448 (0.537)	Data 0.128 (0.220)	Loss 0.0410 (0.0162)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [92][100/272]	 lr: 0.00000	Time 0.424 (0.527)	Data 0.127 (0.211)	Loss 0.0082 (0.0167)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [92][110/272]	 lr: 0.00000	Time 0.464 (0.521)	Data 0.127 (0.203)	Loss 0.0138 (0.0169)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [92][120/272]	 lr: 0.00000	Time 0.509 (0.515)	Data 0.127 (0.197)	Loss 0.0112 (0.0162)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [92][130/272]	 lr: 0.00000	Time 0.492 (0.512)	Data 0.145 (0.192)	Loss 0.0065 (0.0162)	Prec@1 100.00000 (99.97614)	Prec@5 100.00000 (100.00000)
Epoch: [92][140/272]	 lr: 0.00000	Time 0.376 (0.505)	Data 0.137 (0.188)	Loss 0.0090 (0.0159)	Prec@1 100.00000 (99.97784)	Prec@5 100.00000 (100.00000)
Epoch: [92][150/272]	 lr: 0.00000	Time 0.494 (0.501)	Data 0.107 (0.184)	Loss 0.0204 (0.0159)	Prec@1 100.00000 (99.97930)	Prec@5 100.00000 (100.00000)
Epoch: [92][160/272]	 lr: 0.00000	Time 0.518 (0.499)	Data 0.133 (0.180)	Loss 0.0114 (0.0159)	Prec@1 100.00000 (99.98059)	Prec@5 100.00000 (100.00000)
Epoch: [92][170/272]	 lr: 0.00000	Time 0.519 (0.496)	Data 0.140 (0.177)	Loss 0.0123 (0.0161)	Prec@1 100.00000 (99.94518)	Prec@5 100.00000 (100.00000)
Epoch: [92][180/272]	 lr: 0.00000	Time 0.469 (0.493)	Data 0.129 (0.175)	Loss 0.0080 (0.0157)	Prec@1 100.00000 (99.94821)	Prec@5 100.00000 (100.00001)
Epoch: [92][190/272]	 lr: 0.00000	Time 0.448 (0.489)	Data 0.130 (0.172)	Loss 0.0105 (0.0156)	Prec@1 100.00000 (99.95092)	Prec@5 100.00000 (100.00000)
Epoch: [92][200/272]	 lr: 0.00000	Time 0.367 (0.487)	Data 0.128 (0.170)	Loss 0.0146 (0.0156)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [92][210/272]	 lr: 0.00000	Time 0.468 (0.485)	Data 0.136 (0.168)	Loss 0.0079 (0.0154)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [92][220/272]	 lr: 0.00000	Time 0.444 (0.483)	Data 0.141 (0.167)	Loss 0.0341 (0.0154)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [92][230/272]	 lr: 0.00000	Time 0.436 (0.482)	Data 0.141 (0.165)	Loss 0.0111 (0.0156)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [92][240/272]	 lr: 0.00000	Time 0.256 (0.480)	Data 0.128 (0.164)	Loss 0.0064 (0.0156)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [92][250/272]	 lr: 0.00000	Time 0.240 (0.470)	Data 0.129 (0.163)	Loss 0.0086 (0.0158)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [92][260/272]	 lr: 0.00000	Time 0.239 (0.461)	Data 0.128 (0.161)	Loss 0.0129 (0.0159)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [92][270/272]	 lr: 0.00000	Time 0.237 (0.453)	Data 0.127 (0.160)	Loss 0.0089 (0.0158)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 92
validation at epoch 92
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [92][1/60]	Time 7.05598 (7.05598)	Data 6.99533 (6.99533)	Loss 0.3806 (0.3806)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [92][2/60]	Time 0.10012 (3.57805)	Data 0.00065 (3.49799)	Loss 0.4888 (0.4347)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [92][3/60]	Time 0.07975 (2.41195)	Data 0.01096 (2.33564)	Loss 1.0726 (0.6474)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [92][4/60]	Time 0.19728 (1.85828)	Data 0.00331 (1.75256)	Loss 0.1828 (0.5312)	Prec@1 100.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [92][5/60]	Time 0.10652 (1.50793)	Data 0.00065 (1.40218)	Loss 0.3035 (0.4857)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [92][6/60]	Time 0.10858 (1.27470)	Data 0.00599 (1.16948)	Loss 0.3891 (0.4696)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [92][7/60]	Time 0.20133 (1.12136)	Data 0.05095 (1.00969)	Loss 1.2959 (0.5876)	Prec@1 62.50000 (83.92857)	Prec@5 100.00000 (100.00001)
Epoch: [92][8/60]	Time 0.13177 (0.99766)	Data 0.01571 (0.88544)	Loss 1.1324 (0.6557)	Prec@1 62.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [92][9/60]	Time 0.04562 (0.89188)	Data 0.00072 (0.78714)	Loss 0.6296 (0.6528)	Prec@1 75.00000 (80.55556)	Prec@5 100.00000 (100.00000)
Epoch: [92][10/60]	Time 0.07002 (0.80970)	Data 0.00786 (0.70921)	Loss 0.6041 (0.6479)	Prec@1 75.00000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [92][11/60]	Time 0.10588 (0.74571)	Data 0.01348 (0.64596)	Loss 0.5591 (0.6399)	Prec@1 87.50000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [92][12/60]	Time 0.23582 (0.70322)	Data 0.00073 (0.59219)	Loss 1.2634 (0.6918)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [92][13/60]	Time 0.17220 (0.66237)	Data 0.01882 (0.54809)	Loss 1.8145 (0.7782)	Prec@1 50.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [92][14/60]	Time 0.12824 (0.62422)	Data 0.01840 (0.51025)	Loss 0.0888 (0.7289)	Prec@1 100.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [92][15/60]	Time 0.15248 (0.59277)	Data 0.01669 (0.47735)	Loss 1.0644 (0.7513)	Prec@1 50.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [92][16/60]	Time 0.21167 (0.56895)	Data 0.00805 (0.44802)	Loss 1.0650 (0.7709)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [92][17/60]	Time 0.16961 (0.54546)	Data 0.06028 (0.42521)	Loss 0.3232 (0.7446)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [92][18/60]	Time 0.16001 (0.52405)	Data 0.04552 (0.40412)	Loss 2.4564 (0.8397)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [92][19/60]	Time 0.11290 (0.50241)	Data 0.02671 (0.38425)	Loss 0.1931 (0.8057)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [92][20/60]	Time 0.14365 (0.48447)	Data 0.06592 (0.36834)	Loss 2.3901 (0.8849)	Prec@1 62.50000 (76.87500)	Prec@5 87.50000 (99.37500)
Epoch: [92][21/60]	Time 0.07244 (0.46485)	Data 0.00490 (0.35103)	Loss 0.4977 (0.8664)	Prec@1 75.00000 (76.78571)	Prec@5 100.00000 (99.40476)
Epoch: [92][22/60]	Time 0.09946 (0.44824)	Data 0.01715 (0.33585)	Loss 0.5827 (0.8535)	Prec@1 75.00000 (76.70454)	Prec@5 100.00000 (99.43182)
Epoch: [92][23/60]	Time 0.16625 (0.43598)	Data 0.00574 (0.32150)	Loss 1.0163 (0.8606)	Prec@1 50.00000 (75.54348)	Prec@5 100.00000 (99.45652)
Epoch: [92][24/60]	Time 0.18274 (0.42543)	Data 0.01328 (0.30866)	Loss 0.6178 (0.8505)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (99.47917)
Epoch: [92][25/60]	Time 0.18397 (0.41577)	Data 0.00751 (0.29661)	Loss 0.4816 (0.8357)	Prec@1 87.50000 (75.50000)	Prec@5 100.00000 (99.50000)
Epoch: [92][26/60]	Time 0.07859 (0.40280)	Data 0.00664 (0.28546)	Loss 0.0340 (0.8049)	Prec@1 100.00000 (76.44231)	Prec@5 100.00000 (99.51923)
Epoch: [92][27/60]	Time 0.03812 (0.38930)	Data 0.00596 (0.27511)	Loss 0.8438 (0.8064)	Prec@1 62.50000 (75.92593)	Prec@5 100.00000 (99.53704)
Epoch: [92][28/60]	Time 0.17630 (0.38169)	Data 0.00697 (0.26553)	Loss 0.3154 (0.7888)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (99.55357)
Epoch: [92][29/60]	Time 0.15326 (0.37381)	Data 0.02288 (0.25716)	Loss 0.8176 (0.7898)	Prec@1 62.50000 (75.86207)	Prec@5 100.00000 (99.56896)
Epoch: [92][30/60]	Time 0.09469 (0.36451)	Data 0.00046 (0.24861)	Loss 1.8777 (0.8261)	Prec@1 62.50000 (75.41667)	Prec@5 100.00000 (99.58334)
Epoch: [92][31/60]	Time 0.03618 (0.35392)	Data 0.00040 (0.24060)	Loss 2.3790 (0.8762)	Prec@1 37.50000 (74.19354)	Prec@5 87.50000 (99.19354)
Epoch: [92][32/60]	Time 0.02931 (0.34377)	Data 0.00040 (0.23309)	Loss 0.7676 (0.8728)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (99.21875)
Epoch: [92][33/60]	Time 0.07250 (0.33555)	Data 0.00076 (0.22605)	Loss 0.1706 (0.8515)	Prec@1 87.50000 (74.62122)	Prec@5 100.00000 (99.24242)
Epoch: [92][34/60]	Time 0.04646 (0.32705)	Data 0.00047 (0.21942)	Loss 1.2291 (0.8626)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [92][35/60]	Time 0.02970 (0.31855)	Data 0.00048 (0.21316)	Loss 1.3151 (0.8755)	Prec@1 75.00000 (74.28571)	Prec@5 87.50000 (98.92857)
Epoch: [92][36/60]	Time 0.02819 (0.31049)	Data 0.00052 (0.20726)	Loss 1.1891 (0.8842)	Prec@1 62.50000 (73.95834)	Prec@5 100.00000 (98.95834)
Epoch: [92][37/60]	Time 0.03110 (0.30294)	Data 0.00401 (0.20176)	Loss 1.4252 (0.8989)	Prec@1 62.50000 (73.64865)	Prec@5 100.00000 (98.98649)
Epoch: [92][38/60]	Time 0.03199 (0.29581)	Data 0.00312 (0.19654)	Loss 2.2345 (0.9340)	Prec@1 50.00000 (73.02631)	Prec@5 100.00000 (99.01316)
Epoch: [92][39/60]	Time 0.03018 (0.28900)	Data 0.00263 (0.19156)	Loss 0.1992 (0.9152)	Prec@1 87.50000 (73.39744)	Prec@5 100.00000 (99.03846)
Epoch: [92][40/60]	Time 0.02713 (0.28245)	Data 0.00050 (0.18679)	Loss 0.3328 (0.9006)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (99.06250)
Epoch: [92][41/60]	Time 0.02679 (0.27621)	Data 0.00074 (0.18225)	Loss 0.6133 (0.8936)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (99.08537)
Epoch: [92][42/60]	Time 0.02746 (0.27029)	Data 0.00083 (0.17793)	Loss 1.0914 (0.8983)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (99.10715)
Epoch: [92][43/60]	Time 0.03005 (0.26471)	Data 0.00072 (0.17381)	Loss 0.6820 (0.8933)	Prec@1 75.00000 (73.83721)	Prec@5 100.00000 (99.12791)
Epoch: [92][44/60]	Time 0.02690 (0.25930)	Data 0.00047 (0.16987)	Loss 0.7634 (0.8903)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (99.14773)
Epoch: [92][45/60]	Time 0.02649 (0.25413)	Data 0.00048 (0.16611)	Loss 0.7371 (0.8869)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.16667)
Epoch: [92][46/60]	Time 0.02680 (0.24918)	Data 0.00047 (0.16251)	Loss 0.8047 (0.8851)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (99.18478)
Epoch: [92][47/60]	Time 0.02650 (0.24445)	Data 0.00042 (0.15906)	Loss 0.8712 (0.8848)	Prec@1 75.00000 (73.67021)	Prec@5 100.00000 (99.20213)
Epoch: [92][48/60]	Time 0.02304 (0.23983)	Data 0.00041 (0.15575)	Loss 0.2828 (0.8723)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.21875)
Epoch: [92][49/60]	Time 0.02265 (0.23540)	Data 0.00045 (0.15258)	Loss 0.1801 (0.8582)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.23470)
Epoch: [92][50/60]	Time 0.02269 (0.23115)	Data 0.00042 (0.14954)	Loss 0.4509 (0.8500)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.25000)
Epoch: [92][51/60]	Time 0.02361 (0.22708)	Data 0.00044 (0.14662)	Loss 0.3125 (0.8395)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.26471)
Epoch: [92][52/60]	Time 0.02374 (0.22317)	Data 0.00066 (0.14381)	Loss 0.7455 (0.8377)	Prec@1 62.50000 (74.03847)	Prec@5 100.00000 (99.27885)
Epoch: [92][53/60]	Time 0.02285 (0.21939)	Data 0.00046 (0.14110)	Loss 0.3782 (0.8290)	Prec@1 87.50000 (74.29246)	Prec@5 100.00000 (99.29246)
Epoch: [92][54/60]	Time 0.02472 (0.21578)	Data 0.00043 (0.13850)	Loss 0.8505 (0.8294)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (99.30556)
Epoch: [92][55/60]	Time 0.02314 (0.21228)	Data 0.00051 (0.13599)	Loss 1.1124 (0.8346)	Prec@1 62.50000 (74.09090)	Prec@5 100.00000 (99.31818)
Epoch: [92][56/60]	Time 0.02368 (0.20891)	Data 0.00063 (0.13357)	Loss 0.6314 (0.8309)	Prec@1 62.50000 (73.88393)	Prec@5 100.00000 (99.33036)
Epoch: [92][57/60]	Time 0.02288 (0.20565)	Data 0.00048 (0.13124)	Loss 1.1684 (0.8368)	Prec@1 62.50000 (73.68421)	Prec@5 100.00000 (99.34211)
Epoch: [92][58/60]	Time 0.02316 (0.20250)	Data 0.00046 (0.12898)	Loss 0.6059 (0.8329)	Prec@1 62.50000 (73.49138)	Prec@5 100.00000 (99.35345)
Epoch: [92][59/60]	Time 0.02278 (0.19946)	Data 0.00042 (0.12680)	Loss 0.8053 (0.8324)	Prec@1 75.00000 (73.51695)	Prec@5 100.00000 (99.36441)
Epoch: [92][60/60]	Time 0.02297 (0.19652)	Data 0.00054 (0.12470)	Loss 0.5323 (0.8274)	Prec@1 87.50000 (73.75001)	Prec@5 100.00000 (99.37501)
train at epoch 93
train at epoch 93
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [93][0/272]	 lr: 0.00000	Time 6.976 (6.976)	Data 5.796 (5.796)	Loss 0.0109 (0.0109)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [93][10/272]	 lr: 0.00000	Time 0.303 (1.245)	Data 0.111 (0.669)	Loss 0.0100 (0.0404)	Prec@1 100.00000 (99.14773)	Prec@5 100.00000 (100.00000)
Epoch: [93][20/272]	 lr: 0.00000	Time 0.497 (0.863)	Data 0.125 (0.413)	Loss 0.0053 (0.0259)	Prec@1 100.00000 (99.55357)	Prec@5 100.00000 (100.00000)
Epoch: [93][30/272]	 lr: 0.00000	Time 0.439 (0.722)	Data 0.129 (0.321)	Loss 0.0099 (0.0240)	Prec@1 100.00000 (99.69758)	Prec@5 100.00000 (100.00000)
Epoch: [93][40/272]	 lr: 0.00000	Time 0.413 (0.654)	Data 0.130 (0.274)	Loss 0.0183 (0.0231)	Prec@1 100.00000 (99.77134)	Prec@5 100.00000 (100.00000)
Epoch: [93][50/272]	 lr: 0.00000	Time 0.664 (0.613)	Data 0.127 (0.246)	Loss 0.0119 (0.0208)	Prec@1 100.00000 (99.81618)	Prec@5 100.00000 (100.00000)
Epoch: [93][60/272]	 lr: 0.00000	Time 0.489 (0.581)	Data 0.128 (0.227)	Loss 0.0071 (0.0196)	Prec@1 100.00000 (99.84631)	Prec@5 100.00000 (99.99999)
Epoch: [93][70/272]	 lr: 0.00000	Time 0.369 (0.560)	Data 0.106 (0.213)	Loss 0.0097 (0.0197)	Prec@1 100.00000 (99.82394)	Prec@5 100.00000 (100.00000)
Epoch: [93][80/272]	 lr: 0.00000	Time 0.385 (0.544)	Data 0.116 (0.202)	Loss 0.0158 (0.0186)	Prec@1 100.00000 (99.84568)	Prec@5 100.00000 (100.00000)
Epoch: [93][90/272]	 lr: 0.00000	Time 0.381 (0.530)	Data 0.127 (0.194)	Loss 0.0215 (0.0178)	Prec@1 100.00000 (99.86264)	Prec@5 100.00000 (100.00000)
Epoch: [93][100/272]	 lr: 0.00000	Time 0.401 (0.521)	Data 0.151 (0.188)	Loss 0.0103 (0.0177)	Prec@1 100.00000 (99.87624)	Prec@5 100.00000 (100.00000)
Epoch: [93][110/272]	 lr: 0.00000	Time 0.415 (0.513)	Data 0.127 (0.182)	Loss 0.0088 (0.0172)	Prec@1 100.00000 (99.88739)	Prec@5 100.00000 (100.00000)
Epoch: [93][120/272]	 lr: 0.00000	Time 0.372 (0.507)	Data 0.120 (0.178)	Loss 0.0086 (0.0171)	Prec@1 100.00000 (99.89669)	Prec@5 100.00000 (99.99999)
Epoch: [93][130/272]	 lr: 0.00000	Time 0.484 (0.502)	Data 0.124 (0.174)	Loss 0.0072 (0.0170)	Prec@1 100.00000 (99.90458)	Prec@5 100.00000 (100.00000)
Epoch: [93][140/272]	 lr: 0.00000	Time 0.389 (0.497)	Data 0.128 (0.171)	Loss 0.0135 (0.0169)	Prec@1 100.00000 (99.91135)	Prec@5 100.00000 (100.00000)
Epoch: [93][150/272]	 lr: 0.00000	Time 0.426 (0.494)	Data 0.127 (0.168)	Loss 0.0262 (0.0170)	Prec@1 100.00000 (99.91722)	Prec@5 100.00000 (100.00000)
Epoch: [93][160/272]	 lr: 0.00000	Time 0.362 (0.489)	Data 0.119 (0.166)	Loss 0.0100 (0.0172)	Prec@1 100.00000 (99.92236)	Prec@5 100.00000 (100.00000)
Epoch: [93][170/272]	 lr: 0.00000	Time 0.424 (0.487)	Data 0.123 (0.163)	Loss 0.0102 (0.0170)	Prec@1 100.00000 (99.92690)	Prec@5 100.00000 (100.00000)
Epoch: [93][180/272]	 lr: 0.00000	Time 0.390 (0.483)	Data 0.133 (0.162)	Loss 0.0231 (0.0169)	Prec@1 100.00000 (99.93095)	Prec@5 100.00000 (100.00001)
Epoch: [93][190/272]	 lr: 0.00000	Time 0.430 (0.482)	Data 0.144 (0.160)	Loss 0.0171 (0.0168)	Prec@1 100.00000 (99.93456)	Prec@5 100.00000 (100.00000)
Epoch: [93][200/272]	 lr: 0.00000	Time 0.492 (0.481)	Data 0.140 (0.159)	Loss 0.0215 (0.0171)	Prec@1 100.00000 (99.92226)	Prec@5 100.00000 (100.00000)
Epoch: [93][210/272]	 lr: 0.00000	Time 0.451 (0.479)	Data 0.129 (0.157)	Loss 0.0100 (0.0170)	Prec@1 100.00000 (99.92595)	Prec@5 100.00000 (100.00000)
Epoch: [93][220/272]	 lr: 0.00000	Time 0.453 (0.477)	Data 0.129 (0.156)	Loss 0.0085 (0.0170)	Prec@1 100.00000 (99.92931)	Prec@5 100.00000 (100.00001)
Epoch: [93][230/272]	 lr: 0.00000	Time 0.377 (0.476)	Data 0.128 (0.155)	Loss 0.0101 (0.0172)	Prec@1 100.00000 (99.91883)	Prec@5 100.00000 (100.00000)
Epoch: [93][240/272]	 lr: 0.00000	Time 0.330 (0.474)	Data 0.128 (0.154)	Loss 0.0129 (0.0173)	Prec@1 100.00000 (99.90924)	Prec@5 100.00000 (100.00001)
Epoch: [93][250/272]	 lr: 0.00000	Time 0.236 (0.465)	Data 0.126 (0.153)	Loss 0.0084 (0.0171)	Prec@1 100.00000 (99.91285)	Prec@5 100.00000 (100.00000)
Epoch: [93][260/272]	 lr: 0.00000	Time 0.238 (0.456)	Data 0.128 (0.152)	Loss 0.0162 (0.0170)	Prec@1 100.00000 (99.91618)	Prec@5 100.00000 (100.00000)
Epoch: [93][270/272]	 lr: 0.00000	Time 0.238 (0.448)	Data 0.129 (0.151)	Loss 0.0358 (0.0173)	Prec@1 100.00000 (99.91928)	Prec@5 100.00000 (100.00000)
validation at epoch 93
validation at epoch 93
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [93][1/60]	Time 5.98583 (5.98583)	Data 5.85861 (5.85861)	Loss 0.4215 (0.4215)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [93][2/60]	Time 0.51970 (3.25277)	Data 0.43063 (3.14462)	Loss 0.4927 (0.4571)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [93][3/60]	Time 0.27213 (2.25922)	Data 0.01865 (2.10263)	Loss 1.1628 (0.6923)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [93][4/60]	Time 0.14647 (1.73103)	Data 0.01475 (1.58066)	Loss 0.2037 (0.5702)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [93][5/60]	Time 0.12756 (1.41034)	Data 0.01429 (1.26739)	Loss 0.3325 (0.5226)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [93][6/60]	Time 0.25354 (1.21754)	Data 0.06135 (1.06638)	Loss 0.3477 (0.4935)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [93][7/60]	Time 0.19402 (1.07132)	Data 0.05277 (0.92158)	Loss 1.4255 (0.6266)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [93][8/60]	Time 0.28868 (0.97349)	Data 0.11212 (0.82040)	Loss 1.1190 (0.6882)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [93][9/60]	Time 0.25194 (0.89332)	Data 0.17928 (0.74916)	Loss 0.7724 (0.6975)	Prec@1 62.50000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [93][10/60]	Time 0.08877 (0.81286)	Data 0.00086 (0.67433)	Loss 0.6330 (0.6911)	Prec@1 75.00000 (77.50000)	Prec@5 100.00000 (100.00000)
Epoch: [93][11/60]	Time 0.06765 (0.74512)	Data 0.00313 (0.61331)	Loss 0.5663 (0.6797)	Prec@1 87.50000 (78.40910)	Prec@5 100.00000 (100.00000)
Epoch: [93][12/60]	Time 0.18554 (0.69849)	Data 0.13788 (0.57369)	Loss 1.4879 (0.7471)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [93][13/60]	Time 0.14799 (0.65614)	Data 0.03361 (0.53215)	Loss 1.7803 (0.8266)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [93][14/60]	Time 0.20768 (0.62411)	Data 0.04912 (0.49765)	Loss 0.0851 (0.7736)	Prec@1 100.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [93][15/60]	Time 0.16791 (0.59369)	Data 0.00652 (0.46491)	Loss 1.1326 (0.7975)	Prec@1 75.00000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [93][16/60]	Time 0.15870 (0.56651)	Data 0.03140 (0.43781)	Loss 1.0286 (0.8120)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [93][17/60]	Time 0.09183 (0.53859)	Data 0.02048 (0.41326)	Loss 0.2650 (0.7798)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [93][18/60]	Time 0.21466 (0.52059)	Data 0.06625 (0.39398)	Loss 2.3995 (0.8698)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [93][19/60]	Time 0.17675 (0.50249)	Data 0.02431 (0.37453)	Loss 0.1880 (0.8339)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [93][20/60]	Time 0.23879 (0.48931)	Data 0.05379 (0.35849)	Loss 2.3161 (0.9080)	Prec@1 62.50000 (76.87500)	Prec@5 87.50000 (99.37500)
Epoch: [93][21/60]	Time 0.16626 (0.47392)	Data 0.01616 (0.34219)	Loss 0.4419 (0.8858)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (99.40476)
Epoch: [93][22/60]	Time 0.21761 (0.46227)	Data 0.00064 (0.32666)	Loss 0.4728 (0.8670)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (99.43182)
Epoch: [93][23/60]	Time 0.15517 (0.44892)	Data 0.02252 (0.31344)	Loss 0.9985 (0.8728)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (99.45652)
Epoch: [93][24/60]	Time 0.17101 (0.43734)	Data 0.00864 (0.30074)	Loss 0.5484 (0.8592)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (99.47917)
Epoch: [93][25/60]	Time 0.10535 (0.42406)	Data 0.00819 (0.28904)	Loss 0.4183 (0.8416)	Prec@1 75.00000 (76.00000)	Prec@5 100.00000 (99.50000)
Epoch: [93][26/60]	Time 0.11266 (0.41208)	Data 0.01247 (0.27840)	Loss 0.0321 (0.8105)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (99.51923)
Epoch: [93][27/60]	Time 0.23242 (0.40543)	Data 0.07698 (0.27094)	Loss 0.7595 (0.8086)	Prec@1 50.00000 (75.92593)	Prec@5 100.00000 (99.53704)
Epoch: [93][28/60]	Time 0.14195 (0.39602)	Data 0.00055 (0.26128)	Loss 0.4028 (0.7941)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (99.55357)
Epoch: [93][29/60]	Time 0.14850 (0.38749)	Data 0.00039 (0.25229)	Loss 0.7255 (0.7917)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (99.56896)
Epoch: [93][30/60]	Time 0.12527 (0.37874)	Data 0.00035 (0.24389)	Loss 1.8194 (0.8260)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (99.58334)
Epoch: [93][31/60]	Time 0.05577 (0.36833)	Data 0.00043 (0.23604)	Loss 2.6380 (0.8844)	Prec@1 25.00000 (74.19354)	Prec@5 100.00000 (99.59677)
Epoch: [93][32/60]	Time 0.05745 (0.35861)	Data 0.00047 (0.22868)	Loss 0.8126 (0.8822)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (99.60938)
Epoch: [93][33/60]	Time 0.04534 (0.34912)	Data 0.00038 (0.22176)	Loss 0.2265 (0.8623)	Prec@1 87.50000 (74.62122)	Prec@5 100.00000 (99.62122)
Epoch: [93][34/60]	Time 0.03668 (0.33993)	Data 0.00076 (0.21526)	Loss 1.2646 (0.8741)	Prec@1 62.50000 (74.26471)	Prec@5 100.00000 (99.63235)
Epoch: [93][35/60]	Time 0.03232 (0.33114)	Data 0.00046 (0.20912)	Loss 1.3915 (0.8889)	Prec@1 62.50000 (73.92857)	Prec@5 87.50000 (99.28571)
Epoch: [93][36/60]	Time 0.03514 (0.32292)	Data 0.00037 (0.20332)	Loss 1.3298 (0.9012)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (99.30556)
Epoch: [93][37/60]	Time 0.02871 (0.31497)	Data 0.00058 (0.19784)	Loss 1.4445 (0.9159)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (99.32433)
Epoch: [93][38/60]	Time 0.02846 (0.30743)	Data 0.00050 (0.19265)	Loss 2.3340 (0.9532)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (99.34211)
Epoch: [93][39/60]	Time 0.03011 (0.30032)	Data 0.00044 (0.18772)	Loss 0.2999 (0.9364)	Prec@1 87.50000 (73.07693)	Prec@5 100.00000 (99.35898)
Epoch: [93][40/60]	Time 0.02831 (0.29352)	Data 0.00050 (0.18304)	Loss 0.4943 (0.9254)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.37500)
Epoch: [93][41/60]	Time 0.02347 (0.28693)	Data 0.00078 (0.17859)	Loss 0.6288 (0.9181)	Prec@1 75.00000 (73.47561)	Prec@5 100.00000 (99.39024)
Epoch: [93][42/60]	Time 0.02650 (0.28073)	Data 0.00343 (0.17442)	Loss 1.2047 (0.9250)	Prec@1 75.00000 (73.51191)	Prec@5 100.00000 (99.40476)
Epoch: [93][43/60]	Time 0.02301 (0.27474)	Data 0.00049 (0.17038)	Loss 0.6645 (0.9189)	Prec@1 75.00000 (73.54651)	Prec@5 100.00000 (99.41860)
Epoch: [93][44/60]	Time 0.02842 (0.26914)	Data 0.00048 (0.16652)	Loss 0.8874 (0.9182)	Prec@1 62.50000 (73.29546)	Prec@5 100.00000 (99.43182)
Epoch: [93][45/60]	Time 0.02286 (0.26366)	Data 0.00041 (0.16283)	Loss 0.8033 (0.9156)	Prec@1 75.00000 (73.33334)	Prec@5 100.00000 (99.44445)
Epoch: [93][46/60]	Time 0.02283 (0.25843)	Data 0.00044 (0.15930)	Loss 1.2141 (0.9221)	Prec@1 50.00000 (72.82609)	Prec@5 100.00000 (99.45652)
Epoch: [93][47/60]	Time 0.02213 (0.25340)	Data 0.00043 (0.15592)	Loss 0.7609 (0.9187)	Prec@1 75.00000 (72.87234)	Prec@5 87.50000 (99.20213)
Epoch: [93][48/60]	Time 0.02267 (0.24859)	Data 0.00040 (0.15268)	Loss 0.3269 (0.9064)	Prec@1 87.50000 (73.17709)	Prec@5 100.00000 (99.21875)
Epoch: [93][49/60]	Time 0.02290 (0.24399)	Data 0.00049 (0.14957)	Loss 0.3437 (0.8949)	Prec@1 87.50000 (73.46938)	Prec@5 100.00000 (99.23470)
Epoch: [93][50/60]	Time 0.02257 (0.23956)	Data 0.00041 (0.14659)	Loss 0.4661 (0.8863)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.25000)
Epoch: [93][51/60]	Time 0.02291 (0.23531)	Data 0.00043 (0.14372)	Loss 0.4221 (0.8772)	Prec@1 75.00000 (73.52941)	Prec@5 100.00000 (99.26471)
Epoch: [93][52/60]	Time 0.02269 (0.23122)	Data 0.00044 (0.14097)	Loss 0.7524 (0.8748)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (99.27885)
Epoch: [93][53/60]	Time 0.02301 (0.22729)	Data 0.00047 (0.13831)	Loss 0.3917 (0.8657)	Prec@1 87.50000 (73.34906)	Prec@5 100.00000 (99.29246)
Epoch: [93][54/60]	Time 0.02328 (0.22352)	Data 0.00046 (0.13576)	Loss 0.8663 (0.8657)	Prec@1 75.00000 (73.37963)	Prec@5 100.00000 (99.30556)
Epoch: [93][55/60]	Time 0.02305 (0.21987)	Data 0.00041 (0.13330)	Loss 0.9437 (0.8671)	Prec@1 62.50000 (73.18182)	Prec@5 87.50000 (99.09090)
Epoch: [93][56/60]	Time 0.02281 (0.21635)	Data 0.00059 (0.13093)	Loss 0.7332 (0.8647)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (99.10715)
Epoch: [93][57/60]	Time 0.02623 (0.21302)	Data 0.00047 (0.12864)	Loss 1.3550 (0.8733)	Prec@1 62.50000 (73.24561)	Prec@5 87.50000 (98.90351)
Epoch: [93][58/60]	Time 0.02434 (0.20976)	Data 0.00048 (0.12643)	Loss 0.6952 (0.8703)	Prec@1 75.00000 (73.27586)	Prec@5 100.00000 (98.92242)
Epoch: [93][59/60]	Time 0.02258 (0.20659)	Data 0.00052 (0.12430)	Loss 0.7617 (0.8684)	Prec@1 87.50000 (73.51695)	Prec@5 100.00000 (98.94068)
Epoch: [93][60/60]	Time 0.02266 (0.20353)	Data 0.00054 (0.12224)	Loss 0.4750 (0.8619)	Prec@1 87.50000 (73.75001)	Prec@5 100.00000 (98.95834)
train at epoch 94
train at epoch 94
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [94][0/272]	 lr: 0.00000	Time 8.005 (8.005)	Data 6.693 (6.693)	Loss 0.0130 (0.0130)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][10/272]	 lr: 0.00000	Time 0.339 (1.274)	Data 0.127 (0.746)	Loss 0.0067 (0.0115)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][20/272]	 lr: 0.00000	Time 0.481 (0.866)	Data 0.144 (0.455)	Loss 0.0229 (0.0126)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][30/272]	 lr: 0.00000	Time 0.556 (0.729)	Data 0.138 (0.351)	Loss 0.0075 (0.0146)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][40/272]	 lr: 0.00000	Time 0.433 (0.654)	Data 0.126 (0.297)	Loss 0.0266 (0.0147)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][50/272]	 lr: 0.00000	Time 0.451 (0.617)	Data 0.130 (0.263)	Loss 0.0105 (0.0144)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [94][60/272]	 lr: 0.00000	Time 0.508 (0.588)	Data 0.123 (0.241)	Loss 0.0065 (0.0156)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [94][70/272]	 lr: 0.00000	Time 0.462 (0.567)	Data 0.134 (0.225)	Loss 0.0113 (0.0150)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [94][80/272]	 lr: 0.00000	Time 0.413 (0.551)	Data 0.129 (0.213)	Loss 0.0057 (0.0154)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [94][90/272]	 lr: 0.00000	Time 0.526 (0.540)	Data 0.149 (0.204)	Loss 0.0494 (0.0169)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [94][100/272]	 lr: 0.00000	Time 0.518 (0.530)	Data 0.126 (0.197)	Loss 0.0211 (0.0163)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [94][110/272]	 lr: 0.00000	Time 0.405 (0.523)	Data 0.120 (0.190)	Loss 0.0106 (0.0159)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [94][120/272]	 lr: 0.00000	Time 0.346 (0.514)	Data 0.109 (0.185)	Loss 0.0061 (0.0162)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [94][130/272]	 lr: 0.00000	Time 0.421 (0.510)	Data 0.122 (0.181)	Loss 0.0079 (0.0164)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [94][140/272]	 lr: 0.00000	Time 0.510 (0.505)	Data 0.149 (0.177)	Loss 0.0057 (0.0162)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [94][150/272]	 lr: 0.00000	Time 0.425 (0.501)	Data 0.143 (0.174)	Loss 0.0220 (0.0161)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [94][160/272]	 lr: 0.00000	Time 0.552 (0.497)	Data 0.146 (0.171)	Loss 0.0300 (0.0162)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [94][170/272]	 lr: 0.00000	Time 0.440 (0.494)	Data 0.126 (0.168)	Loss 0.0072 (0.0162)	Prec@1 100.00000 (99.96345)	Prec@5 100.00000 (100.00000)
Epoch: [94][180/272]	 lr: 0.00000	Time 0.463 (0.491)	Data 0.140 (0.166)	Loss 0.0128 (0.0161)	Prec@1 100.00000 (99.96548)	Prec@5 100.00000 (100.00001)
Epoch: [94][190/272]	 lr: 0.00000	Time 0.444 (0.488)	Data 0.114 (0.164)	Loss 0.0095 (0.0160)	Prec@1 100.00000 (99.96728)	Prec@5 100.00000 (100.00000)
Epoch: [94][200/272]	 lr: 0.00000	Time 0.440 (0.485)	Data 0.126 (0.162)	Loss 0.0112 (0.0158)	Prec@1 100.00000 (99.96890)	Prec@5 100.00000 (100.00000)
Epoch: [94][210/272]	 lr: 0.00000	Time 0.416 (0.483)	Data 0.125 (0.161)	Loss 0.0191 (0.0157)	Prec@1 100.00000 (99.97038)	Prec@5 100.00000 (100.00000)
Epoch: [94][220/272]	 lr: 0.00000	Time 0.516 (0.482)	Data 0.155 (0.159)	Loss 0.0059 (0.0155)	Prec@1 100.00000 (99.97173)	Prec@5 100.00000 (100.00001)
Epoch: [94][230/272]	 lr: 0.00000	Time 0.435 (0.481)	Data 0.140 (0.158)	Loss 0.0091 (0.0152)	Prec@1 100.00000 (99.97295)	Prec@5 100.00000 (100.00000)
Epoch: [94][240/272]	 lr: 0.00000	Time 0.273 (0.480)	Data 0.128 (0.157)	Loss 0.0157 (0.0154)	Prec@1 100.00000 (99.97408)	Prec@5 100.00000 (100.00001)
Epoch: [94][250/272]	 lr: 0.00000	Time 0.238 (0.470)	Data 0.128 (0.155)	Loss 0.0253 (0.0156)	Prec@1 100.00000 (99.97511)	Prec@5 100.00000 (100.00000)
Epoch: [94][260/272]	 lr: 0.00000	Time 0.239 (0.461)	Data 0.128 (0.154)	Loss 0.0064 (0.0156)	Prec@1 100.00000 (99.97605)	Prec@5 100.00000 (100.00000)
Epoch: [94][270/272]	 lr: 0.00000	Time 0.235 (0.453)	Data 0.127 (0.153)	Loss 0.0404 (0.0158)	Prec@1 100.00000 (99.97694)	Prec@5 100.00000 (100.00000)
validation at epoch 94
validation at epoch 94
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [94][1/60]	Time 5.42041 (5.42041)	Data 5.23246 (5.23246)	Loss 0.4088 (0.4088)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][2/60]	Time 1.80233 (3.61137)	Data 1.64319 (3.43783)	Loss 0.4646 (0.4367)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [94][3/60]	Time 0.10407 (2.44227)	Data 0.00864 (2.29476)	Loss 1.1959 (0.6898)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [94][4/60]	Time 0.07973 (1.85163)	Data 0.00061 (1.72123)	Loss 0.2044 (0.5684)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [94][5/60]	Time 0.19706 (1.52072)	Data 0.08294 (1.39357)	Loss 0.2827 (0.5113)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [94][6/60]	Time 0.34946 (1.32551)	Data 0.26436 (1.20537)	Loss 0.3703 (0.4878)	Prec@1 87.50000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [94][7/60]	Time 0.20984 (1.16613)	Data 0.05265 (1.04069)	Loss 1.3527 (0.6114)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [94][8/60]	Time 0.15105 (1.03924)	Data 0.01062 (0.91194)	Loss 1.1522 (0.6790)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [94][9/60]	Time 0.10021 (0.93491)	Data 0.00446 (0.81110)	Loss 0.7084 (0.6822)	Prec@1 62.50000 (76.38889)	Prec@5 100.00000 (100.00000)
Epoch: [94][10/60]	Time 0.15391 (0.85681)	Data 0.02129 (0.73212)	Loss 0.6096 (0.6750)	Prec@1 75.00000 (76.25000)	Prec@5 100.00000 (100.00000)
Epoch: [94][11/60]	Time 0.14635 (0.79222)	Data 0.00655 (0.66616)	Loss 0.5843 (0.6667)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [94][12/60]	Time 0.20718 (0.74347)	Data 0.06002 (0.61565)	Loss 1.3629 (0.7247)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [94][13/60]	Time 0.15338 (0.69807)	Data 0.01727 (0.56962)	Loss 1.9529 (0.8192)	Prec@1 50.00000 (74.03847)	Prec@5 100.00000 (100.00000)
Epoch: [94][14/60]	Time 0.10247 (0.65553)	Data 0.02678 (0.53085)	Loss 0.0743 (0.7660)	Prec@1 100.00000 (75.89286)	Prec@5 100.00000 (100.00001)
Epoch: [94][15/60]	Time 0.23779 (0.62768)	Data 0.07772 (0.50064)	Loss 1.1896 (0.7943)	Prec@1 50.00000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [94][16/60]	Time 0.18284 (0.59988)	Data 0.00062 (0.46939)	Loss 0.9512 (0.8041)	Prec@1 75.00000 (74.21875)	Prec@5 100.00000 (100.00000)
Epoch: [94][17/60]	Time 0.15810 (0.57389)	Data 0.00255 (0.44193)	Loss 0.3271 (0.7760)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][18/60]	Time 0.16957 (0.55143)	Data 0.02742 (0.41890)	Loss 2.3399 (0.8629)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][19/60]	Time 0.23586 (0.53482)	Data 0.08925 (0.40155)	Loss 0.1713 (0.8265)	Prec@1 100.00000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [94][20/60]	Time 0.24526 (0.52034)	Data 0.06653 (0.38480)	Loss 2.2099 (0.8957)	Prec@1 62.50000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [94][21/60]	Time 0.19321 (0.50477)	Data 0.01757 (0.36731)	Loss 0.4869 (0.8762)	Prec@1 75.00000 (75.59524)	Prec@5 100.00000 (100.00000)
Epoch: [94][22/60]	Time 0.14623 (0.48847)	Data 0.01772 (0.35142)	Loss 0.5430 (0.8610)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (100.00000)
Epoch: [94][23/60]	Time 0.17827 (0.47498)	Data 0.01996 (0.33701)	Loss 1.0122 (0.8676)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][24/60]	Time 0.08981 (0.45893)	Data 0.02856 (0.32416)	Loss 0.6225 (0.8574)	Prec@1 62.50000 (74.47917)	Prec@5 100.00000 (100.00000)
Epoch: [94][25/60]	Time 0.13355 (0.44592)	Data 0.00046 (0.31121)	Loss 0.4429 (0.8408)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][26/60]	Time 0.15910 (0.43489)	Data 0.00676 (0.29950)	Loss 0.0587 (0.8107)	Prec@1 100.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [94][27/60]	Time 0.07906 (0.42171)	Data 0.00567 (0.28862)	Loss 0.7683 (0.8092)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [94][28/60]	Time 0.19197 (0.41350)	Data 0.05191 (0.28016)	Loss 0.4610 (0.7967)	Prec@1 87.50000 (75.44643)	Prec@5 100.00000 (100.00001)
Epoch: [94][29/60]	Time 0.07287 (0.40176)	Data 0.00051 (0.27052)	Loss 0.7051 (0.7936)	Prec@1 75.00000 (75.43104)	Prec@5 100.00000 (100.00000)
Epoch: [94][30/60]	Time 0.05883 (0.39033)	Data 0.00040 (0.26152)	Loss 1.7520 (0.8255)	Prec@1 62.50000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [94][31/60]	Time 0.07571 (0.38018)	Data 0.00041 (0.25309)	Loss 2.2727 (0.8722)	Prec@1 37.50000 (73.79032)	Prec@5 100.00000 (100.00000)
Epoch: [94][32/60]	Time 0.08243 (0.37087)	Data 0.00811 (0.24544)	Loss 0.6579 (0.8655)	Prec@1 75.00000 (73.82812)	Prec@5 100.00000 (100.00000)
Epoch: [94][33/60]	Time 0.04958 (0.36114)	Data 0.00047 (0.23801)	Loss 0.1409 (0.8435)	Prec@1 87.50000 (74.24242)	Prec@5 100.00000 (100.00000)
Epoch: [94][34/60]	Time 0.03508 (0.35155)	Data 0.01129 (0.23135)	Loss 1.0814 (0.8505)	Prec@1 62.50000 (73.89706)	Prec@5 100.00000 (100.00000)
Epoch: [94][35/60]	Time 0.03110 (0.34239)	Data 0.00357 (0.22484)	Loss 1.2873 (0.8630)	Prec@1 75.00000 (73.92857)	Prec@5 100.00000 (100.00000)
Epoch: [94][36/60]	Time 0.03004 (0.33371)	Data 0.00244 (0.21866)	Loss 1.0663 (0.8687)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [94][37/60]	Time 0.04085 (0.32580)	Data 0.00490 (0.21288)	Loss 1.3035 (0.8804)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (100.00000)
Epoch: [94][38/60]	Time 0.03355 (0.31811)	Data 0.00057 (0.20730)	Loss 2.0505 (0.9112)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (100.00000)
Epoch: [94][39/60]	Time 0.02844 (0.31068)	Data 0.00052 (0.20199)	Loss 0.1731 (0.8923)	Prec@1 87.50000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [94][40/60]	Time 0.02733 (0.30360)	Data 0.00051 (0.19696)	Loss 0.3137 (0.8778)	Prec@1 87.50000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [94][41/60]	Time 0.02701 (0.29685)	Data 0.00069 (0.19217)	Loss 0.5359 (0.8695)	Prec@1 75.00000 (73.47561)	Prec@5 100.00000 (100.00000)
Epoch: [94][42/60]	Time 0.02297 (0.29033)	Data 0.00070 (0.18761)	Loss 1.0031 (0.8727)	Prec@1 75.00000 (73.51191)	Prec@5 100.00000 (100.00000)
Epoch: [94][43/60]	Time 0.02295 (0.28411)	Data 0.00080 (0.18327)	Loss 0.6112 (0.8666)	Prec@1 62.50000 (73.25581)	Prec@5 100.00000 (100.00000)
Epoch: [94][44/60]	Time 0.02331 (0.27818)	Data 0.00097 (0.17912)	Loss 0.6995 (0.8628)	Prec@1 75.00000 (73.29546)	Prec@5 100.00000 (100.00000)
Epoch: [94][45/60]	Time 0.02271 (0.27251)	Data 0.00086 (0.17516)	Loss 0.7049 (0.8593)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [94][46/60]	Time 0.02200 (0.26706)	Data 0.00077 (0.17137)	Loss 0.9462 (0.8612)	Prec@1 62.50000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [94][47/60]	Time 0.02224 (0.26185)	Data 0.00106 (0.16775)	Loss 0.9660 (0.8634)	Prec@1 75.00000 (73.40425)	Prec@5 87.50000 (99.73404)
Epoch: [94][48/60]	Time 0.02231 (0.25686)	Data 0.00047 (0.16426)	Loss 0.4538 (0.8549)	Prec@1 87.50000 (73.69792)	Prec@5 100.00000 (99.73959)
Epoch: [94][49/60]	Time 0.02187 (0.25207)	Data 0.00045 (0.16092)	Loss 0.2474 (0.8425)	Prec@1 87.50000 (73.97959)	Prec@5 100.00000 (99.74490)
Epoch: [94][50/60]	Time 0.02191 (0.24746)	Data 0.00043 (0.15771)	Loss 0.7076 (0.8398)	Prec@1 75.00000 (74.00000)	Prec@5 100.00000 (99.75000)
Epoch: [94][51/60]	Time 0.02155 (0.24303)	Data 0.00046 (0.15463)	Loss 0.2493 (0.8282)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (99.75491)
Epoch: [94][52/60]	Time 0.02171 (0.23878)	Data 0.00044 (0.15166)	Loss 0.8286 (0.8282)	Prec@1 62.50000 (74.03847)	Prec@5 87.50000 (99.51923)
Epoch: [94][53/60]	Time 0.02199 (0.23469)	Data 0.00044 (0.14881)	Loss 0.5498 (0.8229)	Prec@1 75.00000 (74.05660)	Prec@5 100.00000 (99.52831)
Epoch: [94][54/60]	Time 0.02143 (0.23074)	Data 0.00041 (0.14606)	Loss 0.8008 (0.8225)	Prec@1 87.50000 (74.30556)	Prec@5 100.00000 (99.53704)
Epoch: [94][55/60]	Time 0.02191 (0.22694)	Data 0.00044 (0.14341)	Loss 1.1601 (0.8287)	Prec@1 62.50000 (74.09090)	Prec@5 87.50000 (99.31818)
Epoch: [94][56/60]	Time 0.02166 (0.22328)	Data 0.00053 (0.14086)	Loss 0.7229 (0.8268)	Prec@1 75.00000 (74.10715)	Prec@5 100.00000 (99.33036)
Epoch: [94][57/60]	Time 0.02208 (0.21975)	Data 0.00049 (0.13840)	Loss 1.3840 (0.8366)	Prec@1 62.50000 (73.90351)	Prec@5 87.50000 (99.12281)
Epoch: [94][58/60]	Time 0.02196 (0.21634)	Data 0.00046 (0.13602)	Loss 0.6793 (0.8338)	Prec@1 62.50000 (73.70689)	Prec@5 100.00000 (99.13793)
Epoch: [94][59/60]	Time 0.02168 (0.21304)	Data 0.00051 (0.13372)	Loss 0.7635 (0.8327)	Prec@1 87.50000 (73.94068)	Prec@5 100.00000 (99.15254)
Epoch: [94][60/60]	Time 0.02176 (0.20985)	Data 0.00045 (0.13150)	Loss 0.4927 (0.8270)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.16667)
train at epoch 95
train at epoch 95
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [95][0/272]	 lr: 0.00000	Time 5.429 (5.429)	Data 4.240 (4.240)	Loss 0.0070 (0.0070)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][10/272]	 lr: 0.00000	Time 0.471 (1.300)	Data 0.126 (0.777)	Loss 0.0329 (0.0135)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][20/272]	 lr: 0.00000	Time 0.431 (0.866)	Data 0.141 (0.472)	Loss 0.0055 (0.0116)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][30/272]	 lr: 0.00000	Time 0.466 (0.726)	Data 0.126 (0.361)	Loss 0.0081 (0.0114)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][40/272]	 lr: 0.00000	Time 0.379 (0.658)	Data 0.125 (0.304)	Loss 0.0249 (0.0143)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][50/272]	 lr: 0.00000	Time 0.510 (0.615)	Data 0.130 (0.270)	Loss 0.0126 (0.0138)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][60/272]	 lr: 0.00000	Time 0.463 (0.584)	Data 0.128 (0.247)	Loss 0.0391 (0.0143)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [95][70/272]	 lr: 0.00000	Time 0.376 (0.564)	Data 0.129 (0.231)	Loss 0.0117 (0.0140)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][80/272]	 lr: 0.00000	Time 0.513 (0.552)	Data 0.128 (0.218)	Loss 0.0053 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][90/272]	 lr: 0.00000	Time 0.549 (0.542)	Data 0.129 (0.208)	Loss 0.0122 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][100/272]	 lr: 0.00000	Time 0.465 (0.535)	Data 0.125 (0.200)	Loss 0.0099 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][110/272]	 lr: 0.00000	Time 0.399 (0.524)	Data 0.127 (0.194)	Loss 0.0091 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][120/272]	 lr: 0.00000	Time 0.416 (0.516)	Data 0.134 (0.188)	Loss 0.0154 (0.0161)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [95][130/272]	 lr: 0.00000	Time 0.467 (0.512)	Data 0.142 (0.184)	Loss 0.0111 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][140/272]	 lr: 0.00000	Time 0.455 (0.506)	Data 0.141 (0.180)	Loss 0.0661 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][150/272]	 lr: 0.00000	Time 0.451 (0.502)	Data 0.128 (0.176)	Loss 0.0227 (0.0167)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][160/272]	 lr: 0.00000	Time 0.430 (0.497)	Data 0.137 (0.173)	Loss 0.0039 (0.0164)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][170/272]	 lr: 0.00000	Time 0.558 (0.495)	Data 0.122 (0.171)	Loss 0.0245 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][180/272]	 lr: 0.00000	Time 0.385 (0.492)	Data 0.127 (0.168)	Loss 0.0158 (0.0163)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [95][190/272]	 lr: 0.00000	Time 0.440 (0.489)	Data 0.108 (0.166)	Loss 0.0100 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][200/272]	 lr: 0.00000	Time 0.517 (0.487)	Data 0.124 (0.164)	Loss 0.0204 (0.0216)	Prec@1 100.00000 (99.82898)	Prec@5 100.00000 (100.00000)
Epoch: [95][210/272]	 lr: 0.00000	Time 0.397 (0.487)	Data 0.142 (0.162)	Loss 0.0358 (0.0215)	Prec@1 100.00000 (99.83709)	Prec@5 100.00000 (100.00000)
Epoch: [95][220/272]	 lr: 0.00000	Time 0.406 (0.485)	Data 0.108 (0.161)	Loss 0.0063 (0.0212)	Prec@1 100.00000 (99.84446)	Prec@5 100.00000 (100.00001)
Epoch: [95][230/272]	 lr: 0.00000	Time 0.463 (0.483)	Data 0.155 (0.160)	Loss 0.0231 (0.0210)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [95][240/272]	 lr: 0.00000	Time 0.284 (0.481)	Data 0.128 (0.158)	Loss 0.0561 (0.0213)	Prec@1 100.00000 (99.85737)	Prec@5 100.00000 (100.00001)
Epoch: [95][250/272]	 lr: 0.00000	Time 0.240 (0.472)	Data 0.128 (0.157)	Loss 0.0208 (0.0209)	Prec@1 100.00000 (99.86305)	Prec@5 100.00000 (100.00000)
Epoch: [95][260/272]	 lr: 0.00000	Time 0.238 (0.463)	Data 0.128 (0.156)	Loss 0.0053 (0.0209)	Prec@1 100.00000 (99.86829)	Prec@5 100.00000 (100.00000)
Epoch: [95][270/272]	 lr: 0.00000	Time 0.238 (0.455)	Data 0.128 (0.155)	Loss 0.0047 (0.0205)	Prec@1 100.00000 (99.87315)	Prec@5 100.00000 (100.00000)
validation at epoch 95
validation at epoch 95
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [95][1/60]	Time 6.43711 (6.43711)	Data 6.34226 (6.34226)	Loss 0.3545 (0.3545)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [95][2/60]	Time 0.34475 (3.39093)	Data 0.09368 (3.21797)	Loss 0.4265 (0.3905)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [95][3/60]	Time 0.88148 (2.55445)	Data 0.79207 (2.40934)	Loss 1.1594 (0.6468)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [95][4/60]	Time 0.10343 (1.94169)	Data 0.00185 (1.80747)	Loss 0.2040 (0.5361)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [95][5/60]	Time 0.21146 (1.59565)	Data 0.10197 (1.46637)	Loss 0.3459 (0.4980)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [95][6/60]	Time 0.14008 (1.35305)	Data 0.02084 (1.22545)	Loss 0.4212 (0.4852)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [95][7/60]	Time 0.17038 (1.18410)	Data 0.01183 (1.05207)	Loss 1.1134 (0.5750)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [95][8/60]	Time 0.09778 (1.04831)	Data 0.00067 (0.92065)	Loss 1.0650 (0.6362)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][9/60]	Time 0.09181 (0.94203)	Data 0.00543 (0.81896)	Loss 0.5870 (0.6308)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][10/60]	Time 0.24821 (0.87265)	Data 0.08171 (0.74523)	Loss 0.5279 (0.6205)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][11/60]	Time 0.11576 (0.80384)	Data 0.01559 (0.67890)	Loss 0.5438 (0.6135)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [95][12/60]	Time 0.13335 (0.74797)	Data 0.00381 (0.62264)	Loss 1.0518 (0.6500)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][13/60]	Time 0.06670 (0.69556)	Data 0.00705 (0.57529)	Loss 1.7067 (0.7313)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [95][14/60]	Time 0.07443 (0.65120)	Data 0.02273 (0.53582)	Loss 0.0780 (0.6847)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [95][15/60]	Time 0.15120 (0.61786)	Data 0.07800 (0.50530)	Loss 0.9888 (0.7049)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [95][16/60]	Time 0.29572 (0.59773)	Data 0.12324 (0.48142)	Loss 1.1708 (0.7340)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [95][17/60]	Time 0.05494 (0.56580)	Data 0.00586 (0.45345)	Loss 0.3542 (0.7117)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [95][18/60]	Time 0.19556 (0.54523)	Data 0.09394 (0.43347)	Loss 2.4971 (0.8109)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [95][19/60]	Time 0.10673 (0.52215)	Data 0.01951 (0.41169)	Loss 0.1640 (0.7768)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [95][20/60]	Time 0.31502 (0.51180)	Data 0.08741 (0.39547)	Loss 2.4421 (0.8601)	Prec@1 62.50000 (74.37500)	Prec@5 87.50000 (99.37500)
Epoch: [95][21/60]	Time 0.14370 (0.49427)	Data 0.00523 (0.37689)	Loss 0.5795 (0.8467)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (99.40476)
Epoch: [95][22/60]	Time 0.09210 (0.47599)	Data 0.00077 (0.35979)	Loss 0.6757 (0.8390)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (99.43182)
Epoch: [95][23/60]	Time 0.18361 (0.46328)	Data 0.05033 (0.34634)	Loss 1.0292 (0.8472)	Prec@1 62.50000 (73.91305)	Prec@5 100.00000 (99.45652)
Epoch: [95][24/60]	Time 0.06614 (0.44673)	Data 0.00059 (0.33193)	Loss 0.7811 (0.8445)	Prec@1 62.50000 (73.43750)	Prec@5 100.00000 (99.47917)
Epoch: [95][25/60]	Time 0.14295 (0.43458)	Data 0.01123 (0.31910)	Loss 0.4712 (0.8296)	Prec@1 75.00000 (73.50000)	Prec@5 100.00000 (99.50000)
Epoch: [95][26/60]	Time 0.12730 (0.42276)	Data 0.03487 (0.30817)	Loss 0.0476 (0.7995)	Prec@1 100.00000 (74.51923)	Prec@5 100.00000 (99.51923)
Epoch: [95][27/60]	Time 0.18039 (0.41378)	Data 0.00543 (0.29696)	Loss 0.9326 (0.8044)	Prec@1 50.00000 (73.61111)	Prec@5 100.00000 (99.53704)
Epoch: [95][28/60]	Time 0.17598 (0.40529)	Data 0.02545 (0.28726)	Loss 0.3793 (0.7892)	Prec@1 87.50000 (74.10715)	Prec@5 100.00000 (99.55357)
Epoch: [95][29/60]	Time 0.09836 (0.39470)	Data 0.00044 (0.27737)	Loss 0.6552 (0.7846)	Prec@1 75.00000 (74.13793)	Prec@5 100.00000 (99.56896)
Epoch: [95][30/60]	Time 0.04737 (0.38313)	Data 0.00067 (0.26815)	Loss 1.8221 (0.8192)	Prec@1 62.50000 (73.75001)	Prec@5 100.00000 (99.58334)
Epoch: [95][31/60]	Time 0.06568 (0.37289)	Data 0.00039 (0.25951)	Loss 2.4191 (0.8708)	Prec@1 37.50000 (72.58064)	Prec@5 100.00000 (99.59677)
Epoch: [95][32/60]	Time 0.03973 (0.36248)	Data 0.00041 (0.25141)	Loss 0.7843 (0.8681)	Prec@1 75.00000 (72.65625)	Prec@5 100.00000 (99.60938)
Epoch: [95][33/60]	Time 0.03456 (0.35254)	Data 0.00049 (0.24381)	Loss 0.1122 (0.8452)	Prec@1 87.50000 (73.10606)	Prec@5 100.00000 (99.62122)
Epoch: [95][34/60]	Time 0.03582 (0.34322)	Data 0.00042 (0.23665)	Loss 1.2664 (0.8576)	Prec@1 62.50000 (72.79412)	Prec@5 100.00000 (99.63235)
Epoch: [95][35/60]	Time 0.03535 (0.33443)	Data 0.00041 (0.22990)	Loss 1.3946 (0.8729)	Prec@1 75.00000 (72.85714)	Prec@5 87.50000 (99.28571)
Epoch: [95][36/60]	Time 0.03123 (0.32601)	Data 0.00360 (0.22362)	Loss 1.1074 (0.8794)	Prec@1 62.50000 (72.56944)	Prec@5 100.00000 (99.30556)
Epoch: [95][37/60]	Time 0.02263 (0.31781)	Data 0.00087 (0.21760)	Loss 1.5821 (0.8984)	Prec@1 62.50000 (72.29730)	Prec@5 100.00000 (99.32433)
Epoch: [95][38/60]	Time 0.02294 (0.31005)	Data 0.00086 (0.21189)	Loss 2.3962 (0.9378)	Prec@1 50.00000 (71.71053)	Prec@5 100.00000 (99.34211)
Epoch: [95][39/60]	Time 0.02318 (0.30269)	Data 0.00082 (0.20648)	Loss 0.1360 (0.9173)	Prec@1 87.50000 (72.11539)	Prec@5 100.00000 (99.35898)
Epoch: [95][40/60]	Time 0.02300 (0.29570)	Data 0.00059 (0.20133)	Loss 0.2751 (0.9012)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.37500)
Epoch: [95][41/60]	Time 0.02302 (0.28905)	Data 0.00081 (0.19644)	Loss 0.6345 (0.8947)	Prec@1 75.00000 (72.56097)	Prec@5 100.00000 (99.39024)
Epoch: [95][42/60]	Time 0.02296 (0.28271)	Data 0.00085 (0.19179)	Loss 1.1461 (0.9007)	Prec@1 75.00000 (72.61905)	Prec@5 100.00000 (99.40476)
Epoch: [95][43/60]	Time 0.02537 (0.27673)	Data 0.00096 (0.18735)	Loss 0.6824 (0.8956)	Prec@1 75.00000 (72.67442)	Prec@5 100.00000 (99.41860)
Epoch: [95][44/60]	Time 0.02378 (0.27098)	Data 0.00057 (0.18310)	Loss 0.8524 (0.8946)	Prec@1 75.00000 (72.72727)	Prec@5 100.00000 (99.43182)
Epoch: [95][45/60]	Time 0.02214 (0.26545)	Data 0.00044 (0.17904)	Loss 0.7760 (0.8920)	Prec@1 87.50000 (73.05556)	Prec@5 100.00000 (99.44445)
Epoch: [95][46/60]	Time 0.02274 (0.26017)	Data 0.00122 (0.17518)	Loss 0.9270 (0.8928)	Prec@1 50.00000 (72.55435)	Prec@5 100.00000 (99.45652)
Epoch: [95][47/60]	Time 0.02198 (0.25510)	Data 0.00044 (0.17146)	Loss 1.0696 (0.8965)	Prec@1 75.00000 (72.60638)	Prec@5 87.50000 (99.20213)
Epoch: [95][48/60]	Time 0.02229 (0.25025)	Data 0.00046 (0.16790)	Loss 0.4730 (0.8877)	Prec@1 87.50000 (72.91667)	Prec@5 100.00000 (99.21875)
Epoch: [95][49/60]	Time 0.02333 (0.24562)	Data 0.00051 (0.16448)	Loss 0.2023 (0.8737)	Prec@1 87.50000 (73.21429)	Prec@5 100.00000 (99.23470)
Epoch: [95][50/60]	Time 0.02248 (0.24116)	Data 0.00045 (0.16120)	Loss 0.6958 (0.8702)	Prec@1 75.00000 (73.25000)	Prec@5 100.00000 (99.25000)
Epoch: [95][51/60]	Time 0.02258 (0.23687)	Data 0.00044 (0.15805)	Loss 0.4535 (0.8620)	Prec@1 75.00000 (73.28432)	Prec@5 100.00000 (99.26471)
Epoch: [95][52/60]	Time 0.02262 (0.23275)	Data 0.00048 (0.15502)	Loss 1.0625 (0.8659)	Prec@1 50.00000 (72.83654)	Prec@5 87.50000 (99.03847)
Epoch: [95][53/60]	Time 0.02330 (0.22880)	Data 0.00046 (0.15210)	Loss 0.5574 (0.8600)	Prec@1 87.50000 (73.11320)	Prec@5 100.00000 (99.05660)
Epoch: [95][54/60]	Time 0.02245 (0.22498)	Data 0.00047 (0.14929)	Loss 1.0737 (0.8640)	Prec@1 75.00000 (73.14815)	Prec@5 100.00000 (99.07407)
Epoch: [95][55/60]	Time 0.02477 (0.22134)	Data 0.00047 (0.14659)	Loss 1.3697 (0.8732)	Prec@1 62.50000 (72.95454)	Prec@5 87.50000 (98.86363)
Epoch: [95][56/60]	Time 0.02314 (0.21780)	Data 0.00055 (0.14398)	Loss 0.6961 (0.8700)	Prec@1 62.50000 (72.76786)	Prec@5 100.00000 (98.88393)
Epoch: [95][57/60]	Time 0.02305 (0.21438)	Data 0.00066 (0.14147)	Loss 1.4160 (0.8796)	Prec@1 62.50000 (72.58772)	Prec@5 87.50000 (98.68421)
Epoch: [95][58/60]	Time 0.02289 (0.21108)	Data 0.00053 (0.13904)	Loss 0.6902 (0.8763)	Prec@1 62.50000 (72.41380)	Prec@5 100.00000 (98.70689)
Epoch: [95][59/60]	Time 0.02270 (0.20789)	Data 0.00043 (0.13669)	Loss 0.9137 (0.8770)	Prec@1 75.00000 (72.45763)	Prec@5 100.00000 (98.72881)
Epoch: [95][60/60]	Time 0.02223 (0.20480)	Data 0.00058 (0.13442)	Loss 0.6464 (0.8731)	Prec@1 87.50000 (72.70834)	Prec@5 100.00000 (98.75001)
train at epoch 96
train at epoch 96
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [96][0/272]	 lr: 0.00000	Time 10.320 (10.320)	Data 9.629 (9.629)	Loss 0.0089 (0.0089)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][10/272]	 lr: 0.00000	Time 0.448 (1.325)	Data 0.128 (0.991)	Loss 0.0049 (0.0130)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][20/272]	 lr: 0.00000	Time 0.398 (0.901)	Data 0.146 (0.582)	Loss 0.0235 (0.0153)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][30/272]	 lr: 0.00000	Time 0.422 (0.755)	Data 0.129 (0.435)	Loss 0.0126 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][40/272]	 lr: 0.00000	Time 0.401 (0.677)	Data 0.127 (0.361)	Loss 0.0068 (0.0144)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][50/272]	 lr: 0.00000	Time 0.367 (0.634)	Data 0.130 (0.313)	Loss 0.0095 (0.0135)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][60/272]	 lr: 0.00000	Time 0.452 (0.604)	Data 0.119 (0.283)	Loss 0.0137 (0.0146)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [96][70/272]	 lr: 0.00000	Time 0.441 (0.582)	Data 0.127 (0.261)	Loss 0.0123 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][80/272]	 lr: 0.00000	Time 0.441 (0.565)	Data 0.104 (0.244)	Loss 0.0101 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][90/272]	 lr: 0.00000	Time 0.378 (0.551)	Data 0.128 (0.231)	Loss 0.0324 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][100/272]	 lr: 0.00000	Time 0.418 (0.541)	Data 0.125 (0.221)	Loss 0.0517 (0.0167)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [96][110/272]	 lr: 0.00000	Time 0.449 (0.531)	Data 0.128 (0.213)	Loss 0.0048 (0.0166)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [96][120/272]	 lr: 0.00000	Time 0.526 (0.523)	Data 0.130 (0.207)	Loss 0.0079 (0.0176)	Prec@1 100.00000 (99.94834)	Prec@5 100.00000 (99.99999)
Epoch: [96][130/272]	 lr: 0.00000	Time 0.353 (0.516)	Data 0.140 (0.201)	Loss 0.0077 (0.0172)	Prec@1 100.00000 (99.95229)	Prec@5 100.00000 (100.00000)
Epoch: [96][140/272]	 lr: 0.00000	Time 0.427 (0.511)	Data 0.120 (0.196)	Loss 0.0084 (0.0172)	Prec@1 100.00000 (99.95567)	Prec@5 100.00000 (100.00000)
Epoch: [96][150/272]	 lr: 0.00000	Time 0.399 (0.506)	Data 0.127 (0.191)	Loss 0.0063 (0.0173)	Prec@1 100.00000 (99.95861)	Prec@5 100.00000 (100.00000)
Epoch: [96][160/272]	 lr: 0.00000	Time 0.511 (0.502)	Data 0.132 (0.187)	Loss 0.0164 (0.0173)	Prec@1 100.00000 (99.96118)	Prec@5 100.00000 (100.00000)
Epoch: [96][170/272]	 lr: 0.00000	Time 0.388 (0.497)	Data 0.127 (0.184)	Loss 0.0370 (0.0175)	Prec@1 100.00000 (99.96345)	Prec@5 100.00000 (100.00000)
Epoch: [96][180/272]	 lr: 0.00000	Time 0.402 (0.494)	Data 0.128 (0.180)	Loss 0.0060 (0.0175)	Prec@1 100.00000 (99.96548)	Prec@5 100.00000 (100.00001)
Epoch: [96][190/272]	 lr: 0.00000	Time 0.524 (0.492)	Data 0.144 (0.178)	Loss 0.0105 (0.0174)	Prec@1 100.00000 (99.96728)	Prec@5 100.00000 (100.00000)
Epoch: [96][200/272]	 lr: 0.00000	Time 0.448 (0.490)	Data 0.131 (0.175)	Loss 0.0081 (0.0174)	Prec@1 100.00000 (99.95335)	Prec@5 100.00000 (100.00000)
Epoch: [96][210/272]	 lr: 0.00000	Time 0.371 (0.487)	Data 0.122 (0.173)	Loss 0.0115 (0.0171)	Prec@1 100.00000 (99.95557)	Prec@5 100.00000 (100.00000)
Epoch: [96][220/272]	 lr: 0.00000	Time 0.409 (0.485)	Data 0.127 (0.171)	Loss 0.0151 (0.0169)	Prec@1 100.00000 (99.95758)	Prec@5 100.00000 (100.00001)
Epoch: [96][230/272]	 lr: 0.00000	Time 0.422 (0.483)	Data 0.127 (0.169)	Loss 0.0149 (0.0168)	Prec@1 100.00000 (99.95942)	Prec@5 100.00000 (100.00000)
Epoch: [96][240/272]	 lr: 0.00000	Time 0.327 (0.481)	Data 0.128 (0.168)	Loss 0.0084 (0.0168)	Prec@1 100.00000 (99.96111)	Prec@5 100.00000 (100.00001)
Epoch: [96][250/272]	 lr: 0.00000	Time 0.241 (0.472)	Data 0.127 (0.166)	Loss 0.0126 (0.0167)	Prec@1 100.00000 (99.96265)	Prec@5 100.00000 (100.00000)
Epoch: [96][260/272]	 lr: 0.00000	Time 0.238 (0.463)	Data 0.129 (0.164)	Loss 0.0051 (0.0164)	Prec@1 100.00000 (99.96408)	Prec@5 100.00000 (100.00000)
Epoch: [96][270/272]	 lr: 0.00000	Time 0.240 (0.454)	Data 0.129 (0.163)	Loss 0.0055 (0.0164)	Prec@1 100.00000 (99.96541)	Prec@5 100.00000 (100.00000)
validation at epoch 96
validation at epoch 96
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [96][1/60]	Time 7.64657 (7.64657)	Data 7.54463 (7.54463)	Loss 0.4292 (0.4292)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][2/60]	Time 0.11918 (3.88287)	Data 0.05526 (3.79995)	Loss 0.4490 (0.4391)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [96][3/60]	Time 0.14211 (2.63595)	Data 0.00482 (2.53491)	Loss 1.1646 (0.6810)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][4/60]	Time 0.04976 (1.98941)	Data 0.00688 (1.90290)	Loss 0.2030 (0.5615)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [96][5/60]	Time 0.09023 (1.60957)	Data 0.01088 (1.52450)	Loss 0.2701 (0.5032)	Prec@1 87.50000 (80.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][6/60]	Time 0.22248 (1.37839)	Data 0.07581 (1.28305)	Loss 0.4020 (0.4863)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [96][7/60]	Time 0.16344 (1.20482)	Data 0.02247 (1.10297)	Loss 1.0340 (0.5646)	Prec@1 75.00000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [96][8/60]	Time 0.07123 (1.06312)	Data 0.01144 (0.96653)	Loss 0.9492 (0.6126)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [96][9/60]	Time 0.24809 (0.97257)	Data 0.07986 (0.86801)	Loss 0.6224 (0.6137)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][10/60]	Time 0.15273 (0.89058)	Data 0.00305 (0.78151)	Loss 0.4889 (0.6012)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][11/60]	Time 0.09948 (0.81866)	Data 0.03274 (0.71344)	Loss 0.5358 (0.5953)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [96][12/60]	Time 0.13440 (0.76164)	Data 0.01462 (0.65521)	Loss 0.9270 (0.6229)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][13/60]	Time 0.13740 (0.71362)	Data 0.01830 (0.60621)	Loss 1.7521 (0.7098)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [96][14/60]	Time 0.16563 (0.67448)	Data 0.01893 (0.56426)	Loss 0.0774 (0.6646)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [96][15/60]	Time 0.09979 (0.63617)	Data 0.01061 (0.52735)	Loss 0.9256 (0.6820)	Prec@1 75.00000 (75.00001)	Prec@5 100.00000 (100.00001)
Epoch: [96][16/60]	Time 0.12796 (0.60440)	Data 0.00848 (0.49493)	Loss 1.1062 (0.7085)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][17/60]	Time 0.12412 (0.57615)	Data 0.01421 (0.46665)	Loss 0.4031 (0.6906)	Prec@1 87.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [96][18/60]	Time 0.16535 (0.55333)	Data 0.04410 (0.44317)	Loss 2.3453 (0.7825)	Prec@1 75.00000 (75.69444)	Prec@5 100.00000 (100.00000)
Epoch: [96][19/60]	Time 0.11015 (0.53001)	Data 0.00055 (0.41988)	Loss 0.1446 (0.7489)	Prec@1 87.50000 (76.31579)	Prec@5 100.00000 (100.00000)
Epoch: [96][20/60]	Time 0.12000 (0.50950)	Data 0.01116 (0.39944)	Loss 2.3191 (0.8274)	Prec@1 62.50000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [96][21/60]	Time 0.10115 (0.49006)	Data 0.00882 (0.38084)	Loss 0.5853 (0.8159)	Prec@1 75.00000 (75.59524)	Prec@5 100.00000 (100.00000)
Epoch: [96][22/60]	Time 0.17763 (0.47586)	Data 0.06037 (0.36627)	Loss 0.7146 (0.8113)	Prec@1 75.00000 (75.56818)	Prec@5 100.00000 (100.00000)
Epoch: [96][23/60]	Time 0.09580 (0.45933)	Data 0.00503 (0.35057)	Loss 1.0541 (0.8218)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][24/60]	Time 0.16787 (0.44719)	Data 0.02263 (0.33690)	Loss 0.8468 (0.8229)	Prec@1 50.00000 (73.95834)	Prec@5 100.00000 (100.00000)
Epoch: [96][25/60]	Time 0.16118 (0.43575)	Data 0.01022 (0.32384)	Loss 0.4830 (0.8093)	Prec@1 87.50000 (74.50000)	Prec@5 100.00000 (100.00000)
Epoch: [96][26/60]	Time 0.14186 (0.42445)	Data 0.00479 (0.31156)	Loss 0.0706 (0.7809)	Prec@1 100.00000 (75.48077)	Prec@5 100.00000 (100.00000)
Epoch: [96][27/60]	Time 0.11092 (0.41283)	Data 0.00746 (0.30030)	Loss 0.9207 (0.7861)	Prec@1 50.00000 (74.53704)	Prec@5 100.00000 (100.00000)
Epoch: [96][28/60]	Time 0.15027 (0.40346)	Data 0.05011 (0.29137)	Loss 0.4305 (0.7734)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [96][29/60]	Time 0.04254 (0.39101)	Data 0.00041 (0.28133)	Loss 0.6700 (0.7698)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [96][30/60]	Time 0.07235 (0.38039)	Data 0.01710 (0.27253)	Loss 1.7365 (0.8020)	Prec@1 62.50000 (74.58334)	Prec@5 100.00000 (100.00001)
Epoch: [96][31/60]	Time 0.04773 (0.36966)	Data 0.00042 (0.26375)	Loss 2.2370 (0.8483)	Prec@1 37.50000 (73.38709)	Prec@5 100.00000 (100.00000)
Epoch: [96][32/60]	Time 0.04989 (0.35966)	Data 0.00042 (0.25552)	Loss 0.7232 (0.8444)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [96][33/60]	Time 0.04860 (0.35024)	Data 0.00060 (0.24779)	Loss 0.0848 (0.8214)	Prec@1 100.00000 (74.24242)	Prec@5 100.00000 (100.00000)
Epoch: [96][34/60]	Time 0.05214 (0.34147)	Data 0.00052 (0.24052)	Loss 1.1972 (0.8324)	Prec@1 62.50000 (73.89706)	Prec@5 100.00000 (100.00000)
Epoch: [96][35/60]	Time 0.03629 (0.33275)	Data 0.00086 (0.23367)	Loss 1.3339 (0.8468)	Prec@1 75.00000 (73.92857)	Prec@5 100.00000 (100.00000)
Epoch: [96][36/60]	Time 0.03586 (0.32450)	Data 0.00055 (0.22720)	Loss 0.9841 (0.8506)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [96][37/60]	Time 0.02446 (0.31639)	Data 0.00087 (0.22108)	Loss 1.4815 (0.8676)	Prec@1 62.50000 (73.31081)	Prec@5 100.00000 (100.00000)
Epoch: [96][38/60]	Time 0.03173 (0.30890)	Data 0.00319 (0.21535)	Loss 2.2133 (0.9030)	Prec@1 50.00000 (72.69737)	Prec@5 100.00000 (100.00000)
Epoch: [96][39/60]	Time 0.03080 (0.30177)	Data 0.00164 (0.20987)	Loss 0.1220 (0.8830)	Prec@1 100.00000 (73.39744)	Prec@5 100.00000 (100.00000)
Epoch: [96][40/60]	Time 0.02988 (0.29498)	Data 0.00169 (0.20466)	Loss 0.2178 (0.8664)	Prec@1 87.50000 (73.75000)	Prec@5 100.00000 (100.00000)
Epoch: [96][41/60]	Time 0.03261 (0.28858)	Data 0.00217 (0.19972)	Loss 0.6063 (0.8600)	Prec@1 75.00000 (73.78049)	Prec@5 100.00000 (100.00000)
Epoch: [96][42/60]	Time 0.03605 (0.28256)	Data 0.00067 (0.19498)	Loss 1.1018 (0.8658)	Prec@1 75.00000 (73.80952)	Prec@5 100.00000 (100.00000)
Epoch: [96][43/60]	Time 0.02498 (0.27657)	Data 0.00061 (0.19046)	Loss 0.6325 (0.8604)	Prec@1 75.00000 (73.83721)	Prec@5 100.00000 (100.00000)
Epoch: [96][44/60]	Time 0.03066 (0.27098)	Data 0.00423 (0.18623)	Loss 0.7796 (0.8585)	Prec@1 75.00000 (73.86364)	Prec@5 100.00000 (100.00000)
Epoch: [96][45/60]	Time 0.02694 (0.26556)	Data 0.00069 (0.18211)	Loss 0.7705 (0.8566)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (100.00000)
Epoch: [96][46/60]	Time 0.02766 (0.26039)	Data 0.00084 (0.17817)	Loss 0.8529 (0.8565)	Prec@1 50.00000 (73.64130)	Prec@5 100.00000 (100.00000)
Epoch: [96][47/60]	Time 0.02270 (0.25533)	Data 0.00050 (0.17439)	Loss 1.0486 (0.8606)	Prec@1 75.00000 (73.67021)	Prec@5 87.50000 (99.73404)
Epoch: [96][48/60]	Time 0.02287 (0.25049)	Data 0.00044 (0.17076)	Loss 0.5125 (0.8533)	Prec@1 87.50000 (73.95834)	Prec@5 100.00000 (99.73959)
Epoch: [96][49/60]	Time 0.02288 (0.24584)	Data 0.00042 (0.16729)	Loss 0.1764 (0.8395)	Prec@1 87.50000 (74.23470)	Prec@5 100.00000 (99.74490)
Epoch: [96][50/60]	Time 0.02358 (0.24140)	Data 0.00045 (0.16395)	Loss 0.8472 (0.8397)	Prec@1 75.00000 (74.25000)	Prec@5 100.00000 (99.75000)
Epoch: [96][51/60]	Time 0.02298 (0.23712)	Data 0.00045 (0.16074)	Loss 0.3380 (0.8298)	Prec@1 75.00000 (74.26471)	Prec@5 100.00000 (99.75491)
Epoch: [96][52/60]	Time 0.02256 (0.23299)	Data 0.00047 (0.15766)	Loss 0.9957 (0.8330)	Prec@1 50.00000 (73.79808)	Prec@5 87.50000 (99.51923)
Epoch: [96][53/60]	Time 0.02283 (0.22902)	Data 0.00043 (0.15470)	Loss 0.6530 (0.8296)	Prec@1 87.50000 (74.05660)	Prec@5 100.00000 (99.52831)
Epoch: [96][54/60]	Time 0.02303 (0.22521)	Data 0.00046 (0.15184)	Loss 0.9862 (0.8325)	Prec@1 75.00000 (74.07407)	Prec@5 100.00000 (99.53704)
Epoch: [96][55/60]	Time 0.02325 (0.22154)	Data 0.00043 (0.14909)	Loss 1.3178 (0.8414)	Prec@1 62.50000 (73.86363)	Prec@5 87.50000 (99.31818)
Epoch: [96][56/60]	Time 0.02308 (0.21799)	Data 0.00050 (0.14643)	Loss 0.7307 (0.8394)	Prec@1 62.50000 (73.66072)	Prec@5 100.00000 (99.33036)
Epoch: [96][57/60]	Time 0.02272 (0.21457)	Data 0.00040 (0.14387)	Loss 1.3991 (0.8492)	Prec@1 62.50000 (73.46491)	Prec@5 87.50000 (99.12281)
Epoch: [96][58/60]	Time 0.02284 (0.21126)	Data 0.00043 (0.14140)	Loss 0.7053 (0.8467)	Prec@1 62.50000 (73.27586)	Prec@5 100.00000 (99.13793)
Epoch: [96][59/60]	Time 0.02334 (0.20808)	Data 0.00055 (0.13901)	Loss 0.8674 (0.8471)	Prec@1 87.50000 (73.51695)	Prec@5 100.00000 (99.15254)
Epoch: [96][60/60]	Time 0.02278 (0.20499)	Data 0.00043 (0.13670)	Loss 0.6291 (0.8434)	Prec@1 87.50000 (73.75001)	Prec@5 100.00000 (99.16667)
train at epoch 97
train at epoch 97
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [97][0/272]	 lr: 0.00000	Time 8.682 (8.682)	Data 7.626 (7.626)	Loss 0.0055 (0.0055)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][10/272]	 lr: 0.00000	Time 0.347 (1.293)	Data 0.127 (0.811)	Loss 0.0257 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][20/272]	 lr: 0.00000	Time 0.365 (0.883)	Data 0.127 (0.486)	Loss 0.0067 (0.0174)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [97][30/272]	 lr: 0.00000	Time 0.348 (0.737)	Data 0.127 (0.371)	Loss 0.0124 (0.0160)	Prec@1 100.00000 (99.89919)	Prec@5 100.00000 (100.00000)
Epoch: [97][40/272]	 lr: 0.00000	Time 0.454 (0.665)	Data 0.115 (0.312)	Loss 0.0435 (0.0166)	Prec@1 100.00000 (99.92377)	Prec@5 100.00000 (100.00000)
Epoch: [97][50/272]	 lr: 0.00000	Time 0.536 (0.622)	Data 0.148 (0.276)	Loss 0.0092 (0.0158)	Prec@1 100.00000 (99.93873)	Prec@5 100.00000 (100.00000)
Epoch: [97][60/272]	 lr: 0.00000	Time 0.438 (0.596)	Data 0.125 (0.252)	Loss 0.0167 (0.0154)	Prec@1 100.00000 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [97][70/272]	 lr: 0.00000	Time 0.431 (0.576)	Data 0.134 (0.235)	Loss 0.0097 (0.0149)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [97][80/272]	 lr: 0.00000	Time 0.452 (0.561)	Data 0.127 (0.221)	Loss 0.0110 (0.0150)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [97][90/272]	 lr: 0.00000	Time 0.573 (0.548)	Data 0.128 (0.211)	Loss 0.0061 (0.0148)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [97][100/272]	 lr: 0.00000	Time 0.416 (0.536)	Data 0.121 (0.203)	Loss 0.0106 (0.0150)	Prec@1 100.00000 (99.96906)	Prec@5 100.00000 (100.00000)
Epoch: [97][110/272]	 lr: 0.00000	Time 0.487 (0.530)	Data 0.129 (0.195)	Loss 0.0288 (0.0149)	Prec@1 100.00000 (99.97185)	Prec@5 100.00000 (100.00000)
Epoch: [97][120/272]	 lr: 0.00000	Time 0.473 (0.522)	Data 0.128 (0.190)	Loss 0.0063 (0.0148)	Prec@1 100.00000 (99.97417)	Prec@5 100.00000 (99.99999)
Epoch: [97][130/272]	 lr: 0.00000	Time 0.370 (0.516)	Data 0.121 (0.185)	Loss 0.0168 (0.0203)	Prec@1 100.00000 (99.83302)	Prec@5 100.00000 (100.00000)
Epoch: [97][140/272]	 lr: 0.00000	Time 0.408 (0.511)	Data 0.129 (0.181)	Loss 0.0092 (0.0198)	Prec@1 100.00000 (99.84486)	Prec@5 100.00000 (100.00000)
Epoch: [97][150/272]	 lr: 0.00000	Time 0.466 (0.506)	Data 0.153 (0.178)	Loss 0.0112 (0.0191)	Prec@1 100.00000 (99.85513)	Prec@5 100.00000 (100.00000)
Epoch: [97][160/272]	 lr: 0.00000	Time 0.361 (0.501)	Data 0.116 (0.174)	Loss 0.0068 (0.0188)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [97][170/272]	 lr: 0.00000	Time 0.449 (0.500)	Data 0.151 (0.172)	Loss 0.0084 (0.0182)	Prec@1 100.00000 (99.87208)	Prec@5 100.00000 (100.00000)
Epoch: [97][180/272]	 lr: 0.00000	Time 0.449 (0.498)	Data 0.122 (0.169)	Loss 0.0162 (0.0184)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [97][190/272]	 lr: 0.00000	Time 0.455 (0.496)	Data 0.124 (0.167)	Loss 0.0078 (0.0188)	Prec@1 100.00000 (99.85275)	Prec@5 100.00000 (100.00000)
Epoch: [97][200/272]	 lr: 0.00000	Time 0.534 (0.493)	Data 0.146 (0.165)	Loss 0.0221 (0.0184)	Prec@1 100.00000 (99.86007)	Prec@5 100.00000 (100.00000)
Epoch: [97][210/272]	 lr: 0.00000	Time 0.533 (0.493)	Data 0.128 (0.163)	Loss 0.0165 (0.0185)	Prec@1 100.00000 (99.86671)	Prec@5 100.00000 (100.00000)
Epoch: [97][220/272]	 lr: 0.00000	Time 0.382 (0.489)	Data 0.129 (0.162)	Loss 0.0291 (0.0189)	Prec@1 100.00000 (99.85860)	Prec@5 100.00000 (100.00001)
Epoch: [97][230/272]	 lr: 0.00000	Time 0.322 (0.487)	Data 0.132 (0.160)	Loss 0.0086 (0.0187)	Prec@1 100.00000 (99.85119)	Prec@5 100.00000 (100.00000)
Epoch: [97][240/272]	 lr: 0.00000	Time 0.353 (0.485)	Data 0.137 (0.159)	Loss 0.0190 (0.0189)	Prec@1 100.00000 (99.84441)	Prec@5 100.00000 (100.00001)
Epoch: [97][250/272]	 lr: 0.00000	Time 0.243 (0.475)	Data 0.128 (0.158)	Loss 0.0159 (0.0188)	Prec@1 100.00000 (99.85060)	Prec@5 100.00000 (100.00000)
Epoch: [97][260/272]	 lr: 0.00000	Time 0.240 (0.466)	Data 0.127 (0.157)	Loss 0.0205 (0.0190)	Prec@1 100.00000 (99.84435)	Prec@5 100.00000 (100.00000)
Epoch: [97][270/272]	 lr: 0.00000	Time 0.241 (0.458)	Data 0.128 (0.156)	Loss 0.0073 (0.0192)	Prec@1 100.00000 (99.85009)	Prec@5 100.00000 (100.00000)
validation at epoch 97
validation at epoch 97
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [97][1/60]	Time 3.13007 (3.13007)	Data 3.05349 (3.05349)	Loss 0.4232 (0.4232)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [97][2/60]	Time 3.27379 (3.20193)	Data 3.16233 (3.10791)	Loss 0.5291 (0.4761)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [97][3/60]	Time 0.23130 (2.21172)	Data 0.02827 (2.08136)	Loss 1.3663 (0.7729)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [97][4/60]	Time 0.57431 (1.80237)	Data 0.47633 (1.68010)	Loss 0.2345 (0.6383)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [97][5/60]	Time 0.10110 (1.46211)	Data 0.00203 (1.34449)	Loss 0.4974 (0.6101)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [97][6/60]	Time 0.09140 (1.23366)	Data 0.02163 (1.12401)	Loss 0.5123 (0.5938)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [97][7/60]	Time 0.11403 (1.07371)	Data 0.00807 (0.96459)	Loss 1.4314 (0.7135)	Prec@1 62.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [97][8/60]	Time 0.60451 (1.01506)	Data 0.56794 (0.91501)	Loss 1.4564 (0.8063)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][9/60]	Time 0.06561 (0.90957)	Data 0.00240 (0.81361)	Loss 0.7293 (0.7978)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][10/60]	Time 0.06600 (0.82521)	Data 0.00217 (0.73247)	Loss 0.6608 (0.7841)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][11/60]	Time 0.12685 (0.76172)	Data 0.00345 (0.66619)	Loss 0.5750 (0.7651)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [97][12/60]	Time 0.09374 (0.70606)	Data 0.00192 (0.61084)	Loss 1.4468 (0.8219)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][13/60]	Time 0.22024 (0.66869)	Data 0.06891 (0.56915)	Loss 2.2084 (0.9285)	Prec@1 50.00000 (73.07693)	Prec@5 100.00000 (100.00000)
Epoch: [97][14/60]	Time 0.16563 (0.63276)	Data 0.02767 (0.53047)	Loss 0.1388 (0.8721)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [97][15/60]	Time 0.26964 (0.60855)	Data 0.07735 (0.50026)	Loss 1.4195 (0.9086)	Prec@1 50.00000 (73.33334)	Prec@5 100.00000 (100.00001)
Epoch: [97][16/60]	Time 0.11168 (0.57749)	Data 0.06120 (0.47282)	Loss 1.1362 (0.9228)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [97][17/60]	Time 0.19501 (0.55499)	Data 0.11315 (0.45167)	Loss 0.3460 (0.8889)	Prec@1 87.50000 (74.26471)	Prec@5 100.00000 (100.00000)
Epoch: [97][18/60]	Time 0.08138 (0.52868)	Data 0.00622 (0.42692)	Loss 2.4432 (0.9753)	Prec@1 75.00000 (74.30556)	Prec@5 100.00000 (100.00000)
Epoch: [97][19/60]	Time 0.11457 (0.50689)	Data 0.00817 (0.40488)	Loss 0.1965 (0.9343)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][20/60]	Time 0.11496 (0.48729)	Data 0.04881 (0.38708)	Loss 2.4377 (1.0094)	Prec@1 62.50000 (74.37500)	Prec@5 100.00000 (100.00000)
Epoch: [97][21/60]	Time 0.13604 (0.47057)	Data 0.01617 (0.36941)	Loss 0.6321 (0.9915)	Prec@1 75.00000 (74.40476)	Prec@5 100.00000 (100.00000)
Epoch: [97][22/60]	Time 0.18947 (0.45779)	Data 0.01717 (0.35340)	Loss 0.6344 (0.9752)	Prec@1 75.00000 (74.43182)	Prec@5 100.00000 (100.00000)
Epoch: [97][23/60]	Time 0.14529 (0.44420)	Data 0.00081 (0.33807)	Loss 1.1365 (0.9823)	Prec@1 50.00000 (73.36957)	Prec@5 100.00000 (100.00000)
Epoch: [97][24/60]	Time 0.10333 (0.43000)	Data 0.01640 (0.32467)	Loss 0.6070 (0.9666)	Prec@1 75.00000 (73.43750)	Prec@5 100.00000 (100.00000)
Epoch: [97][25/60]	Time 0.06030 (0.41521)	Data 0.00103 (0.31172)	Loss 0.4882 (0.9475)	Prec@1 87.50000 (74.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][26/60]	Time 0.07192 (0.40201)	Data 0.01421 (0.30028)	Loss 0.0399 (0.9126)	Prec@1 100.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [97][27/60]	Time 0.16203 (0.39312)	Data 0.04140 (0.29069)	Loss 0.7756 (0.9075)	Prec@1 62.50000 (74.53704)	Prec@5 100.00000 (100.00000)
Epoch: [97][28/60]	Time 0.23249 (0.38738)	Data 0.03782 (0.28166)	Loss 0.3855 (0.8889)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00001)
Epoch: [97][29/60]	Time 0.17007 (0.37989)	Data 0.00050 (0.27197)	Loss 0.7433 (0.8838)	Prec@1 62.50000 (74.56896)	Prec@5 100.00000 (100.00000)
Epoch: [97][30/60]	Time 0.13356 (0.37168)	Data 0.00049 (0.26292)	Loss 1.8179 (0.9150)	Prec@1 62.50000 (74.16667)	Prec@5 100.00000 (100.00001)
Epoch: [97][31/60]	Time 0.09367 (0.36271)	Data 0.00043 (0.25445)	Loss 2.9086 (0.9793)	Prec@1 25.00000 (72.58064)	Prec@5 87.50000 (99.59677)
Epoch: [97][32/60]	Time 0.06726 (0.35348)	Data 0.00046 (0.24651)	Loss 0.9290 (0.9777)	Prec@1 62.50000 (72.26562)	Prec@5 100.00000 (99.60938)
Epoch: [97][33/60]	Time 0.02837 (0.34362)	Data 0.00040 (0.23906)	Loss 0.1328 (0.9521)	Prec@1 87.50000 (72.72727)	Prec@5 100.00000 (99.62122)
Epoch: [97][34/60]	Time 0.02867 (0.33436)	Data 0.00043 (0.23204)	Loss 1.2483 (0.9608)	Prec@1 62.50000 (72.42647)	Prec@5 100.00000 (99.63235)
Epoch: [97][35/60]	Time 0.02857 (0.32562)	Data 0.00065 (0.22543)	Loss 1.5819 (0.9786)	Prec@1 75.00000 (72.50000)	Prec@5 87.50000 (99.28571)
Epoch: [97][36/60]	Time 0.02906 (0.31739)	Data 0.00065 (0.21918)	Loss 1.2597 (0.9864)	Prec@1 62.50000 (72.22222)	Prec@5 100.00000 (99.30556)
Epoch: [97][37/60]	Time 0.02846 (0.30958)	Data 0.00051 (0.21327)	Loss 1.5509 (1.0016)	Prec@1 62.50000 (71.95946)	Prec@5 100.00000 (99.32433)
Epoch: [97][38/60]	Time 0.02727 (0.30215)	Data 0.00038 (0.20767)	Loss 2.4096 (1.0387)	Prec@1 50.00000 (71.38158)	Prec@5 100.00000 (99.34211)
Epoch: [97][39/60]	Time 0.02738 (0.29510)	Data 0.00058 (0.20236)	Loss 0.1461 (1.0158)	Prec@1 87.50000 (71.79488)	Prec@5 100.00000 (99.35898)
Epoch: [97][40/60]	Time 0.02702 (0.28840)	Data 0.00059 (0.19732)	Loss 0.2782 (0.9974)	Prec@1 87.50000 (72.18750)	Prec@5 100.00000 (99.37500)
Epoch: [97][41/60]	Time 0.02305 (0.28193)	Data 0.00079 (0.19252)	Loss 0.6817 (0.9897)	Prec@1 75.00000 (72.25610)	Prec@5 100.00000 (99.39024)
Epoch: [97][42/60]	Time 0.02282 (0.27576)	Data 0.00075 (0.18796)	Loss 1.0802 (0.9918)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (99.40476)
Epoch: [97][43/60]	Time 0.02345 (0.26989)	Data 0.00090 (0.18361)	Loss 0.9662 (0.9912)	Prec@1 62.50000 (72.09303)	Prec@5 100.00000 (99.41860)
Epoch: [97][44/60]	Time 0.02305 (0.26428)	Data 0.00067 (0.17945)	Loss 0.9193 (0.9896)	Prec@1 75.00000 (72.15910)	Prec@5 100.00000 (99.43182)
Epoch: [97][45/60]	Time 0.02300 (0.25892)	Data 0.00081 (0.17548)	Loss 0.7871 (0.9851)	Prec@1 87.50000 (72.50000)	Prec@5 100.00000 (99.44445)
Epoch: [97][46/60]	Time 0.02302 (0.25379)	Data 0.00044 (0.17167)	Loss 1.2477 (0.9908)	Prec@1 50.00000 (72.01087)	Prec@5 100.00000 (99.45652)
Epoch: [97][47/60]	Time 0.02221 (0.24886)	Data 0.00041 (0.16803)	Loss 0.8512 (0.9878)	Prec@1 75.00000 (72.07446)	Prec@5 87.50000 (99.20213)
Epoch: [97][48/60]	Time 0.02313 (0.24416)	Data 0.00045 (0.16454)	Loss 0.4112 (0.9758)	Prec@1 87.50000 (72.39584)	Prec@5 100.00000 (99.21875)
Epoch: [97][49/60]	Time 0.02246 (0.23964)	Data 0.00045 (0.16119)	Loss 0.3672 (0.9634)	Prec@1 87.50000 (72.70408)	Prec@5 100.00000 (99.23470)
Epoch: [97][50/60]	Time 0.02234 (0.23529)	Data 0.00044 (0.15797)	Loss 0.6938 (0.9580)	Prec@1 75.00000 (72.75000)	Prec@5 100.00000 (99.25000)
Epoch: [97][51/60]	Time 0.02235 (0.23112)	Data 0.00043 (0.15489)	Loss 0.3260 (0.9456)	Prec@1 75.00000 (72.79412)	Prec@5 100.00000 (99.26471)
Epoch: [97][52/60]	Time 0.02260 (0.22711)	Data 0.00047 (0.15192)	Loss 0.8788 (0.9443)	Prec@1 25.00000 (71.87500)	Prec@5 100.00000 (99.27885)
Epoch: [97][53/60]	Time 0.02276 (0.22325)	Data 0.00047 (0.14906)	Loss 0.7071 (0.9398)	Prec@1 75.00000 (71.93396)	Prec@5 100.00000 (99.29246)
Epoch: [97][54/60]	Time 0.02222 (0.21953)	Data 0.00044 (0.14631)	Loss 0.8753 (0.9386)	Prec@1 75.00000 (71.99074)	Prec@5 100.00000 (99.30556)
Epoch: [97][55/60]	Time 0.02241 (0.21594)	Data 0.00048 (0.14365)	Loss 1.0802 (0.9412)	Prec@1 62.50000 (71.81818)	Prec@5 87.50000 (99.09090)
Epoch: [97][56/60]	Time 0.02220 (0.21248)	Data 0.00046 (0.14110)	Loss 0.7663 (0.9381)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (99.10715)
Epoch: [97][57/60]	Time 0.02257 (0.20915)	Data 0.00043 (0.13863)	Loss 1.4637 (0.9473)	Prec@1 62.50000 (71.71053)	Prec@5 100.00000 (99.12281)
Epoch: [97][58/60]	Time 0.02252 (0.20593)	Data 0.00041 (0.13625)	Loss 0.7434 (0.9438)	Prec@1 75.00000 (71.76724)	Prec@5 100.00000 (99.13793)
Epoch: [97][59/60]	Time 0.02224 (0.20282)	Data 0.00051 (0.13395)	Loss 0.8169 (0.9417)	Prec@1 75.00000 (71.82204)	Prec@5 100.00000 (99.15254)
Epoch: [97][60/60]	Time 0.02257 (0.19982)	Data 0.00046 (0.13172)	Loss 0.5600 (0.9353)	Prec@1 87.50000 (72.08334)	Prec@5 100.00000 (99.16667)
train at epoch 98
train at epoch 98
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [98][0/272]	 lr: 0.00000	Time 4.627 (4.627)	Data 3.866 (3.866)	Loss 0.0113 (0.0113)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [98][10/272]	 lr: 0.00000	Time 0.384 (1.281)	Data 0.130 (0.646)	Loss 0.0137 (0.0165)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [98][20/272]	 lr: 0.00000	Time 0.505 (0.877)	Data 0.122 (0.403)	Loss 0.0074 (0.0154)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [98][30/272]	 lr: 0.00000	Time 0.483 (0.735)	Data 0.150 (0.317)	Loss 0.0209 (0.0149)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [98][40/272]	 lr: 0.00000	Time 0.352 (0.662)	Data 0.129 (0.271)	Loss 0.1325 (0.0184)	Prec@1 96.87500 (99.84756)	Prec@5 100.00000 (100.00000)
Epoch: [98][50/272]	 lr: 0.00000	Time 0.448 (0.615)	Data 0.122 (0.244)	Loss 0.0143 (0.0165)	Prec@1 100.00000 (99.87746)	Prec@5 100.00000 (100.00000)
Epoch: [98][60/272]	 lr: 0.00000	Time 0.514 (0.589)	Data 0.127 (0.225)	Loss 0.0179 (0.0159)	Prec@1 100.00000 (99.89754)	Prec@5 100.00000 (99.99999)
Epoch: [98][70/272]	 lr: 0.00000	Time 0.431 (0.570)	Data 0.121 (0.212)	Loss 0.0110 (0.0158)	Prec@1 100.00000 (99.91197)	Prec@5 100.00000 (100.00000)
Epoch: [98][80/272]	 lr: 0.00000	Time 0.420 (0.554)	Data 0.126 (0.201)	Loss 0.0106 (0.0162)	Prec@1 100.00000 (99.92284)	Prec@5 100.00000 (100.00000)
Epoch: [98][90/272]	 lr: 0.00000	Time 0.398 (0.543)	Data 0.150 (0.193)	Loss 0.0115 (0.0156)	Prec@1 100.00000 (99.93132)	Prec@5 100.00000 (100.00000)
Epoch: [98][100/272]	 lr: 0.00000	Time 0.473 (0.534)	Data 0.142 (0.187)	Loss 0.0204 (0.0151)	Prec@1 100.00000 (99.93812)	Prec@5 100.00000 (100.00000)
Epoch: [98][110/272]	 lr: 0.00000	Time 0.481 (0.527)	Data 0.109 (0.181)	Loss 0.0094 (0.0148)	Prec@1 100.00000 (99.94370)	Prec@5 100.00000 (100.00000)
Epoch: [98][120/272]	 lr: 0.00000	Time 0.467 (0.520)	Data 0.120 (0.177)	Loss 0.0400 (0.0174)	Prec@1 100.00000 (99.87086)	Prec@5 100.00000 (99.99999)
Epoch: [98][130/272]	 lr: 0.00000	Time 0.421 (0.515)	Data 0.131 (0.172)	Loss 0.0142 (0.0174)	Prec@1 100.00000 (99.88072)	Prec@5 100.00000 (100.00000)
Epoch: [98][140/272]	 lr: 0.00000	Time 0.497 (0.510)	Data 0.145 (0.170)	Loss 0.0128 (0.0183)	Prec@1 100.00000 (99.86702)	Prec@5 100.00000 (100.00000)
Epoch: [98][150/272]	 lr: 0.00000	Time 0.480 (0.506)	Data 0.124 (0.167)	Loss 0.0302 (0.0181)	Prec@1 100.00000 (99.87582)	Prec@5 100.00000 (100.00000)
Epoch: [98][160/272]	 lr: 0.00000	Time 0.510 (0.503)	Data 0.126 (0.164)	Loss 0.0261 (0.0181)	Prec@1 100.00000 (99.86414)	Prec@5 100.00000 (100.00000)
Epoch: [98][170/272]	 lr: 0.00000	Time 0.488 (0.499)	Data 0.126 (0.162)	Loss 0.0544 (0.0182)	Prec@1 100.00000 (99.87208)	Prec@5 100.00000 (100.00000)
Epoch: [98][180/272]	 lr: 0.00000	Time 0.460 (0.497)	Data 0.135 (0.160)	Loss 0.0092 (0.0180)	Prec@1 100.00000 (99.87915)	Prec@5 100.00000 (100.00001)
Epoch: [98][190/272]	 lr: 0.00000	Time 0.475 (0.493)	Data 0.129 (0.158)	Loss 0.0075 (0.0176)	Prec@1 100.00000 (99.88548)	Prec@5 100.00000 (100.00000)
Epoch: [98][200/272]	 lr: 0.00000	Time 0.515 (0.491)	Data 0.134 (0.157)	Loss 0.0062 (0.0173)	Prec@1 100.00000 (99.89117)	Prec@5 100.00000 (100.00000)
Epoch: [98][210/272]	 lr: 0.00000	Time 0.395 (0.489)	Data 0.129 (0.156)	Loss 0.0234 (0.0171)	Prec@1 100.00000 (99.89633)	Prec@5 100.00000 (100.00000)
Epoch: [98][220/272]	 lr: 0.00000	Time 0.394 (0.488)	Data 0.107 (0.154)	Loss 0.0059 (0.0169)	Prec@1 100.00000 (99.90102)	Prec@5 100.00000 (100.00001)
Epoch: [98][230/272]	 lr: 0.00000	Time 0.424 (0.485)	Data 0.112 (0.153)	Loss 0.0373 (0.0171)	Prec@1 96.87500 (99.87825)	Prec@5 100.00000 (100.00000)
Epoch: [98][240/272]	 lr: 0.00000	Time 0.264 (0.484)	Data 0.129 (0.152)	Loss 0.0143 (0.0174)	Prec@1 100.00000 (99.87034)	Prec@5 100.00000 (100.00001)
Epoch: [98][250/272]	 lr: 0.00000	Time 0.302 (0.475)	Data 0.123 (0.151)	Loss 0.0182 (0.0175)	Prec@1 100.00000 (99.87550)	Prec@5 100.00000 (100.00000)
Epoch: [98][260/272]	 lr: 0.00000	Time 0.239 (0.466)	Data 0.129 (0.151)	Loss 0.0126 (0.0172)	Prec@1 100.00000 (99.88026)	Prec@5 100.00000 (100.00000)
Epoch: [98][270/272]	 lr: 0.00000	Time 0.238 (0.457)	Data 0.128 (0.150)	Loss 0.0137 (0.0177)	Prec@1 100.00000 (99.85009)	Prec@5 100.00000 (100.00000)
validation at epoch 98
validation at epoch 98
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [98][1/60]	Time 6.92418 (6.92418)	Data 6.86220 (6.86220)	Loss 0.4677 (0.4677)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [98][2/60]	Time 0.15044 (3.53731)	Data 0.10586 (3.48403)	Loss 0.5886 (0.5281)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [98][3/60]	Time 0.18290 (2.41917)	Data 0.00314 (2.32373)	Loss 1.3395 (0.7986)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [98][4/60]	Time 0.23165 (1.87229)	Data 0.07492 (1.76153)	Loss 0.2815 (0.6693)	Prec@1 87.50000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [98][5/60]	Time 0.16000 (1.52983)	Data 0.00200 (1.40962)	Loss 0.2718 (0.5898)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [98][6/60]	Time 0.17656 (1.30429)	Data 0.00899 (1.17619)	Loss 0.3804 (0.5549)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [98][7/60]	Time 0.13420 (1.13713)	Data 0.00862 (1.00939)	Loss 1.6042 (0.7048)	Prec@1 62.50000 (80.35715)	Prec@5 100.00000 (100.00001)
Epoch: [98][8/60]	Time 0.21123 (1.02139)	Data 0.00224 (0.88350)	Loss 1.4559 (0.7987)	Prec@1 62.50000 (78.12500)	Prec@5 87.50000 (98.43750)
Epoch: [98][9/60]	Time 0.17651 (0.92752)	Data 0.00855 (0.78628)	Loss 0.6883 (0.7864)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (98.61111)
Epoch: [98][10/60]	Time 0.16900 (0.85167)	Data 0.00049 (0.70770)	Loss 0.6817 (0.7760)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (98.75000)
Epoch: [98][11/60]	Time 0.06094 (0.77978)	Data 0.00917 (0.64420)	Loss 0.6106 (0.7609)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (98.86364)
Epoch: [98][12/60]	Time 0.13893 (0.72638)	Data 0.03329 (0.59329)	Loss 1.7552 (0.8438)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (98.95834)
Epoch: [98][13/60]	Time 0.18757 (0.68493)	Data 0.06156 (0.55239)	Loss 2.4172 (0.9648)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (99.03847)
Epoch: [98][14/60]	Time 0.19217 (0.64973)	Data 0.01521 (0.51402)	Loss 0.0457 (0.8992)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (99.10715)
Epoch: [98][15/60]	Time 0.07797 (0.61162)	Data 0.01824 (0.48097)	Loss 1.5535 (0.9428)	Prec@1 50.00000 (75.83334)	Prec@5 100.00000 (99.16667)
Epoch: [98][16/60]	Time 0.06294 (0.57732)	Data 0.03327 (0.45298)	Loss 0.7686 (0.9319)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (99.21875)
Epoch: [98][17/60]	Time 0.18999 (0.55454)	Data 0.04487 (0.42898)	Loss 0.3526 (0.8978)	Prec@1 87.50000 (76.47059)	Prec@5 100.00000 (99.26471)
Epoch: [98][18/60]	Time 0.07873 (0.52811)	Data 0.00065 (0.40518)	Loss 2.0575 (0.9622)	Prec@1 75.00000 (76.38889)	Prec@5 100.00000 (99.30556)
Epoch: [98][19/60]	Time 0.15413 (0.50842)	Data 0.07767 (0.38794)	Loss 0.1083 (0.9173)	Prec@1 100.00000 (77.63158)	Prec@5 100.00000 (99.34211)
Epoch: [98][20/60]	Time 0.09744 (0.48787)	Data 0.00077 (0.36859)	Loss 1.8375 (0.9633)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (99.37500)
Epoch: [98][21/60]	Time 0.14195 (0.47140)	Data 0.00673 (0.35135)	Loss 0.5058 (0.9415)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (99.40476)
Epoch: [98][22/60]	Time 0.15176 (0.45687)	Data 0.00703 (0.33570)	Loss 0.3447 (0.9144)	Prec@1 87.50000 (77.84091)	Prec@5 100.00000 (99.43182)
Epoch: [98][23/60]	Time 0.16056 (0.44399)	Data 0.00579 (0.32136)	Loss 0.8560 (0.9119)	Prec@1 62.50000 (77.17391)	Prec@5 100.00000 (99.45652)
Epoch: [98][24/60]	Time 0.17724 (0.43287)	Data 0.06604 (0.31072)	Loss 0.6937 (0.9028)	Prec@1 62.50000 (76.56250)	Prec@5 100.00000 (99.47917)
Epoch: [98][25/60]	Time 0.08416 (0.41893)	Data 0.01444 (0.29887)	Loss 0.3885 (0.8822)	Prec@1 87.50000 (77.00000)	Prec@5 100.00000 (99.50000)
Epoch: [98][26/60]	Time 0.25980 (0.41281)	Data 0.08022 (0.29046)	Loss 0.0837 (0.8515)	Prec@1 100.00000 (77.88462)	Prec@5 100.00000 (99.51923)
Epoch: [98][27/60]	Time 0.04775 (0.39928)	Data 0.00057 (0.27972)	Loss 0.4450 (0.8364)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (99.53704)
Epoch: [98][28/60]	Time 0.07090 (0.38756)	Data 0.00067 (0.26976)	Loss 0.6050 (0.8282)	Prec@1 87.50000 (78.12500)	Prec@5 100.00000 (99.55357)
Epoch: [98][29/60]	Time 0.09303 (0.37740)	Data 0.00058 (0.26047)	Loss 0.4603 (0.8155)	Prec@1 87.50000 (78.44827)	Prec@5 100.00000 (99.56896)
Epoch: [98][30/60]	Time 0.09957 (0.36814)	Data 0.00590 (0.25199)	Loss 1.5045 (0.8384)	Prec@1 62.50000 (77.91667)	Prec@5 100.00000 (99.58334)
Epoch: [98][31/60]	Time 0.09866 (0.35945)	Data 0.02542 (0.24468)	Loss 2.4529 (0.8905)	Prec@1 12.50000 (75.80645)	Prec@5 87.50000 (99.19354)
Epoch: [98][32/60]	Time 0.09883 (0.35130)	Data 0.00049 (0.23705)	Loss 0.4576 (0.8770)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (99.21875)
Epoch: [98][33/60]	Time 0.03619 (0.34175)	Data 0.00039 (0.22988)	Loss 0.1299 (0.8544)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (99.24242)
Epoch: [98][34/60]	Time 0.03689 (0.33279)	Data 0.00044 (0.22313)	Loss 1.0287 (0.8595)	Prec@1 75.00000 (76.10294)	Prec@5 100.00000 (99.26471)
Epoch: [98][35/60]	Time 0.03025 (0.32414)	Data 0.00078 (0.21678)	Loss 1.4839 (0.8773)	Prec@1 75.00000 (76.07143)	Prec@5 87.50000 (98.92857)
Epoch: [98][36/60]	Time 0.03360 (0.31607)	Data 0.00042 (0.21077)	Loss 0.8434 (0.8764)	Prec@1 62.50000 (75.69444)	Prec@5 100.00000 (98.95834)
Epoch: [98][37/60]	Time 0.02468 (0.30820)	Data 0.00069 (0.20509)	Loss 1.2126 (0.8855)	Prec@1 62.50000 (75.33784)	Prec@5 100.00000 (98.98649)
Epoch: [98][38/60]	Time 0.02289 (0.30069)	Data 0.00096 (0.19972)	Loss 2.0949 (0.9173)	Prec@1 50.00000 (74.67105)	Prec@5 100.00000 (99.01316)
Epoch: [98][39/60]	Time 0.02287 (0.29357)	Data 0.00103 (0.19462)	Loss 0.1868 (0.8986)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.03846)
Epoch: [98][40/60]	Time 0.02311 (0.28680)	Data 0.00094 (0.18978)	Loss 0.3840 (0.8857)	Prec@1 87.50000 (75.31250)	Prec@5 100.00000 (99.06250)
Epoch: [98][41/60]	Time 0.02352 (0.28038)	Data 0.00087 (0.18517)	Loss 0.3096 (0.8716)	Prec@1 87.50000 (75.60976)	Prec@5 100.00000 (99.08537)
Epoch: [98][42/60]	Time 0.02259 (0.27425)	Data 0.00069 (0.18078)	Loss 1.1070 (0.8773)	Prec@1 75.00000 (75.59524)	Prec@5 100.00000 (99.10715)
Epoch: [98][43/60]	Time 0.02292 (0.26840)	Data 0.00090 (0.17660)	Loss 0.5090 (0.8687)	Prec@1 62.50000 (75.29070)	Prec@5 100.00000 (99.12791)
Epoch: [98][44/60]	Time 0.02280 (0.26282)	Data 0.00089 (0.17260)	Loss 0.6351 (0.8634)	Prec@1 75.00000 (75.28410)	Prec@5 100.00000 (99.14773)
Epoch: [98][45/60]	Time 0.02318 (0.25749)	Data 0.00095 (0.16879)	Loss 0.7489 (0.8608)	Prec@1 87.50000 (75.55556)	Prec@5 100.00000 (99.16667)
Epoch: [98][46/60]	Time 0.02435 (0.25242)	Data 0.00042 (0.16513)	Loss 1.7137 (0.8794)	Prec@1 50.00000 (75.00000)	Prec@5 100.00000 (99.18478)
Epoch: [98][47/60]	Time 0.02238 (0.24753)	Data 0.00042 (0.16163)	Loss 1.0501 (0.8830)	Prec@1 75.00000 (75.00000)	Prec@5 87.50000 (98.93616)
Epoch: [98][48/60]	Time 0.02257 (0.24284)	Data 0.00044 (0.15827)	Loss 0.3710 (0.8723)	Prec@1 87.50000 (75.26042)	Prec@5 100.00000 (98.95834)
Epoch: [98][49/60]	Time 0.02234 (0.23834)	Data 0.00046 (0.15505)	Loss 0.6427 (0.8677)	Prec@1 87.50000 (75.51020)	Prec@5 100.00000 (98.97959)
Epoch: [98][50/60]	Time 0.02271 (0.23403)	Data 0.00046 (0.15195)	Loss 0.7410 (0.8651)	Prec@1 75.00000 (75.50000)	Prec@5 100.00000 (99.00000)
Epoch: [98][51/60]	Time 0.02322 (0.22990)	Data 0.00053 (0.14899)	Loss 0.4492 (0.8570)	Prec@1 75.00000 (75.49020)	Prec@5 100.00000 (99.01961)
Epoch: [98][52/60]	Time 0.02251 (0.22591)	Data 0.00046 (0.14613)	Loss 0.8869 (0.8575)	Prec@1 62.50000 (75.24039)	Prec@5 87.50000 (98.79808)
Epoch: [98][53/60]	Time 0.02250 (0.22207)	Data 0.00049 (0.14338)	Loss 0.7415 (0.8554)	Prec@1 75.00000 (75.23585)	Prec@5 100.00000 (98.82076)
Epoch: [98][54/60]	Time 0.02248 (0.21837)	Data 0.00045 (0.14073)	Loss 0.6999 (0.8525)	Prec@1 75.00000 (75.23148)	Prec@5 100.00000 (98.84259)
Epoch: [98][55/60]	Time 0.02684 (0.21489)	Data 0.00047 (0.13818)	Loss 1.1175 (0.8573)	Prec@1 75.00000 (75.22727)	Prec@5 87.50000 (98.63636)
Epoch: [98][56/60]	Time 0.02214 (0.21145)	Data 0.00059 (0.13573)	Loss 0.9424 (0.8588)	Prec@1 87.50000 (75.44643)	Prec@5 100.00000 (98.66072)
Epoch: [98][57/60]	Time 0.02249 (0.20814)	Data 0.00062 (0.13336)	Loss 1.6821 (0.8733)	Prec@1 62.50000 (75.21930)	Prec@5 87.50000 (98.46491)
Epoch: [98][58/60]	Time 0.02238 (0.20493)	Data 0.00046 (0.13107)	Loss 0.8865 (0.8735)	Prec@1 87.50000 (75.43104)	Prec@5 100.00000 (98.49138)
Epoch: [98][59/60]	Time 0.02282 (0.20185)	Data 0.00046 (0.12885)	Loss 0.5898 (0.8687)	Prec@1 87.50000 (75.63559)	Prec@5 100.00000 (98.51695)
Epoch: [98][60/60]	Time 0.02317 (0.19887)	Data 0.00060 (0.12671)	Loss 0.3594 (0.8602)	Prec@1 87.50000 (75.83334)	Prec@5 100.00000 (98.54167)
train at epoch 99
train at epoch 99
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [99][0/272]	 lr: 0.00000	Time 10.271 (10.271)	Data 9.367 (9.367)	Loss 0.0096 (0.0096)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][10/272]	 lr: 0.00000	Time 0.440 (1.352)	Data 0.115 (0.965)	Loss 0.0097 (0.0217)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][20/272]	 lr: 0.00000	Time 0.452 (0.912)	Data 0.117 (0.565)	Loss 0.0148 (0.0175)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][30/272]	 lr: 0.00000	Time 0.353 (0.749)	Data 0.164 (0.426)	Loss 0.0106 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][40/272]	 lr: 0.00000	Time 0.386 (0.675)	Data 0.136 (0.353)	Loss 0.0149 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][50/272]	 lr: 0.00000	Time 0.482 (0.631)	Data 0.126 (0.310)	Loss 0.0312 (0.0148)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][60/272]	 lr: 0.00000	Time 0.437 (0.598)	Data 0.127 (0.280)	Loss 0.0090 (0.0146)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [99][70/272]	 lr: 0.00000	Time 0.377 (0.578)	Data 0.124 (0.258)	Loss 0.0085 (0.0152)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][80/272]	 lr: 0.00000	Time 0.361 (0.561)	Data 0.129 (0.242)	Loss 0.0381 (0.0157)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][90/272]	 lr: 0.00000	Time 0.418 (0.545)	Data 0.141 (0.229)	Loss 0.0195 (0.0160)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][100/272]	 lr: 0.00000	Time 0.388 (0.537)	Data 0.129 (0.218)	Loss 0.0110 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][110/272]	 lr: 0.00000	Time 0.422 (0.528)	Data 0.127 (0.210)	Loss 0.0129 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][120/272]	 lr: 0.00000	Time 0.386 (0.522)	Data 0.127 (0.203)	Loss 0.0114 (0.0163)	Prec@1 100.00000 (99.99999)	Prec@5 100.00000 (99.99999)
Epoch: [99][130/272]	 lr: 0.00000	Time 0.496 (0.516)	Data 0.127 (0.197)	Loss 0.0092 (0.0164)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][140/272]	 lr: 0.00000	Time 0.514 (0.512)	Data 0.125 (0.192)	Loss 0.0406 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][150/272]	 lr: 0.00000	Time 0.414 (0.508)	Data 0.131 (0.187)	Loss 0.0079 (0.0166)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][160/272]	 lr: 0.00000	Time 0.447 (0.504)	Data 0.137 (0.184)	Loss 0.0035 (0.0163)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][170/272]	 lr: 0.00000	Time 0.392 (0.500)	Data 0.141 (0.180)	Loss 0.0082 (0.0162)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][180/272]	 lr: 0.00000	Time 0.547 (0.499)	Data 0.124 (0.177)	Loss 0.0084 (0.0161)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [99][190/272]	 lr: 0.00000	Time 0.481 (0.496)	Data 0.164 (0.175)	Loss 0.0085 (0.0159)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][200/272]	 lr: 0.00000	Time 0.320 (0.493)	Data 0.111 (0.172)	Loss 0.0062 (0.0161)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][210/272]	 lr: 0.00000	Time 0.381 (0.490)	Data 0.115 (0.170)	Loss 0.0107 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][220/272]	 lr: 0.00000	Time 0.415 (0.488)	Data 0.126 (0.168)	Loss 0.0165 (0.0156)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [99][230/272]	 lr: 0.00000	Time 0.468 (0.486)	Data 0.128 (0.166)	Loss 0.0114 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][240/272]	 lr: 0.00000	Time 0.272 (0.484)	Data 0.128 (0.165)	Loss 0.0258 (0.0157)	Prec@1 100.00000 (100.00001)	Prec@5 100.00000 (100.00001)
Epoch: [99][250/272]	 lr: 0.00000	Time 0.238 (0.474)	Data 0.128 (0.163)	Loss 0.0111 (0.0158)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][260/272]	 lr: 0.00000	Time 0.240 (0.465)	Data 0.128 (0.162)	Loss 0.0130 (0.0155)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][270/272]	 lr: 0.00000	Time 0.242 (0.457)	Data 0.128 (0.161)	Loss 0.0085 (0.0156)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
validation at epoch 99
validation at epoch 99
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [99][1/60]	Time 5.69418 (5.69418)	Data 5.55103 (5.55103)	Loss 0.4010 (0.4010)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [99][2/60]	Time 0.28406 (2.98912)	Data 0.04622 (2.79862)	Loss 0.4936 (0.4473)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [99][3/60]	Time 1.54722 (2.50849)	Data 1.47764 (2.35830)	Loss 1.0944 (0.6630)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [99][4/60]	Time 0.10690 (1.90809)	Data 0.00972 (1.77115)	Loss 0.2058 (0.5487)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [99][5/60]	Time 0.05935 (1.53834)	Data 0.00754 (1.41843)	Loss 0.1938 (0.4777)	Prec@1 87.50000 (82.50000)	Prec@5 100.00000 (100.00000)
Epoch: [99][6/60]	Time 0.13826 (1.30499)	Data 0.00076 (1.18215)	Loss 0.3848 (0.4622)	Prec@1 62.50000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [99][7/60]	Time 0.12307 (1.13615)	Data 0.00323 (1.01373)	Loss 1.1173 (0.5558)	Prec@1 75.00000 (78.57143)	Prec@5 100.00000 (100.00001)
Epoch: [99][8/60]	Time 0.17130 (1.01554)	Data 0.01992 (0.88951)	Loss 0.9481 (0.6048)	Prec@1 75.00000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [99][9/60]	Time 0.11509 (0.91549)	Data 0.01888 (0.79277)	Loss 0.5351 (0.5971)	Prec@1 87.50000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [99][10/60]	Time 0.16793 (0.84074)	Data 0.05657 (0.71915)	Loss 0.5531 (0.5927)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [99][11/60]	Time 0.10086 (0.77347)	Data 0.00579 (0.65430)	Loss 0.5694 (0.5906)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [99][12/60]	Time 0.21087 (0.72659)	Data 0.12047 (0.60981)	Loss 0.9688 (0.6221)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [99][13/60]	Time 0.08837 (0.67750)	Data 0.00271 (0.56311)	Loss 1.8128 (0.7137)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [99][14/60]	Time 0.07863 (0.63472)	Data 0.01114 (0.52369)	Loss 0.0646 (0.6673)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [99][15/60]	Time 0.27739 (0.61090)	Data 0.07753 (0.49394)	Loss 1.0189 (0.6908)	Prec@1 75.00000 (77.50001)	Prec@5 100.00000 (100.00001)
Epoch: [99][16/60]	Time 0.21909 (0.58641)	Data 0.06030 (0.46684)	Loss 1.0769 (0.7149)	Prec@1 75.00000 (77.34375)	Prec@5 100.00000 (100.00000)
Epoch: [99][17/60]	Time 0.23115 (0.56551)	Data 0.05895 (0.44285)	Loss 0.3998 (0.6964)	Prec@1 87.50000 (77.94118)	Prec@5 100.00000 (100.00000)
Epoch: [99][18/60]	Time 0.21762 (0.54619)	Data 0.11551 (0.42466)	Loss 2.2840 (0.7846)	Prec@1 75.00000 (77.77778)	Prec@5 100.00000 (100.00000)
Epoch: [99][19/60]	Time 0.09522 (0.52245)	Data 0.00053 (0.40234)	Loss 0.1287 (0.7501)	Prec@1 100.00000 (78.94737)	Prec@5 100.00000 (100.00000)
Epoch: [99][20/60]	Time 0.11929 (0.50229)	Data 0.00719 (0.38258)	Loss 2.1773 (0.8214)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [99][21/60]	Time 0.09740 (0.48301)	Data 0.00565 (0.36463)	Loss 0.6104 (0.8114)	Prec@1 62.50000 (77.38095)	Prec@5 100.00000 (100.00000)
Epoch: [99][22/60]	Time 0.05293 (0.46346)	Data 0.00065 (0.34809)	Loss 0.6604 (0.8045)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [99][23/60]	Time 0.17284 (0.45083)	Data 0.00674 (0.33325)	Loss 0.9394 (0.8104)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (100.00000)
Epoch: [99][24/60]	Time 0.08932 (0.43576)	Data 0.01627 (0.32004)	Loss 0.9298 (0.8153)	Prec@1 50.00000 (75.52084)	Prec@5 100.00000 (100.00000)
Epoch: [99][25/60]	Time 0.12633 (0.42339)	Data 0.01305 (0.30776)	Loss 0.4899 (0.8023)	Prec@1 87.50000 (76.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][26/60]	Time 0.07854 (0.41012)	Data 0.00975 (0.29630)	Loss 0.0577 (0.7737)	Prec@1 100.00000 (76.92308)	Prec@5 100.00000 (100.00000)
Epoch: [99][27/60]	Time 0.18156 (0.40166)	Data 0.00276 (0.28543)	Loss 0.8779 (0.7775)	Prec@1 50.00000 (75.92593)	Prec@5 100.00000 (100.00000)
Epoch: [99][28/60]	Time 0.11597 (0.39146)	Data 0.00476 (0.27540)	Loss 0.4138 (0.7646)	Prec@1 87.50000 (76.33929)	Prec@5 100.00000 (100.00001)
Epoch: [99][29/60]	Time 0.20560 (0.38505)	Data 0.00041 (0.26592)	Loss 0.5770 (0.7581)	Prec@1 75.00000 (76.29311)	Prec@5 100.00000 (100.00000)
Epoch: [99][30/60]	Time 0.10574 (0.37574)	Data 0.00052 (0.25707)	Loss 1.6622 (0.7882)	Prec@1 62.50000 (75.83334)	Prec@5 100.00000 (100.00001)
Epoch: [99][31/60]	Time 0.09154 (0.36657)	Data 0.00621 (0.24898)	Loss 2.1054 (0.8307)	Prec@1 37.50000 (74.59677)	Prec@5 100.00000 (100.00000)
Epoch: [99][32/60]	Time 0.09753 (0.35816)	Data 0.00974 (0.24150)	Loss 0.6331 (0.8245)	Prec@1 75.00000 (74.60938)	Prec@5 100.00000 (100.00000)
Epoch: [99][33/60]	Time 0.04560 (0.34869)	Data 0.00039 (0.23420)	Loss 0.0788 (0.8019)	Prec@1 100.00000 (75.37879)	Prec@5 100.00000 (100.00000)
Epoch: [99][34/60]	Time 0.04075 (0.33963)	Data 0.00472 (0.22745)	Loss 1.2486 (0.8151)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][35/60]	Time 0.04525 (0.33122)	Data 0.00068 (0.22097)	Loss 1.3062 (0.8291)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][36/60]	Time 0.03625 (0.32303)	Data 0.00042 (0.21484)	Loss 0.8418 (0.8295)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][37/60]	Time 0.02985 (0.31510)	Data 0.00123 (0.20907)	Loss 1.4749 (0.8469)	Prec@1 62.50000 (74.66216)	Prec@5 100.00000 (100.00000)
Epoch: [99][38/60]	Time 0.03362 (0.30770)	Data 0.00255 (0.20363)	Loss 2.2400 (0.8836)	Prec@1 50.00000 (74.01316)	Prec@5 100.00000 (100.00000)
Epoch: [99][39/60]	Time 0.02546 (0.30046)	Data 0.00050 (0.19843)	Loss 0.1090 (0.8637)	Prec@1 100.00000 (74.67949)	Prec@5 100.00000 (100.00000)
Epoch: [99][40/60]	Time 0.02919 (0.29368)	Data 0.00058 (0.19348)	Loss 0.2066 (0.8473)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][41/60]	Time 0.03170 (0.28729)	Data 0.00042 (0.18877)	Loss 0.5388 (0.8398)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][42/60]	Time 0.03302 (0.28123)	Data 0.00042 (0.18429)	Loss 1.1661 (0.8475)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][43/60]	Time 0.03837 (0.27559)	Data 0.00251 (0.18006)	Loss 0.5600 (0.8408)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][44/60]	Time 0.02889 (0.26998)	Data 0.00039 (0.17598)	Loss 0.7240 (0.8382)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [99][45/60]	Time 0.02872 (0.26462)	Data 0.00040 (0.17207)	Loss 0.7705 (0.8367)	Prec@1 87.50000 (75.27778)	Prec@5 100.00000 (100.00000)
Epoch: [99][46/60]	Time 0.03256 (0.25957)	Data 0.00041 (0.16834)	Loss 0.9287 (0.8387)	Prec@1 50.00000 (74.72826)	Prec@5 100.00000 (100.00000)
Epoch: [99][47/60]	Time 0.02818 (0.25465)	Data 0.00079 (0.16478)	Loss 1.1216 (0.8447)	Prec@1 75.00000 (74.73404)	Prec@5 87.50000 (99.73404)
Epoch: [99][48/60]	Time 0.02673 (0.24990)	Data 0.00048 (0.16135)	Loss 0.4443 (0.8364)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.73959)
Epoch: [99][49/60]	Time 0.02667 (0.24535)	Data 0.00045 (0.15807)	Loss 0.1998 (0.8234)	Prec@1 87.50000 (75.25510)	Prec@5 100.00000 (99.74490)
Epoch: [99][50/60]	Time 0.02311 (0.24090)	Data 0.00047 (0.15492)	Loss 0.7931 (0.8228)	Prec@1 75.00000 (75.25000)	Prec@5 100.00000 (99.75000)
Epoch: [99][51/60]	Time 0.02364 (0.23664)	Data 0.00045 (0.15189)	Loss 0.3792 (0.8141)	Prec@1 75.00000 (75.24510)	Prec@5 100.00000 (99.75491)
Epoch: [99][52/60]	Time 0.02268 (0.23253)	Data 0.00044 (0.14898)	Loss 0.9879 (0.8174)	Prec@1 50.00000 (74.75962)	Prec@5 87.50000 (99.51923)
Epoch: [99][53/60]	Time 0.02289 (0.22857)	Data 0.00049 (0.14618)	Loss 0.6062 (0.8134)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.52831)
Epoch: [99][54/60]	Time 0.02922 (0.22488)	Data 0.00048 (0.14348)	Loss 0.9997 (0.8169)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.53704)
Epoch: [99][55/60]	Time 0.02411 (0.22123)	Data 0.00086 (0.14088)	Loss 1.4032 (0.8275)	Prec@1 62.50000 (74.77273)	Prec@5 87.50000 (99.31818)
Epoch: [99][56/60]	Time 0.02297 (0.21769)	Data 0.00049 (0.13838)	Loss 0.7229 (0.8257)	Prec@1 62.50000 (74.55357)	Prec@5 100.00000 (99.33036)
Epoch: [99][57/60]	Time 0.02292 (0.21427)	Data 0.00043 (0.13596)	Loss 1.3904 (0.8356)	Prec@1 62.50000 (74.34210)	Prec@5 87.50000 (99.12281)
Epoch: [99][58/60]	Time 0.02266 (0.21097)	Data 0.00053 (0.13362)	Loss 0.6841 (0.8330)	Prec@1 62.50000 (74.13793)	Prec@5 100.00000 (99.13793)
Epoch: [99][59/60]	Time 0.02644 (0.20784)	Data 0.00063 (0.13137)	Loss 0.8387 (0.8331)	Prec@1 87.50000 (74.36441)	Prec@5 100.00000 (99.15254)
Epoch: [99][60/60]	Time 0.02311 (0.20476)	Data 0.00042 (0.12919)	Loss 0.6044 (0.8292)	Prec@1 87.50000 (74.58334)	Prec@5 100.00000 (99.16667)
train at epoch 100
train at epoch 100
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [100][0/272]	 lr: 0.00000	Time 7.979 (7.979)	Data 6.882 (6.882)	Loss 0.0182 (0.0182)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][10/272]	 lr: 0.00000	Time 0.414 (1.266)	Data 0.129 (0.744)	Loss 0.0563 (0.0181)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][20/272]	 lr: 0.00000	Time 0.450 (0.867)	Data 0.136 (0.451)	Loss 0.0068 (0.0150)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][30/272]	 lr: 0.00000	Time 0.416 (0.734)	Data 0.122 (0.346)	Loss 0.0154 (0.0142)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][40/272]	 lr: 0.00000	Time 0.360 (0.661)	Data 0.127 (0.293)	Loss 0.0148 (0.0143)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][50/272]	 lr: 0.00000	Time 0.418 (0.620)	Data 0.128 (0.260)	Loss 0.0054 (0.0141)	Prec@1 100.00000 (100.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][60/272]	 lr: 0.00000	Time 0.429 (0.590)	Data 0.129 (0.239)	Loss 0.0919 (0.0168)	Prec@1 96.87500 (99.94877)	Prec@5 100.00000 (99.99999)
Epoch: [100][70/272]	 lr: 0.00000	Time 0.508 (0.572)	Data 0.119 (0.223)	Loss 0.0124 (0.0168)	Prec@1 100.00000 (99.95599)	Prec@5 100.00000 (100.00000)
Epoch: [100][80/272]	 lr: 0.00000	Time 0.454 (0.555)	Data 0.122 (0.210)	Loss 0.0333 (0.0165)	Prec@1 100.00000 (99.96142)	Prec@5 100.00000 (100.00000)
Epoch: [100][90/272]	 lr: 0.00000	Time 0.533 (0.545)	Data 0.143 (0.201)	Loss 0.0093 (0.0159)	Prec@1 100.00000 (99.96566)	Prec@5 100.00000 (100.00000)
Epoch: [100][100/272]	 lr: 0.00000	Time 0.395 (0.534)	Data 0.136 (0.193)	Loss 0.1419 (0.0169)	Prec@1 93.75000 (99.90717)	Prec@5 100.00000 (100.00000)
Epoch: [100][110/272]	 lr: 0.00000	Time 0.532 (0.529)	Data 0.116 (0.187)	Loss 0.0106 (0.0169)	Prec@1 100.00000 (99.91554)	Prec@5 100.00000 (100.00000)
Epoch: [100][120/272]	 lr: 0.00000	Time 0.424 (0.519)	Data 0.142 (0.182)	Loss 0.0055 (0.0165)	Prec@1 100.00000 (99.92252)	Prec@5 100.00000 (99.99999)
Epoch: [100][130/272]	 lr: 0.00000	Time 0.522 (0.515)	Data 0.128 (0.177)	Loss 0.0081 (0.0168)	Prec@1 100.00000 (99.92844)	Prec@5 100.00000 (100.00000)
Epoch: [100][140/272]	 lr: 0.00000	Time 0.494 (0.510)	Data 0.130 (0.174)	Loss 0.0224 (0.0170)	Prec@1 100.00000 (99.93351)	Prec@5 100.00000 (100.00000)
Epoch: [100][150/272]	 lr: 0.00000	Time 0.427 (0.504)	Data 0.142 (0.171)	Loss 0.0137 (0.0174)	Prec@1 100.00000 (99.89652)	Prec@5 100.00000 (100.00000)
Epoch: [100][160/272]	 lr: 0.00000	Time 0.484 (0.502)	Data 0.129 (0.168)	Loss 0.0258 (0.0171)	Prec@1 100.00000 (99.90295)	Prec@5 100.00000 (100.00000)
Epoch: [100][170/272]	 lr: 0.00000	Time 0.464 (0.497)	Data 0.119 (0.166)	Loss 0.0077 (0.0184)	Prec@1 100.00000 (99.83553)	Prec@5 100.00000 (100.00000)
Epoch: [100][180/272]	 lr: 0.00000	Time 0.370 (0.495)	Data 0.121 (0.164)	Loss 0.0094 (0.0181)	Prec@1 100.00000 (99.84462)	Prec@5 100.00000 (100.00001)
Epoch: [100][190/272]	 lr: 0.00000	Time 0.471 (0.493)	Data 0.120 (0.162)	Loss 0.0259 (0.0180)	Prec@1 100.00000 (99.85275)	Prec@5 100.00000 (100.00000)
Epoch: [100][200/272]	 lr: 0.00000	Time 0.442 (0.489)	Data 0.125 (0.160)	Loss 0.0286 (0.0177)	Prec@1 100.00000 (99.86007)	Prec@5 100.00000 (100.00000)
Epoch: [100][210/272]	 lr: 0.00000	Time 0.510 (0.488)	Data 0.128 (0.158)	Loss 0.0061 (0.0177)	Prec@1 100.00000 (99.86671)	Prec@5 100.00000 (100.00000)
Epoch: [100][220/272]	 lr: 0.00000	Time 0.501 (0.486)	Data 0.121 (0.157)	Loss 0.0074 (0.0174)	Prec@1 100.00000 (99.87274)	Prec@5 100.00000 (100.00001)
Epoch: [100][230/272]	 lr: 0.00000	Time 0.374 (0.484)	Data 0.129 (0.156)	Loss 0.0068 (0.0178)	Prec@1 100.00000 (99.87825)	Prec@5 100.00000 (100.00000)
Epoch: [100][240/272]	 lr: 0.00000	Time 0.360 (0.483)	Data 0.127 (0.154)	Loss 0.0093 (0.0176)	Prec@1 100.00000 (99.88330)	Prec@5 100.00000 (100.00001)
Epoch: [100][250/272]	 lr: 0.00000	Time 0.237 (0.473)	Data 0.128 (0.153)	Loss 0.0199 (0.0175)	Prec@1 100.00000 (99.88795)	Prec@5 100.00000 (100.00000)
Epoch: [100][260/272]	 lr: 0.00000	Time 0.237 (0.464)	Data 0.128 (0.152)	Loss 0.0093 (0.0173)	Prec@1 100.00000 (99.89224)	Prec@5 100.00000 (100.00000)
Epoch: [100][270/272]	 lr: 0.00000	Time 0.238 (0.456)	Data 0.129 (0.152)	Loss 0.0229 (0.0171)	Prec@1 100.00000 (99.89622)	Prec@5 100.00000 (100.00000)
validation at epoch 100
validation at epoch 100
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [100][1/60]	Time 4.64380 (4.64380)	Data 4.46234 (4.46234)	Loss 0.4127 (0.4127)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][2/60]	Time 3.15775 (3.90077)	Data 3.12365 (3.79300)	Loss 0.4551 (0.4339)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [100][3/60]	Time 0.10611 (2.63588)	Data 0.00061 (2.52887)	Loss 1.1945 (0.6874)	Prec@1 75.00000 (79.16667)	Prec@5 100.00000 (100.00000)
Epoch: [100][4/60]	Time 0.05723 (1.99122)	Data 0.01533 (1.90048)	Loss 0.1719 (0.5586)	Prec@1 100.00000 (84.37500)	Prec@5 100.00000 (100.00000)
Epoch: [100][5/60]	Time 0.12628 (1.61823)	Data 0.00081 (1.52055)	Loss 0.2817 (0.5032)	Prec@1 87.50000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][6/60]	Time 0.17036 (1.37692)	Data 0.01141 (1.26903)	Loss 0.3109 (0.4711)	Prec@1 87.50000 (85.41667)	Prec@5 100.00000 (100.00000)
Epoch: [100][7/60]	Time 0.16444 (1.20371)	Data 0.01765 (1.09026)	Loss 1.1601 (0.5696)	Prec@1 62.50000 (82.14286)	Prec@5 100.00000 (100.00001)
Epoch: [100][8/60]	Time 0.19902 (1.07812)	Data 0.05706 (0.96111)	Loss 0.9829 (0.6212)	Prec@1 62.50000 (79.68750)	Prec@5 100.00000 (100.00000)
Epoch: [100][9/60]	Time 0.09464 (0.96885)	Data 0.00063 (0.85439)	Loss 0.6422 (0.6236)	Prec@1 75.00000 (79.16666)	Prec@5 100.00000 (100.00000)
Epoch: [100][10/60]	Time 0.15451 (0.88741)	Data 0.03185 (0.77213)	Loss 0.4751 (0.6087)	Prec@1 75.00000 (78.75000)	Prec@5 100.00000 (100.00000)
Epoch: [100][11/60]	Time 0.11902 (0.81756)	Data 0.01875 (0.70364)	Loss 0.4933 (0.5982)	Prec@1 87.50000 (79.54546)	Prec@5 100.00000 (100.00000)
Epoch: [100][12/60]	Time 0.24269 (0.76965)	Data 0.10308 (0.65360)	Loss 1.1236 (0.6420)	Prec@1 62.50000 (78.12500)	Prec@5 100.00000 (100.00000)
Epoch: [100][13/60]	Time 0.17695 (0.72406)	Data 0.02756 (0.60544)	Loss 1.8348 (0.7338)	Prec@1 50.00000 (75.96154)	Prec@5 100.00000 (100.00000)
Epoch: [100][14/60]	Time 0.14022 (0.68236)	Data 0.01749 (0.56344)	Loss 0.0580 (0.6855)	Prec@1 100.00000 (77.67857)	Prec@5 100.00000 (100.00001)
Epoch: [100][15/60]	Time 0.10981 (0.64419)	Data 0.03493 (0.52821)	Loss 1.0308 (0.7085)	Prec@1 62.50000 (76.66667)	Prec@5 100.00000 (100.00001)
Epoch: [100][16/60]	Time 0.17202 (0.61468)	Data 0.00048 (0.49523)	Loss 0.9666 (0.7247)	Prec@1 75.00000 (76.56250)	Prec@5 100.00000 (100.00000)
Epoch: [100][17/60]	Time 0.13297 (0.58634)	Data 0.06853 (0.47013)	Loss 0.3457 (0.7024)	Prec@1 87.50000 (77.20588)	Prec@5 100.00000 (100.00000)
Epoch: [100][18/60]	Time 0.22131 (0.56606)	Data 0.08790 (0.44889)	Loss 2.1395 (0.7822)	Prec@1 75.00000 (77.08334)	Prec@5 100.00000 (100.00000)
Epoch: [100][19/60]	Time 0.02980 (0.53784)	Data 0.00061 (0.42530)	Loss 0.1456 (0.7487)	Prec@1 87.50000 (77.63158)	Prec@5 100.00000 (100.00000)
Epoch: [100][20/60]	Time 0.11077 (0.51648)	Data 0.00054 (0.40406)	Loss 2.0706 (0.8148)	Prec@1 62.50000 (76.87500)	Prec@5 100.00000 (100.00000)
Epoch: [100][21/60]	Time 0.08631 (0.49600)	Data 0.00182 (0.38491)	Loss 0.4894 (0.7993)	Prec@1 87.50000 (77.38095)	Prec@5 100.00000 (100.00000)
Epoch: [100][22/60]	Time 0.14108 (0.47987)	Data 0.00052 (0.36743)	Loss 0.5258 (0.7869)	Prec@1 75.00000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [100][23/60]	Time 0.15260 (0.46564)	Data 0.03125 (0.35282)	Loss 0.9035 (0.7919)	Prec@1 62.50000 (76.63044)	Prec@5 100.00000 (100.00000)
Epoch: [100][24/60]	Time 0.20377 (0.45473)	Data 0.03625 (0.33963)	Loss 0.7273 (0.7892)	Prec@1 62.50000 (76.04167)	Prec@5 100.00000 (100.00000)
Epoch: [100][25/60]	Time 0.17576 (0.44357)	Data 0.00781 (0.32635)	Loss 0.4351 (0.7751)	Prec@1 87.50000 (76.50000)	Prec@5 100.00000 (100.00000)
Epoch: [100][26/60]	Time 0.15315 (0.43240)	Data 0.02374 (0.31472)	Loss 0.0674 (0.7479)	Prec@1 100.00000 (77.40385)	Prec@5 100.00000 (100.00000)
Epoch: [100][27/60]	Time 0.23580 (0.42512)	Data 0.06896 (0.30561)	Loss 0.6638 (0.7448)	Prec@1 62.50000 (76.85185)	Prec@5 100.00000 (100.00000)
Epoch: [100][28/60]	Time 0.12098 (0.41425)	Data 0.01526 (0.29524)	Loss 0.4726 (0.7350)	Prec@1 87.50000 (77.23215)	Prec@5 100.00000 (100.00001)
Epoch: [100][29/60]	Time 0.06732 (0.40229)	Data 0.00038 (0.28508)	Loss 0.5738 (0.7295)	Prec@1 87.50000 (77.58620)	Prec@5 100.00000 (100.00000)
Epoch: [100][30/60]	Time 0.11035 (0.39256)	Data 0.00040 (0.27559)	Loss 1.6368 (0.7597)	Prec@1 62.50000 (77.08334)	Prec@5 100.00000 (100.00001)
Epoch: [100][31/60]	Time 0.05620 (0.38171)	Data 0.00567 (0.26688)	Loss 2.2186 (0.8068)	Prec@1 37.50000 (75.80645)	Prec@5 100.00000 (100.00000)
Epoch: [100][32/60]	Time 0.04998 (0.37134)	Data 0.00041 (0.25855)	Loss 0.5593 (0.7990)	Prec@1 75.00000 (75.78125)	Prec@5 100.00000 (100.00000)
Epoch: [100][33/60]	Time 0.05498 (0.36176)	Data 0.00623 (0.25091)	Loss 0.1092 (0.7781)	Prec@1 87.50000 (76.13637)	Prec@5 100.00000 (100.00000)
Epoch: [100][34/60]	Time 0.04972 (0.35258)	Data 0.00042 (0.24354)	Loss 1.1303 (0.7885)	Prec@1 62.50000 (75.73530)	Prec@5 100.00000 (100.00000)
Epoch: [100][35/60]	Time 0.03404 (0.34348)	Data 0.00044 (0.23659)	Loss 1.3118 (0.8034)	Prec@1 75.00000 (75.71429)	Prec@5 100.00000 (100.00000)
Epoch: [100][36/60]	Time 0.02981 (0.33476)	Data 0.00066 (0.23004)	Loss 0.9206 (0.8067)	Prec@1 62.50000 (75.34722)	Prec@5 100.00000 (100.00000)
Epoch: [100][37/60]	Time 0.03560 (0.32668)	Data 0.00047 (0.22383)	Loss 1.3507 (0.8214)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][38/60]	Time 0.03656 (0.31904)	Data 0.00378 (0.21804)	Loss 2.2201 (0.8582)	Prec@1 50.00000 (74.34210)	Prec@5 100.00000 (100.00000)
Epoch: [100][39/60]	Time 0.02326 (0.31146)	Data 0.00064 (0.21247)	Loss 0.1459 (0.8399)	Prec@1 87.50000 (74.67949)	Prec@5 100.00000 (100.00000)
Epoch: [100][40/60]	Time 0.02302 (0.30425)	Data 0.00075 (0.20718)	Loss 0.3140 (0.8268)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][41/60]	Time 0.02371 (0.29741)	Data 0.00081 (0.20214)	Loss 0.4689 (0.8181)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][42/60]	Time 0.02277 (0.29087)	Data 0.00083 (0.19735)	Loss 1.1286 (0.8255)	Prec@1 62.50000 (74.70238)	Prec@5 100.00000 (100.00000)
Epoch: [100][43/60]	Time 0.02283 (0.28463)	Data 0.00085 (0.19278)	Loss 0.5152 (0.8182)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][44/60]	Time 0.02244 (0.27868)	Data 0.00075 (0.18842)	Loss 0.6641 (0.8147)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [100][45/60]	Time 0.02281 (0.27299)	Data 0.00048 (0.18424)	Loss 0.7329 (0.8129)	Prec@1 87.50000 (75.27778)	Prec@5 100.00000 (100.00000)
Epoch: [100][46/60]	Time 0.02256 (0.26755)	Data 0.00047 (0.18024)	Loss 1.2498 (0.8224)	Prec@1 50.00000 (74.72826)	Prec@5 100.00000 (100.00000)
Epoch: [100][47/60]	Time 0.02237 (0.26233)	Data 0.00044 (0.17642)	Loss 1.1608 (0.8296)	Prec@1 75.00000 (74.73404)	Prec@5 87.50000 (99.73404)
Epoch: [100][48/60]	Time 0.02248 (0.25733)	Data 0.00050 (0.17275)	Loss 0.4104 (0.8209)	Prec@1 87.50000 (75.00000)	Prec@5 100.00000 (99.73959)
Epoch: [100][49/60]	Time 0.02266 (0.25254)	Data 0.00047 (0.16924)	Loss 0.3779 (0.8118)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.74490)
Epoch: [100][50/60]	Time 0.02313 (0.24795)	Data 0.00052 (0.16586)	Loss 0.8315 (0.8122)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.75000)
Epoch: [100][51/60]	Time 0.02212 (0.24353)	Data 0.00048 (0.16262)	Loss 0.5476 (0.8070)	Prec@1 75.00000 (75.00000)	Prec@5 100.00000 (99.75491)
Epoch: [100][52/60]	Time 0.02232 (0.23927)	Data 0.00048 (0.15950)	Loss 0.9866 (0.8105)	Prec@1 62.50000 (74.75962)	Prec@5 87.50000 (99.51923)
Epoch: [100][53/60]	Time 0.02244 (0.23518)	Data 0.00049 (0.15650)	Loss 0.6756 (0.8080)	Prec@1 75.00000 (74.76415)	Prec@5 100.00000 (99.52831)
Epoch: [100][54/60]	Time 0.02302 (0.23125)	Data 0.00049 (0.15361)	Loss 0.9116 (0.8099)	Prec@1 62.50000 (74.53704)	Prec@5 100.00000 (99.53704)
Epoch: [100][55/60]	Time 0.02256 (0.22746)	Data 0.00051 (0.15083)	Loss 1.3410 (0.8195)	Prec@1 62.50000 (74.31818)	Prec@5 87.50000 (99.31818)
Epoch: [100][56/60]	Time 0.02243 (0.22380)	Data 0.00058 (0.14815)	Loss 0.8216 (0.8196)	Prec@1 62.50000 (74.10715)	Prec@5 100.00000 (99.33036)
Epoch: [100][57/60]	Time 0.02252 (0.22027)	Data 0.00046 (0.14556)	Loss 1.5128 (0.8317)	Prec@1 62.50000 (73.90351)	Prec@5 87.50000 (99.12281)
Epoch: [100][58/60]	Time 0.02227 (0.21685)	Data 0.00050 (0.14305)	Loss 0.7643 (0.8306)	Prec@1 62.50000 (73.70689)	Prec@5 100.00000 (99.13793)
Epoch: [100][59/60]	Time 0.02311 (0.21357)	Data 0.00060 (0.14064)	Loss 0.7427 (0.8291)	Prec@1 87.50000 (73.94068)	Prec@5 100.00000 (99.15254)
Epoch: [100][60/60]	Time 0.02240 (0.21038)	Data 0.00047 (0.13830)	Loss 0.5546 (0.8245)	Prec@1 87.50000 (74.16667)	Prec@5 100.00000 (99.16667)
validation at epoch 10000
validation at epoch 10000
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
/scratch/work/huangg5/ravdess_ser/multimodal-emotion-recognition-ravdess/transforms.py:74: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
Epoch: [10000][1/60]	Time 8.05173 (8.05173)	Data 7.93779 (7.93779)	Loss 0.9515 (0.9515)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][2/60]	Time 0.16351 (4.10762)	Data 0.00119 (3.96949)	Loss 0.4568 (0.7042)	Prec@1 87.50000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][3/60]	Time 0.14062 (2.78529)	Data 0.01264 (2.65054)	Loss 0.0619 (0.4901)	Prec@1 100.00000 (91.66667)	Prec@5 100.00000 (100.00000)
Epoch: [10000][4/60]	Time 0.05339 (2.10231)	Data 0.00311 (1.98868)	Loss 1.1632 (0.6584)	Prec@1 75.00000 (87.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][5/60]	Time 0.11781 (1.70541)	Data 0.00056 (1.59106)	Loss 0.9346 (0.7136)	Prec@1 75.00000 (85.00000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][6/60]	Time 0.13711 (1.44403)	Data 0.01799 (1.32888)	Loss 0.7717 (0.7233)	Prec@1 75.00000 (83.33334)	Prec@5 100.00000 (100.00000)
Epoch: [10000][7/60]	Time 0.20223 (1.26663)	Data 0.00083 (1.13916)	Loss 2.6677 (1.0011)	Prec@1 37.50000 (76.78572)	Prec@5 100.00000 (100.00001)
Epoch: [10000][8/60]	Time 0.29662 (1.14538)	Data 0.04126 (1.00192)	Loss 1.6493 (1.0821)	Prec@1 62.50000 (75.00000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][9/60]	Time 0.19602 (1.03989)	Data 0.01012 (0.89172)	Loss 1.2188 (1.0973)	Prec@1 62.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [10000][10/60]	Time 0.24673 (0.96058)	Data 0.01306 (0.80386)	Loss 1.0865 (1.0962)	Prec@1 75.00000 (73.75000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][11/60]	Time 0.07631 (0.88019)	Data 0.00690 (0.73141)	Loss 2.6207 (1.2348)	Prec@1 50.00000 (71.59091)	Prec@5 100.00000 (100.00000)
Epoch: [10000][12/60]	Time 0.16601 (0.82067)	Data 0.03186 (0.67311)	Loss 0.6974 (1.1900)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [10000][13/60]	Time 0.11791 (0.76661)	Data 0.02219 (0.62304)	Loss 0.9702 (1.1731)	Prec@1 75.00000 (72.11539)	Prec@5 100.00000 (100.00000)
Epoch: [10000][14/60]	Time 0.06003 (0.71614)	Data 0.00762 (0.57908)	Loss 0.5896 (1.1314)	Prec@1 75.00000 (72.32143)	Prec@5 100.00000 (100.00001)
Epoch: [10000][15/60]	Time 0.24175 (0.68452)	Data 0.03822 (0.54302)	Loss 1.4942 (1.1556)	Prec@1 62.50000 (71.66667)	Prec@5 100.00000 (100.00001)
Epoch: [10000][16/60]	Time 0.09620 (0.64775)	Data 0.00820 (0.50960)	Loss 0.3504 (1.1053)	Prec@1 75.00000 (71.87500)	Prec@5 100.00000 (100.00000)
Epoch: [10000][17/60]	Time 0.09206 (0.61506)	Data 0.01092 (0.48026)	Loss 0.2895 (1.0573)	Prec@1 87.50000 (72.79412)	Prec@5 100.00000 (100.00000)
Epoch: [10000][18/60]	Time 0.21930 (0.59307)	Data 0.00948 (0.45411)	Loss 0.4306 (1.0225)	Prec@1 87.50000 (73.61111)	Prec@5 100.00000 (100.00000)
Epoch: [10000][19/60]	Time 0.11189 (0.56775)	Data 0.00286 (0.43036)	Loss 0.2322 (0.9809)	Prec@1 87.50000 (74.34210)	Prec@5 100.00000 (100.00000)
Epoch: [10000][20/60]	Time 0.08215 (0.54347)	Data 0.00100 (0.40889)	Loss 0.0119 (0.9324)	Prec@1 100.00000 (75.62500)	Prec@5 100.00000 (100.00000)
Epoch: [10000][21/60]	Time 0.09428 (0.52208)	Data 0.00753 (0.38978)	Loss 0.0189 (0.8889)	Prec@1 100.00000 (76.78571)	Prec@5 100.00000 (100.00000)
Epoch: [10000][22/60]	Time 0.26787 (0.51052)	Data 0.02640 (0.37326)	Loss 0.2863 (0.8616)	Prec@1 87.50000 (77.27273)	Prec@5 100.00000 (100.00000)
Epoch: [10000][23/60]	Time 0.09726 (0.49256)	Data 0.00081 (0.35707)	Loss 0.1591 (0.8310)	Prec@1 87.50000 (77.71739)	Prec@5 100.00000 (100.00000)
Epoch: [10000][24/60]	Time 0.15044 (0.47830)	Data 0.01350 (0.34275)	Loss 0.4338 (0.8145)	Prec@1 75.00000 (77.60417)	Prec@5 100.00000 (100.00000)
Epoch: [10000][25/60]	Time 0.27250 (0.47007)	Data 0.01780 (0.32975)	Loss 0.0027 (0.7820)	Prec@1 100.00000 (78.50000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][26/60]	Time 0.21414 (0.46023)	Data 0.02089 (0.31788)	Loss 0.4333 (0.7686)	Prec@1 75.00000 (78.36539)	Prec@5 100.00000 (100.00000)
Epoch: [10000][27/60]	Time 0.14222 (0.44845)	Data 0.00304 (0.30621)	Loss 0.2272 (0.7485)	Prec@1 87.50000 (78.70370)	Prec@5 100.00000 (100.00000)
Epoch: [10000][28/60]	Time 0.10816 (0.43629)	Data 0.00976 (0.29563)	Loss 0.3971 (0.7360)	Prec@1 87.50000 (79.01786)	Prec@5 100.00000 (100.00001)
Epoch: [10000][29/60]	Time 0.07506 (0.42384)	Data 0.00041 (0.28545)	Loss 0.2851 (0.7204)	Prec@1 87.50000 (79.31034)	Prec@5 100.00000 (100.00000)
Epoch: [10000][30/60]	Time 0.08852 (0.41266)	Data 0.01551 (0.27645)	Loss 0.1000 (0.6997)	Prec@1 100.00000 (80.00001)	Prec@5 100.00000 (100.00001)
Epoch: [10000][31/60]	Time 0.08037 (0.40194)	Data 0.00041 (0.26754)	Loss 0.1551 (0.6822)	Prec@1 87.50000 (80.24194)	Prec@5 100.00000 (100.00000)
Epoch: [10000][32/60]	Time 0.05552 (0.39112)	Data 0.00045 (0.25920)	Loss 0.0062 (0.6611)	Prec@1 100.00000 (80.85938)	Prec@5 100.00000 (100.00000)
Epoch: [10000][33/60]	Time 0.04325 (0.38057)	Data 0.00045 (0.25136)	Loss 0.2582 (0.6488)	Prec@1 75.00000 (80.68182)	Prec@5 100.00000 (100.00000)
Epoch: [10000][34/60]	Time 0.03656 (0.37046)	Data 0.00062 (0.24398)	Loss 0.0054 (0.6299)	Prec@1 100.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][35/60]	Time 0.03394 (0.36084)	Data 0.00082 (0.23703)	Loss 0.4711 (0.6254)	Prec@1 75.00000 (81.07143)	Prec@5 100.00000 (100.00000)
Epoch: [10000][36/60]	Time 0.03853 (0.35189)	Data 0.00038 (0.23046)	Loss 0.1355 (0.6118)	Prec@1 87.50000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][37/60]	Time 0.03905 (0.34343)	Data 0.00159 (0.22428)	Loss 0.4426 (0.6072)	Prec@1 87.50000 (81.41892)	Prec@5 100.00000 (100.00000)
Epoch: [10000][38/60]	Time 0.05819 (0.33593)	Data 0.00049 (0.21839)	Loss 0.2342 (0.5974)	Prec@1 87.50000 (81.57895)	Prec@5 100.00000 (100.00000)
Epoch: [10000][39/60]	Time 0.03356 (0.32817)	Data 0.00043 (0.21280)	Loss 0.0320 (0.5829)	Prec@1 100.00000 (82.05128)	Prec@5 100.00000 (100.00000)
Epoch: [10000][40/60]	Time 0.04064 (0.32099)	Data 0.00081 (0.20750)	Loss 0.2064 (0.5735)	Prec@1 87.50000 (82.18750)	Prec@5 100.00000 (100.00000)
Epoch: [10000][41/60]	Time 0.02653 (0.31380)	Data 0.00044 (0.20245)	Loss 1.2647 (0.5903)	Prec@1 75.00000 (82.01219)	Prec@5 100.00000 (100.00000)
Epoch: [10000][42/60]	Time 0.02297 (0.30688)	Data 0.00091 (0.19765)	Loss 0.0135 (0.5766)	Prec@1 100.00000 (82.44048)	Prec@5 100.00000 (100.00000)
Epoch: [10000][43/60]	Time 0.02298 (0.30028)	Data 0.00088 (0.19307)	Loss 0.4340 (0.5733)	Prec@1 87.50000 (82.55814)	Prec@5 100.00000 (100.00000)
Epoch: [10000][44/60]	Time 0.02363 (0.29399)	Data 0.00073 (0.18870)	Loss 0.0031 (0.5603)	Prec@1 100.00000 (82.95455)	Prec@5 100.00000 (100.00000)
Epoch: [10000][45/60]	Time 0.02241 (0.28795)	Data 0.00047 (0.18452)	Loss 0.9444 (0.5689)	Prec@1 75.00000 (82.77778)	Prec@5 100.00000 (100.00000)
Epoch: [10000][46/60]	Time 0.02286 (0.28219)	Data 0.00088 (0.18053)	Loss 0.8376 (0.5747)	Prec@1 62.50000 (82.33696)	Prec@5 100.00000 (100.00000)
Epoch: [10000][47/60]	Time 0.02274 (0.27667)	Data 0.00083 (0.17670)	Loss 1.2579 (0.5892)	Prec@1 50.00000 (81.64893)	Prec@5 100.00000 (100.00000)
Epoch: [10000][48/60]	Time 0.02339 (0.27139)	Data 0.00090 (0.17304)	Loss 1.0871 (0.5996)	Prec@1 75.00000 (81.51042)	Prec@5 100.00000 (100.00000)
Epoch: [10000][49/60]	Time 0.02252 (0.26632)	Data 0.00084 (0.16953)	Loss 0.1103 (0.5896)	Prec@1 87.50000 (81.63265)	Prec@5 100.00000 (100.00000)
Epoch: [10000][50/60]	Time 0.02291 (0.26145)	Data 0.00087 (0.16615)	Loss 0.6871 (0.5916)	Prec@1 87.50000 (81.75000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][51/60]	Time 0.02274 (0.25677)	Data 0.00083 (0.16291)	Loss 0.4686 (0.5892)	Prec@1 62.50000 (81.37255)	Prec@5 100.00000 (100.00000)
Epoch: [10000][52/60]	Time 0.02259 (0.25226)	Data 0.00044 (0.15979)	Loss 0.8372 (0.5939)	Prec@1 75.00000 (81.25000)	Prec@5 100.00000 (100.00000)
Epoch: [10000][53/60]	Time 0.02347 (0.24795)	Data 0.00052 (0.15678)	Loss 1.3641 (0.6085)	Prec@1 50.00000 (80.66038)	Prec@5 100.00000 (100.00000)
Epoch: [10000][54/60]	Time 0.02251 (0.24377)	Data 0.00045 (0.15389)	Loss 0.3264 (0.6032)	Prec@1 87.50000 (80.78704)	Prec@5 100.00000 (100.00000)
Epoch: [10000][55/60]	Time 0.02250 (0.23975)	Data 0.00047 (0.15110)	Loss 0.0592 (0.5934)	Prec@1 100.00000 (81.13636)	Prec@5 100.00000 (100.00000)
Epoch: [10000][56/60]	Time 0.02272 (0.23587)	Data 0.00056 (0.14841)	Loss 0.5095 (0.5919)	Prec@1 75.00000 (81.02679)	Prec@5 100.00000 (100.00001)
Epoch: [10000][57/60]	Time 0.02289 (0.23214)	Data 0.00052 (0.14581)	Loss 0.5864 (0.5918)	Prec@1 87.50000 (81.14035)	Prec@5 100.00000 (100.00000)
Epoch: [10000][58/60]	Time 0.02234 (0.22852)	Data 0.00055 (0.14331)	Loss 0.7433 (0.5944)	Prec@1 62.50000 (80.81896)	Prec@5 100.00000 (100.00000)
Epoch: [10000][59/60]	Time 0.02228 (0.22502)	Data 0.00046 (0.14089)	Loss 0.8673 (0.5990)	Prec@1 75.00000 (80.72034)	Prec@5 100.00000 (100.00000)
Epoch: [10000][60/60]	Time 0.02527 (0.22169)	Data 0.00050 (0.13855)	Loss 0.0718 (0.5902)	Prec@1 100.00000 (81.04167)	Prec@5 100.00000 (100.00001)
	Command being timed: "python main.py"
	User time (seconds): 32736.13
	System time (seconds): 43158.25
	Percent of CPU this job got: 554%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:48:08
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 6325264
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 118451
	Minor (reclaiming a frame) page faults: 1181992715
	Voluntary context switches: 5414908
	Involuntary context switches: 10156039511
	Swaps: 0
	File system inputs: 15345480
	File system outputs: 6282968
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
